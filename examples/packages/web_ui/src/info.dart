// Copyright (c) 2012, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

/**
 * Datatypes holding information extracted by the analyzer and used by later
 * phases of the compiler.
 */
library info;

import 'dart:collection' show SplayTreeMap;
import 'dart:uri';

import 'package:html5lib/dom.dart';

import 'file_system/path.dart';
import 'files.dart';
import 'messages.dart';
import 'utils.dart';

/** Information about input, base, and output path locations. */
class PathInfo {
  /**
   * Common prefix to all input paths that are read from the file system. The
   * output generated by the compiler will reflect the directory structure
   * starting from [_baseDir]. For instance, if [_baseDir] is `a/b/c` and
   * [_outputDir] is `g/h/`, then the corresponding output file for
   * `a/b/c/e/f.html` will be under `g/h/e/f.html.dart`.
   */
  final Path _baseDir;

  /** Base path where all output is generated. */
  final Path _outputDir;

  /** Whether to add prefixes and to output file names. */
  final bool _mangleFilenames;

  /** Default prefix added to all filenames. */
  static const String _DEFAULT_PREFIX = '_';

  PathInfo(Path baseDir, Path outputDir, bool forceMangle)
      : _baseDir = baseDir,
        _outputDir = outputDir,
        _mangleFilenames = forceMangle || (baseDir == outputDir);

  /** Add a prefix and [suffix] if [_mangleFilenames] is true */
  String mangle(String name, String suffix, [bool forceSuffix = false]) =>
    _mangleFilenames ? "$_DEFAULT_PREFIX$name$suffix"
        : (forceSuffix ? "$name$suffix" : name);

  /**
   * Checks if [input] is valid. It must be in [_baseDir] and must not be in
   * the [_outputDir].
   *
   * Adds emitted error/warning messages to [messages], if [messages] is
   * supplied.
   */
  bool checkInputPath(Path input, Messages messages) {
    if (_mangleFilenames) return true;
    var canonicalized = input.canonicalize();
    if (!canonicalized.relativeTo(_outputDir).toString().startsWith('../')) {
      messages.error(
          'The file ${input} cannot be processed. '
          'Files cannot be under the output folder (${_outputDir}).',
          null, file: input);
      return false;
    }
    if (canonicalized.relativeTo(_baseDir).toString().startsWith('../')) {
      messages.error(
          'The file ${input} cannot be processed. '
          'All processed files must be under the base folder (${_baseDir}), you'
          ' can specify the base folder using the --basedir flag.',
          null, file: input);
      return false;
    }
    return true;
  }

  /**
   * The path to the output file corresponding to [input], by adding
   * [_DEFAULT_PREFIX] and a [suffix] to its file name.
   */
  Path outputPath(Path input, String suffix) =>
      outputDirPath(input).append(mangle(input.filename, suffix));

  /** The path to the output file corresponding to [info]. */
  Path outputLibraryPath(LibraryInfo info) =>
      outputDirPath(info.inputPath).append(info._getOutputFilename(mangle));

  /** The corresponding output directory for [input]'s directory. */
  Path outputDirPath(Path input) {
    var outputSubdir = input.directoryPath.relativeTo(_baseDir);
    return _rewritePackages(_outputDir.join(outputSubdir).canonicalize());
  }

  /**
   * We deal with `packages/` directories in a very special way. We assume it
   * points to resources loaded from other pub packages. If an output directory
   * is specified, the compiler will create a packages symlink so that
   * `package:` imports work.
   *
   * To make it possible to share components through pub, we allow using tags of
   * the form `<link rel="component" href="packages/...">`, so that you can
   * refer to components within the packages symlink.  Regardless of whether an
   * --out option was given to the compiler, we don't want to generate files
   * inside `packages/` for those components.  Instead we will generate such
   * code in a special directory called `_from_packages/`.
   */
  Path _rewritePackages(Path outputPath) {
    if (!outputPath.toString().contains('packages')) return outputPath;
    var segments = outputPath.segments().mappedBy(
        (segment) => segment == 'packages' ? '_from_packages' : segment);
    return new Path(segments.join('/'));
  }

  /**
   * Returns a relative path to import/export the output library represented by
   * [target] from the output library of [src]. In other words, a path to import
   * or export `target.outputFilename` from `src.outputFilename`.
   */
  Path relativePath(LibraryInfo src, LibraryInfo target) {
    var srcDir = src.inputPath.directoryPath;
    var relDir = target.inputPath.directoryPath.relativeTo(srcDir);
    return _rewritePackages(
        relDir.append(target._getOutputFilename(mangle)).canonicalize());
  }

  /**
   * Transforms a [target] url seen in [src] (e.g. a Dart import, a .css href in
   * an HTML file, etc) into a corresponding url from the output file associated
   * with [src]. This will keep 'package:', 'dart:', path-absolute, and absolute
   * urls intact, but it will fix relative paths to walk from the output
   * directory back to the input directory. An exception will be thrown if
   * [target] is not under [_baseDir].
   */
  String transformUrl(Path src, String target) {
    if (new Uri.fromString(target).isAbsolute()) return target;
    var path = new Path(target);
    if (path.isAbsolute) return target;
    var pathToTarget = src.directoryPath.join(path);
    var outputLibraryDir = outputDirPath(src);
    return pathToTarget.relativeTo(outputLibraryDir).canonicalize().toString();
  }
}

/**
 * Returns a "mangled" name, with a prefix and [suffix] depending on the
 * compiler's settings. [forceSuffix] causes [suffix] to be appended even if
 * the compiler is not mangling names.
 */
typedef String NameMangler(String name, String suffix, [bool forceSuffix]);

/**
 * Information for any library-like input. We consider each HTML file a library,
 * and each component declaration a library as well. Hence we use this as a base
 * class for both [FileInfo] and [ComponentInfo]. Both HTML files and components
 * can have .dart code provided by the user for top-level user scripts and
 * component-level behavior code. This code can either be inlined in the HTML
 * file or included in a script tag with the "src" attribute.
 */
abstract class LibraryInfo {

  /** Whether there is any code associated with the page/component. */
  bool get codeAttached => inlinedCode != null || externalFile != null;

  /**
   * The actual code, either inlined or from an external file, or `null` if none
   * was defined.
   */
  DartCodeInfo userCode;

  /** The inlined code, if any. */
  String inlinedCode;

  /** The name of the file sourced in a script tag, if any. */
  Path externalFile;

  /** Info asscociated with [externalFile], if any. */
  FileInfo externalCode;

  /** File where the top-level code was defined. */
  Path get inputPath;

  /**
   * Name of the file that will hold any generated Dart code for this library
   * unit.
   */
  String _getOutputFilename(NameMangler mangle);

  /**
   * Components used within this library unit. For [FileInfo] these are
   * components used directly in the page. For [ComponentInfo] these are
   * components used within their shadowed template.
   */
  final Map<ComponentInfo, bool> usedComponents =
      new LinkedHashMap<ComponentInfo, bool>();
}

/** Information extracted at the file-level. */
class FileInfo extends LibraryInfo {
  /** Relative path to this file from the compiler's base directory. */
  final Path path;

  /**
   * Whether this file should be treated as the entry point of the web app, i.e.
   * the file users navigate to in their browser. This will be true if this file
   * was passed in the command line to the dwc compiler, and the
   * `--components_only` flag was omitted.
   */
  final bool isEntryPoint;

  // TODO(terry): Ensure that that the libraryName is a valid identifier:
  //              a..z || A..Z || _ [a..z || A..Z || 0..9 || _]*
  String get libraryName => path.filename.replaceAll('.', '_');

  /** File where the top-level code was defined. */
  Path get inputPath => externalFile != null ? externalFile : path;

  /** Name of the file that will hold any generated Dart code. */
  String _getOutputFilename(NameMangler mangle) =>
      mangle(inputPath.filename, '.dart', inputPath.extension == 'html');

  /**
   * All custom element definitions in this file. This may contain duplicates.
   * Normally you should use [components] for lookup.
   */
  final List<ComponentInfo> declaredComponents = new List<ComponentInfo>();

  /**
   * All custom element definitions defined in this file or imported via
   *`<link rel='components'>` tag. Maps from the tag name to the component
   * information. This map is sorted by the tag name.
   */
  final Map<String, ComponentInfo> components =
      new SplayTreeMap<String, ComponentInfo>();

  /** Files imported with `<link rel="component">` */
  final List<Path> componentLinks = <Path>[];

  /** Root is associated with the body info. */
  ElementInfo bodyInfo;

  FileInfo(this.path, [this.isEntryPoint = false]);

  /**
   * Query for an ElementInfo matching the provided [tag], starting from the
   * [bodyInfo].
   */
  ElementInfo query(String tag) => new _QueryInfo(tag).visit(bodyInfo);
}

/** Information about a web component definition. */
class ComponentInfo extends LibraryInfo {

  /** The file that declares this component. */
  final FileInfo declaringFile;

  /** The component tag name, defined with the `name` attribute on `element`. */
  final String tagName;

  /**
   * The tag name that this component extends, defined with the `extends`
   * attribute on `element`.
   */
  final String extendsTag;

  /**
   * The component info associated with the [extendsTag] name, if any.
   * This will be `null` if the component extends a built-in HTML tag, or
   * if the analyzer has not run yet.
   */
  ComponentInfo extendsComponent;

  /** The Dart class containing the component's behavior. */
  final String constructor;

  /** Component's ElementInfo at the element tag. */
  ElementInfo elemInfo;

  /** The declaring `<element>` tag. */
  final Node element;

  /** The component's `<template>` tag, if any. */
  final Node template;

  /** File where this component was defined. */
  Path get inputPath =>
      externalFile != null ? externalFile : declaringFile.path;

  /**
   * Name of the file that will be generated for this component. We want to
   * generate a separate library for each component, unless their code is
   * already in an external library (e.g. [externalCode] is not null). Multiple
   * components could be defined inline within the HTML file, so we return a
   * unique file name for each component.
   */
  String _getOutputFilename(NameMangler mangle) {
    if (externalFile != null) return mangle(externalFile.filename, '.dart');
    var prefix = declaringFile.path.filename;
    if (declaringFile.declaredComponents.length == 1
        && !declaringFile.codeAttached && !declaringFile.isEntryPoint) {
      return mangle(prefix, '.dart', true);
    }
    var componentSegment = tagName.toLowerCase().replaceAll('-', '_');
    return mangle('${prefix}_$componentSegment', '.dart', true);
  }

  /**
   * True if [tagName] was defined by more than one component. If this happened
   * we will skip over the component.
   */
  bool hasConflict = false;

  ComponentInfo(this.element, this.declaringFile, this.tagName, this.extendsTag,
      this.constructor, this.template);

  /**
   * Gets the HTML tag extended by the base of the component hierarchy.
   * Equivalent to [extendsTag] if this inherits directly from an HTML element,
   * in other words, if [extendsComponent] is null.
   */
  String get baseExtendsTag =>
      extendsComponent == null ? extendsTag : extendsComponent.baseExtendsTag;
}

/** Base tree visitor for the Analyzer infos. */
class InfoVisitor {
  visit(info) {
    if (info == null) return;
    if (info is TemplateInfo) {
      return visitTemplateInfo(info);
    } else if (info is ElementInfo) {
      return visitElementInfo(info);
    } else if (info is TextInfo) {
      return visitTextInfo(info);
    } else if (info is ComponentInfo) {
      return visitComponentInfo(info);
    } else if (info is FileInfo) {
      return visitFileInfo(info);
    } else {
      throw new UnsupportedError('Unknown info type: $info');
    }
  }

  visitChildren(ElementInfo info) {
    for (var child in info.children) visit(child);
  }

  visitFileInfo(FileInfo info) {
    visit(info.bodyInfo);
    info.declaredComponents.forEach(visit);
  }

  visitTemplateInfo(TemplateInfo info) => visitElementInfo(info);

  visitElementInfo(ElementInfo info) => visitChildren(info);

  visitTextInfo(TextInfo info) {}

  visitComponentInfo(ComponentInfo info) => visit(info.elemInfo);
}

/** Common base class for [ElementInfo] and [TextInfo]. */
abstract class NodeInfo<T extends Node> {

  /** DOM node associated with this NodeInfo. */
  final T node;

  /** Info for the nearest enclosing element, iterator, or conditional. */
  final ElementInfo parent;

  /**
   * The name used to refer to this node in Dart code.
   * Depending on the context, this can be a variable or a field.
   */
  String identifier;

  /**
   * Whether the node represented by this info will be constructed from code.
   * If true, its identifier is initialized programatically, otherwise, its
   * identifier is initialized using a query.
   * The compiler currently creates in code text nodes with data-bindings,
   * siblings of text nodes with data-bindings, and immediate children of loops
   * and conditionals.
   */
  bool get createdInCode => parent != null && parent.childrenCreatedInCode;

  NodeInfo(this.node, this.parent, [this.identifier]) {
    if (parent != null) parent.children.add(this);
  }
}

/** Information extracted for each node in a template. */
class ElementInfo extends NodeInfo<Element> {
  // TODO(jmesserly): make childen work like DOM children collection, so that
  // adding/removing a node updates the parent pointer.
  final List<NodeInfo> children = [];

  /**
   * If this element is a web component instantiation (e.g. `<x-foo>`), this
   * will be set to information about the component, otherwise it will be null.
   */
  ComponentInfo component;

  /** Whether the element contains data bindings. */
  bool hasDataBinding = false;

  /** Whether any child of this node is created in code. */
  bool childrenCreatedInCode = false;

  /** Whether this node represents "body" or the shadow root of a component. */
  bool isRoot = false;

  /**
   * True if some descendant needs to query starting from this element.
   * If this is true, we will generate a variable for this node.
   */
  bool hasQuery = false;

  // Note: we're using sorted maps so items are enumerated in a consistent order
  // between runs, resulting in less "diff" in the generated code.
  // TODO(jmesserly): An alternative approach would be to use LinkedHashMap to
  // preserve the order of the input, but we'd need to be careful about our tree
  // traversal order.
  /** Collected information for attributes, if any. */
  final Map<String, AttributeInfo> attributes =
      new SplayTreeMap<String, AttributeInfo>();

  /** Collected information for UI events on the corresponding element. */
  final Map<String, List<EventInfo>> events =
      new SplayTreeMap<String, List<EventInfo>>();

  /**
   * Collected information about `data-value="name:value"` expressions.
   * Note: this feature is deprecated and should be removed after grace period.
   */
  final Map<String, String> values = new SplayTreeMap<String, String>();

  // TODO(jmesserly): we could keep this local to the analyzer.
  /** Attribute names to remove in cleanup phase. */
  final Set<String> removeAttributes = new Set<String>();

  /** Whether the template element has `iterate="... in ...". */
  bool get hasIterate => false;

  /** Whether the template element has an `if="..."` conditional. */
  bool get hasIfCondition => false;

  bool get isTemplateElement => false;

  /**
   * For a builtin HTML element this returns the [node.tagName], otherwise it
   * returns [component.baseExtendsTag]. This is useful when looking up which
   * DOM property this element supports.
   *
   * **Note:** this returns node.tagName right now, until we fix issue #82.
   */
  String get baseTagName {
    return node.tagName;
    // TODO(jmesserly): turn this on when issue #82 is fixed.
    //return component != null ? component.baseExtendsTag : node.tagName;
  }

  ElementInfo(Element node, ElementInfo parent) : super(node, parent);

  String toString() => '#<ElementInfo '
      'identifier: $identifier, '
      'childrenCreatedInCode: $childrenCreatedInCode, '
      'component: $component, '
      'hasIterate: $hasIterate, '
      'hasIfCondition: $hasIfCondition, '
      'hasDataBinding: $hasDataBinding, '
      'hasQuery: $hasQuery, '
      'attributes: $attributes, '
      'events: $events>';
}

/**
 * Information for a single text node created programatically. We create a
 * [TextInfo] for data bindings that occur in content nodes, and for each
 * text node that is created programatically in code. Note that the analyzer
 * splits HTML text nodes, so that each data-binding has its own node (and
 * [TextInfo]).
 */
class TextInfo extends NodeInfo<Text> {
  /** The data-bound Dart expression. */
  final String binding;

  TextInfo(Text node, ElementInfo parent, [this.binding, String identifier])
      : super(node, parent, identifier);
}

/** Information extracted for each attribute in an element. */
class AttributeInfo {

  /**
   * Whether this is a `class` attribute. In which case more than one binding
   * is allowed (one per class).
   */
  final bool isClass;

  /**
   * Whether this is a 'data-style' attribute.
   */
  final bool isStyle;

  /** All bound values that would be monitored for changes. */
  final List<String> bindings;

  /**
   * A two-way binding that needs a watcher. This is used in cases where we
   * don't have an event.
   */
  final bool customTwoWayBinding;

  /**
   * For a text attribute this contains the text content. This is used by most
   * attributes and represents the value that will be assigned to them. If this
   * has been assigned then [isText] will be true.
   *
   * The entries in this list correspond to the entries in [bindings], and this
   * will always have one more item than bindings. For example:
   *
   *     href="t0 {{b1}} t1 {{b2}} t2"
   *
   * Here textContent would be `["t0 ", " t1 ", " t2"]` and bindings would be
   * `["b1", "b2"]`.
   */
  final List<String> textContent;

  AttributeInfo(this.bindings, {this.isStyle: false, this.isClass: false,
      this.textContent, this.customTwoWayBinding: false}) {

    assert(isText || isClass || bindings.length == 1);
    assert(bindings.length > 0);
    assert(!isText || textContent.length == bindings.length + 1);
    assert((isText ? 1 : 0) + (isClass ? 1 : 0) + (isStyle ? 1 : 0) <= 1);
  }

  /**
   * A value that will be monitored for changes. All attributes have a single
   * bound value unless [isClass] or [isText] is true.
   */
  String get boundValue => bindings[0];

  /** True if this attribute binding expression should be assigned directly. */
  bool get isSimple => !isClass && !isStyle && !isText;

  /**
   * True if this attribute value should be concatenated as a string.
   * This is true whenever [textContent] is non-null.
   */
  bool get isText => textContent != null;

  String toString() => '#<AttributeInfo '
      'isClass: $isClass, values: ${Strings.join(bindings, "")}>';
}

/** Information extracted for each declared event in an element. */
class EventInfo {
  /** Event name for attributes representing actions. */
  final String eventName;

  /** Action associated for event listener attributes. */
  final ActionDefinition action;

  /** Generated field name, if any, associated with this event. */
  String listenerField;

  EventInfo(this.eventName, this.action);

  String toString() => '#<EventInfo eventName: $eventName, action: $action>';
}

class TemplateInfo extends ElementInfo {
  /**
   * The expression that is used in `<template if="cond"> conditionals, or null
   * if this there is no `if="..."` attribute.
   */
  final String ifCondition;

  /**
   * If this is a `<template iterate="item in items">`, this is the variable
   * declared on loop iterations, e.g. `item`. This will be null if it is not
   * a `<template iterate="...">`.
   */
  final String loopVariable;

  /**
   * If this is a `<template iterate="item in items">`, this is the expression
   * to get the items to iterate over, e.g. `items`. This will be null if it is
   * not a `<template iterate="...">`.
   */
  final String loopItems;

  TemplateInfo(Node node, ElementInfo parent,
      {this.ifCondition, this.loopVariable, this.loopItems})
      : super(node, parent) {
    childrenCreatedInCode = hasIfCondition || hasIterate;
  }

  /**
   * True when [node] is a '<template>' tag. False when [node] is any other
   * element type and the template information is attached as an attribute.
   */
  bool get isTemplateElement => node.tagName == 'template';

  bool get hasIfCondition => ifCondition != null;

  bool get hasIterate => loopVariable != null;

  String toString() => '#<TemplateInfo ${super.toString()}'
      'ifCondition: $ifCondition, '
      'loopVariable: $ifCondition, '
      'loopItems: $ifCondition>';
}

/**
 * Specifies the action to take on a particular event. Some actions need to read
 * attributes from the DOM element that has the event listener (e.g. two way
 * bindings do this). [elementVarName] stores a reference to this element.
 * It is generated outside of the analyzer (in the emitter), so it is passed
 * here as an argument.
 */
typedef String ActionDefinition(String elemVarName);

/** Information extracted from a source Dart file. */
class DartCodeInfo {
  /** Library qualified identifier, if any. */
  final String libraryName;

  /** Library which the code is part-of, if any. */
  final String partOf;

  /** Declared imports, exports, and parts. */
  final List<DartDirectiveInfo> directives;

  /** The rest of the code. */
  final String code;

  DartCodeInfo(this.libraryName, this.partOf, this.directives, this.code);
}

/** Information about a single import/export/part directive. */
class DartDirectiveInfo {
  /** Directive's label: import, export, or part. */
  String label;

  /** Referenced uri being imported, exported, or included by a part. */
  String uri;

  /** Prefix used for imports, if any. */
  String prefix;

  /** Hidden identifiers. */
  List<String> hide;

  /** Shown identifiers. */
  List<String> show;

  DartDirectiveInfo(this.label, this.uri, [this.prefix, this.hide, this.show]);
}


/**
 * Find ElementInfo that associated with a particular DOM node.
 * Used by [ElementInfo.query].
 */
class _QueryInfo extends InfoVisitor {
  final String _tagName;

  _QueryInfo(this._tagName);

  visitElementInfo(ElementInfo info) {
    if (info.node.tagName == _tagName) {
      return info;
    }

    return super.visitElementInfo(info);
  }

  visitChildren(ElementInfo info) {
    for (var child in info.children) {
      var result = visit(child);
      if (result != null) return result;
    }
    return null;
  }
}
