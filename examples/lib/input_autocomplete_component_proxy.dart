// Auto-generated from input_autocomplete.html.
// DO NOT EDIT.

library x_input_autocomplete;

import 'dart:html' as autogenerated_html;
import 'dart:web_audio' as autogenerated_audio;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;

import 'package:autocomplete_ui/input_autocomplete.dart';

import 'dart:html';

class InputAutocompleteComponentProxy extends InputAutocompleteComponent {
  
  /** Autogenerated from the template. */
  
  /**
  * Shadow root for this component. We use 'var' to allow simulating shadow DOM
  * on browsers that don't support this feature.
  */
  var _root;
  autogenerated_html.UnknownElement __e8;
  
  List<autogenerated.WatcherDisposer> __stoppers1;
  
  autogenerated_html.Node _endPosition__e8;
  
  bool _isVisible__e8 = false;
  
  autogenerated_html.UListElement __e7;
  
  autogenerated_html.UnknownElement __e6;
  
  List<autogenerated.WatcherDisposer> __stoppers2_1;
  
  List<Function> _removeChild__e6 = [];
  
  autogenerated_html.Node _endPosition__e6;
  
  autogenerated_html.InputElement __e9;
  
  autogenerated_html.EventListener __listener__e9_blur_4;
  
  autogenerated_html.EventListener __listener__e9_focus_5;
  
  autogenerated_html.EventListener __listener__e9_keyUp_6;
  
  InputAutocompleteComponentProxy.forElement(e) : super.forElement(e);
  
  void created_autogenerated() {
    _root = createShadowRoot();
    
    _root.innerHtml = '''
    
    <div class="autocomplete-wrapper">
    <template id="__e-8" style="display:none"></template>
    <input type="text" id="__e-9">
    </div>
    <style>
    .autocomplete-wrapper input {
      border: 1px solid black;
      padding: 3px;
    }
    .autocomplete-content {
      //display: none;
      position: absolute;
      border: 1px solid black;
      padding: 0px;
      margin: 0px;
      background-color: #fff;
    }
    .autocomplete-content li {
      list-style-type: none;
      padding: 2px;
      margin: 0px;
      margin-top: 2px;
      background-color: #fafafa;
    }
    .autocomplete-content li:hover {
      background-color: #ddd;
    }
    .autocomplete-content p {
      padding: 0px;
      margin: 0px;
    }
    </style>
    ''';
    __e8 = _root.query('#__e-8');
    __stoppers1 = [];
    __e9 = _root.query('#__e-9');
    
  }
  
  void inserted_autogenerated() {
    _endPosition__e8 = __e8;
    
    __stoppers1.add(autogenerated.watchAndInvoke(() => inputHasFocus && matches != null, (__e) {
      bool showNow = __e.newValue;
      if (_isVisible__e8 && !showNow) {
        _isVisible__e8 = false;
        
        __e7 = null;
        (__stoppers2_1..forEach((s) => s())).clear();
        _endPosition__e6 = autogenerated.removeNodes(__e6, _endPosition__e6);
        for (var remover in _removeChild__e6) remover();
        _removeChild__e6.clear();
        
        __e6 = null;
        
        _endPosition__e8 = autogenerated.removeNodes(__e8, _endPosition__e8);
        
      } else if (!_isVisible__e8 && showNow) {
        
        _isVisible__e8 = true;
        
        __e7 = new autogenerated_html.Element.html('<ul class="autocomplete-content">\n              <template id="__e-6" style="display:none"></template>\n            </ul>');
        __e6 = __e7.query('#__e-6');
        __stoppers2_1 = [];
        
        autogenerated.insertAllBefore(__e8.parentNode, __e8.nextNode,
        
        [new autogenerated_html.Text('\n            '), __e7, _endPosition__e8 = new autogenerated_html.Text('\n          ')]);
        
        _endPosition__e6 = __e6;
        __stoppers2_1.add(autogenerated.watchAndInvoke(() => matches, (_) {
          for (var remover in _removeChild__e6) remover();
          _removeChild__e6.clear();
          
          _endPosition__e6 = autogenerated.removeNodes(__e6, _endPosition__e6);
          var __insert___e6 = __e6.nextNode;
          for (var choice in matches) {
            autogenerated_html.LIElement __e5;
            List<autogenerated.WatcherDisposer> __stoppers3_2_1;
            autogenerated_html.ParagraphElement __e4;
            var __binding3;
            __e5 = new autogenerated_html.Element.html('<li>\n                  <p id="__e-4"></p>\n                  <content select=".choiceTemplate"></content>\n                </li>');
            __e4 = __e5.query('#__e-4');
            __binding3 = new autogenerated_html.Text('');
            __e4.nodes.add(__binding3);
            __stoppers3_2_1 = [];
            autogenerated.insertAllBefore(__e6.parentNode, __insert___e6,
            [new autogenerated_html.Text('\n                '), __e5, _endPosition__e6 = new autogenerated_html.Text('\n              ')]);
            __stoppers3_2_1.add(autogenerated.watchAndInvoke(() =>  choice.key , (__e) { __e5.attributes['choice-key'] = __e.newValue; }));
            __stoppers3_2_1.add(autogenerated.watchAndInvoke(() => '${ choice.label }', (__e) {
              __binding3 = autogenerated.updateBinding( choice.label , __binding3, __e.newValue);
            }));
            _removeChild__e6.add(() {
              (__stoppers3_2_1..forEach((s) => s())).clear();
              __e5 = null;
              __e4 = null;
              __binding3 = null;
            });
          }
        }));
        
      }
    }));
    
    __listener__e9_blur_4 = ($event) {
      inputBlur($event);
      autogenerated.dispatch();
    };
    __e9.on.blur.add(__listener__e9_blur_4);
    
    __listener__e9_focus_5 = ($event) {
      inputFocus($event);
      autogenerated.dispatch();
    };
    __e9.on.focus.add(__listener__e9_focus_5);
    
    __listener__e9_keyUp_6 = ($event) {
      keyPressed($event);
      autogenerated.dispatch();
    };
    __e9.on.keyUp.add(__listener__e9_keyUp_6);
    
  }
  
  void removed_autogenerated() {
    _root = null;
    
    (__stoppers1..forEach((s) => s())).clear();
    
    if (_isVisible__e8) {
      
      _endPosition__e8 = autogenerated.removeNodes(__e8, _endPosition__e8);
      
      __e7 = null;
      (__stoppers2_1..forEach((s) => s())).clear();
      _endPosition__e6 = autogenerated.removeNodes(__e6, _endPosition__e6);
      for (var remover in _removeChild__e6) remover();
      _removeChild__e6.clear();
      
      __e6 = null;
      
    }
    
    __e8 = null;
    
    __e9.on.blur.remove(__listener__e9_blur_4);
    __listener__e9_blur_4 = null;
    
    __e9.on.focus.remove(__listener__e9_focus_5);
    __listener__e9_focus_5 = null;
    
    __e9.on.keyUp.remove(__listener__e9_keyUp_6);
    __listener__e9_keyUp_6 = null;
    
    __e9 = null;
    
  }
  
  void composeChildren() {
    super.composeChildren();
    if (_root is! autogenerated_html.ShadowRoot) _root = this;
  }
  
  /** Original code from the component. */
  
  //  InputAutocompleteComponentProxy.forElement(Element element) : super.forElement(element) {
    //  }
  }
  
