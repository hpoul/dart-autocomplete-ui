// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $$ = {};
var $ = Isolate.$isolateProperties;
$$.DartError = {"": "Object;",
  get$stack: function() {
    return this.stack;
  },
  toString$0: function() {
    var dartException = this.dartException;
    if (!!Error.captureStackTrace || this.get$stack() == null)
      return $.getInterceptor(dartException).toString$0(dartException);
    else
      return $.S(dartException) + "\n" + $.S(this.get$stack());
  },
  DartError$1: function(dartException) {
    this.dartException = dartException;
    this.toString = $.DartError_toStringWrapper.call$0;
  }
};

$$.StackTrace = {"": "Object;stack",
  toString$0: function() {
    var t1 = this.stack;
    return !(t1 == null) ? t1 : "";
  }
};

$$.Closure = {"": "Object;",
  toString$0: function() {
    return "Closure";
  },
  is$Function: true
};

$$.Null = {"": "Object;"};

$$.CastErrorImplementation = {"": "Object;actualType,expectedType",
  toString$0: function() {
    return "CastError: Casting value of type " + $.S(this.actualType) + " to" + " incompatible type " + $.S(this.expectedType);
  }
};

$$.ConstantMap = {"": "Object;length>,_jsObject,_keys>",
  containsKey$1: function(key) {
    if ($.eqB(key, "__proto__"))
      return false;
    return this._jsObject.hasOwnProperty(key);
  },
  operator$index$1: function(key) {
    if (this.containsKey$1(key) !== true)
      return;
    return this._jsObject[key];
  },
  forEach$1: function(f) {
    var t1, t2;
    t1 = this._keys;
    t2 = new $.ConstantMap_forEach_anon(this, f);
    $.getInterceptor$JSArray(t1).forEach$1(t1, t2);
  },
  get$keys: function() {
    return $._ConstantMapKeyIterable$(this);
  },
  get$values: function() {
    return $.MappedIterable$(this._keys, new $.ConstantMap_values_anon(this), $.String, $.getRuntimeTypeInfo(this)[0]);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  toString$0: function() {
    return $.Maps_mapToString(this);
  },
  _throwUnmodifiable$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot modify unmodifiable Map"));
  },
  operator$indexSet$2: function(key, val) {
    return this._throwUnmodifiable$0();
  },
  remove$1: function(key) {
    return this._throwUnmodifiable$0();
  },
  clear$0: function() {
    return this._throwUnmodifiable$0();
  },
  is$Map: function() {
    return true;
  }
};

$$._ConstantMapKeyIterable = {"": "Iterable;_liblib1$_map",
  get$iterator: function() {
    var t1 = this._liblib1$_map._keys;
    return $.getInterceptor$JSArray(t1).get$iterator(t1);
  }
};

$$.MetaInfo = {"": "Object;_tag>,_tags,_set>"};

$$.JSSyntaxRegExp = {"": "Object;_liblib1$_pattern,_isMultiLine,_isCaseSensitive",
  firstMatch$1: function(str) {
    var m, matchStart, t1, matchEnd;
    m = $.regExpExec(this, $.checkString(str));
    if (m == null)
      return;
    matchStart = m.index;
    t1 = $.getInterceptor$JSStringJSArray(m).operator$index$1(m, 0);
    t1 = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    matchEnd = matchStart + t1;
    return $._MatchImplementation$(this.get$pattern(), str, matchStart, matchEnd, m);
  },
  hasMatch$1: function(str) {
    return $.regExpTest(this, $.checkString(str));
  },
  allMatches$1: function(str) {
    $.checkString(str);
    return $._AllMatchesIterable$(this, str);
  },
  get$pattern: function() {
    return this._liblib1$_pattern;
  },
  get$isMultiLine: function() {
    return this._isMultiLine;
  },
  get$isCaseSensitive: function() {
    return this._isCaseSensitive;
  },
  is$JSSyntaxRegExp: true,
  is$RegExp: true
};

$$._MatchImplementation = {"": "Object;pattern>,str,start,end,_groups",
  group$1: function(index) {
    var t1 = this._groups;
    return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, index);
  },
  operator$index$1: function(index) {
    var t1 = this._groups;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this.operator$index$1$bailout4(1, index, t1);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  operator$index$1$bailout4: function(state0, index, t1) {
    return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, index);
  }
};

$$._AllMatchesIterable = {"": "Iterable;_re,_str",
  get$iterator: function() {
    return $._AllMatchesIterator$(this._re, this._str);
  }
};

$$._AllMatchesIterator = {"": "Object;_re,_str,_liblib1$_current",
  get$current: function() {
    return this._liblib1$_current;
  },
  moveNext$0: function() {
    this._liblib1$_current = this._re.firstMatch$1(this._str);
    return !(this._liblib1$_current == null);
  }
};

$$.StringMatch = {"": "Object;start,str,pattern>",
  operator$index$1: function(g) {
    return this.group$1(g);
  },
  group$1: function(group_) {
    if (!$.eqB(group_, 0))
      throw $.$$throw($.RangeError$value(group_));
    return this.pattern;
  }
};

$$.Collection = {"": "Iterable;",
  addAll$1: function(elements) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(elements).get$iterator(elements); t1.moveNext$0() === true;)
      this.add$1(t1.get$current());
  },
  removeAll$1: function(elements) {
    $.IterableMixinWorkaround_removeAll(this, elements);
  },
  is$Collection: function() {
    return true;
  }
};

$$.NullThrownError = {"": "Object;",
  toString$0: function() {
    return "Throw of null.";
  }
};

$$.ArgumentError = {"": "Object;message>",
  toString$0: function() {
    var t1 = this.message;
    if (!(t1 == null))
      return "Illegal argument(s): " + $.S(t1);
    return "Illegal argument(s)";
  }
};

$$.RangeError = {"": "ArgumentError;message",
  toString$0: function() {
    return "RangeError: " + $.S(this.message);
  }
};

$$.NoSuchMethodError = {"": "Object;_receiver,_memberName,_arguments,_namedArguments,_existingArgumentNames",
  toString$0: function() {
    var t1, t2, t3, t4, t5, actualParameters, i, formalParameters;
    t1 = {};
    t1.sb_0 = $.StringBuffer_StringBuffer("");
    t1.i_1 = 0;
    t2 = this._arguments;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
      return this.toString$0$bailout(1, t1, t2);
    for (; $.ltB(t1.i_1, t2.length); t3 = t1.i_1, t1.i_1 = $.getInterceptor$JSNumber(t3).operator$add$1(t3, 1)) {
      if ($.gtB(t1.i_1, 0)) {
        t3 = t1.sb_0;
        $.getInterceptor$JSArray(t3).add$1(t3, ", ");
      }
      t3 = t1.sb_0;
      t4 = t1.i_1;
      if (t4 !== (t4 | 0))
        throw $.iae(t4);
      if (t4 < 0 || t4 >= t2.length)
        throw $.ioore(t4);
      t5 = $.Error_safeToString(t2[t4]);
      $.getInterceptor$JSArray(t3).add$1(t3, t5);
    }
    t2 = this._namedArguments;
    if (!(t2 == null)) {
      t3 = new $.NoSuchMethodError_toString_anon(t1);
      $.getInterceptor$JSArray(t2).forEach$1(t2, t3);
    }
    t2 = this._existingArgumentNames;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
      return this.toString$0$bailout(2, t1, t2);
    t3 = t1.sb_0;
    actualParameters = $.getInterceptor(t3).toString$0(t3);
    t1.sb_0 = $.StringBuffer_StringBuffer("");
    for (i = 0; i < t2.length; ++i) {
      if (i > 0) {
        t3 = t1.sb_0;
        $.getInterceptor$JSArray(t3).add$1(t3, ", ");
      }
      t3 = t1.sb_0;
      if (i >= t2.length)
        throw $.ioore(i);
      t4 = t2[i];
      $.getInterceptor$JSArray(t3).add$1(t3, t4);
    }
    t1 = t1.sb_0;
    formalParameters = $.getInterceptor(t1).toString$0(t1);
    t1 = this._memberName;
    return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t1) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Tried calling: " + $.S(t1) + "(" + $.S(actualParameters) + ")\n" + "Found: " + $.S(t1) + "(" + $.S(formalParameters) + ")";
  },
  toString$0$bailout: function(state0, env0, env1) {
    switch (state0) {
      case 1:
        t2 = env1;
        t1 = env0;
        break;
      case 2:
        t2 = env1;
        t1 = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = {};
        t1.sb_0 = $.StringBuffer_StringBuffer("");
        t1.i_1 = 0;
        t2 = this._arguments;
      case 1:
        state0 = 0;
        if (!(t2 == null))
          for (t3 = $.getInterceptor$JSStringJSArray(t2); $.ltB(t1.i_1, t3.get$length(t2)); t4 = t1.i_1, t1.i_1 = $.getInterceptor$JSNumber(t4).operator$add$1(t4, 1)) {
            if ($.gtB(t1.i_1, 0)) {
              t4 = t1.sb_0;
              $.getInterceptor$JSArray(t4).add$1(t4, ", ");
            }
            t4 = t1.sb_0;
            t5 = $.Error_safeToString(t3.operator$index$1(t2, t1.i_1));
            $.getInterceptor$JSArray(t4).add$1(t4, t5);
          }
        t2 = this._namedArguments;
        if (!(t2 == null)) {
          t3 = new $.NoSuchMethodError_toString_anon(t1);
          $.getInterceptor$JSArray(t2).forEach$1(t2, t3);
        }
        t2 = this._existingArgumentNames;
      case 2:
        var t1, t2, t3, t4, t5, actualParameters, i, formalParameters;
        state0 = 0;
        if (t2 == null)
          return "NoSuchMethodError : method not found: '" + $.S(this._memberName) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Arguments: [" + $.S(t1.sb_0) + "]";
        else {
          t3 = t1.sb_0;
          actualParameters = $.getInterceptor(t3).toString$0(t3);
          t1.sb_0 = $.StringBuffer_StringBuffer("");
          for (t3 = $.getInterceptor$JSStringJSArray(t2), i = 0; $.ltB(i, t3.get$length(t2)); ++i) {
            if (i > 0) {
              t4 = t1.sb_0;
              $.getInterceptor$JSArray(t4).add$1(t4, ", ");
            }
            t4 = t1.sb_0;
            t5 = t3.operator$index$1(t2, i);
            $.getInterceptor$JSArray(t4).add$1(t4, t5);
          }
          t1 = t1.sb_0;
          formalParameters = $.getInterceptor(t1).toString$0(t1);
          t1 = this._memberName;
          return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t1) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Tried calling: " + $.S(t1) + "(" + $.S(actualParameters) + ")\n" + "Found: " + $.S(t1) + "(" + $.S(formalParameters) + ")";
        }
    }
  }
};

$$.UnsupportedError = {"": "Object;message>",
  toString$0: function() {
    return "Unsupported operation: " + $.S(this.get$message());
  }
};

$$.UnimplementedError = {"": "Object;message>",
  toString$0: function() {
    var t1 = this.message;
    return !(t1 == null) ? "UnimplementedError: " + $.S(t1) : "UnimplementedError";
  }
};

$$.StateError = {"": "Object;message>",
  toString$0: function() {
    return "Bad state: " + this.message;
  }
};

$$.StackOverflowError = {"": "Object;",
  toString$0: function() {
    return "Stack Overflow";
  }
};

$$.RuntimeError = {"": "Object;message>",
  toString$0: function() {
    return "RuntimeError: " + this.message;
  }
};

$$._ExceptionImplementation = {"": "Object;message>",
  toString$0: function() {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + $.S(t1);
  },
  is$Exception: true
};

$$.FormatException = {"": "Object;message>",
  toString$0: function() {
    return "FormatException: " + $.S(this.message);
  },
  is$Exception: true
};

$$.IllegalJSRegExpException = {"": "Object;_pattern,_errmsg",
  toString$0: function() {
    return "IllegalJSRegExpException: '" + $.S(this._pattern) + "' '" + this._errmsg + "'";
  },
  is$Exception: true
};

$$.Iterable = {"": "Object;",
  where$1: function(f) {
    return $.WhereIterable$(this, f, $.getRuntimeTypeInfo(this)[0]);
  },
  contains$1: function(element) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      if ($.eqB(t1.get$current(), element))
        return true;
    return false;
  },
  get$contains: function() {
    return new $.BoundClosure(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
  },
  join$1: function(separator) {
    var iterator, buffer, t1, t2;
    if (typeof separator !== "string")
      return this.join$1$bailout(1, separator);
    iterator = $.getInterceptor$JSArray(this).get$iterator(this);
    if (iterator.moveNext$0() !== true)
      return "";
    buffer = $.StringBuffer_StringBuffer("");
    if (separator === "")
      do {
        t1 = $.S(iterator.get$current());
        $.getInterceptor$JSArray(buffer).add$1(buffer, t1);
      } while (iterator.moveNext$0() === true);
    else {
      t1 = $.S(iterator.get$current());
      t2 = $.getInterceptor$JSArray(buffer);
      t2.add$1(buffer, t1);
      for (; iterator.moveNext$0() === true;) {
        t2.add$1(buffer, separator);
        t2.add$1(buffer, $.S(iterator.get$current()));
      }
    }
    return $.getInterceptor(buffer).toString$0(buffer);
  },
  join$1$bailout: function(state0, separator) {
    var iterator, buffer, t1, t2;
    iterator = $.getInterceptor$JSArray(this).get$iterator(this);
    if (iterator.moveNext$0() !== true)
      return "";
    buffer = $.StringBuffer_StringBuffer("");
    if (separator == null || $.eqB(separator, ""))
      do {
        t1 = $.S(iterator.get$current());
        $.getInterceptor$JSArray(buffer).add$1(buffer, t1);
      } while (iterator.moveNext$0() === true);
    else {
      t1 = $.S(iterator.get$current());
      t2 = $.getInterceptor$JSArray(buffer);
      t2.add$1(buffer, t1);
      for (; iterator.moveNext$0() === true;) {
        t2.add$1(buffer, separator);
        t2.add$1(buffer, $.S(iterator.get$current()));
      }
    }
    return $.getInterceptor(buffer).toString$0(buffer);
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.getRuntimeTypeInfo(this)[0]);
    $.setRuntimeTypeInfo(t1, [$.getRuntimeTypeInfo(this)[0]]);
    return t1;
  },
  toSet$0: function() {
    return $.Set_Set$from(this, $.getRuntimeTypeInfo(this)[0]);
  },
  get$length: function() {
    var it, count;
    it = $.getInterceptor$JSArray(this).get$iterator(this);
    for (count = 0; it.moveNext$0() === true;)
      ++count;
    return count;
  },
  get$isEmpty: function() {
    return $.getInterceptor$JSArray(this).get$iterator(this).moveNext$0() !== true;
  },
  get$last: function() {
    var it, result;
    it = $.getInterceptor$JSArray(this).get$iterator(this);
    if (it.moveNext$0() !== true)
      throw $.$$throw($.StateError$("No elements"));
    do
      result = it.get$current();
    while (it.moveNext$0() === true);
    return result;
  }
};

$$.Iterator = {"": "Object;"};

$$._HashMapImpl = {"": "Object;_liblib0$_keys>,_values>,_loadLimit,_numberOfEntries,_numberOfDeleted",
  _probeForAdding$1: function(key) {
    var t1, t3, hash, numberOfProbes, insertionIndex, existingKey, numberOfProbes0;
    if (key == null)
      throw $.$$throw($.ArgumentError$(null));
    t1 = $.getInterceptor(key).get$hashCode(key);
    if (t1 !== (t1 | 0))
      return this._probeForAdding$1$bailout(1, key, t1);
    t3 = this._liblib0$_keys;
    t3 = $.getInterceptor$JSStringJSArray(t3).get$length(t3);
    if (t3 !== (t3 | 0))
      return this._probeForAdding$1$bailout(2, key, t3, t1);
    hash = (t1 & t3 - 1) >>> 0;
    for (numberOfProbes = 1, insertionIndex = -1; true; numberOfProbes = numberOfProbes0) {
      t1 = this._liblib0$_keys;
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
        return this._probeForAdding$1$bailout(3, key, insertionIndex, t1, hash, numberOfProbes);
      if (hash < 0 || hash >= t1.length)
        throw $.ioore(hash);
      existingKey = t1[hash];
      if (existingKey == null) {
        if (insertionIndex < 0)
          return hash;
        return insertionIndex;
      } else if ($.eqB(existingKey, key))
        return hash;
      else if (insertionIndex < 0 && existingKey === $.CONSTANT4)
        insertionIndex = hash;
      numberOfProbes0 = numberOfProbes + 1;
      t1 = this._liblib0$_keys;
      hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, $.getInterceptor$JSStringJSArray(t1).get$length(t1));
      if (hash !== (hash | 0))
        return this._probeForAdding$1$bailout(4, hash, numberOfProbes0, key, insertionIndex);
    }
  },
  _probeForAdding$1$bailout: function(state0, env0, env1, env2, env3, env4) {
    switch (state0) {
      case 1:
        t1 = env1;
        key = env0;
        break;
      case 2:
        t1 = env2;
        t3 = env1;
        key = env0;
        break;
      case 3:
        numberOfProbes = env4;
        hash = env3;
        t1 = env2;
        insertionIndex = env1;
        key = env0;
        break;
      case 4:
        insertionIndex = env3;
        key = env2;
        numberOfProbes0 = env1;
        hash = env0;
        break;
    }
    switch (state0) {
      case 0:
        if (key == null)
          throw $.$$throw($.ArgumentError$(null));
        t1 = $.getInterceptor(key).get$hashCode(key);
      case 1:
        state0 = 0;
        t3 = this._liblib0$_keys;
        t3 = $.getInterceptor$JSStringJSArray(t3).get$length(t3);
      case 2:
        state0 = 0;
        t3 = $.getInterceptor$JSNumber(t3).operator$sub$1(t3, 1);
        hash = $.getInterceptor$JSNumber(t1).operator$and$1(t1, t3);
        numberOfProbes = 1;
        insertionIndex = -1;
      default:
        var t1, key, t3, hash, numberOfProbes, insertionIndex, existingKey, numberOfProbes0;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!true)
                  break L0;
                t1 = this._liblib0$_keys;
              case 3:
                state0 = 0;
                existingKey = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, hash);
                if (existingKey == null) {
                  if ($.ltB(insertionIndex, 0))
                    return hash;
                  return insertionIndex;
                } else if ($.eqB(existingKey, key))
                  return hash;
                else if ($.ltB(insertionIndex, 0) && existingKey === $.CONSTANT4)
                  insertionIndex = hash;
                numberOfProbes0 = numberOfProbes + 1;
                t1 = this._liblib0$_keys;
                hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, $.getInterceptor$JSStringJSArray(t1).get$length(t1));
              case 4:
                state0 = 0;
                numberOfProbes = numberOfProbes0;
            }
    }
  },
  _probeForLookup$1: function(key) {
    var t1, t2, hash, numberOfProbes, existingKey, numberOfProbes0;
    if (key == null)
      throw $.$$throw($.ArgumentError$(null));
    t1 = $.getInterceptor(key).get$hashCode(key);
    t2 = this._liblib0$_keys;
    t2 = $.getInterceptor$JSStringJSArray(t2).get$length(t2);
    t2 = $.getInterceptor$JSNumber(t2).operator$sub$1(t2, 1);
    hash = $.getInterceptor$JSNumber(t1).operator$and$1(t1, t2);
    if (hash !== (hash | 0))
      return this._probeForLookup$1$bailout(1, key, hash);
    for (numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
      t1 = this._liblib0$_keys;
      existingKey = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, hash);
      if (existingKey == null)
        return -1;
      if ($.eqB(existingKey, key))
        return hash;
      numberOfProbes0 = numberOfProbes + 1;
      t1 = this._liblib0$_keys;
      hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, $.getInterceptor$JSStringJSArray(t1).get$length(t1));
    }
  },
  _probeForLookup$1$bailout: function(state0, key, hash) {
    var numberOfProbes, t1, existingKey, numberOfProbes0;
    for (numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
      t1 = this._liblib0$_keys;
      existingKey = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, hash);
      if (existingKey == null)
        return -1;
      if ($.eqB(existingKey, key))
        return hash;
      numberOfProbes0 = numberOfProbes + 1;
      t1 = this._liblib0$_keys;
      hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, $.getInterceptor$JSStringJSArray(t1).get$length(t1));
    }
  },
  _ensureCapacity$0: function() {
    var t1, newNumberOfEntries, capacity, numberOfFreeOrDeleted, numberOfFree;
    t1 = this._numberOfEntries;
    newNumberOfEntries = $.getInterceptor$JSNumber(t1).operator$add$1(t1, 1);
    if ($.geB(newNumberOfEntries, this._loadLimit)) {
      t1 = this._liblib0$_keys;
      t1 = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
      this._grow$1($.getInterceptor$JSNumber(t1).operator$mul$1(t1, 2));
      return;
    }
    t1 = this._liblib0$_keys;
    capacity = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
    numberOfFreeOrDeleted = $.getInterceptor$JSNumber(capacity).operator$sub$1(capacity, newNumberOfEntries);
    t1 = this._numberOfDeleted;
    numberOfFree = $.getInterceptor$JSNumber(numberOfFreeOrDeleted).operator$sub$1(numberOfFreeOrDeleted, t1);
    if ($.gtB(this._numberOfDeleted, numberOfFree)) {
      t1 = this._liblib0$_keys;
      this._grow$1($.getInterceptor$JSStringJSArray(t1).get$length(t1));
    }
  },
  _grow$1: function(newCapacity) {
    var t1, capacity, t2, oldKeys, oldValues, t5, i, key, value, newIndex;
    t1 = this._liblib0$_keys;
    capacity = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
    if (typeof capacity !== "number")
      return this._grow$1$bailout(1, newCapacity, capacity);
    t2 = $.getInterceptor$JSNumber(newCapacity).operator$mul$1(newCapacity, 3);
    this._loadLimit = $.getInterceptor$JSNumber(t2).operator$tdiv$1(t2, 4);
    oldKeys = this._liblib0$_keys;
    if (typeof oldKeys !== "string" && (typeof oldKeys !== "object" || oldKeys === null || oldKeys.constructor !== Array && !oldKeys.is$JavaScriptIndexingBehavior()))
      return this._grow$1$bailout(2, newCapacity, oldKeys, capacity);
    oldValues = this._values;
    if (typeof oldValues !== "string" && (typeof oldValues !== "object" || oldValues === null || oldValues.constructor !== Array && !oldValues.is$JavaScriptIndexingBehavior()))
      return this._grow$1$bailout(3, newCapacity, oldKeys, oldValues, capacity);
    t5 = $.List_List$fixedLength(newCapacity, null);
    $.setRuntimeTypeInfo(t5, []);
    this._liblib0$_keys = t5;
    t5 = $.List_List$fixedLength(newCapacity, null, $.getRuntimeTypeInfo(this)[1]);
    $.setRuntimeTypeInfo(t5, [$.getRuntimeTypeInfo(this)[1]]);
    this._values = t5;
    for (i = 0; i < capacity; ++i) {
      if (i >= oldKeys.length)
        throw $.ioore(i);
      key = oldKeys[i];
      if (key == null || key === $.CONSTANT4)
        continue;
      if (i >= oldValues.length)
        throw $.ioore(i);
      value = oldValues[i];
      newIndex = this._probeForAdding$1(key);
      t1 = this._liblib0$_keys;
      $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, newIndex, key);
      t1 = this._values;
      $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, newIndex, value);
    }
    this._numberOfDeleted = 0;
  },
  _grow$1$bailout: function(state0, env0, env1, env2, env3) {
    switch (state0) {
      case 1:
        capacity = env1;
        newCapacity = env0;
        break;
      case 2:
        capacity = env2;
        oldKeys = env1;
        newCapacity = env0;
        break;
      case 3:
        capacity = env3;
        oldValues = env2;
        oldKeys = env1;
        newCapacity = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = this._liblib0$_keys;
        capacity = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
      case 1:
        state0 = 0;
        t2 = $.getInterceptor$JSNumber(newCapacity).operator$mul$1(newCapacity, 3);
        this._loadLimit = $.getInterceptor$JSNumber(t2).operator$tdiv$1(t2, 4);
        oldKeys = this._liblib0$_keys;
      case 2:
        state0 = 0;
        oldValues = this._values;
      case 3:
        var t1, capacity, newCapacity, t2, oldKeys, oldValues, t5, i, key, value, newIndex, t3;
        state0 = 0;
        t5 = $.List_List$fixedLength(newCapacity, null);
        $.setRuntimeTypeInfo(t5, []);
        this._liblib0$_keys = t5;
        t5 = $.List_List$fixedLength(newCapacity, null, $.getRuntimeTypeInfo(this)[1]);
        $.setRuntimeTypeInfo(t5, [$.getRuntimeTypeInfo(this)[1]]);
        this._values = t5;
        for (t1 = $.getInterceptor$JSStringJSArray(oldKeys), t2 = $.getInterceptor$JSStringJSArray(oldValues), i = 0; $.ltB(i, capacity); ++i) {
          key = t1.operator$index$1(oldKeys, i);
          if (key == null || key === $.CONSTANT4)
            continue;
          value = t2.operator$index$1(oldValues, i);
          newIndex = this._probeForAdding$1(key);
          t3 = this._liblib0$_keys;
          $.getInterceptor$JSArray(t3).operator$indexSet$2(t3, newIndex, key);
          t3 = this._values;
          $.getInterceptor$JSArray(t3).operator$indexSet$2(t3, newIndex, value);
        }
        this._numberOfDeleted = 0;
    }
  },
  clear$0: function() {
    var t1, length$, i;
    this._numberOfEntries = 0;
    this._numberOfDeleted = 0;
    t1 = this._liblib0$_keys;
    length$ = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
    if (typeof length$ !== "number")
      return this.clear$0$bailout(1, length$);
    for (i = 0; i < length$; ++i) {
      t1 = this._liblib0$_keys;
      $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, i, null);
      t1 = this._values;
      $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, i, null);
    }
  },
  clear$0$bailout: function(state0, length$) {
    var i, t1;
    for (i = 0; $.ltB(i, length$); ++i) {
      t1 = this._liblib0$_keys;
      $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, i, null);
      t1 = this._values;
      $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, i, null);
    }
  },
  operator$indexSet$2: function(key, value) {
    var index, t1, t2;
    this._ensureCapacity$0();
    index = this._probeForAdding$1(key);
    t1 = this._liblib0$_keys;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this.operator$indexSet$2$bailout0(1, key, value, index, t1);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    if (!(t1[index] == null)) {
      if (index >= t1.length)
        throw $.ioore(index);
      t2 = t1[index] === $.CONSTANT4;
      t1 = t2;
    } else
      t1 = true;
    if (t1) {
      t1 = this._numberOfEntries;
      if (typeof t1 !== "number")
        return this.operator$indexSet$2$bailout0(3, key, value, t1, index);
      this._numberOfEntries = t1 + 1;
    }
    t1 = this._liblib0$_keys;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.is$JavaScriptIndexingBehavior())
      return this.operator$indexSet$2$bailout0(4, key, value, t1, index);
    if (index >= t1.length)
      throw $.ioore(index);
    t1[index] = key;
    t1 = this._values;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.is$JavaScriptIndexingBehavior())
      return this.operator$indexSet$2$bailout0(5, value, t1, index);
    if (index >= t1.length)
      throw $.ioore(index);
    t1[index] = value;
  },
  operator$indexSet$2$bailout0: function(state0, env0, env1, env2, env3) {
    switch (state0) {
      case 1:
        t1 = env3;
        index = env2;
        value = env1;
        key = env0;
        break;
      case 2:
        index = env3;
        t1 = env2;
        value = env1;
        key = env0;
        break;
      case 3:
        index = env3;
        t1 = env2;
        value = env1;
        key = env0;
        break;
      case 4:
        index = env3;
        t1 = env2;
        value = env1;
        key = env0;
        break;
      case 5:
        index = env2;
        t1 = env1;
        value = env0;
        break;
    }
    switch (state0) {
      case 0:
        this._ensureCapacity$0();
        index = this._probeForAdding$1(key);
        t1 = this._liblib0$_keys;
      case 1:
        state0 = 0;
      case 2:
        if (state0 === 2 || state0 === 0 && !($.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, index) == null))
          switch (state0) {
            case 0:
              t1 = this._liblib0$_keys;
            case 2:
              state0 = 0;
              t3 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, index) === $.CONSTANT4;
              t1 = t3;
          }
        else
          t1 = true;
      case 3:
        if (state0 === 3 || state0 === 0 && t1)
          switch (state0) {
            case 0:
              t1 = this._numberOfEntries;
            case 3:
              state0 = 0;
              this._numberOfEntries = $.getInterceptor$JSNumber(t1).operator$add$1(t1, 1);
          }
        t1 = this._liblib0$_keys;
      case 4:
        state0 = 0;
        $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, index, key);
        t1 = this._values;
      case 5:
        var index, t1, value, key, t3;
        state0 = 0;
        $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, index, value);
    }
  },
  operator$index$1: function(key) {
    var index, t1;
    index = this._probeForLookup$1(key);
    if (typeof index !== "number")
      return this.operator$index$1$bailout1(1, index);
    if (index < 0)
      return;
    t1 = this._values;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this.operator$index$1$bailout1(2, t1, index);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  operator$index$1$bailout1: function(state0, env0, env1) {
    switch (state0) {
      case 1:
        index = env0;
        break;
      case 2:
        index = env1;
        t1 = env0;
        break;
    }
    switch (state0) {
      case 0:
        index = this._probeForLookup$1(key);
      case 1:
        state0 = 0;
        if ($.ltB(index, 0))
          return;
        t1 = this._values;
      case 2:
        var index, t1;
        state0 = 0;
        return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, index);
    }
  },
  remove$1: function(key) {
    var index, t1, t3, value;
    index = this._probeForLookup$1(key);
    if (typeof index !== "number")
      return this.remove$1$bailout0(1, index);
    if (index >= 0) {
      t1 = this._numberOfEntries;
      if (typeof t1 !== "number")
        return this.remove$1$bailout0(2, index, t1);
      this._numberOfEntries = t1 - 1;
      t3 = this._values;
      if (typeof t3 !== "string" && (typeof t3 !== "object" || t3 === null || t3.constructor !== Array && !t3.is$JavaScriptIndexingBehavior()))
        return this.remove$1$bailout0(3, index, t3);
      if (index !== (index | 0))
        throw $.iae(index);
      if (index < 0 || index >= t3.length)
        throw $.ioore(index);
      value = t3[index];
      if (typeof t3 !== "object" || t3 === null || (t3.constructor !== Array || !!t3.immutable$list) && !t3.is$JavaScriptIndexingBehavior())
        return this.remove$1$bailout0(4, value, index, t3);
      if (index >= t3.length)
        throw $.ioore(index);
      t3[index] = null;
      t3 = this._liblib0$_keys;
      if (typeof t3 !== "object" || t3 === null || (t3.constructor !== Array || !!t3.immutable$list) && !t3.is$JavaScriptIndexingBehavior())
        return this.remove$1$bailout0(5, value, index, t3);
      if (index >= t3.length)
        throw $.ioore(index);
      t3[index] = $.CONSTANT4;
      t3 = this._numberOfDeleted;
      if (typeof t3 !== "number")
        return this.remove$1$bailout0(6, t3, value);
      this._numberOfDeleted = t3 + 1;
      return value;
    }
    return;
  },
  remove$1$bailout0: function(state0, env0, env1, env2) {
    switch (state0) {
      case 1:
        index = env0;
        break;
      case 2:
        t1 = env1;
        index = env0;
        break;
      case 3:
        t3 = env1;
        index = env0;
        break;
      case 4:
        t3 = env2;
        index = env1;
        value = env0;
        break;
      case 5:
        t3 = env2;
        index = env1;
        value = env0;
        break;
      case 6:
        value = env1;
        t3 = env0;
        break;
    }
    switch (state0) {
      case 0:
        index = this._probeForLookup$1(key);
      case 1:
        state0 = 0;
      default:
        var index, t1, t3, value;
        if (state0 === 6 || state0 === 5 || state0 === 4 || state0 === 3 || state0 === 2 || state0 === 0 && $.geB(index, 0))
          switch (state0) {
            case 0:
              t1 = this._numberOfEntries;
            case 2:
              state0 = 0;
              this._numberOfEntries = $.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1);
              t3 = this._values;
            case 3:
              state0 = 0;
              value = $.getInterceptor$JSStringJSArray(t3).operator$index$1(t3, index);
              t3 = this._values;
            case 4:
              state0 = 0;
              $.getInterceptor$JSArray(t3).operator$indexSet$2(t3, index, null);
              t3 = this._liblib0$_keys;
            case 5:
              state0 = 0;
              $.getInterceptor$JSArray(t3).operator$indexSet$2(t3, index, $.CONSTANT4);
              t3 = this._numberOfDeleted;
            case 6:
              state0 = 0;
              this._numberOfDeleted = $.getInterceptor$JSNumber(t3).operator$add$1(t3, 1);
              return value;
          }
        return;
    }
  },
  get$isEmpty: function() {
    return $.eq(this._numberOfEntries, 0);
  },
  get$length: function() {
    return this._numberOfEntries;
  },
  forEach$1: function(f) {
    var it, t1, t2, t3;
    it = $._HashMapImplIndexIterator$(this);
    for (; it.moveNext$0() === true;) {
      t1 = this._liblib0$_keys;
      t2 = it.get$current();
      t2 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, t2);
      t1 = this._values;
      t3 = it.get$current();
      f.call$2(t2, $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, t3));
    }
  },
  get$keys: function() {
    return $._HashMapImplKeyIterable$(this, $.getRuntimeTypeInfo(this)[0]);
  },
  get$values: function() {
    return $._HashMapImplValueIterable$(this, $.getRuntimeTypeInfo(this)[1]);
  },
  containsKey$1: function(key) {
    return !$.eqB(this._probeForLookup$1(key), -1);
  },
  toString$0: function() {
    return $.Maps_mapToString(this);
  },
  _HashMapImpl$0: function() {
    this._numberOfEntries = 0;
    this._numberOfDeleted = 0;
    this._loadLimit = $._HashMapImpl__computeLoadLimit(8);
    var t1 = $.List_List$fixedLength(8, null);
    $.setRuntimeTypeInfo(t1, []);
    this._liblib0$_keys = t1;
    t1 = $.List_List$fixedLength(8, null, $.getRuntimeTypeInfo(this)[1]);
    $.setRuntimeTypeInfo(t1, [$.getRuntimeTypeInfo(this)[1]]);
    this._values = t1;
  },
  is$Map: function() {
    return true;
  }
};

$$._HashMapImplKeyIterable = {"": "Iterable;_map",
  get$iterator: function() {
    return $._HashMapImplKeyIterator$(this._map);
  }
};

$$._HashMapImplValueIterable = {"": "Iterable;_map",
  get$iterator: function() {
    return $._HashMapImplValueIterator$(this._map);
  }
};

$$._HashMapImplIterator = {"": "Object;",
  moveNext$0: function() {
    var t1, t2, length$, t3, newIndex, key;
    t1 = this._map;
    t2 = t1.get$_liblib0$_keys();
    length$ = $.getInterceptor$JSStringJSArray(t2).get$length(t2);
    if (typeof length$ !== "number")
      return this.moveNext$0$bailout1(1, length$, t1);
    t3 = this._liblib0$_index;
    if (typeof t3 !== "number")
      return this.moveNext$0$bailout1(2, length$, t1, t3);
    newIndex = t3 + 1;
    for (t2 = t1.get$_liblib0$_keys(); newIndex < length$;) {
      if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
        return this.moveNext$0$bailout1(3, length$, t2, newIndex, t1);
      if (newIndex !== (newIndex | 0))
        throw $.iae(newIndex);
      if (newIndex < 0 || newIndex >= t2.length)
        throw $.ioore(newIndex);
      key = t2[newIndex];
      if (!(key == null) && !(key === $.CONSTANT4)) {
        this._liblib0$_current = this._computeCurrentFromIndex$3(newIndex, t2, t1.get$_values());
        this._liblib0$_index = newIndex;
        return true;
      }
      ++newIndex;
    }
    this._liblib0$_index = length$;
    this._liblib0$_current = null;
    return false;
  },
  moveNext$0$bailout1: function(state0, env0, env1, env2, env3) {
    switch (state0) {
      case 1:
        t1 = env1;
        length$ = env0;
        break;
      case 2:
        t3 = env2;
        t1 = env1;
        length$ = env0;
        break;
      case 3:
        t1 = env3;
        newIndex = env2;
        t2 = env1;
        length$ = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = this._map;
        t2 = t1.get$_liblib0$_keys();
        length$ = $.getInterceptor$JSStringJSArray(t2).get$length(t2);
      case 1:
        state0 = 0;
        t3 = this._liblib0$_index;
      case 2:
        state0 = 0;
        newIndex = $.getInterceptor$JSNumber(t3).operator$add$1(t3, 1);
      case 3:
        var t1, t2, length$, t3, newIndex, key;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!$.ltB(newIndex, length$))
                  break L0;
                t2 = t1.get$_liblib0$_keys();
              case 3:
                state0 = 0;
                key = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, newIndex);
                if (!(key == null) && !(key === $.CONSTANT4)) {
                  this._liblib0$_current = this._computeCurrentFromIndex$3(newIndex, t1.get$_liblib0$_keys(), t1.get$_values());
                  this._liblib0$_index = newIndex;
                  return true;
                }
                newIndex = $.getInterceptor$JSNumber(newIndex).operator$add$1(newIndex, 1);
            }
        this._liblib0$_index = length$;
        this._liblib0$_current = null;
        return false;
    }
  },
  get$current: function() {
    return this._liblib0$_current;
  }
};

$$._HashMapImplKeyIterator = {"": "_HashMapImplIterator;_map,_liblib0$_index,_liblib0$_current",
  _computeCurrentFromIndex$3: function(index, keys, values) {
    return $.getInterceptor$JSStringJSArray(keys).operator$index$1(keys, index);
  }
};

$$._HashMapImplValueIterator = {"": "_HashMapImplIterator;_map,_liblib0$_index,_liblib0$_current",
  _computeCurrentFromIndex$3: function(index, keys, values) {
    return $.getInterceptor$JSStringJSArray(values).operator$index$1(values, index);
  }
};

$$._HashMapImplIndexIterator = {"": "_HashMapImplIterator;_map,_liblib0$_index,_liblib0$_current",
  _computeCurrentFromIndex$3: function(index, keys, values) {
    return index;
  }
};

$$._DeletedKeySentinel = {"": "Object;"};

$$._KeyValuePair = {"": "Object;key>,value="};

$$._LinkedHashMapImpl = {"": "Object;_liblib0$_list,_map",
  operator$indexSet$2: function(key, value) {
    var t1, t2, t3;
    if (this._map.containsKey$1(key) === true) {
      t1 = this._map;
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
        return this.operator$indexSet$2$bailout(1, key, value, t1);
      if (key !== (key | 0))
        throw $.iae(key);
      if (key < 0 || key >= t1.length)
        throw $.ioore(key);
      t1[key].get$element().set$value(value);
    } else {
      t1 = this._liblib0$_list;
      t2 = $._KeyValuePair$(key, value);
      $.getInterceptor$JSArray(t1).addLast$1(t1, t2);
      t2 = this._map;
      if (typeof t2 !== "object" || t2 === null || (t2.constructor !== Array || !!t2.immutable$list) && !t2.is$JavaScriptIndexingBehavior())
        return this.operator$indexSet$2$bailout(2, key, t2);
      t3 = this._liblib0$_list.lastEntry$0();
      if (key !== (key | 0))
        throw $.iae(key);
      if (key < 0 || key >= t2.length)
        throw $.ioore(key);
      t2[key] = t3;
    }
  },
  operator$indexSet$2$bailout: function(state0, env0, env1, env2) {
    switch (state0) {
      case 1:
        t1 = env2;
        value = env1;
        key = env0;
        break;
      case 2:
        t2 = env1;
        key = env0;
        break;
    }
    switch (state0) {
      case 0:
      default:
        var t1, value, key, t2, t3;
        if (state0 === 1 || state0 === 0 && this._map.containsKey$1(key) === true)
          switch (state0) {
            case 0:
              t1 = this._map;
            case 1:
              state0 = 0;
              $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, key).get$element().set$value(value);
          }
        else
          switch (state0) {
            case 0:
              t1 = this._liblib0$_list;
              t2 = $._KeyValuePair$(key, value);
              $.getInterceptor$JSArray(t1).addLast$1(t1, t2);
              t2 = this._map;
            case 2:
              state0 = 0;
              t3 = this._liblib0$_list.lastEntry$0();
              $.getInterceptor$JSArray(t2).operator$indexSet$2(t2, key, t3);
          }
    }
  },
  operator$index$1: function(key) {
    var t1, entry;
    t1 = this._map;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this.operator$index$1$bailout0(1, key, t1);
    if (key !== (key | 0))
      throw $.iae(key);
    if (key < 0 || key >= t1.length)
      throw $.ioore(key);
    entry = t1[key];
    if (entry == null)
      return;
    return entry.get$element().get$value();
  },
  operator$index$1$bailout0: function(state0, key, t1) {
    var entry = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, key);
    if (entry == null)
      return;
    return entry.get$element().get$value();
  },
  remove$1: function(key) {
    var t1, entry;
    t1 = this._map;
    entry = $.getInterceptor$JSArray(t1).remove$1(t1, key);
    if (entry == null)
      return;
    entry.remove$0();
    return entry.get$element().get$value();
  },
  get$keys: function() {
    var t1, t2, t3;
    t1 = this._liblib0$_list;
    t2 = new $._LinkedHashMapImpl_keys_anon();
    t3 = $.getRuntimeTypeInfo(this);
    return $.MappedIterable$(t1, t2, [$._KeyValuePair, t3[0], t3[1]], $.getRuntimeTypeInfo(this)[0]);
  },
  get$values: function() {
    var t1, t2, t3;
    t1 = this._liblib0$_list;
    t2 = new $._LinkedHashMapImpl_values_anon();
    t3 = $.getRuntimeTypeInfo(this);
    return $.MappedIterable$(t1, t2, [$._KeyValuePair, t3[0], t3[1]], $.getRuntimeTypeInfo(this)[1]);
  },
  forEach$1: function(f) {
    var t1, t2;
    t1 = this._liblib0$_list;
    t2 = new $._LinkedHashMapImpl_forEach_anon(f);
    $.getInterceptor$JSArray(t1).forEach$1(t1, t2);
  },
  containsKey$1: function(key) {
    return this._map.containsKey$1(key);
  },
  get$length: function() {
    var t1 = this._map;
    return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  clear$0: function() {
    var t1 = this._map;
    $.getInterceptor$JSArray(t1).clear$0(t1);
    t1 = this._liblib0$_list;
    $.getInterceptor$JSArray(t1).clear$0(t1);
  },
  toString$0: function() {
    return $.Maps_mapToString(this);
  },
  _LinkedHashMapImpl$0: function() {
    var t1, t2, t3;
    t1 = $.getRuntimeTypeInfo(this)[0];
    t2 = $.getRuntimeTypeInfo(this);
    this._map = $.HashMap_HashMap(t1, [$.DoubleLinkedQueueEntry, [$._KeyValuePair, t2[0], t2[1]]]);
    t3 = $.getRuntimeTypeInfo(this);
    this._liblib0$_list = $.DoubleLinkedQueue$([$._KeyValuePair, t3[0], t3[1]]);
  },
  is$Map: function() {
    return true;
  }
};

$$.Object = {"": ";",
  operator$eq$1: function(other) {
    return this === other;
  },
  get$hashCode: function() {
    return $.Primitives_objectHashCode(this);
  },
  toString$0: function() {
    return "Instance of '" + $.S($.Primitives_objectTypeName(this)) + "'";
  }
};

$$.DoubleLinkedQueueEntry = {"": "Object;_previous=,_next=,_liblib0$_element",
  _link$2: function(p, n) {
    this._next = n;
    this._previous = p;
    p.set$_next(this);
    n.set$_previous(this);
  },
  prepend$1: function(e) {
    $.DoubleLinkedQueueEntry$(e)._link$2(this._previous, this);
  },
  remove$0: function() {
    var t1 = this._next;
    this._previous.set$_next(t1);
    t1 = this._previous;
    this._next.set$_previous(t1);
    this._next = null;
    this._previous = null;
    return this._liblib0$_element;
  },
  _asNonSentinelEntry$0: function() {
    return this;
  },
  previousEntry$0: function() {
    return this._previous._asNonSentinelEntry$0();
  },
  nextEntry$0: function() {
    return this._next._asNonSentinelEntry$0();
  },
  get$element: function() {
    return this._liblib0$_element;
  },
  DoubleLinkedQueueEntry$1: function(e) {
    this._liblib0$_element = e;
  }
};

$$._DoubleLinkedQueueEntrySentinel = {"": "DoubleLinkedQueueEntry;_previous,_next,_liblib0$_element",
  remove$0: function() {
    throw $.$$throw($.StateError$("Empty queue"));
  },
  _asNonSentinelEntry$0: function() {
    return;
  },
  get$element: function() {
    throw $.$$throw($.StateError$("Empty queue"));
  },
  _DoubleLinkedQueueEntrySentinel$0: function() {
    this._link$2(this, this);
  }
};

$$.DoubleLinkedQueue = {"": "Iterable;_sentinel",
  addLast$1: function(value) {
    this._sentinel.prepend$1(value);
  },
  add$1: function(value) {
    this._sentinel.prepend$1(value);
  },
  addAll$1: function(iterable) {
    var t1, t2;
    for (t1 = $.getInterceptor$JSArray(iterable).get$iterator(iterable); t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      this._sentinel.prepend$1(t2);
    }
  },
  removeLast$0: function() {
    return this._sentinel._previous.remove$0();
  },
  removeFirst$0: function() {
    return this._sentinel._next.remove$0();
  },
  remove$1: function(o) {
    var entry = this._sentinel.nextEntry$0();
    for (; !(entry === this._sentinel);) {
      if ($.eqB(entry.get$element(), o)) {
        entry.remove$0();
        return;
      }
      entry = entry.get$_next();
    }
  },
  removeAll$1: function(elements) {
    $.IterableMixinWorkaround_removeAllList(this, elements);
  },
  removeMatching$1: function(test) {
    var entry, next;
    entry = this._sentinel.nextEntry$0();
    for (; !(entry === this._sentinel); entry = next) {
      next = entry.get$_next();
      if (test.call$1(entry.get$element()) === true)
        entry.remove$0();
    }
  },
  get$last: function() {
    return this._sentinel._previous.get$element();
  },
  lastEntry$0: function() {
    return this._sentinel.previousEntry$0();
  },
  get$isEmpty: function() {
    var t1 = this._sentinel;
    return t1._next === t1;
  },
  clear$0: function() {
    var t1 = this._sentinel;
    t1._next = t1;
    t1 = this._sentinel;
    t1._previous = t1;
  },
  get$iterator: function() {
    return $._DoubleLinkedQueueIterator$(this._sentinel);
  },
  toString$0: function() {
    return $.Collections_collectionToString(this);
  },
  DoubleLinkedQueue$0: function() {
    this._sentinel = $._DoubleLinkedQueueEntrySentinel$();
  },
  is$Collection: function() {
    return true;
  }
};

$$._DoubleLinkedQueueIterator = {"": "Object;_sentinel,_currentEntry,_liblib0$_current",
  moveNext$0: function() {
    var t1, t2;
    t1 = this._currentEntry;
    if (t1 == null)
      return false;
    this._currentEntry = t1.get$_next();
    t1 = this._currentEntry;
    t2 = this._sentinel;
    if (t1 == null ? t2 == null : t1 === t2) {
      this._currentEntry = null;
      this._liblib0$_current = null;
      this._sentinel = null;
      return false;
    }
    this._liblib0$_current = t1.get$element();
    return true;
  },
  get$current: function() {
    return this._liblib0$_current;
  }
};

$$.HashSet = {"": "Collection;_backingMap",
  clear$0: function() {
    this._backingMap.clear$0();
  },
  add$1: function(value) {
    this._backingMap.operator$indexSet$2(value, value);
  },
  remove$1: function(value) {
    var t1 = this._backingMap;
    if (t1.containsKey$1(value) !== true)
      return false;
    t1.remove$1(value);
    return true;
  },
  contains$1: function(value) {
    return this._backingMap.containsKey$1(value);
  },
  get$contains: function() {
    return new $.BoundClosure(this, "contains$1");
  },
  forEach$1: function(f) {
    this._backingMap.forEach$1(new $.HashSet_forEach_anon(f));
  },
  get$isEmpty: function() {
    var t1 = this._backingMap;
    return $.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1);
  },
  get$length: function() {
    var t1 = this._backingMap;
    return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
  },
  get$iterator: function() {
    return $._HashSetIterator$(this);
  },
  toString$0: function() {
    return $.Collections_collectionToString(this);
  },
  is$Set: true,
  is$Collection: function() {
    return true;
  }
};

$$._HashSetIterator = {"": "Object;_keysIterator",
  get$current: function() {
    var result = this._keysIterator.get$current();
    if (result === $.CONSTANT4)
      throw $.$$throw($.StateError$("Concurrent modification."));
    return result;
  },
  moveNext$0: function() {
    var t1, result, t2;
    t1 = this._keysIterator;
    do {
      result = t1.moveNext$0();
      if (result === true)
        t2 = t1.get$current() == null || t1.get$current() === $.CONSTANT4;
      else
        t2 = false;
    } while (t2);
    return result;
  }
};

$$._StringBufferImpl = {"": "Object;_buffer,_liblib0$_length",
  get$length: function() {
    return this._liblib0$_length;
  },
  get$isEmpty: function() {
    return $.eq(this._liblib0$_length, 0);
  },
  add$1: function(obj) {
    var str, t1;
    str = $.getInterceptor(obj).toString$0(obj);
    if (!(typeof str === "string"))
      throw $.$$throw($.ArgumentError$("toString() did not return a string"));
    if ($.CONSTANT2.get$isEmpty(str) === true)
      return;
    t1 = this._buffer;
    $.getInterceptor$JSArray(t1).add$1(t1, str);
    t1 = this._liblib0$_length;
    if (typeof t1 !== "number")
      return this.add$1$bailout(1, t1, str);
    this._liblib0$_length = t1 + str.length;
  },
  add$1$bailout: function(state0, t1, str) {
    var t3 = str.length;
    this._liblib0$_length = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t3);
  },
  addAll$1: function(objects) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(objects).get$iterator(objects); t1.moveNext$0() === true;)
      this.add$1(t1.get$current());
  },
  clear$0: function() {
    var t1 = $.List_List(0, $.String);
    $.setRuntimeTypeInfo(t1, [$.String]);
    this._buffer = t1;
    this._liblib0$_length = 0;
  },
  toString$0: function() {
    var t1, result;
    t1 = this._buffer;
    if ($.eqB($.getInterceptor$JSStringJSArray(t1).get$length(t1), 0))
      return "";
    t1 = this._buffer;
    if ($.eqB($.getInterceptor$JSStringJSArray(t1).get$length(t1), 1)) {
      t1 = this._buffer;
      return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, 0);
    }
    result = $.Strings__toJsStringArray(this._buffer).join("");
    t1 = this._buffer;
    $.getInterceptor$JSArray(t1).clear$0(t1);
    t1 = this._buffer;
    $.getInterceptor$JSArray(t1).add$1(t1, result);
    return result;
  },
  _StringBufferImpl$1: function(content$) {
    this.clear$0();
    this.add$1(content$);
  }
};

$$.MappedIterable = {"": "Iterable;_iterable,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$iterator: function() {
    var t1 = this._iterable;
    return $.MappedIterator$($.getInterceptor$JSArray(t1).get$iterator(t1), this._f);
  },
  get$length: function() {
    var t1 = this._iterable;
    return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
  },
  get$isEmpty: function() {
    var t1 = this._iterable;
    return $.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1);
  }
};

$$.MappedIterator = {"": "Iterator;_liblib7$_current,_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    var t1 = this._iterator;
    if (t1.moveNext$0() === true) {
      this._liblib7$_current = this._f$1(t1.get$current());
      return true;
    } else {
      this._liblib7$_current = null;
      return false;
    }
  },
  get$current: function() {
    return this._liblib7$_current;
  }
};

$$.WhereIterable = {"": "Iterable;_iterable,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$iterator: function() {
    var t1 = this._iterable;
    return $.WhereIterator$($.getInterceptor$JSArray(t1).get$iterator(t1), this._f);
  }
};

$$.WhereIterator = {"": "Iterator;_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    for (var t1 = this._iterator; t1.moveNext$0() === true;)
      if (this._f$1(t1.get$current()) === true)
        return true;
    return false;
  },
  get$current: function() {
    return this._iterator.get$current();
  }
};

$$.ObjectInterceptor = {"": "Object;",
  get$length: function(receiver) {
    return receiver.get$length();
  },
  operator$sub$1: function(receiver, a0) {
    return receiver.operator$sub$1(a0);
  },
  operator$index$1: function(receiver, a0) {
    return receiver.operator$index$1(a0);
  },
  toString$0: function(receiver) {
    return receiver.toString$0();
  },
  charCodeAt$1: function(receiver, a0) {
    return receiver.charCodeAt$1(a0);
  },
  substring$2: function(receiver, a0, a1) {
    return receiver.substring$2(a0, a1);
  },
  get$iterator: function(receiver) {
    return receiver.get$iterator();
  },
  substring$1: function(receiver, a0) {
    return receiver.substring$1(a0);
  },
  operator$indexSet$2: function(receiver, a0, a1) {
    return receiver.operator$indexSet$2(a0, a1);
  },
  endsWith$1: function(receiver, a0) {
    return receiver.endsWith$1(a0);
  },
  removeLast$0: function(receiver) {
    return receiver.removeLast$0();
  },
  operator$tdiv$1: function(receiver, a0) {
    return receiver.operator$tdiv$1(a0);
  },
  replaceAll$2: function(receiver, a0, a1) {
    return receiver.replaceAll$2(a0, a1);
  },
  floor$0: function(receiver) {
    return receiver.floor$0();
  },
  operator$and$1: function(receiver, a0) {
    return receiver.operator$and$1(a0);
  },
  indexOf$2: function(receiver, a0, a1) {
    return receiver.indexOf$2(a0, a1);
  },
  get$hashCode: function(receiver) {
    return receiver.get$hashCode();
  },
  operator$add$1: function(receiver, a0) {
    return receiver.operator$add$1(a0);
  },
  removeRange$2: function(receiver, a0, a1) {
    return receiver.removeRange$2(a0, a1);
  },
  truncate$0: function(receiver) {
    return receiver.truncate$0();
  },
  addLast$1: function(receiver, a0) {
    return receiver.addLast$1(a0);
  },
  trim$0: function(receiver) {
    return receiver.trim$0();
  },
  contains$1: function(receiver, a0) {
    return receiver.contains$1(a0);
  },
  contains$2: function(receiver, a0, a1) {
    return receiver.contains$2(a0, a1);
  },
  clear$0: function(receiver) {
    return receiver.clear$0();
  },
  forEach$1: function(receiver, a0) {
    return receiver.forEach$1(a0);
  },
  getRange$2: function(receiver, a0, a1) {
    return receiver.getRange$2(a0, a1);
  },
  ceil$0: function(receiver) {
    return receiver.ceil$0();
  },
  set$length: function(receiver, value) {
    return receiver.set$length(value);
  },
  toSet$0: function(receiver) {
    return receiver.toSet$0();
  },
  indexOf$1: function(receiver, a0) {
    return receiver.indexOf$1(a0);
  },
  toLowerCase$0: function(receiver) {
    return receiver.toLowerCase$0();
  },
  add$1: function(receiver, a0) {
    return receiver.add$1(a0);
  },
  sort$0: function(receiver) {
    return receiver.sort$0();
  },
  split$1: function(receiver, a0) {
    return receiver.split$1(a0);
  },
  get$last: function(receiver) {
    return receiver.get$last();
  },
  join$1: function(receiver, a0) {
    return receiver.join$1(a0);
  },
  operator$or$1: function(receiver, a0) {
    return receiver.operator$or$1(a0);
  },
  get$isEmpty: function(receiver) {
    return receiver.get$isEmpty();
  },
  addAll$1: function(receiver, a0) {
    return receiver.addAll$1(a0);
  },
  get$isNegative: function(receiver) {
    return receiver.get$isNegative();
  },
  remove$1: function(receiver, a0) {
    return receiver.remove$1(a0);
  },
  toUpperCase$0: function(receiver) {
    return receiver.toUpperCase$0();
  },
  removeAll$1: function(receiver, a0) {
    return receiver.removeAll$1(a0);
  },
  operator$shl$1: function(receiver, a0) {
    return receiver.operator$shl$1(a0);
  },
  get$isNaN: function(receiver) {
    return receiver.get$isNaN();
  },
  allMatches$1: function(receiver, a0) {
    return receiver.allMatches$1(a0);
  },
  toList$0: function(receiver) {
    return receiver.toList$0();
  },
  operator$mul$1: function(receiver, a0) {
    return receiver.operator$mul$1(a0);
  },
  get$contains: function(receiver) {
    return receiver.get$contains();
  },
  where$1: function(receiver, a0) {
    return receiver.where$1(a0);
  },
  operator$xor$1: function(receiver, a0) {
    return receiver.operator$xor$1(a0);
  },
  compareTo$1: function(receiver, a0) {
    return receiver.compareTo$1(a0);
  }
};

$$.JSFunction = {"": "Object;",
  toString$0: function(receiver) {
    return "Closure";
  },
  is$Function: true
};

$$.JSBool = {"": "Object;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver ? 519018 : 218159;
  },
  is$bool: true
};

$$.JSNull = {"": "Object;",
  toString$0: function(receiver) {
    return "null";
  },
  get$hashCode: function(receiver) {
    return 0;
  }
};

$$.JSArray = {"": "Object;",
  add$1: function(receiver, value) {
    $.checkGrowable(receiver, "add");
    receiver.push(value);
  },
  removeLast$0: function(receiver) {
    $.checkGrowable(receiver, "removeLast");
    if (receiver.length === 0)
      throw $.$$throw($.RangeError$value(-1));
    return receiver.pop();
  },
  remove$1: function(receiver, element) {
    var i;
    $.checkGrowable(receiver, "remove");
    for (i = 0; i < receiver.length; ++i)
      if ($.eqB(receiver[i], element)) {
        receiver.splice(i, 1);
        return;
      }
  },
  removeAll$1: function(receiver, elements) {
    $.throwNoSuchMethod("", "removeAll", [receiver, elements], null);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f);
  },
  addAll$1: function(receiver, collection) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(collection).get$iterator(collection); t1.moveNext$0() === true;)
      this.add$1(receiver, t1.get$current());
  },
  addLast$1: function(receiver, value) {
    $.checkGrowable(receiver, "addLast");
    receiver.push(value);
  },
  clear$0: function(receiver) {
    this.set$length(receiver, 0);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(receiver, separator) {
    var list, i, t1;
    if (separator == null)
      separator = "";
    list = $.List_List(receiver.length);
    $.setRuntimeTypeInfo(list, []);
    for (i = 0; i < receiver.length; ++i) {
      t1 = $.S(receiver[i]);
      if (i >= list.length)
        throw $.ioore(i);
      list[i] = t1;
    }
    return list.join(separator);
  },
  getRange$2: function(receiver, start, length$) {
    var t1, end;
    if (0 === length$)
      return [];
    $.checkNull(start);
    $.checkNull(length$);
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    if (!(typeof length$ === "number" && Math.floor(length$) === length$))
      throw $.$$throw($.ArgumentError$(length$));
    t1 = length$ < 0;
    if (t1)
      throw $.$$throw($.ArgumentError$(length$));
    if (start < 0)
      throw $.$$throw($.RangeError$value(start));
    end = start + length$;
    if (end > receiver.length)
      throw $.$$throw($.RangeError$value(length$));
    if (t1)
      throw $.$$throw($.ArgumentError$(length$));
    return receiver.slice(start, end);
  },
  get$last: function(receiver) {
    var t1 = receiver.length;
    if (t1 > 0)
      return receiver[t1 - 1];
    throw $.$$throw($.StateError$("No elements"));
  },
  removeRange$2: function(receiver, start, length$) {
    var receiverLength, t1, t2;
    $.checkGrowable(receiver, "removeRange");
    if (length$ === 0)
      return;
    $.checkNull(start);
    $.checkNull(length$);
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    if (length$ < 0)
      throw $.$$throw($.ArgumentError$(length$));
    receiverLength = receiver.length;
    if (start < 0 || start >= receiverLength)
      throw $.$$throw($.RangeError$value(start));
    t1 = start + length$;
    if (t1 > receiverLength)
      throw $.$$throw($.RangeError$value(t1));
    t2 = receiverLength - length$;
    $.Arrays_copy(receiver, t1, receiver, start, t2 - start);
    this.set$length(receiver, t2);
  },
  sort$1: function(receiver, compare) {
    $.checkMutable(receiver, "sort");
    $.IterableMixinWorkaround_sortList(receiver, compare);
  },
  sort$0: function($receiver) {
    return this.sort$1($receiver, null);
  },
  indexOf$2: function(receiver, element, start) {
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    return $.Arrays_indexOf(receiver, element, start, receiver.length);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  contains$1: function(receiver, other) {
    var i;
    for (i = 0; i < receiver.length; ++i)
      if ($.eqB(other, receiver[i]))
        return true;
    return false;
  },
  get$contains: function(receiver) {
    return new $.BoundClosure0(this, "contains$1", receiver);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  toString$0: function(receiver) {
    return $.Collections_collectionToString(receiver);
  },
  toList$0: function(receiver) {
    var t1 = $.List_List$from(receiver, $.getRuntimeTypeInfo(receiver)[0]);
    $.setRuntimeTypeInfo(t1, [$.getRuntimeTypeInfo(receiver)[0]]);
    return t1;
  },
  toSet$0: function(receiver) {
    return $.Set_Set$from(receiver, $.getRuntimeTypeInfo(receiver)[0]);
  },
  get$iterator: function(receiver) {
    return $._ArrayIterator$(receiver);
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  set$length: function(receiver, newLength) {
    if (!(typeof newLength === "number" && Math.floor(newLength) === newLength))
      throw $.$$throw($.ArgumentError$(newLength));
    if (newLength < 0)
      throw $.$$throw($.RangeError$value(newLength));
    $.checkGrowable(receiver, "set length");
    receiver.length = newLength;
  },
  operator$index$1: function(receiver, index) {
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    return receiver[index];
  },
  operator$indexSet$2: function(receiver, index, value) {
    $.checkMutable(receiver, "indexed set");
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    receiver[index] = value;
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  }
};

$$._ArrayIterator = {"": "Object;_liblib2$_list,_liblib2$_position,_liblib2$_current",
  get$current: function() {
    return this._liblib2$_current;
  },
  moveNext$0: function() {
    var t1, nextPosition, length$;
    t1 = this._liblib2$_position;
    if (t1 !== (t1 | 0))
      return this.moveNext$0$bailout2(1, t1);
    nextPosition = t1 + 1;
    t1 = this._liblib2$_list;
    length$ = t1.length;
    if (nextPosition < length$) {
      this._liblib2$_position = nextPosition;
      if (nextPosition < 0 || nextPosition >= t1.length)
        throw $.ioore(nextPosition);
      this._liblib2$_current = t1[nextPosition];
      return true;
    }
    this._liblib2$_position = length$;
    this._liblib2$_current = null;
    return false;
  },
  moveNext$0$bailout2: function(state0, t1) {
    var nextPosition, length$;
    nextPosition = $.getInterceptor$JSNumber(t1).operator$add$1(t1, 1);
    t1 = this._liblib2$_list;
    length$ = t1.length;
    if ($.ltB(nextPosition, length$)) {
      this._liblib2$_position = nextPosition;
      if (nextPosition !== (nextPosition | 0))
        throw $.iae(nextPosition);
      if (nextPosition < 0 || nextPosition >= t1.length)
        throw $.ioore(nextPosition);
      this._liblib2$_current = t1[nextPosition];
      return true;
    }
    this._liblib2$_position = length$;
    this._liblib2$_current = null;
    return false;
  }
};

$$.JSNumber = {"": "Object;",
  compareTo$1: function(receiver, b) {
    var bIsNegative;
    if (!(typeof b === "number"))
      throw $.$$throw($.ArgumentError$(b));
    if (receiver < b)
      return -1;
    else if (receiver > b)
      return 1;
    else if (receiver === b) {
      if (receiver === 0) {
        bIsNegative = this.get$isNegative(b);
        if ($.eqB(this.get$isNegative(receiver), bIsNegative))
          return 0;
        if (this.get$isNegative(receiver) === true)
          return -1;
        return 1;
      }
      return 0;
    } else if (this.get$isNaN(receiver) === true) {
      if (this.get$isNaN(b) === true)
        return 0;
      return 1;
    } else
      return -1;
  },
  get$isNegative: function(receiver) {
    return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
  },
  get$isNaN: function(receiver) {
    return isNaN(receiver);
  },
  ceil$0: function(receiver) {
    return Math.ceil(receiver);
  },
  floor$0: function(receiver) {
    return Math.floor(receiver);
  },
  truncate$0: function(receiver) {
    return receiver < 0 ? this.ceil$0(receiver) : this.floor$0(receiver);
  },
  toString$0: function(receiver) {
    if (receiver === 0 && (1 / receiver) < 0)
      return "-0.0";
    else
      return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver & 0x1FFFFFFF;
  },
  operator$add$1: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver + other;
  },
  operator$sub$1: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver - other;
  },
  operator$mul$1: function(receiver, other) {
    return receiver * other;
  },
  operator$tdiv$1: function(receiver, other) {
    return this.truncate$0(receiver / other);
  },
  operator$shl$1: function(receiver, other) {
    if (other < 0)
      throw $.$$throw($.ArgumentError$(other));
    if (other > 31)
      return 0;
    return (receiver << other) >>> 0;
  },
  operator$and$1: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return (receiver & other) >>> 0;
  },
  operator$or$1: function(receiver, other) {
    return (receiver | other) >>> 0;
  },
  operator$xor$1: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return (receiver ^ other) >>> 0;
  }
};

$$.JSInt = {"": "JSNumber;"};

$$.JSDouble = {"": "JSNumber;"};

$$.JSString = {"": "Object;",
  charCodeAt$1: function(receiver, index) {
    if (index < 0)
      throw $.$$throw($.RangeError$value(index));
    if (index >= receiver.length)
      throw $.$$throw($.RangeError$value(index));
    return receiver.charCodeAt(index);
  },
  allMatches$1: function(receiver, str) {
    $.checkString(str);
    return $.allMatchesInStringUnchecked(receiver, str);
  },
  endsWith$1: function(receiver, other) {
    var otherLength, t1;
    $.checkString(other);
    otherLength = other.length;
    t1 = receiver.length;
    if (otherLength > t1)
      return false;
    return other === this.substring$1(receiver, t1 - otherLength);
  },
  replaceAll$2: function(receiver, from, to) {
    $.checkString(to);
    return $.stringReplaceAllUnchecked(receiver, from, to);
  },
  split$1: function(receiver, pattern) {
    $.checkNull(pattern);
    return receiver.split(pattern);
  },
  substring$2: function(receiver, startIndex, endIndex) {
    $.checkNum(startIndex);
    if (endIndex == null)
      endIndex = receiver.length;
    $.checkNum(endIndex);
    if ($.ltB(startIndex, 0))
      throw $.$$throw($.RangeError$value(startIndex));
    if ($.gtB(startIndex, endIndex))
      throw $.$$throw($.RangeError$value(startIndex));
    if ($.gtB(endIndex, receiver.length))
      throw $.$$throw($.RangeError$value(endIndex));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  toLowerCase$0: function(receiver) {
    return receiver.toLowerCase();
  },
  toUpperCase$0: function(receiver) {
    return receiver.toUpperCase();
  },
  trim$0: function(receiver) {
    return receiver.trim();
  },
  indexOf$2: function(receiver, other, start) {
    $.checkNull(other);
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    if (!(typeof other === "string"))
      throw $.$$throw($.ArgumentError$(other));
    if (start < 0)
      return -1;
    return receiver.indexOf(other, start);
  },
  indexOf$1: function($receiver, other) {
    return this.indexOf$2($receiver, other, 0);
  },
  contains$2: function(receiver, other, startIndex) {
    $.checkNull(other);
    return $.stringContainsUnchecked(receiver, other, startIndex);
  },
  contains$1: function($receiver, other) {
    return this.contains$2($receiver, other, 0);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure1(this, "contains$2", receiver);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  compareTo$1: function(receiver, other) {
    var t1;
    if (!(typeof other === "string"))
      throw $.$$throw($.ArgumentError$(other));
    if (receiver === other)
      t1 = 0;
    else
      t1 = receiver < other ? -1 : 1;
    return t1;
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$hashCode: function(receiver) {
    var hash, i, hash0, hash1;
    for (hash = 0, i = 0; i < receiver.length; ++i, hash = hash1) {
      hash0 = 536870911 & hash + receiver.charCodeAt(i);
      hash1 = 536870911 & hash0 + ((524287 & hash0) << 10 >>> 0);
      hash1 = hash1 ^ (hash1 >> 6);
    }
    hash0 = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash0 = hash0 ^ (hash0 >> 11);
    return 536870911 & hash0 + ((16383 & hash0) << 15 >>> 0);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  operator$index$1: function(receiver, index) {
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    return receiver[index];
  },
  is$String: true
};

$$._Manager = {"": "Object;nextIsolateId=,currentManagerId=,nextManagerId=,currentContext=,rootContext=,topEventLoop>,fromCommandLine>,isWorker>,supportsWorkers,isolates>,mainManager>,managers>",
  get$useWorkers: function() {
    return this.supportsWorkers;
  },
  get$needSerialization: function() {
    return this.get$useWorkers();
  },
  _nativeDetectEnvironment$0: function() {
    var t1, isWorkerDefined, t2;
    t1 = $.get$globalWindow() == null;
    isWorkerDefined = !($.get$globalWorker() == null);
    this.isWorker = t1 && $.get$globalPostMessageDefined() === true;
    if (this.isWorker !== true)
      t2 = isWorkerDefined && !($.get$IsolateNatives_thisScript() == null);
    else
      t2 = true;
    this.supportsWorkers = t2;
    this.fromCommandLine = t1 && this.isWorker !== true;
  },
  _nativeInitWorkerMessageHandler$0: function() {
    var function$ = function (e) { $.IsolateNatives__processWorkerMessage.call$2(this.mainManager, e); };
    $.get$globalThis().onmessage = function$;
    $.get$globalThis().dartPrint = function (object) {};
  },
  maybeCloseWorker$0: function() {
    if (this.isWorker === true) {
      var t1 = this.isolates;
      t1 = $.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1) === true && $.eqB(this.topEventLoop.get$activeTimerCount(), 0);
    } else
      t1 = false;
    if (t1)
      this.mainManager.postMessage$1($._serializeMessage($.makeLiteralMap(["command", "close"])));
  },
  _Manager$0: function() {
    this._nativeDetectEnvironment$0();
    this.topEventLoop = $._EventLoop$();
    this.isolates = $.Map_Map($.$int, $._IsolateContext);
    this.managers = $.Map_Map($.$int, $._ManagerStub);
    if (this.isWorker === true) {
      this.mainManager = $._MainManagerStub$();
      this._nativeInitWorkerMessageHandler$0();
    }
  }
};

$$._IsolateContext = {"": "Object;id=,ports>,isolateStatics",
  eval$1: function(code) {
    var old, result, t1;
    old = $globalState.get$currentContext();
    $globalState.set$currentContext(this);
    this._setGlobals$0();
    result = null;
    try {
      result = code.call$0();
    } finally {
      t1 = old;
      $globalState.set$currentContext(t1);
      if (!(old == null))
        old._setGlobals$0();
    }
    return result;
  },
  _setGlobals$0: function() {
    $ = this.isolateStatics;
  },
  lookup$1: function(portId) {
    var t1 = this.ports;
    return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, portId);
  },
  register$2: function(portId, port) {
    var t1, t2;
    if (this.ports.containsKey$1(portId) === true)
      throw $.$$throw($.Exception_Exception("Registry: ports must be registered only once."));
    t1 = this.ports;
    $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, portId, port);
    t1 = $globalState.get$isolates();
    t2 = this.id;
    $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, t2, this);
  },
  unregister$1: function(portId) {
    var t1, t2;
    t1 = this.ports;
    $.getInterceptor$JSArray(t1).remove$1(t1, portId);
    t1 = this.ports;
    if ($.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1) === true) {
      t1 = $globalState.get$isolates();
      t2 = this.id;
      $.getInterceptor$JSArray(t1).remove$1(t1, t2);
    }
  },
  _IsolateContext$0: function() {
    var t1, t2;
    t1 = $._globalState();
    t2 = t1.get$nextIsolateId();
    t1.set$nextIsolateId($.getInterceptor$JSNumber(t2).operator$add$1(t2, 1));
    this.id = t2;
    this.ports = $.Map_Map($.$int, $.ReceivePort);
    this.isolateStatics = new Isolate;
  }
};

$$._EventLoop = {"": "Object;events,activeTimerCount=",
  enqueue$3: function(isolate, fn, msg) {
    var t1, t2;
    t1 = this.events;
    t2 = $._IsolateEvent$(isolate, fn, msg);
    $.getInterceptor$JSArray(t1).addLast$1(t1, t2);
  },
  dequeue$0: function() {
    var t1 = this.events;
    if ($.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1) === true)
      return;
    return t1.removeFirst$0();
  },
  checkOpenReceivePortsFromCommandLine$0: function() {
    var t1, t2;
    if (!($globalState.get$rootContext() == null))
      if ($globalState.get$isolates().containsKey$1($globalState.get$rootContext().get$id()) === true)
        if ($globalState.get$fromCommandLine() === true) {
          t1 = $globalState.get$rootContext().get$ports();
          t2 = $.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1) === true;
          t1 = t2;
        } else
          t1 = false;
      else
        t1 = false;
    else
      t1 = false;
    if (t1)
      throw $.$$throw($.Exception_Exception("Program exited with open ReceivePorts."));
  },
  runIteration$0: function() {
    var event$ = this.dequeue$0();
    if (event$ == null) {
      this.checkOpenReceivePortsFromCommandLine$0();
      $globalState.maybeCloseWorker$0();
      return false;
    }
    event$.process$0();
    return true;
  },
  _runHelper$0: function() {
    if (!($.get$globalWindow() == null))
      new $._EventLoop__runHelper_next(this).call$0();
    else
      for (; this.runIteration$0() === true;)
        ;
  },
  run$0: function() {
    var e, trace, exception, t1;
    if ($globalState.get$isWorker() !== true)
      this._runHelper$0();
    else
      try {
        this._runHelper$0();
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        trace = $.getTraceFromException(exception);
        $globalState.get$mainManager().postMessage$1($._serializeMessage($.makeLiteralMap(["command", "error", "msg", $.S(e) + "\n" + $.S(trace)])));
      }

  }
};

$$._IsolateEvent = {"": "Object;isolate,fn,message>",
  process$0: function() {
    this.isolate.eval$1(this.fn);
  }
};

$$._MainManagerStub = {"": "Object;",
  get$id: function() {
    return 0;
  },
  set$id: function(i) {
    throw $.$$throw($.UnimplementedError$(null));
  },
  set$onmessage: function(f) {
    throw $.$$throw($.Exception_Exception("onmessage should not be set on MainManagerStub"));
  },
  postMessage$1: function(msg) {
    $.get$globalThis().postMessage(msg);
  },
  terminate$0: function() {
  }
};

$$._BaseSendPort = {"": "Object;_isolateId>",
  _checkReplyTo$1: function(replyTo) {
    if (!(replyTo == null) && !(typeof replyTo === "object" && replyTo !== null && !!replyTo.is$_NativeJsSendPort) && !(typeof replyTo === "object" && replyTo !== null && !!replyTo.is$_WorkerSendPort) && !(typeof replyTo === "object" && replyTo !== null && !!replyTo.is$_BufferingSendPort))
      throw $.$$throw($.Exception_Exception("SendPort.send: Illegal replyTo port type"));
  },
  call$1: function(message) {
    var completer, port;
    completer = $.Completer_Completer();
    port = $.ReceivePortImpl$();
    this.send$2(message, port.toSendPort$0());
    port.receive$1(new $._BaseSendPort_call_anon(completer, port));
    return completer.get$future();
  },
  is$Function: true,
  is$SendPort: true
};

$$._NativeJsSendPort = {"": "_BaseSendPort;_receivePort>,_isolateId",
  send$2: function(message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._NativeJsSendPort_send_anon(this, message, replyTo));
  },
  operator$eq$1: function(other) {
    return typeof other === "object" && other !== null && !!other.is$_NativeJsSendPort && $.eqB(this._receivePort, other._receivePort);
  },
  get$hashCode: function() {
    return this._receivePort.get$_id();
  },
  is$_NativeJsSendPort: true,
  is$SendPort: true
};

$$._WorkerSendPort = {"": "_BaseSendPort;_workerId>,_receivePortId,_isolateId",
  send$2: function(message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._WorkerSendPort_send_anon(this, message, replyTo));
  },
  operator$eq$1: function(other) {
    var t1;
    if (typeof other === "object" && other !== null && !!other.is$_WorkerSendPort)
      t1 = $.eqB(this._workerId, other._workerId) && $.eqB(this._isolateId, other._isolateId) && $.eqB(this._receivePortId, other._receivePortId);
    else
      t1 = false;
    return t1;
  },
  get$hashCode: function() {
    var t1, t2;
    t1 = this._workerId;
    t1 = $.getInterceptor$JSNumber(t1).operator$shl$1(t1, 16);
    t2 = this._isolateId;
    t2 = $.getInterceptor$JSNumber(t2).operator$shl$1(t2, 8);
    t2 = $.getInterceptor$JSNumber(t1).operator$xor$1(t1, t2);
    t1 = this._receivePortId;
    return $.getInterceptor$JSNumber(t2).operator$xor$1(t2, t1);
  },
  is$_WorkerSendPort: true,
  is$SendPort: true
};

$$.ReceivePortImpl = {"": "Object;_id>,_liblib6$_callback>",
  _liblib6$_callback$2: function(arg0, arg1) {
    return this._liblib6$_callback.call$2(arg0, arg1);
  },
  receive$1: function(onMessage) {
    this._liblib6$_callback = onMessage;
  },
  close$0: function() {
    this._liblib6$_callback = null;
    $globalState.get$currentContext().unregister$1(this._id);
  },
  toSendPort$0: function() {
    return $._NativeJsSendPort$(this, $globalState.get$currentContext().get$id());
  },
  ReceivePortImpl$0: function() {
    $._globalState().get$currentContext().register$2(this._id, this);
  }
};

$$._PendingSendPortFinder = {"": "_MessageTraverser;ports>,_visited",
  visitPrimitive$1: function(x) {
  },
  visitList$1: function(list) {
    var t1 = this._visited;
    if (!($.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, list) == null))
      return;
    t1 = this._visited;
    $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, list, true);
    t1 = new $._PendingSendPortFinder_visitList_anon(this);
    $.getInterceptor$JSArray(list).forEach$1(list, t1);
  },
  visitMap$1: function(map) {
    var t1, t2;
    t1 = this._visited;
    if (!($.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, map) == null))
      return;
    t1 = this._visited;
    $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, map, true);
    t1 = map.get$values();
    t2 = new $._PendingSendPortFinder_visitMap_anon(this);
    $.getInterceptor$JSArray(t1).forEach$1(t1, t2);
  },
  visitSendPort$1: function(port) {
    if (!!port.is$_BufferingSendPort && port._port == null)
      this.ports.push(port.get$_futurePort());
  },
  _PendingSendPortFinder$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._JsSerializer = {"": "_Serializer;_nextFreeRefId,_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!x.is$_NativeJsSendPort)
      return this.visitNativeJsSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.is$_WorkerSendPort)
      return ["sendport", x._workerId, x._isolateId, x._receivePortId];
    if (typeof x === "object" && x !== null && !!x.is$_BufferingSendPort)
      return this.visitBufferingSendPort$1(x);
    throw $.$$throw("Illegal underlying port " + $.S(x));
  },
  visitNativeJsSendPort$1: function(port) {
    return ["sendport", $globalState.get$currentManagerId(), port._isolateId, port._receivePort.get$_id()];
  },
  visitBufferingSendPort$1: function(port) {
    var t1 = port._port;
    if (!(t1 == null))
      return this.visitSendPort$1(t1);
    else
      throw $.$$throw("internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.");
  },
  _JsSerializer$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._JsCopier = {"": "_Copier;_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!x.is$_NativeJsSendPort)
      return this.visitNativeJsSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.is$_WorkerSendPort)
      return this.visitWorkerSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.is$_BufferingSendPort)
      return this.visitBufferingSendPort$1(x);
    throw $.$$throw("Illegal underlying port " + $.S(this.get$p()));
  },
  visitNativeJsSendPort$1: function(port) {
    return $._NativeJsSendPort$(port._receivePort, port._isolateId);
  },
  visitWorkerSendPort$1: function(port) {
    return $._WorkerSendPort$(port._workerId, port._isolateId, port._receivePortId);
  },
  visitBufferingSendPort$1: function(port) {
    var t1 = port._port;
    if (!(t1 == null))
      return this.visitSendPort$1(t1);
    else
      throw $.$$throw("internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.");
  },
  _JsCopier$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._JsDeserializer = {"": "_Deserializer;_deserialized",
  deserializeSendPort$1: function(x) {
    var t1, managerId, isolateId, receivePortId, isolate, receivePort;
    t1 = $.getInterceptor$JSStringJSArray(x);
    managerId = t1.operator$index$1(x, 1);
    isolateId = t1.operator$index$1(x, 2);
    receivePortId = t1.operator$index$1(x, 3);
    if ($.eqB(managerId, $globalState.get$currentManagerId())) {
      t1 = $globalState.get$isolates();
      isolate = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, isolateId);
      if (isolate == null)
        return;
      receivePort = isolate.lookup$1(receivePortId);
      if (receivePort == null)
        return;
      return $._NativeJsSendPort$(receivePort, isolateId);
    } else
      return $._WorkerSendPort$(managerId, isolateId, receivePortId);
  }
};

$$._JsVisitedMap = {"": "Object;tagged",
  operator$index$1: function(object) {
    return object['__MessageTraverser__attached_info__'];
  },
  operator$indexSet$2: function(object, info) {
    var t1 = this.tagged;
    $.getInterceptor$JSArray(t1).add$1(t1, object);
    object['__MessageTraverser__attached_info__'] = info;
  },
  reset$0: function() {
    var t1 = $.List_List(0);
    $.setRuntimeTypeInfo(t1, []);
    this.tagged = t1;
  },
  cleanup$0: function() {
    var t1, length$, i;
    t1 = this.tagged;
    length$ = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
    if (typeof length$ !== "number")
      return this.cleanup$0$bailout(1, length$);
    i = 0;
    for (; i < length$; ++i) {
      t1 = this.tagged;
      $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, i)['__MessageTraverser__attached_info__'] = null;
    }
    this.tagged = null;
  },
  cleanup$0$bailout: function(state0, length$) {
    var i, t1;
    i = 0;
    for (; $.ltB(i, length$); ++i) {
      t1 = this.tagged;
      $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, i)['__MessageTraverser__attached_info__'] = null;
    }
    this.tagged = null;
  }
};

$$._MessageTraverserVisitedMap = {"": "Object;",
  operator$index$1: function(object) {
    return;
  },
  operator$indexSet$2: function(object, info) {
  },
  reset$0: function() {
  },
  cleanup$0: function() {
  }
};

$$._MessageTraverser = {"": "Object;",
  traverse$1: function(x) {
    var result, t1;
    t1 = x;
    if (t1 == null || typeof t1 === "string" || typeof t1 === "number" || typeof t1 === "boolean")
      return this.visitPrimitive$1(x);
    this._visited.reset$0();
    result = null;
    try {
      result = this._dispatch$1(x);
    } finally {
      this._visited.cleanup$0();
    }
    return result;
  },
  _dispatch$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || x.is$List()))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && x.is$Map())
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!x.is$SendPort)
      return this.visitSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.is$SendPortSync)
      return this.visitSendPortSync$1(x);
    return this.visitObject$1(x);
  },
  visitObject$1: function(x) {
    throw $.$$throw("Message serialization: Illegal value " + $.S(x) + " passed");
  }
};

$$._Copier = {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copy, len, i;
    if (typeof list !== "object" || list === null || list.constructor !== Array && !list.is$JavaScriptIndexingBehavior())
      return this.visitList$1$bailout(1, list);
    t1 = this._visited;
    copy = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, list);
    if (!(copy == null))
      return copy;
    len = list.length;
    copy = $.List_List(len);
    $.setRuntimeTypeInfo(copy, []);
    t1 = this._visited;
    $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, list, copy);
    for (i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      t1 = this._dispatch$1(list[i]);
      if (i >= copy.length)
        throw $.ioore(i);
      copy[i] = t1;
    }
    return copy;
  },
  visitList$1$bailout: function(state0, env0, env1, env2) {
    switch (state0) {
      case 1:
        list = env0;
        break;
      case 2:
        len = env2;
        list = env1;
        t1 = env0;
        break;
    }
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this._visited;
        copy = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, list);
        if (!(copy == null))
          return copy;
        t1 = $.getInterceptor$JSStringJSArray(list);
        len = t1.get$length(list);
      case 2:
        var list, t1, copy, len, t3, i, t2;
        state0 = 0;
        copy = $.List_List(len);
        $.setRuntimeTypeInfo(copy, []);
        t3 = this._visited;
        $.getInterceptor$JSArray(t3).operator$indexSet$2(t3, list, copy);
        for (i = 0; $.ltB(i, len); ++i) {
          t2 = this._dispatch$1(t1.operator$index$1(list, i));
          if (i >= copy.length)
            throw $.ioore(i);
          copy[i] = t2;
        }
        return copy;
    }
  },
  visitMap$1: function(map) {
    var t1, t2, t3;
    t1 = {};
    t2 = this._visited;
    t1.copy_0 = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, map);
    t2 = t1.copy_0;
    if (!(t2 == null))
      return t2;
    t1.copy_0 = $.Map_Map();
    t2 = this._visited;
    t3 = t1.copy_0;
    $.getInterceptor$JSArray(t2).operator$indexSet$2(t2, map, t3);
    map.forEach$1(new $._Copier_visitMap_anon(t1, this));
    return t1.copy_0;
  }
};

$$._Serializer = {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, list);
    if (!(copyId == null))
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, list, id);
    return ["list", id, this._serializeList$1(list)];
  },
  visitMap$1: function(map) {
    var t1, copyId, id, keys, t2;
    t1 = this._visited;
    copyId = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, map);
    if (!(copyId == null))
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, map, id);
    t1 = map.get$keys();
    keys = this._serializeList$1($.getInterceptor$JSArray(t1).toList$0(t1));
    t2 = map.get$values();
    return ["map", id, keys, this._serializeList$1($.getInterceptor$JSArray(t2).toList$0(t2))];
  },
  _serializeList$1: function(list) {
    var len, result, i, t1;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !list.is$JavaScriptIndexingBehavior()))
      return this._serializeList$1$bailout(1, list);
    len = list.length;
    result = $.List_List(len);
    $.setRuntimeTypeInfo(result, []);
    for (i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      t1 = this._dispatch$1(list[i]);
      if (i >= result.length)
        throw $.ioore(i);
      result[i] = t1;
    }
    return result;
  },
  _serializeList$1$bailout: function(state0, env0, env1, env2) {
    switch (state0) {
      case 1:
        list = env0;
        break;
      case 2:
        len = env2;
        t1 = env1;
        list = env0;
        break;
    }
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor$JSStringJSArray(list);
        len = t1.get$length(list);
      case 2:
        var list, t1, len, result, i, t2;
        state0 = 0;
        result = $.List_List(len);
        $.setRuntimeTypeInfo(result, []);
        for (i = 0; $.ltB(i, len); ++i) {
          t2 = this._dispatch$1(t1.operator$index$1(list, i));
          if (i >= result.length)
            throw $.ioore(i);
          result[i] = t2;
        }
        return result;
    }
  }
};

$$._Deserializer = {"": "Object;",
  deserialize$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    this._deserialized = $.HashMap_HashMap();
    return this._deserializeHelper$1(x);
  },
  _deserializeHelper$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    switch ($.getInterceptor$JSStringJSArray(x).operator$index$1(x, 0)) {
      case "ref":
        return this._deserializeRef$1(x);
      case "list":
        return this._deserializeList$1(x);
      case "map":
        return this._deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      default:
        return this.deserializeObject$1(x);
    }
  },
  _deserializeRef$1: function(x) {
    var id, t1;
    id = $.getInterceptor$JSStringJSArray(x).operator$index$1(x, 1);
    t1 = this._deserialized;
    return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, id);
  },
  _deserializeList$1: function(x) {
    var t1, id, dartList, t2, len, i;
    t1 = $.getInterceptor$JSStringJSArray(x);
    id = t1.operator$index$1(x, 1);
    dartList = t1.operator$index$1(x, 2);
    if (typeof dartList !== "object" || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !dartList.is$JavaScriptIndexingBehavior())
      return this._deserializeList$1$bailout(1, dartList, id);
    t2 = this._deserialized;
    $.getInterceptor$JSArray(t2).operator$indexSet$2(t2, id, dartList);
    len = dartList.length;
    for (i = 0; i < len; ++i) {
      if (i >= dartList.length)
        throw $.ioore(i);
      t1 = this._deserializeHelper$1(dartList[i]);
      if (i >= dartList.length)
        throw $.ioore(i);
      dartList[i] = t1;
    }
    return dartList;
  },
  _deserializeList$1$bailout: function(state0, env0, env1, env2) {
    switch (state0) {
      case 1:
        id = env1;
        dartList = env0;
        break;
      case 2:
        len = env2;
        t2 = env1;
        dartList = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$JSStringJSArray(x);
        id = t1.operator$index$1(x, 1);
        dartList = t1.operator$index$1(x, 2);
      case 1:
        state0 = 0;
        t2 = this._deserialized;
        $.getInterceptor$JSArray(t2).operator$indexSet$2(t2, id, dartList);
        t2 = $.getInterceptor$JSStringJSArray(dartList);
        len = t2.get$length(dartList);
      case 2:
        var t1, id, dartList, t2, len, i;
        state0 = 0;
        for (i = 0; $.ltB(i, len); ++i)
          t2.operator$indexSet$2(dartList, i, this._deserializeHelper$1(t2.operator$index$1(dartList, i)));
        return dartList;
    }
  },
  _deserializeMap$1: function(x) {
    var result, t1, id, t2, keys, values, len, i, key;
    result = $.Map_Map();
    t1 = $.getInterceptor$JSStringJSArray(x);
    id = t1.operator$index$1(x, 1);
    t2 = this._deserialized;
    $.getInterceptor$JSArray(t2).operator$indexSet$2(t2, id, result);
    keys = t1.operator$index$1(x, 2);
    if (typeof keys !== "string" && (typeof keys !== "object" || keys === null || keys.constructor !== Array && !keys.is$JavaScriptIndexingBehavior()))
      return this._deserializeMap$1$bailout(1, x, result, keys, t1);
    values = t1.operator$index$1(x, 3);
    if (typeof values !== "string" && (typeof values !== "object" || values === null || values.constructor !== Array && !values.is$JavaScriptIndexingBehavior()))
      return this._deserializeMap$1$bailout(2, values, result, keys);
    len = keys.length;
    for (t1 = $.getInterceptor$JSArray(result), i = 0; i < len; ++i) {
      if (i >= keys.length)
        throw $.ioore(i);
      key = this._deserializeHelper$1(keys[i]);
      if (i >= values.length)
        throw $.ioore(i);
      t1.operator$indexSet$2(result, key, this._deserializeHelper$1(values[i]));
    }
    return result;
  },
  _deserializeMap$1$bailout: function(state0, env0, env1, env2, env3, env4) {
    switch (state0) {
      case 1:
        t1 = env3;
        keys = env2;
        result = env1;
        x = env0;
        break;
      case 2:
        keys = env2;
        result = env1;
        values = env0;
        break;
      case 3:
        keys = env4;
        result = env3;
        len = env2;
        t3 = env1;
        values = env0;
        break;
    }
    switch (state0) {
      case 0:
        result = $.Map_Map();
        t1 = $.getInterceptor$JSStringJSArray(x);
        id = t1.operator$index$1(x, 1);
        t2 = this._deserialized;
        $.getInterceptor$JSArray(t2).operator$indexSet$2(t2, id, result);
        keys = t1.operator$index$1(x, 2);
      case 1:
        state0 = 0;
        values = t1.operator$index$1(x, 3);
      case 2:
        state0 = 0;
        t3 = $.getInterceptor$JSStringJSArray(keys);
        len = t3.get$length(keys);
      case 3:
        var result, t1, id, t2, keys, x, values, t3, len, i;
        state0 = 0;
        for (t1 = $.getInterceptor$JSStringJSArray(values), t2 = $.getInterceptor$JSArray(result), i = 0; $.ltB(i, len); ++i)
          t2.operator$indexSet$2(result, this._deserializeHelper$1(t3.operator$index$1(keys, i)), this._deserializeHelper$1(t1.operator$index$1(values, i)));
        return result;
    }
  },
  deserializeObject$1: function(x) {
    throw $.$$throw("Unexpected serialized object");
  }
};

$$.TimerImpl = {"": "Object;_once,_inEventLoop,_handle<",
  TimerImpl$2: function(milliseconds, callback) {
    var t1, t2;
    if ($.eqB(milliseconds, 0))
      t1 = !$.hasTimer() || $._globalState().get$isWorker() === true;
    else
      t1 = false;
    if (t1) {
      $._globalState().get$topEventLoop().enqueue$3($._globalState().get$currentContext(), new $.anon(this, callback), "timer");
      this._inEventLoop = true;
    } else if ($.hasTimer()) {
      t1 = $._globalState().get$topEventLoop();
      t2 = t1.get$activeTimerCount();
      t1.set$activeTimerCount($.getInterceptor$JSNumber(t2).operator$add$1(t2, 1));
      t1 = new $.internalCallback(this, callback);
      this._handle = $.get$globalThis().setTimeout($.convertDartClosureToJS(t1, 0), milliseconds);
    } else
      throw $.$$throw($.UnsupportedError$("Timer greater than 0."));
  }
};

$$.AsyncError = {"": "Object;error>,stackTrace>,cause>",
  _writeOn$1: function(buffer) {
    var message, t1, t2, exception;
    t1 = $.getInterceptor$JSArray(buffer);
    t1.add$1(buffer, "'");
    message = null;
    try {
      t2 = this.error;
      message = $.getInterceptor(t2).toString$0(t2);
    } catch (exception) {
      $.unwrapException(exception);
      message = $.Error_safeToString(this.error);
    }

    t1.add$1(buffer, message);
    t1.add$1(buffer, "'\n");
    t2 = this.stackTrace;
    if (!(t2 == null)) {
      t1.add$1(buffer, "Stack trace:\n");
      t1.add$1(buffer, $.getInterceptor(t2).toString$0(t2));
      t1.add$1(buffer, "\n");
    }
  },
  toString$0: function() {
    var buffer, t1, cause;
    buffer = $.StringBuffer_StringBuffer("");
    t1 = $.getInterceptor$JSArray(buffer);
    t1.add$1(buffer, "AsyncError: ");
    this._writeOn$1(buffer);
    cause = this.cause;
    for (; !(cause == null);) {
      t1.add$1(buffer, "Caused by: ");
      cause._writeOn$1(buffer);
      cause = cause.get$cause();
    }
    return t1.toString$0(buffer);
  },
  is$AsyncError: true
};

$$._CompleterImpl = {"": "Object;future>,_isComplete>",
  complete$1: function(value) {
    if (this._isComplete)
      throw $.$$throw($.StateError$("Future already completed"));
    this._isComplete = true;
    this.future._setValue$1(value);
  },
  completeError$2: function(error, stackTrace) {
    var asyncError;
    if (this._isComplete)
      throw $.$$throw($.StateError$("Future already completed"));
    this._isComplete = true;
    asyncError = typeof error === "object" && error !== null && !!error.is$AsyncError ? error : $.AsyncError$(error, stackTrace);
    this.future._setError$1(asyncError);
  },
  completeError$1: function(error) {
    return this.completeError$2(error, null);
  }
};

$$._FutureListenerWrapper = {"": "Object;future>,_nextListener=",
  _sendValue$1: function(value) {
    this.future._setValue$1(value);
  },
  _sendError$1: function(error) {
    this.future._setError$1(error);
  }
};

$$._FutureImpl = {"": "Object;_state,_resultOrListeners>",
  get$_isComplete: function() {
    return !$.eqB(this._state, 0);
  },
  get$_hasValue: function() {
    return $.eq(this._state, 1);
  },
  get$_hasError: function() {
    var t1 = this._state;
    return !$.eqB($.getInterceptor$JSNumber(t1).operator$and$1(t1, 2), 0);
  },
  get$_hasUnhandledError: function() {
    var t1 = this._state;
    return !$.eqB($.getInterceptor$JSNumber(t1).operator$and$1(t1, 4), 0);
  },
  _clearUnhandledError$0: function() {
    var t1 = this._state;
    this._state = $.getInterceptor$JSNumber(t1).operator$and$1(t1, 4294967291);
  },
  then$2$onError: function(f, onError) {
    var t1;
    if (this.get$_isComplete() !== true) {
      if (onError == null) {
        t1 = $._ThenFuture$(f);
        t1._subscribeTo$1(this);
        return t1;
      }
      t1 = $._SubscribeFuture$(f, onError);
      t1._subscribeTo$1(this);
      return t1;
    }
    if (this.get$_hasError() === true) {
      if (!(onError == null))
        return this._handleError$2(onError, null);
      return $._FutureWrapper$(this);
    } else
      return this._handleValue$1(f);
  },
  then$1: function(f) {
    return this.then$2$onError(f, null);
  },
  catchError$2$test: function(f, test) {
    var t1;
    if (this.get$_hasValue() === true)
      return $._FutureWrapper$(this);
    if (this.get$_isComplete() !== true) {
      t1 = $._CatchErrorFuture$(f, test);
      t1._subscribeTo$1(this);
      return t1;
    } else
      return this._handleError$2(f, test);
  },
  catchError$1: function(f) {
    return this.catchError$2$test(f, null);
  },
  _handleValue$1: function(onValue) {
    var thenFuture = $._ThenFuture$(onValue);
    $.Timer_Timer(0, new $._FutureImpl__handleValue_anon(thenFuture, this._resultOrListeners));
    return thenFuture;
  },
  _handleError$2: function(onError, test) {
    var error, errorFuture;
    this._clearUnhandledError$0();
    error = this._resultOrListeners;
    errorFuture = $._CatchErrorFuture$(onError, test);
    $.Timer_Timer(0, new $._FutureImpl__handleError_anon(error, errorFuture));
    return errorFuture;
  },
  _setValue$1: function(value) {
    var listeners, listeners0;
    if (this.get$_isComplete() === true)
      throw $.$$throw($.StateError$("Future already completed"));
    listeners = this._removeListeners$0();
    this._state = 1;
    this._resultOrListeners = value;
    for (; !(listeners == null); listeners = listeners0) {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendValue$1(value);
    }
  },
  get$_setValue: function() {
    return new $.BoundClosure(this, "_setValue$1");
  },
  _setError$1: function(error) {
    var listeners, listeners0;
    if (this.get$_isComplete() === true)
      throw $.$$throw($.StateError$("Future already completed"));
    listeners = this._removeListeners$0();
    this._state = 2;
    this._resultOrListeners = error;
    if (listeners == null) {
      this._scheduleUnhandledError$0();
      return;
    }
    do {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendError$1(error);
      if (!(listeners0 == null)) {
        listeners = listeners0;
        continue;
      } else
        break;
    } while (true);
  },
  get$_setError: function() {
    return new $.BoundClosure(this, "_setError$1");
  },
  _scheduleUnhandledError$0: function() {
    var t1 = this._state;
    this._state = $.getInterceptor$JSNumber(t1).operator$or$1(t1, 4);
    $.Timer_Timer(0, new $._FutureImpl__scheduleUnhandledError_anon(this));
  },
  _addListener$1: function(listener) {
    listener.set$_nextListener(this._resultOrListeners);
    this._resultOrListeners = listener;
  },
  _removeListeners$0: function() {
    var current, prev, next;
    current = this._resultOrListeners;
    this._resultOrListeners = null;
    for (prev = null; !(current == null); prev = current, current = next) {
      next = current.get$_nextListener();
      current.set$_nextListener(prev);
    }
    return prev;
  },
  _chain$1: function(future) {
    var t1, t2;
    if (this.get$_isComplete() !== true)
      this._addListener$1(future._asListener$0());
    else {
      t1 = this.get$_hasValue() === true;
      t2 = this._resultOrListeners;
      if (t1)
        future._setValue$1(t2);
      else
        future._setError$1(t2);
    }
  },
  _asListener$0: function() {
    return $._FutureListener__FutureListener$wrap(this);
  },
  _FutureImpl$immediate$1: function(value) {
    this._state = 1;
    this._resultOrListeners = value;
  },
  is$_FutureImpl: true,
  is$Future: true
};

$$._TransformFuture = {"": "_FutureImpl;_nextListener=",
  _subscribeTo$1: function(future) {
    future._addListener$1(this);
  },
  _setOrChainValue$1: function(result) {
    if (typeof result === "object" && result !== null && !!result.is$Future)
      if (!!result.is$_FutureImpl) {
        result._chain$1(this);
        return;
      } else {
        result.then$2$onError(this.get$_setValue(), this.get$_setError());
        return;
      }
    else
      this._setValue$1(result);
  }
};

$$._ThenFuture = {"": "_TransformFuture;_onValue,_nextListener,_state,_resultOrListeners",
  _onValue$1: function(arg0) {
    return this._onValue.call$1(arg0);
  },
  _sendValue$1: function(value) {
    var result, e, e0, s, exception, t1;
    result = null;
    try {
      result = this._onValue$1(value);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.is$AsyncError) {
        e = t1;
        this._setError$1(e);
        return;
      } else {
        e0 = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$(e0, s));
        return;
      }
    }

    this._setOrChainValue$1(result);
  },
  _sendError$1: function(error) {
    this._setError$1(error);
  }
};

$$._CatchErrorFuture = {"": "_TransformFuture;_test,_onError,_nextListener,_state,_resultOrListeners",
  _test$1: function(arg0) {
    return this._test.call$1(arg0);
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _sendValue$1: function(value) {
    this._setValue$1(value);
  },
  _sendError$1: function(error) {
    var matchesTest, e, s, result, e0, e1, s0, exception, t1;
    if (!(this._test == null)) {
      matchesTest = null;
      try {
        matchesTest = this._test$1(error.get$error());
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$withCause(e, s, error));
        return;
      }

      if (matchesTest !== true) {
        this._setError$1(error);
        return;
      }
    }
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.is$AsyncError) {
        e0 = t1;
        this._setError$1(e0);
        return;
      } else {
        e1 = t1;
        s0 = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$withCause(e1, s0, error));
        return;
      }
    }

    this._setOrChainValue$1(result);
  }
};

$$._SubscribeFuture = {"": "_ThenFuture;_onError,_onValue,_nextListener,_state,_resultOrListeners",
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _sendError$1: function(error) {
    var result, e, e0, s, exception, t1;
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.is$AsyncError) {
        e = t1;
        this._setError$1(e);
        return;
      } else {
        e0 = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$withCause(e0, s, error));
        return;
      }
    }

    this._setOrChainValue$1(result);
  }
};

$$._FutureWrapper = {"": "Object;_future",
  then$2$onError: function(function$, onError) {
    return this._future.then$2$onError(function$, onError);
  },
  then$1: function(function$) {
    return this.then$2$onError(function$, null);
  },
  catchError$2$test: function(function$, test) {
    return this._future.catchError$2$test(function$, test);
  },
  catchError$1: function(function$) {
    return this.catchError$2$test(function$, null);
  },
  is$Future: true
};

$$.ExampleData = {"": "Object;",
  get$autocompleteChoices: function() {
    var t1 = ["Test 1", "Test 2", "Misc", "Abcdef", "Haha", "Lorem Ipsum", "Testing 3"];
    $.CONSTANT0.sort$0(t1);
    return t1;
  }
};

$$.ExampleDatasource = {"": "SimpleStringDatasource;_givenChoices,_choices",
  query$1: function(query) {
    var completer, future;
    completer = $.Completer_Completer();
    future = $.SimpleStringDatasource.prototype.query$1.call(this, query);
    window.setTimeout$2(new $.ExampleDatasource_query_anon(completer, future), 1000);
    return completer.get$future();
  }
};

$$.BodyElementEvents = {"": "ElementEvents;_ptr",
  get$blur: function() {
    return this.operator$index$1("blur");
  },
  blur$0: function() {
    return this.get$blur().call$0();
  },
  get$error: function() {
    return this.operator$index$1("error");
  },
  get$focus: function() {
    return this.operator$index$1("focus");
  },
  focus$0: function() {
    return this.get$focus().call$0();
  },
  get$message: function() {
    return this.operator$index$1("message");
  }
};

$$.DocumentEvents = {"": "ElementEvents;_ptr"};

$$._FrozenCssClassSet = {"": "CssClassSet;",
  writeClasses$1: function(s) {
    throw $.$$throw($.UnsupportedError$("frozen class set cannot be modified"));
  },
  readClasses$0: function() {
    return $.Set_Set($.String);
  }
};

$$._ChildrenElementList = {"": "Object;_liblib$_element,_childElements",
  toList$0: function() {
    var t1, t3, output, len, i, t2;
    t1 = this._childElements;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this.toList$0$bailout(1, t1);
    t3 = t1.length;
    output = $.List_List$fixedLength(t3, null, $.Element);
    $.setRuntimeTypeInfo(output, [$.Element]);
    for (len = t1.length, i = 0; i < len; ++i) {
      t2 = t1[i];
      if (i >= t3)
        throw $.ioore(i);
      output[i] = t2;
    }
    return output;
  },
  toList$0$bailout: function(state0, env0, env1, env2, env3) {
    switch (state0) {
      case 1:
        t1 = env0;
        break;
      case 2:
        t1 = env3;
        t3 = env2;
        len = env1;
        output = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = this._childElements;
      case 1:
        state0 = 0;
        t3 = $.getInterceptor$JSStringJSArray(t1);
        output = $.List_List$fixedLength(t3.get$length(t1), null, $.Element);
        $.setRuntimeTypeInfo(output, [$.Element]);
        len = t3.get$length(t1);
      case 2:
        var t1, t3, output, len, i, t2;
        state0 = 0;
        i = 0;
        for (; $.ltB(i, len); ++i) {
          t2 = t3.operator$index$1(t1, i);
          if (i >= output.length)
            throw $.ioore(i);
          output[i] = t2;
        }
        return output;
    }
  },
  toSet$0: function() {
    var output, t1, len, t3, i;
    output = $.Set_Set($.Element);
    t1 = this._childElements;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this.toSet$0$bailout(1, output, t1);
    len = t1.length;
    t3 = $.getInterceptor$JSArray(output);
    i = 0;
    for (; i < len; ++i) {
      if (i >= t1.length)
        throw $.ioore(i);
      t3.add$1(output, t1[i]);
    }
    return output;
  },
  toSet$0$bailout: function(state0, env0, env1, env2, env3) {
    switch (state0) {
      case 1:
        t1 = env1;
        output = env0;
        break;
      case 2:
        t1 = env3;
        output = env2;
        len = env1;
        t3 = env0;
        break;
    }
    switch (state0) {
      case 0:
        output = $.Set_Set($.Element);
        t1 = this._childElements;
      case 1:
        state0 = 0;
        t3 = $.getInterceptor$JSStringJSArray(t1);
        len = t3.get$length(t1);
      case 2:
        var output, t1, t3, len, t5, i;
        state0 = 0;
        t5 = $.getInterceptor$JSArray(output);
        i = 0;
        for (; $.ltB(i, len); ++i)
          t5.add$1(output, t3.operator$index$1(t1, i));
        return output;
    }
  },
  contains$1: function(element) {
    var t1 = this._childElements;
    return $.getInterceptor$JSStringJSArray(t1).contains$1(t1, element);
  },
  get$contains: function() {
    return new $.BoundClosure(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = this._childElements, t1 = $.getInterceptor$JSArray(t1).get$iterator(t1); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  get$isEmpty: function() {
    return this._liblib$_element.firstElementChild == null;
  },
  get$length: function() {
    var t1 = this._childElements;
    return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
  },
  operator$index$1: function(index) {
    var t1 = this._childElements;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this.operator$index$1$bailout2(1, t1, index);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  operator$index$1$bailout2: function(state0, t1, index) {
    return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, index);
  },
  operator$indexSet$2: function(index, value) {
    var t1, t2;
    t1 = this._liblib$_element;
    t2 = this._childElements;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
      return this.operator$indexSet$2$bailout1(1, index, value, t1, t2);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t2.length)
      throw $.ioore(index);
    t1.$$dom_replaceChild$2(value, t2[index]);
  },
  operator$indexSet$2$bailout1: function(state0, index, value, t1, t2) {
    t1.$$dom_replaceChild$2(value, $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, index));
  },
  set$length: function(newLength) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  add$1: function(value) {
    this._liblib$_element.$$dom_appendChild$1(value);
    return value;
  },
  addLast$1: function(value) {
    this._liblib$_element.$$dom_appendChild$1(value);
    return value;
  },
  get$iterator: function() {
    var t1 = this.toList$0();
    return $.getInterceptor$JSArray(t1).get$iterator(t1);
  },
  addAll$1: function(iterable) {
    var t1, t2;
    for (t1 = $.getInterceptor$JSArray(iterable).get$iterator(iterable), t2 = this._liblib$_element; t1.moveNext$0() === true;)
      t2.$$dom_appendChild$1(t1.get$current());
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("TODO(jacobr): should we impl?"));
  },
  sort$0: function() {
    return this.sort$1(null);
  },
  remove$1: function(object) {
    if (typeof object === "object" && object !== null && object.is$Element())
      if (object.parentNode === this)
        this._liblib$_element.$$dom_removeChild$1(object);
  },
  removeAll$1: function(elements) {
    $.throwNoSuchMethod("", "removeAll", [this, elements], null);
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnimplementedError$(null));
  },
  getRange$2: function(start, rangeLength) {
    return $._FrozenElementList$_wrap($.Lists_getRange(this, start, rangeLength, []));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  clear$0: function() {
    this._liblib$_element.textContent = "";
  },
  removeLast$0: function() {
    var result = $.getInterceptor$JSArray(this).get$last(this);
    if (!(result == null))
      this._liblib$_element.$$dom_removeChild$1(result);
    return result;
  },
  get$last: function() {
    var result = this._liblib$_element.lastElementChild;
    if (result == null)
      throw $.$$throw($.StateError$("No elements"));
    return result;
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  }
};

$$._FrozenElementList = {"": "Object;_nodeList",
  contains$1: function(element) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      if ($.eqB(t1.get$current(), element))
        return true;
    return false;
  },
  get$contains: function() {
    return new $.BoundClosure(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.Element);
    $.setRuntimeTypeInfo(t1, [$.Element]);
    return t1;
  },
  toSet$0: function() {
    return $.Set_Set$from(this, $.Element);
  },
  get$isEmpty: function() {
    var t1 = this._nodeList;
    return $.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1);
  },
  get$length: function() {
    var t1 = this._nodeList;
    return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
  },
  operator$index$1: function(index) {
    var t1 = this._nodeList;
    return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, index);
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  set$length: function(newLength) {
    var t1 = this._nodeList;
    $.getInterceptor$JSArray(t1).set$length(t1, newLength);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  get$iterator: function() {
    return $._FrozenElementListIterator$(this);
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  sort$0: function() {
    return this.sort$1(null);
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  getRange$2: function(start, rangeLength) {
    var t1 = this._nodeList;
    return $._FrozenElementList$_wrap($.getInterceptor$JSArray(t1).getRange$2(t1, start, rangeLength));
  },
  indexOf$2: function(element, start) {
    var t1 = this._nodeList;
    return $.getInterceptor$JSStringJSArray(t1).indexOf$2(t1, element, start);
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$(""));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$(""));
  },
  remove$1: function(element) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  get$last: function() {
    var t1 = this._nodeList;
    return $.getInterceptor$JSArray(t1).get$last(t1);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  }
};

$$._FrozenElementListIterator = {"": "Object;_list,_index,_current",
  moveNext$0: function() {
    var t1, nextIndex, t2, t3;
    t1 = this._index;
    if (typeof t1 !== "number")
      return this.moveNext$0$bailout0(1, t1);
    nextIndex = t1 + 1;
    t1 = this._list;
    t2 = $.getInterceptor$JSStringJSArray(t1);
    t3 = t2.get$length(t1);
    if (typeof t3 !== "number")
      return this.moveNext$0$bailout0(2, t1, t2, t3, nextIndex);
    if (nextIndex < t3) {
      this._current = t1.operator$index$1(nextIndex);
      this._index = nextIndex;
      return true;
    }
    this._index = t2.get$length(t1);
    this._current = null;
    return false;
  },
  moveNext$0$bailout0: function(state0, env0, env1, env2, env3) {
    switch (state0) {
      case 1:
        t1 = env0;
        break;
      case 2:
        nextIndex = env3;
        t3 = env2;
        t2 = env1;
        t1 = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = this._index;
      case 1:
        state0 = 0;
        nextIndex = $.getInterceptor$JSNumber(t1).operator$add$1(t1, 1);
        t1 = this._list;
        t2 = $.getInterceptor$JSStringJSArray(t1);
        t3 = t2.get$length(t1);
      case 2:
        var t1, nextIndex, t2, t3;
        state0 = 0;
        if ($.ltB(nextIndex, t3)) {
          this._current = t1.operator$index$1(nextIndex);
          this._index = nextIndex;
          return true;
        }
        this._index = t2.get$length(t1);
        this._current = null;
        return false;
    }
  },
  get$current: function() {
    return this._current;
  }
};

$$._ElementCssClassSet = {"": "CssClassSet;_liblib$_element",
  readClasses$0: function() {
    var s, classname, t1, t2, t3, trimmed;
    s = $.Set_Set($.String);
    classname = this._liblib$_element.className;
    for (t1 = $.getInterceptor$JSString(classname).split$1(classname, " "), t1 = $.getInterceptor$JSArray(t1).get$iterator(t1), t2 = $.getInterceptor$JSArray(s); t1.moveNext$0() === true;) {
      t3 = t1.get$current();
      trimmed = $.getInterceptor$JSString(t3).trim$0(t3);
      if ($.getInterceptor$JSStringJSArray(trimmed).get$isEmpty(trimmed) !== true)
        t2.add$1(s, trimmed);
    }
    return s;
  },
  writeClasses$1: function(s) {
    var t1;
    $.setRuntimeTypeInfo($.List_List$from(s), []);
    t1 = $.getInterceptor$JSArray(s).join$1(s, " ");
    this._liblib$_element.className = t1;
  }
};

$$.ElementEvents = {"": "Events;_ptr",
  get$blur: function() {
    return this.operator$index$1("blur");
  },
  blur$0: function() {
    return this.get$blur().call$0();
  },
  get$error: function() {
    return this.operator$index$1("error");
  },
  get$focus: function() {
    return this.operator$index$1("focus");
  },
  focus$0: function() {
    return this.get$focus().call$0();
  },
  get$keyDown: function() {
    return this.operator$index$1("keydown");
  },
  keyDown$1: function(arg0) {
    return this.get$keyDown().call$1(arg0);
  },
  get$keyUp: function() {
    return this.operator$index$1("keyup");
  },
  keyUp$1: function(arg0) {
    return this.get$keyUp().call$1(arg0);
  },
  get$mouseOver: function() {
    return this.operator$index$1("mouseover");
  },
  get$mouseUp: function() {
    return this.operator$index$1("mouseup");
  },
  get$reset: function() {
    return this.operator$index$1("reset");
  },
  reset$0: function() {
    return this.get$reset().call$0();
  }
};

$$.Events = {"": "Object;_ptr",
  operator$index$1: function(type) {
    return $.EventListenerList$(this._ptr, type);
  }
};

$$.EventListenerList = {"": "Object;_ptr,_type",
  add$2: function(listener, useCapture) {
    this._ptr.$$dom_addEventListener$3(this._type, listener, useCapture);
    return this;
  },
  add$1: function(listener) {
    return this.add$2(listener, false);
  },
  remove$2: function(listener, useCapture) {
    this._ptr.$$dom_removeEventListener$3(this._type, listener, useCapture);
    return this;
  },
  remove$1: function(listener) {
    return this.remove$2(listener, false);
  }
};

$$.InputElementEvents = {"": "ElementEvents;_ptr"};

$$.MediaElementEvents = {"": "ElementEvents;_ptr"};

$$._ChildNodeListLazy = {"": "Object;_this",
  get$last: function() {
    var result = this._this.lastChild;
    if (result == null)
      throw $.$$throw($.StateError$("No elements"));
    return result;
  },
  add$1: function(value) {
    this._this.$$dom_appendChild$1(value);
  },
  addLast$1: function(value) {
    this._this.$$dom_appendChild$1(value);
  },
  addAll$1: function(iterable) {
    var t1, t2;
    for (t1 = $.getInterceptor$JSArray(iterable).get$iterator(iterable), t2 = this._this; t1.moveNext$0() === true;)
      t2.$$dom_appendChild$1(t1.get$current());
  },
  removeLast$0: function() {
    var result = $.getInterceptor$JSArray(this).get$last(this);
    if (!(result == null))
      this._this.$$dom_removeChild$1(result);
    return result;
  },
  remove$1: function(object) {
    if (!(typeof object === "object" && object !== null && object.is$Node()))
      return;
    if (!(this === object.parentNode))
      return;
    this._this.$$dom_removeChild$1(object);
  },
  removeAll$1: function(elements) {
    $.IterableMixinWorkaround_removeAll(this, elements);
  },
  clear$0: function() {
    this._this.textContent = "";
  },
  operator$indexSet$2: function(index, value) {
    this._this.$$dom_replaceChild$2(value, this.operator$index$1(index));
  },
  get$iterator: function() {
    var t1 = this._this.childNodes;
    return $.getInterceptor$JSArray(t1).get$iterator(t1);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  get$contains: function() {
    return new $.BoundClosure(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.Node);
    $.setRuntimeTypeInfo(t1, [$.Node]);
    return t1;
  },
  toSet$0: function() {
    return $.Set_Set$from(this, $.Node);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  sort$0: function() {
    return this.sort$1(null);
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  get$length: function() {
    var t1 = this._this.childNodes;
    return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot set length on immutable List."));
  },
  operator$index$1: function(index) {
    var t1 = this._this.childNodes;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this.operator$index$1$bailout(1, index, t1);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  operator$index$1$bailout: function(state0, index, t1) {
    return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, index);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  }
};

$$.WindowEvents = {"": "Events;_ptr",
  get$blur: function() {
    return this.operator$index$1("blur");
  },
  blur$0: function() {
    return this.get$blur().call$0();
  },
  get$error: function() {
    return this.operator$index$1("error");
  },
  get$focus: function() {
    return this.operator$index$1("focus");
  },
  focus$0: function() {
    return this.get$focus().call$0();
  },
  get$keyDown: function() {
    return this.operator$index$1("keydown");
  },
  keyDown$1: function(arg0) {
    return this.get$keyDown().call$1(arg0);
  },
  get$keyUp: function() {
    return this.operator$index$1("keyup");
  },
  keyUp$1: function(arg0) {
    return this.get$keyUp().call$1(arg0);
  },
  get$message: function() {
    return this.operator$index$1("message");
  },
  get$mouseOver: function() {
    return this.operator$index$1("mouseover");
  },
  get$mouseUp: function() {
    return this.operator$index$1("mouseup");
  },
  get$reset: function() {
    return this.operator$index$1("reset");
  },
  reset$0: function() {
    return this.get$reset().call$0();
  }
};

$$._FrameSetElementEvents = {"": "ElementEvents;_ptr",
  get$blur: function() {
    return this.operator$index$1("blur");
  },
  blur$0: function() {
    return this.get$blur().call$0();
  },
  get$error: function() {
    return this.operator$index$1("error");
  },
  get$focus: function() {
    return this.operator$index$1("focus");
  },
  focus$0: function() {
    return this.get$focus().call$0();
  },
  get$message: function() {
    return this.operator$index$1("message");
  }
};

$$._AttributeMap = {"": "Object;",
  clear$0: function() {
    for (var t1 = this.get$keys(), t1 = $.getInterceptor$JSArray(t1).get$iterator(t1); t1.moveNext$0() === true;)
      this.remove$1(t1.get$current());
  },
  forEach$1: function(f) {
    var t1, t2;
    for (t1 = this.get$keys(), t1 = $.getInterceptor$JSArray(t1).get$iterator(t1); t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      f.call$2(t2, this.operator$index$1(t2));
    }
  },
  get$keys: function() {
    var attributes, keys, len, i;
    attributes = this._liblib$_element.attributes;
    if (typeof attributes !== "string" && (typeof attributes !== "object" || attributes === null || attributes.constructor !== Array && !attributes.is$JavaScriptIndexingBehavior()))
      return this.get$keys$bailout(1, attributes);
    keys = $.List_List(0, $.String);
    $.setRuntimeTypeInfo(keys, [$.String]);
    for (len = attributes.length, i = 0; i < len; ++i) {
      if (i >= attributes.length)
        throw $.ioore(i);
      if (this._matches$1(attributes[i]) === true) {
        if (i >= attributes.length)
          throw $.ioore(i);
        keys.push(attributes[i].get$$$dom_localName());
      }
    }
    return keys;
  },
  get$keys$bailout: function(state0, env0, env1, env2, env3) {
    switch (state0) {
      case 1:
        attributes = env0;
        break;
      case 2:
        len = env3;
        t1 = env2;
        attributes = env1;
        keys = env0;
        break;
    }
    switch (state0) {
      case 0:
        attributes = this._liblib$_element.attributes;
      case 1:
        state0 = 0;
        keys = $.List_List(0, $.String);
        $.setRuntimeTypeInfo(keys, [$.String]);
        t1 = $.getInterceptor$JSStringJSArray(attributes);
        len = t1.get$length(attributes);
      case 2:
        var attributes, keys, t1, len, i;
        state0 = 0;
        i = 0;
        for (; $.ltB(i, len); ++i)
          if (this._matches$1(t1.operator$index$1(attributes, i)) === true)
            keys.push(t1.operator$index$1(attributes, i).get$$$dom_localName());
        return keys;
    }
  },
  get$values: function() {
    var attributes, values, len, i;
    attributes = this._liblib$_element.attributes;
    if (typeof attributes !== "string" && (typeof attributes !== "object" || attributes === null || attributes.constructor !== Array && !attributes.is$JavaScriptIndexingBehavior()))
      return this.get$values$bailout(1, attributes);
    values = $.List_List(0, $.String);
    $.setRuntimeTypeInfo(values, [$.String]);
    for (len = attributes.length, i = 0; i < len; ++i) {
      if (i >= attributes.length)
        throw $.ioore(i);
      if (this._matches$1(attributes[i]) === true) {
        if (i >= attributes.length)
          throw $.ioore(i);
        values.push(attributes[i].get$value());
      }
    }
    return values;
  },
  get$values$bailout: function(state0, env0, env1, env2, env3) {
    switch (state0) {
      case 1:
        attributes = env0;
        break;
      case 2:
        len = env3;
        t1 = env2;
        attributes = env1;
        values = env0;
        break;
    }
    switch (state0) {
      case 0:
        attributes = this._liblib$_element.attributes;
      case 1:
        state0 = 0;
        values = $.List_List(0, $.String);
        $.setRuntimeTypeInfo(values, [$.String]);
        t1 = $.getInterceptor$JSStringJSArray(attributes);
        len = t1.get$length(attributes);
      case 2:
        var attributes, values, t1, len, i;
        state0 = 0;
        i = 0;
        for (; $.ltB(i, len); ++i)
          if (this._matches$1(t1.operator$index$1(attributes, i)) === true)
            values.push(t1.operator$index$1(attributes, i).get$value());
        return values;
    }
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  is$Map: function() {
    return true;
  }
};

$$._ElementAttributeMap = {"": "_AttributeMap;_liblib$_element",
  containsKey$1: function(key) {
    return this._liblib$_element.$$dom_hasAttribute$1(key);
  },
  operator$index$1: function(key) {
    return this._liblib$_element.$$dom_getAttribute$1(key);
  },
  operator$indexSet$2: function(key, value) {
    this._liblib$_element.$$dom_setAttribute$2(key, $.S(value));
  },
  remove$1: function(key) {
    var t1, value;
    t1 = this._liblib$_element;
    value = t1.$$dom_getAttribute$1(key);
    t1.$$dom_removeAttribute$1(key);
    return value;
  },
  get$length: function() {
    var t1 = this.get$keys();
    return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
  },
  _matches$1: function(node) {
    return node.get$$$dom_namespaceUri() == null;
  }
};

$$.CssClassSet = {"": "Object;",
  toString$0: function() {
    var t1 = $.List_List$from(this.readClasses$0());
    $.setRuntimeTypeInfo(t1, []);
    return $.Strings_join(t1, " ");
  },
  get$iterator: function() {
    var t1 = this.readClasses$0();
    return $.getInterceptor$JSArray(t1).get$iterator(t1);
  },
  forEach$1: function(f) {
    var t1 = this.readClasses$0();
    $.getInterceptor$JSArray(t1).forEach$1(t1, f);
  },
  join$1: function(separator) {
    var t1 = this.readClasses$0();
    return $.getInterceptor$JSArray(t1).join$1(t1, separator);
  },
  where$1: function(f) {
    var t1 = this.readClasses$0();
    return $.getInterceptor$JSArray(t1).where$1(t1, f);
  },
  get$isEmpty: function() {
    var t1 = this.readClasses$0();
    return $.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1);
  },
  get$length: function() {
    var t1 = this.readClasses$0();
    return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
  },
  contains$1: function(value) {
    var t1 = this.readClasses$0();
    return $.getInterceptor$JSStringJSArray(t1).contains$1(t1, value);
  },
  get$contains: function() {
    return new $.BoundClosure(this, "contains$1");
  },
  add$1: function(value) {
    this._modify$1(new $.CssClassSet_add_anon(value));
  },
  remove$1: function(value) {
    var s, result;
    if (!(typeof value === "string"))
      return false;
    s = this.readClasses$0();
    result = $.getInterceptor$JSArray(s).remove$1(s, value);
    this.writeClasses$1(s);
    return result;
  },
  addAll$1: function(iterable) {
    this._modify$1(new $.CssClassSet_addAll_anon(iterable));
  },
  removeAll$1: function(iterable) {
    this._modify$1(new $.CssClassSet_removeAll_anon(iterable));
  },
  get$last: function() {
    var t1 = this.readClasses$0();
    return $.getInterceptor$JSArray(t1).get$last(t1);
  },
  toList$0: function() {
    var t1 = this.readClasses$0();
    return $.getInterceptor$JSArray(t1).toList$0(t1);
  },
  toSet$0: function() {
    var t1 = this.readClasses$0();
    return $.getInterceptor$JSArray(t1).toSet$0(t1);
  },
  clear$0: function() {
    this._modify$1(new $.CssClassSet_clear_anon());
  },
  _modify$1: function(f) {
    var s = this.readClasses$0();
    f.call$1(s);
    this.writeClasses$1(s);
  },
  is$Set: true,
  is$Collection: function() {
    return true;
  }
};

$$._MeasurementRequest = {"": "Object;computeValue,completer>,value=,exception=",
  computeValue$0: function() {
    return this.computeValue.call$0();
  }
};

$$._MeasurementScheduler = {"": "Object;",
  _callback$0: function() {
    return this._callback.call$0();
  },
  maybeSchedule$0: function() {
    if (this._nextMeasurementFrameScheduled)
      return;
    this._nextMeasurementFrameScheduled = true;
    this._schedule$0();
  },
  _onCallback$0: function() {
    if (!this._nextMeasurementFrameScheduled)
      return;
    this._nextMeasurementFrameScheduled = false;
    this._callback$0();
  }
};

$$._PostMessageScheduler = {"": "_MeasurementScheduler;_MEASUREMENT_MESSAGE,_nextMeasurementFrameScheduled,_callback",
  _schedule$0: function() {
    window.postMessage$2(this._MEASUREMENT_MESSAGE, "*");
  },
  _handleMessage$1: function(e) {
    this._onCallback$0();
  },
  get$_handleMessage: function() {
    return new $.BoundClosure(this, "_handleMessage$1");
  },
  _PostMessageScheduler$1: function(callback) {
    var t1, t2;
    t1 = $.window().get$on().get$message();
    t2 = this.get$_handleMessage();
    $.getInterceptor$JSArray(t1).add$1(t1, t2);
  }
};

$$._MutationObserverScheduler = {"": "_MeasurementScheduler;_observer,_dummy,_nextMeasurementFrameScheduled,_callback",
  _schedule$0: function() {
    var t1 = this._dummy.get$hidden() !== true;
    this._dummy.set$hidden(t1);
  },
  _handleMutation$2: function(mutations, observer) {
    this._onCallback$0();
  },
  get$_handleMutation: function() {
    return new $.BoundClosure3(this, "_handleMutation$2");
  },
  _MutationObserverScheduler$1: function(callback) {
    this._observer = $.MutationObserver_MutationObserver(this.get$_handleMutation());
    this._dummy = $.DivElement_DivElement();
    this._observer.observe$2$attributes(this._dummy, true);
  }
};

$$._DOMWindowCrossFrame = {"": "Object;_window",
  get$parent: function() {
    return $._DOMWindowCrossFrame__createSafe(this._window.parent);
  },
  get$top: function() {
    return $._DOMWindowCrossFrame__createSafe(this._window.top);
  },
  close$0: function() {
    return this._window.close();
  },
  postMessage$3: function(message, targetOrigin, messagePorts) {
    var t1, t2;
    t1 = messagePorts == null;
    t2 = this._window;
    if (t1)
      t2.postMessage(message,targetOrigin);
    else
      t2.postMessage(message,targetOrigin,messagePorts);
  },
  postMessage$2: function(message, targetOrigin) {
    return this.postMessage$3(message, targetOrigin, null);
  }
};

$$.FixedSizeListIterator = {"": "Object;_array,_length,_position,_current",
  moveNext$0: function() {
    var t1, nextPosition;
    t1 = this._position;
    if (typeof t1 !== "number")
      return this.moveNext$0$bailout(1, t1);
    nextPosition = t1 + 1;
    t1 = this._length;
    if (typeof t1 !== "number")
      return this.moveNext$0$bailout(2, t1, nextPosition);
    if (nextPosition < t1) {
      t1 = this._array;
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
        return this.moveNext$0$bailout(3, nextPosition, t1);
      if (nextPosition !== (nextPosition | 0))
        throw $.iae(nextPosition);
      if (nextPosition < 0 || nextPosition >= t1.length)
        throw $.ioore(nextPosition);
      this._current = t1[nextPosition];
      this._position = nextPosition;
      return true;
    }
    this._current = null;
    this._position = t1;
    return false;
  },
  moveNext$0$bailout: function(state0, env0, env1) {
    switch (state0) {
      case 1:
        t1 = env0;
        break;
      case 2:
        nextPosition = env1;
        t1 = env0;
        break;
      case 3:
        t1 = env1;
        nextPosition = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = this._position;
      case 1:
        state0 = 0;
        nextPosition = $.getInterceptor$JSNumber(t1).operator$add$1(t1, 1);
        t1 = this._length;
      case 2:
        state0 = 0;
      case 3:
        var t1, nextPosition;
        if (state0 === 3 || state0 === 0 && $.ltB(nextPosition, t1))
          switch (state0) {
            case 0:
              t1 = this._array;
            case 3:
              state0 = 0;
              this._current = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, nextPosition);
              this._position = nextPosition;
              return true;
          }
        this._current = null;
        this._position = t1;
        return false;
    }
  },
  get$current: function() {
    return this._current;
  }
};

$$.FilteredElementList = {"": "Object;_node,_childNodes",
  get$_filtered: function() {
    var t1, t2, t3;
    t1 = this._childNodes;
    t2 = new $.FilteredElementList__filtered_anon();
    t3 = $.List_List$from($.getInterceptor$JSArray(t1).where$1(t1, t2), $.Element);
    $.setRuntimeTypeInfo(t3, [$.Element]);
    return t3;
  },
  forEach$1: function(f) {
    var t1 = this.get$_filtered();
    $.getInterceptor$JSArray(t1).forEach$1(t1, f);
  },
  operator$indexSet$2: function(index, value) {
    this.operator$index$1(index).replaceWith$1(value);
  },
  set$length: function(newLength) {
    var len = $.getInterceptor$JSStringJSArray(this).get$length(this);
    if ($.geB(newLength, len))
      return;
    else if ($.ltB(newLength, 0))
      throw $.$$throw($.ArgumentError$("Invalid list length"));
    this.removeRange$2(newLength, $.getInterceptor$JSNumber(len).operator$sub$1(len, newLength));
  },
  join$1: function(separator) {
    var t1 = this.get$_filtered();
    return $.getInterceptor$JSArray(t1).join$1(t1, separator);
  },
  add$1: function(value) {
    var t1 = this._childNodes;
    $.getInterceptor$JSArray(t1).add$1(t1, value);
  },
  addAll$1: function(iterable) {
    var t1, t2, t3;
    for (t1 = $.getInterceptor$JSArray(iterable).get$iterator(iterable), t2 = this._childNodes, t3 = $.getInterceptor$JSArray(t2); t1.moveNext$0() === true;)
      t3.add$1(t2, t1.get$current());
  },
  addLast$1: function(value) {
    var t1 = this._childNodes;
    $.getInterceptor$JSArray(t1).add$1(t1, value);
  },
  contains$1: function(element) {
    var t1, t2;
    if (typeof element === "object" && element !== null && element.is$Element()) {
      t1 = this._childNodes;
      t2 = $.getInterceptor$JSStringJSArray(t1).contains$1(t1, element) === true;
      t1 = t2;
    } else
      t1 = false;
    return t1;
  },
  get$contains: function() {
    return new $.BoundClosure(this, "contains$1");
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("TODO(jacobr): should we impl?"));
  },
  sort$0: function() {
    return this.sort$1(null);
  },
  removeRange$2: function(start, rangeLength) {
    var t1, t2;
    t1 = this.get$_filtered();
    t1 = $.getInterceptor$JSArray(t1).getRange$2(t1, start, rangeLength);
    t2 = new $.FilteredElementList_removeRange_anon();
    $.getInterceptor$JSArray(t1).forEach$1(t1, t2);
  },
  clear$0: function() {
    var t1 = this._childNodes;
    $.getInterceptor$JSArray(t1).clear$0(t1);
  },
  removeLast$0: function() {
    var result = $.getInterceptor$JSArray(this).get$last(this);
    if (!(result == null))
      result.remove$0();
    return result;
  },
  where$1: function(f) {
    var t1 = this.get$_filtered();
    return $.getInterceptor$JSArray(t1).where$1(t1, f);
  },
  remove$1: function(element) {
    var t1, i, t2, indexElement;
    if (!(typeof element === "object" && element !== null && element.is$Element()))
      return;
    t1 = $.getInterceptor$JSStringJSArray(this);
    i = 0;
    while (true) {
      t2 = t1.get$length(this);
      if (typeof t2 !== "number")
        return this.remove$1$bailout(1, element, t2, i);
      if (!(i < t2))
        break;
      indexElement = this.operator$index$1(i);
      if (indexElement === element) {
        indexElement.remove$0();
        return;
      }
      ++i;
    }
  },
  remove$1$bailout: function(state0, env0, env1, env2) {
    switch (state0) {
      case 1:
        i = env2;
        t2 = env1;
        element = env0;
        break;
    }
    switch (state0) {
      case 0:
        if (!(typeof element === "object" && element !== null && element.is$Element()))
          return;
        t1 = $.getInterceptor$JSStringJSArray(this);
        i = 0;
      case 1:
        var t1, i, t2, element, indexElement;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t2 = t1.get$length(this);
              case 1:
                state0 = 0;
                if (!$.ltB(i, t2))
                  break L0;
                indexElement = this.operator$index$1(i);
                if (indexElement === element) {
                  indexElement.remove$0();
                  return;
                }
                ++i;
            }
    }
  },
  removeAll$1: function(elements) {
    $.throwNoSuchMethod("", "removeAll", [this, elements], null);
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.Element);
    $.setRuntimeTypeInfo(t1, [$.Element]);
    return t1;
  },
  toSet$0: function() {
    return $.Set_Set$from(this, $.Element);
  },
  get$isEmpty: function() {
    var t1 = this.get$_filtered();
    return $.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1);
  },
  get$length: function() {
    var t1 = this.get$_filtered();
    return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
  },
  operator$index$1: function(index) {
    var t1 = this.get$_filtered();
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this.operator$index$1$bailout3(1, index, t1);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  operator$index$1$bailout3: function(state0, index, t1) {
    return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, index);
  },
  get$iterator: function() {
    var t1 = this.get$_filtered();
    return $.getInterceptor$JSArray(t1).get$iterator(t1);
  },
  getRange$2: function(start, rangeLength) {
    var t1 = this.get$_filtered();
    return $.getInterceptor$JSArray(t1).getRange$2(t1, start, rangeLength);
  },
  indexOf$2: function(element, start) {
    var t1 = this.get$_filtered();
    return $.getInterceptor$JSStringJSArray(t1).indexOf$2(t1, element, start);
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = this.get$_filtered();
    return $.getInterceptor$JSArray(t1).get$last(t1);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  }
};

$$._AttributeClassSet = {"": "CssClassSet;_liblib4$_element",
  readClasses$0: function() {
    var t1, classname, s, t2, t3, trimmed;
    t1 = this._liblib4$_element.get$attributes();
    classname = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, "class");
    s = $.Set_Set($.String);
    if (classname == null)
      return s;
    for (t1 = $.getInterceptor$JSString(classname).split$1(classname, " "), t1 = $.getInterceptor$JSArray(t1).get$iterator(t1), t2 = $.getInterceptor$JSArray(s); t1.moveNext$0() === true;) {
      t3 = t1.get$current();
      trimmed = $.getInterceptor$JSString(t3).trim$0(t3);
      if ($.getInterceptor$JSStringJSArray(trimmed).get$isEmpty(trimmed) !== true)
        t2.add$1(s, trimmed);
    }
    return s;
  },
  writeClasses$1: function(s) {
    var list, t1, t2;
    list = $.List_List$from(s);
    $.setRuntimeTypeInfo(list, []);
    t1 = this._liblib4$_element.get$attributes();
    t2 = $.Strings_join(list, " ");
    $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, "class", t2);
  }
};

$$.WebComponent = {"": "Object;",
  createShadowRoot$0: function() {
    var t1, t2;
    if ($.useShadowDom === true && !!(Element.prototype.webkitCreateShadowRoot))
      return this._element.createShadowRoot$0();
    if (this._shadowRoots == null)
      this._shadowRoots = [];
    t1 = this._shadowRoots;
    t2 = $.Element_Element$html("<div class=\"shadowroot\"></div>");
    $.getInterceptor$JSArray(t1).add$1(t1, t2);
    t2 = this._shadowRoots;
    return $.getInterceptor$JSArray(t2).get$last(t2);
  },
  created$0: function() {
  },
  inserted$0: function() {
  },
  removed$0: function() {
  },
  composeChildren$0: function() {
    var t1, treeStack, tree, pool, shadowInsertionPoints, shadowInsertionTrees, tree0, point, i, t2;
    if ($.useShadowDom === true && !!(Element.prototype.webkitCreateShadowRoot))
      return;
    t1 = this._shadowRoots;
    if ($.eqB($.getInterceptor$JSStringJSArray(t1).get$length(t1), 0))
      throw $.$$throw($.StateError$("Distribution algorithm requires at least one shadow root and can only be run once."));
    treeStack = this._shadowRoots;
    t1 = $.getInterceptor$JSArray(treeStack);
    tree = t1.removeLast$0(treeStack);
    pool = $.List_List$from(this.get$nodes());
    $.setRuntimeTypeInfo(pool, []);
    shadowInsertionPoints = [];
    shadowInsertionTrees = [];
    for (tree0 = tree; true;) {
      pool = this._distributeNodes$2(tree0, pool);
      point = tree0.query$1("shadow");
      if (!(point == null))
        if ($.gtB(t1.get$length(treeStack), 0)) {
          tree0 = t1.removeLast$0(treeStack);
          shadowInsertionPoints.push(point);
          shadowInsertionTrees.push(tree0);
        } else {
          $.WebComponent__distribute(point, pool);
          break;
        }
      else
        break;
    }
    for (i = 0; i < shadowInsertionPoints.length; ++i) {
      point = shadowInsertionPoints[i];
      if (i >= shadowInsertionTrees.length)
        throw $.ioore(i);
      t1 = $.List_List$from(shadowInsertionTrees[i].get$nodes());
      $.setRuntimeTypeInfo(t1, []);
      $.WebComponent__distribute(point, t1);
    }
    t1 = this.get$nodes();
    $.getInterceptor$JSArray(t1).clear$0(t1);
    t1 = this.get$nodes();
    t2 = $.List_List$from(tree.get$nodes());
    $.setRuntimeTypeInfo(t2, []);
    $.getInterceptor$JSArray(t1).addAll$1(t1, t2);
  },
  _distributeNodes$2: function(tree, pool) {
    var t1, t2, t3, select, matching, notMatching, t4;
    if (typeof pool !== "object" || pool === null || pool.constructor !== Array || !!pool.fixed$length)
      return this._distributeNodes$2$bailout(1, tree, pool);
    for (t1 = tree.queryAll$1("content"), t1 = $.getInterceptor$JSArray(t1).get$iterator(t1); t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      if (!$.WebComponent__isActive(t2))
        continue;
      t3 = t2.get$attributes();
      select = $.getInterceptor$JSStringJSArray(t3).operator$index$1(t3, "select");
      if (typeof select !== "string")
        return this._distributeNodes$2$bailout(2, t1, pool, select, t2);
      if (select === "")
        select = "*";
      matching = [];
      notMatching = [];
      for (t3 = $.CONSTANT0.get$iterator(pool); t3.moveNext$0() === true;) {
        t4 = t3.get$current();
        ($.WebComponent__matches(t4, select) === true ? matching : notMatching).push(t4);
      }
      if (matching.length === 0) {
        matching = t2.get$nodes();
        if (typeof matching !== "object" || matching === null || matching.constructor !== Array || !!matching.fixed$length)
          return this._distributeNodes$2$bailout(3, matching, t1, notMatching, t2);
      }
      $.WebComponent__distribute(t2, matching);
      pool = notMatching;
    }
    return pool;
  },
  _distributeNodes$2$bailout: function(state0, env0, env1, env2, env3) {
    switch (state0) {
      case 1:
        pool = env1;
        tree = env0;
        break;
      case 2:
        t2 = env3;
        select = env2;
        pool = env1;
        t1 = env0;
        break;
      case 3:
        t2 = env3;
        notMatching = env2;
        t1 = env1;
        matching = env0;
        break;
    }
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = tree.queryAll$1("content");
        t1 = $.getInterceptor$JSArray(t1).get$iterator(t1);
      default:
        var pool, tree, t1, t2, t3, select, matching, notMatching, t4;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!(t1.moveNext$0() === true))
                  break L0;
              default:
                c$0: {
                  switch (state0) {
                    case 0:
                      t2 = t1.get$current();
                      if (!$.WebComponent__isActive(t2))
                        break c$0;
                      t3 = t2.get$attributes();
                      select = $.getInterceptor$JSStringJSArray(t3).operator$index$1(t3, "select");
                    case 2:
                      state0 = 0;
                      if (select == null || $.eqB(select, ""))
                        select = "*";
                      matching = [];
                      notMatching = [];
                      for (t3 = $.getInterceptor$JSArray(pool).get$iterator(pool); t3.moveNext$0() === true;) {
                        t4 = t3.get$current();
                        ($.WebComponent__matches(t4, select) === true ? matching : notMatching).push(t4);
                      }
                    case 3:
                      if (state0 === 3 || state0 === 0 && matching.length === 0)
                        switch (state0) {
                          case 0:
                            matching = t2.get$nodes();
                          case 3:
                            state0 = 0;
                        }
                      $.WebComponent__distribute(t2, matching);
                      pool = notMatching;
                  }
                }
            }
        return pool;
    }
  },
  get$nodes: function() {
    return this._element.get$nodes();
  },
  replaceWith$1: function(otherNode) {
    this._element.replaceWith$1(otherNode);
  },
  remove$0: function() {
    return this._element.remove$0();
  },
  get$nextNode: function() {
    return this._element.get$nextNode();
  },
  set$text: function(v) {
    this._element.set$text(v);
  },
  contains$1: function(other) {
    var t1 = this._element;
    return $.getInterceptor$JSStringJSArray(t1).contains$1(t1, other);
  },
  get$contains: function() {
    return new $.BoundClosure(this, "contains$1");
  },
  insertBefore$2: function(newChild, refChild) {
    return this._element.insertBefore$2(newChild, refChild);
  },
  get$attributes: function() {
    return this._element.get$attributes();
  },
  get$children: function() {
    return this._element.get$children();
  },
  get$classes: function() {
    return this._element.get$classes();
  },
  get$computedStyle: function() {
    return this._element.get$computedStyle();
  },
  getComputedStyle$1: function(pseudoElement) {
    return this._element.getComputedStyle$1(pseudoElement);
  },
  get$parent: function() {
    return this._element.get$parent();
  },
  get$parentNode: function() {
    return this._element.get$parentNode();
  },
  get$on: function() {
    return this._element.get$on();
  },
  get$hidden: function() {
    return this._element.get$hidden();
  },
  get$id: function() {
    return this._element.get$id();
  },
  get$innerHtml: function() {
    return this._element.get$innerHtml();
  },
  set$innerHtml: function(v) {
    this._element.set$innerHtml(v);
  },
  get$outerHtml: function() {
    return this._element.get$outerHtml();
  },
  get$style: function() {
    return this._element.get$style();
  },
  get$tagName: function() {
    return this._element.get$tagName();
  },
  blur$0: function() {
    this._element.blur$0();
  },
  get$blur: function() {
    return new $.BoundClosure2(this, "blur$0");
  },
  focus$0: function() {
    this._element.focus$0();
  },
  get$focus: function() {
    return new $.BoundClosure2(this, "focus$0");
  },
  matches$1: function(selectors) {
    return this._element.matches$1(selectors);
  },
  query$1: function(selectors) {
    return this._element.query$1(selectors);
  },
  queryAll$1: function(selectors) {
    return this._element.queryAll$1(selectors);
  },
  get$$$dom_children: function() {
    return this._element.get$$$dom_children();
  },
  get$$$dom_className: function() {
    return this._element.get$$$dom_className();
  },
  set$$$dom_className: function(value) {
    this._element.set$$$dom_className(value);
  },
  get$clientWidth: function() {
    return this._element.get$clientWidth();
  },
  get$$$dom_firstElementChild: function() {
    return this._element.get$$$dom_firstElementChild();
  },
  get$$$dom_lastElementChild: function() {
    return this._element.get$$$dom_lastElementChild();
  },
  $$dom_getAttribute$1: function(name$) {
    return this._element.$$dom_getAttribute$1(name$);
  },
  getBoundingClientRect$0: function() {
    return this._element.getBoundingClientRect$0();
  },
  $$dom_hasAttribute$1: function(name$) {
    return this._element.$$dom_hasAttribute$1(name$);
  },
  $$dom_querySelector$1: function(selectors) {
    return this._element.$$dom_querySelector$1(selectors);
  },
  $$dom_querySelectorAll$1: function(selectors) {
    return this._element.$$dom_querySelectorAll$1(selectors);
  },
  $$dom_removeAttribute$1: function(name$) {
    return this._element.$$dom_removeAttribute$1(name$);
  },
  $$dom_setAttribute$2: function(name$, value) {
    return this._element.$$dom_setAttribute$2(name$, value);
  },
  get$$$dom_attributes: function() {
    return this._element.get$$$dom_attributes();
  },
  get$$$dom_childNodes: function() {
    return this._element.get$$$dom_childNodes();
  },
  get$$$dom_localName: function() {
    return this._element.get$$$dom_localName();
  },
  get$$$dom_namespaceUri: function() {
    return this._element.get$$$dom_namespaceUri();
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    this._element.$$dom_addEventListener$3(type, listener, useCapture);
  },
  $$dom_appendChild$1: function(newChild) {
    return this._element.$$dom_appendChild$1(newChild);
  },
  $$dom_removeChild$1: function(oldChild) {
    return this._element.$$dom_removeChild$1(oldChild);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    this._element.$$dom_removeEventListener$3(type, listener, useCapture);
  },
  $$dom_replaceChild$2: function(newChild, oldChild) {
    return this._element.$$dom_replaceChild$2(newChild, oldChild);
  },
  get$xtag: function() {
    return this._element.get$xtag();
  },
  set$xtag: function(value) {
    this._element.set$xtag(value);
  },
  WebComponent$forElement$1: function(element) {
    if (element == null || !(this._element.get$xtag() == null))
      throw $.$$throw($.ArgumentError$("element must be provided and not have its xtag property set"));
    this._element.set$xtag(this);
  },
  is$Element: function() {
    return true;
  },
  is$Node: function() {
    return true;
  }
};

$$.WatchEvent = {"": "Object;oldValue>,newValue>"};

$$._Watcher = {"": "Object;debugName,_getter>,_liblib3$_callback,_lastValue",
  _getter$0: function() {
    return this._getter.call$0();
  },
  _liblib3$_callback$1: function(arg0) {
    return this._liblib3$_callback.call$1(arg0);
  },
  toString$0: function() {
    var t1 = this.debugName;
    return t1 == null ? "<unnamed>" : t1;
  },
  compareAndNotify$0: function() {
    var currentValue, oldValue;
    currentValue = this._safeRead$0();
    if (this._compare$1(currentValue) === true) {
      oldValue = this._lastValue;
      this._update$1(currentValue);
      this._liblib3$_callback$1($.WatchEvent$(oldValue, currentValue));
      return true;
    }
    return false;
  },
  _compare$1: function(currentValue) {
    return !$.eqB(this._lastValue, currentValue);
  },
  _update$1: function(currentValue) {
    this._lastValue = currentValue;
  },
  _safeRead$0: function() {
    var e, trace, t1, exception;
    try {
      t1 = this._getter$0();
      return t1;
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      trace = $.getTraceFromException(exception);
      $.print("error: evaluating " + $.S(this) + " watcher threw an exception (" + $.S(e) + ", " + $.S(trace) + ")");
    }

    return this._lastValue;
  },
  _Watcher$3: function(_getter, _callback, debugName) {
    this._lastValue = this._getter$0();
  }
};

$$._ListWatcher = {"": "_Watcher;debugName,_getter,_liblib3$_callback,_lastValue",
  _compare$1: function(currentValue) {
    var t1, i;
    if (typeof currentValue !== "string" && (typeof currentValue !== "object" || currentValue === null || currentValue.constructor !== Array && !currentValue.is$JavaScriptIndexingBehavior()))
      return this._compare$1$bailout(1, currentValue);
    t1 = this._lastValue;
    if (!$.eqB($.getInterceptor$JSStringJSArray(t1).get$length(t1), currentValue.length))
      return true;
    for (i = 0; t1 = this._lastValue, $.ltB(i, $.getInterceptor$JSStringJSArray(t1).get$length(t1)); ++i) {
      t1 = this._lastValue;
      t1 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, i);
      if (i >= currentValue.length)
        throw $.ioore(i);
      if (!$.eqB(t1, currentValue[i]))
        return true;
    }
    return false;
  },
  _compare$1$bailout: function(state0, currentValue) {
    var t1, t2, i;
    t1 = this._lastValue;
    t1 = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
    t2 = $.getInterceptor$JSStringJSArray(currentValue);
    if (!$.eqB(t1, t2.get$length(currentValue)))
      return true;
    for (i = 0; t1 = this._lastValue, $.ltB(i, $.getInterceptor$JSStringJSArray(t1).get$length(t1)); ++i) {
      t1 = this._lastValue;
      if (!$.eqB($.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, i), t2.operator$index$1(currentValue, i)))
        return true;
    }
    return false;
  },
  _update$1: function(currentValue) {
    var t1 = $.List_List$from(currentValue, $.getRuntimeTypeInfo(this)[0]);
    $.setRuntimeTypeInfo(t1, [$.getRuntimeTypeInfo(this)[0]]);
    this._lastValue = t1;
  },
  _ListWatcher$3: function(getter, callback, debugName) {
    this._update$1(this._safeRead$0());
  }
};

$$.SafeHtml = {"": "Object;_html",
  toString$0: function() {
    return this._html;
  },
  is$SafeHtml: true
};

$$.TemplateItem = {"": "Object;"};

$$.Listener = {"": "TemplateItem;target,listener",
  create$0: function() {
  },
  insert$0: function() {
    var t1, t2;
    t1 = this.target;
    t2 = this.listener;
    $.getInterceptor$JSArray(t1).add$1(t1, t2);
  },
  remove$0: function() {
    var t1, t2;
    t1 = this.target;
    t2 = this.listener;
    $.getInterceptor$JSArray(t1).remove$1(t1, t2);
  }
};

$$.Binding = {"": "TemplateItem;exp,action,stopper",
  stopper$0: function() {
    return this.stopper.call$0();
  },
  create$0: function() {
  },
  insert$0: function() {
    if (!(this.stopper == null))
      throw $.$$throw($.StateError$("binding already attached"));
    this.stopper = $.watchAndInvoke(this.exp, this.action, null);
  },
  remove$0: function() {
    this.stopper$0();
    this.stopper = null;
  }
};

$$.ClassAttrBinding = {"": "TemplateItem;elem,exp,stopper",
  stopper$0: function() {
    return this.stopper.call$0();
  },
  create$0: function() {
  },
  insert$0: function() {
    if (!(this.stopper == null))
      throw $.$$throw($.StateError$("class binding already attached"));
    this.stopper = $.bindCssClasses(this.elem, this.exp);
  },
  remove$0: function() {
    this.stopper$0();
    this.stopper = null;
  }
};

$$.DomPropertyBinding = {"": "TemplateItem;setter,getter,isUrl>,stopper",
  setter$1: function(arg0) {
    return this.setter.call$1(arg0);
  },
  stopper$0: function() {
    return this.stopper.call$0();
  },
  create$0: function() {
  },
  insert$0: function() {
    if (!(this.stopper == null))
      throw $.$$throw($.StateError$("data binding already attached."));
    this.stopper = $.watchAndInvoke(this.getter, new $.DomPropertyBinding_insert_anon(this), null);
  },
  remove$0: function() {
    this.stopper$0();
    this.stopper = null;
  }
};

$$.ComponentItem = {"": "TemplateItem;elem",
  get$_xtag: function() {
    var t1 = this.elem;
    if (t1.get$xtag() == null)
      throw $.$$throw($.StateError$("element doesn't have an associated component"));
    return t1.get$xtag();
  },
  create$0: function() {
    var t1 = this.get$_xtag();
    t1.created_autogenerated$0();
    t1.created$0();
    t1.composeChildren$0();
  },
  insert$0: function() {
    var t1 = this.get$_xtag();
    t1.inserted$0();
    t1.inserted_autogenerated$0();
  },
  remove$0: function() {
    var t1 = this.get$_xtag();
    t1.removed_autogenerated$0();
    t1.removed$0();
  }
};

$$.Template = {"": "TemplateItem;node>,children>,nodes>",
  listen$2: function(target, listener) {
    var t1, t2;
    t1 = this.children;
    t2 = $.Listener$(target, new $.Template_listen_anon(listener));
    $.getInterceptor$JSArray(t1).add$1(t1, t2);
  },
  contentBind$1: function(exp) {
    var t1, t2, t3;
    t1 = {};
    t1.bindNode_0 = $.Text_Text("");
    t2 = this.children;
    t3 = $.Binding$(new $.Template_contentBind_anon(exp), new $.Template_contentBind_anon0(t1, exp));
    $.getInterceptor$JSArray(t2).add$1(t2, t3);
    return t1.bindNode_0;
  },
  bindClass$2: function(elem, exp) {
    var t1, t2;
    t1 = this.children;
    t2 = $.ClassAttrBinding$(elem, exp);
    $.getInterceptor$JSArray(t1).add$1(t1, t2);
  },
  oneWayBind$3: function(exp, setter, isUrl) {
    var t1, t2;
    t1 = this.children;
    t2 = $.DomPropertyBinding$(exp, setter, isUrl);
    $.getInterceptor$JSArray(t1).add$1(t1, t2);
  },
  conditional$3: function(template, exp, bodySetup) {
    var t1, t2;
    t1 = this.children;
    t2 = $.ConditionalTemplate$(template, exp, bodySetup);
    $.getInterceptor$JSArray(t1).add$1(t1, t2);
  },
  loop$4$isTemplateElement: function(template, exp, iterSetup, isTemplateElement) {
    var t1, t2;
    t1 = this.children;
    t2 = isTemplateElement === true ? $.LoopTemplate$(template, exp, iterSetup) : $.LoopTemplateInAttribute$(template, exp, iterSetup);
    $.getInterceptor$JSArray(t1).add$1(t1, t2);
  },
  loop$3: function(template, exp, iterSetup) {
    return this.loop$4$isTemplateElement(template, exp, iterSetup, true);
  },
  component$1: function(elem) {
    var t1, t2;
    t1 = this.children;
    t2 = $.ComponentItem$(elem);
    $.getInterceptor$JSArray(t1).add$1(t1, t2);
  },
  add$1: function(n) {
    return this.nodes.push(n);
  },
  addAll$1: function(list) {
    return $.CONSTANT0.addAll$1(this.nodes, list);
  },
  create$0: function() {
    return this._visitChildren$1(new $.Template_create_anon());
  },
  insert$0: function() {
    return this._visitChildren$1(new $.Template_insert_anon());
  },
  remove$0: function() {
    this._visitChildren$2$reverseOrder(new $.Template_remove_anon(), true);
    var t1 = this.children;
    $.getInterceptor$JSArray(t1).clear$0(t1);
  },
  _visitChildren$2$reverseOrder: function(onTemplateItem, reverseOrder) {
    var t1, len, t2, i, t3;
    t1 = this.children;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this._visitChildren$2$reverseOrder$bailout(1, onTemplateItem, reverseOrder, t1);
    len = t1.length;
    for (t2 = reverseOrder === true, i = 0; i < len; ++i) {
      t3 = t2 ? len - i - 1 : i;
      if (t3 < 0 || t3 >= t1.length)
        throw $.ioore(t3);
      onTemplateItem.call$1(t1[t3]);
    }
  },
  _visitChildren$2$reverseOrder$bailout: function(state0, env0, env1, env2, env3, env4) {
    switch (state0) {
      case 1:
        t1 = env2;
        reverseOrder = env1;
        onTemplateItem = env0;
        break;
      case 2:
        t1 = env4;
        len = env3;
        t3 = env2;
        reverseOrder = env1;
        onTemplateItem = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = this.children;
      case 1:
        state0 = 0;
        t3 = $.getInterceptor$JSStringJSArray(t1);
        len = t3.get$length(t1);
      case 2:
        var t1, reverseOrder, onTemplateItem, t3, len, t2, t4, i, t5;
        state0 = 0;
        for (t2 = $.getInterceptor$JSNumber(len), t4 = reverseOrder === true, i = 0; $.ltB(i, len); ++i) {
          if (t4) {
            t5 = t2.operator$sub$1(len, i);
            t5 = $.getInterceptor$JSNumber(t5).operator$sub$1(t5, 1);
          } else
            t5 = i;
          onTemplateItem.call$1(t3.operator$index$1(t1, t5));
        }
    }
  },
  _visitChildren$1: function(onTemplateItem) {
    return this._visitChildren$2$reverseOrder(onTemplateItem, false);
  }
};

$$.PlaceholderTemplate = {"": "Template;",
  stopper$0: function() {
    return this.stopper.call$0();
  },
  stopper$0: function() {
    return this.stopper.call$0();
  },
  create$0: function() {
  },
  insert$0: function() {
    var t1, t2, parent$, reference;
    $.Template.prototype.create$0.call(this);
    t1 = this.nodes;
    if (t1.length > 0) {
      t2 = this.node;
      parent$ = t2.get$parentNode();
      reference = t2.get$nextNode();
      for (t1 = $.CONSTANT0.get$iterator(t1); t1.moveNext$0() === true;)
        parent$.insertBefore$2(t1.get$current(), reference);
    }
    $.Template.prototype.insert$0.call(this);
  },
  remove$0: function() {
    var parent$, t1;
    $.Template.prototype.remove$0.call(this);
    parent$ = this.node.get$parentNode();
    if (!(parent$ == null))
      for (t1 = $.CONSTANT0.get$iterator(this.nodes); t1.moveNext$0() === true;)
        parent$.$$dom_removeChild$1(t1.get$current());
    $.CONSTANT0.clear$0(this.nodes);
  }
};

$$.ConditionalTemplate = {"": "PlaceholderTemplate;isVisible=,bodySetup,exp,stopper,node,children,nodes",
  bodySetup$1: function(arg0) {
    return this.bodySetup.call$1(arg0);
  },
  insert$0: function() {
    this.stopper = $.watchAndInvoke(this.exp, new $.ConditionalTemplate_insert_anon(this), null);
  },
  remove$0: function() {
    $.PlaceholderTemplate.prototype.remove$0.call(this);
    this.stopper$0();
    this.stopper = null;
  }
};

$$.LoopTemplate = {"": "PlaceholderTemplate;iterSetup,exp,stopper,node,children,nodes",
  iterSetup$2: function(arg0, arg1) {
    return this.iterSetup.call$2(arg0, arg1);
  },
  insert$0: function() {
    this.stopper = $.watchAndInvoke(this.exp, new $.LoopTemplate_insert_anon(this), null);
  },
  remove$0: function() {
    $.PlaceholderTemplate.prototype.remove$0.call(this);
    this.stopper$0();
    this.stopper = null;
  }
};

$$.LoopTemplateInAttribute = {"": "Template;iterSetup,exp,stopper,node,children,nodes",
  iterSetup$2: function(arg0, arg1) {
    return this.iterSetup.call$2(arg0, arg1);
  },
  stopper$0: function() {
    return this.stopper.call$0();
  },
  create$0: function() {
  },
  insert$0: function() {
    this.stopper = $.watchAndInvoke(this.exp, new $.LoopTemplateInAttribute_insert_anon(this), null);
  },
  remove$0: function() {
    $.Template.prototype.remove$0.call(this);
    var t1 = this.node.get$nodes();
    $.getInterceptor$JSArray(t1).clear$0(t1);
    $.CONSTANT0.clear$0(this.nodes);
    this.stopper$0();
    this.stopper = null;
  }
};

$$.Uri = {"": "Object;scheme,userInfo,domain,port,path,query,fragment",
  query$1: function(arg0) {
    return this.query.call$1(arg0);
  },
  toString$0: function() {
    var sb, t1, t2;
    sb = $.StringBuffer_StringBuffer("");
    t1 = this.scheme;
    $.Uri__addIfNonEmpty(sb, t1, t1, ":");
    t2 = this.userInfo;
    if (!$.eqB(t2, "") || !$.eqB(this.domain, "") || !$.eqB(this.port, 0) || $.eqB(t1, "file")) {
      t1 = $.getInterceptor$JSArray(sb);
      t1.add$1(sb, "//");
      $.Uri__addIfNonEmpty(sb, t2, t2, "@");
      t2 = this.domain;
      t1.add$1(sb, t2 == null ? "null" : t2);
      t2 = this.port;
      if (!$.eqB(t2, 0)) {
        t1.add$1(sb, ":");
        t1.add$1(sb, $.getInterceptor(t2).toString$0(t2));
      }
    }
    t1 = this.path;
    if (t1 == null)
      t1 = "null";
    t2 = $.getInterceptor$JSArray(sb);
    t2.add$1(sb, t1);
    t1 = this.query;
    $.Uri__addIfNonEmpty(sb, t1, "?", t1);
    t1 = this.fragment;
    $.Uri__addIfNonEmpty(sb, t1, "#", t1);
    return t2.toString$0(sb);
  },
  operator$eq$1: function(other) {
    if (!(typeof other === "object" && other !== null && !!other.is$Uri))
      return false;
    return $.eqB(this.scheme, other.scheme) && $.eqB(this.userInfo, other.userInfo) && $.eqB(this.domain, other.domain) && $.eqB(this.port, other.port) && $.eqB(this.path, other.path) && $.eqB(this.query, other.query) && $.eqB(this.fragment, other.fragment);
  },
  get$hashCode: function() {
    var t1 = new $.Uri_hashCode_combine();
    return t1.call$2(this.scheme, t1.call$2(this.userInfo, t1.call$2(this.domain, t1.call$2(this.port, t1.call$2(this.path, t1.call$2(this.query, t1.call$2(this.fragment, 1)))))));
  },
  is$Uri: true
};

$$.InputAutocompleteComponent = {"": "WebComponent;inputHasFocus>,_liblib5$_matches<",
  get$renderer: function() {
    if (this._renderer == null)
      this._renderer = $.AutocompleteChoiceRendererImpl$();
    return this._renderer;
  },
  set$datasource: function(ds) {
    this._datasource = ds;
  },
  get$datasource: function() {
    return this._datasource;
  },
  isFocused$1: function(choice) {
    var t1, t2;
    if (!$.ltB(this._focusedItemIndex, 0)) {
      t1 = this._focusedItemIndex;
      t2 = this._liblib5$_matches;
      t1 = $.geB(t1, $.getInterceptor$JSStringJSArray(t2).get$length(t2));
    } else
      t1 = true;
    if (t1)
      return false;
    t1 = this._liblib5$_matches;
    t2 = this._focusedItemIndex;
    return $.eq($.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, t2), choice);
  },
  set$choices: function(choices) {
    this.set$datasource($.SimpleStringDatasource$(choices));
    $.print("Choices have been set.");
  },
  get$filteredChoices: function() {
    if (this._liblib5$_matches == null)
      this._doSearch$0();
    return this._liblib5$_matches;
  },
  _focusNext$1: function(next) {
    var t1, newfocus;
    t1 = this._focusedItemIndex;
    newfocus = $.getInterceptor$JSNumber(t1).operator$add$1(t1, next);
    if ($.ltB(newfocus, 0))
      newfocus = 0;
    t1 = this._liblib5$_matches;
    if ($.geB(newfocus, $.getInterceptor$JSStringJSArray(t1).get$length(t1))) {
      t1 = this._liblib5$_matches;
      t1 = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
      newfocus = $.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1);
    }
    this._focusedItemIndex = newfocus;
    $.dispatch();
  },
  keyDown$1: function(event$) {
    switch (event$.get$keyCode()) {
      case 40:
        this._focusNext$1(1);
        event$.preventDefault$0();
        break;
      case 38:
        this._focusNext$1(-1);
        event$.preventDefault$0();
        break;
      case 13:
        this.selectCurrentFocus$0();
        break;
    }
  },
  get$keyDown: function() {
    return new $.BoundClosure(this, "keyDown$1");
  },
  selectCurrentFocus$0: function() {
    var t1, t2;
    t1 = this._liblib5$_matches;
    t2 = this._focusedItemIndex;
    this.selectChoice$1($.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, t2));
  },
  selectChoice$1: function(choice) {
    var t1;
    $.print("We have selected a choice: " + $.S(choice.get$key()));
    t1 = choice.get$key();
    this.get$_input().set$value(t1);
  },
  mouseOverChoice$2: function(choice, event$) {
    var t1, idx;
    t1 = this._liblib5$_matches;
    idx = $.getInterceptor$JSStringJSArray(t1).indexOf$1(t1, choice);
    if ($.eqB(idx, this._focusedItemIndex) || $.ltB(idx, 0))
      return;
    this._focusedItemIndex = idx;
    $.dispatch();
  },
  keyUp$1: function(event$) {
    this._doSearch$0();
  },
  get$keyUp: function() {
    return new $.BoundClosure(this, "keyUp$1");
  },
  get$_input: function() {
    return this.query$1("input");
  },
  _doSearch$0: function() {
    var t1, t2;
    t1 = this.get$datasource();
    t2 = this.get$_input().get$value();
    t1.query$1($.getInterceptor$JSString(t2).toLowerCase$0(t2)).then$1(new $.InputAutocompleteComponent__doSearch_anon(this));
  },
  inputFocus$1: function(event$) {
    this.inputHasFocus = true;
    $.dispatch();
    this._positionCompleteBox$0();
  },
  inputBlur$1: function(event$) {
    this.inputHasFocus = false;
    $.dispatch();
  },
  inserted$0: function() {
  },
  renderChoice$1: function(choice) {
    var input = this.query$1("input");
    return $.SafeHtml$unsafe(this.get$renderer().renderChoice$2(choice, input.get$value()).get$outerHtml());
  },
  _parseStyleInt$1: function(styleValue) {
    var t1, pos;
    t1 = $.getInterceptor$JSStringJSArray(styleValue);
    pos = t1.indexOf$1(styleValue, "px");
    if ($.gtB(pos, 0))
      styleValue = t1.substring$2(styleValue, 0, pos);
    return $.int_parse(styleValue, null, null);
  },
  _positionCompleteBox$0: function() {
    var content$, input, rect, t1, t2, padding;
    content$ = this.query$1("ul.autocomplete-content");
    if (content$ == null)
      return;
    input = this.query$1("input");
    rect = input.getBoundingClientRect$0();
    t1 = content$.getBoundingClientRect$0().get$width();
    t2 = content$.get$clientWidth();
    padding = $.getInterceptor$JSNumber(t1).operator$sub$1(t1, t2);
    input.get$computedStyle().then$1(new $.InputAutocompleteComponent__positionCompleteBox_anon(this, content$, rect, padding));
  }
};

$$.AutocompleteChoiceImpl = {"": "Object;key>,label,obj", is$AutocompleteChoiceImpl: true};

$$.BaseAutocompleteChoiceRenderer = {"": "Object;",
  highlightTextAndHtmlEscape$2: function(text, query) {
    var span, html, t1, t2, t3, idx, prefix, t4, value, postfix;
    span = $.Element_Element$tag("span");
    span.set$text(text);
    html = span.get$innerHtml();
    t1 = $.getInterceptor$JSStringJSArray(query);
    if (t1.get$isEmpty(query) === true)
      return html;
    t2 = $.getInterceptor$JSString(html);
    t3 = t2.toLowerCase$0(html);
    idx = $.getInterceptor$JSStringJSArray(t3).indexOf$1(t3, query);
    if ($.geB(idx, 0)) {
      prefix = t2.substring$2(html, 0, idx);
      t3 = t1.get$length(query);
      t4 = $.getInterceptor$JSNumber(idx);
      value = t2.substring$2(html, idx, t4.operator$add$1(idx, t3));
      postfix = t2.substring$1(html, t4.operator$add$1(idx, t1.get$length(query)));
      html = $.S(prefix) + "<strong>" + $.S(value) + "</strong>" + $.S(postfix);
    }
    return html;
  }
};

$$.AutocompleteChoiceRendererImpl = {"": "BaseAutocompleteChoiceRenderer;",
  renderChoice$2: function(choice, query) {
    var t1, t2;
    if (typeof choice === "object" && choice !== null && !!choice.is$AutocompleteChoiceImpl) {
      t1 = this.highlightTextAndHtmlEscape$2($.S(choice.label), query);
      t2 = $.Element_Element$tag("div");
      t2.set$innerHtml(t1);
      return t2;
    }
    throw $.$$throw($.ArgumentError$("Invalid choice " + $.S(choice)));
  }
};

$$.SimpleStringDatasource = {"": "Object;_givenChoices,_choices",
  query$1: function(query) {
    var completer, t1, t2;
    completer = $.Completer_Completer();
    t1 = $.getInterceptor$JSStringJSArray(query).get$isEmpty(query) === true;
    t2 = this._choices;
    if (t1)
      completer.complete$1(t2);
    else
      completer.complete$1($.CONSTANT0.where$1(t2, new $.SimpleStringDatasource_query_anon(query)));
    return completer.get$future();
  },
  SimpleStringDatasource$1: function(_givenChoices) {
    var t1, t2, t3, t4;
    t1 = $.List_List(0);
    $.setRuntimeTypeInfo(t1, []);
    this._choices = t1;
    for (t1 = this._givenChoices, t1 = $.getInterceptor$JSArray(t1).get$iterator(t1); t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      t3 = this._choices;
      t4 = $.getInterceptor(t2);
      t3.push($.AutocompleteChoiceImpl$(t4.toString$0(t2), t4.toString$0(t2), t2));
    }
  }
};

$$.InputAutocompleteComponentProxy = {"": "InputAutocompleteComponent;_root,__e7,__e8,__t,inputHasFocus,_liblib5$_matches,_renderer,_datasource,_focusedItemIndex,_element,_shadowRoots",
  created_autogenerated$0: function() {
    this._root = this.createShadowRoot$0();
    this.__t = $.Template$(this._root);
    this._root.set$innerHtml("    <div class=\"autocomplete-wrapper\">\n    <template id=\"__e-7\" style=\"display:none\"></template>\n    <input type=\"text\" id=\"__e-8\">\n    </div>\n    <style>\n    .autocomplete-wrapper input {\n      border: 1px solid black;\n      padding: 3px;\n    }\n    .autocomplete-content {\n      //display: none;\n      position: absolute;\n      border: 1px solid black;\n      padding: 0px;\n      margin: 0px;\n      background-color: #fff;\n      overflow-x: scroll;\n    }\n    .autocomplete-content li {\n      list-style-type: none;\n      padding: 2px;\n      margin: 0px;\n      margin-top: 2px;\n      background-color: #fafafa;\n    }\n    .autocomplete-content li.focused {\n      background-color: #ddd;\n    }\n    .autocomplete-content div {\n      padding: 0px;\n      margin: 0px;\n    }\n    </style>\n    ");
    this.__e7 = this._root.query$1("#__e-7");
    this.__t.conditional$3(this.__e7, new $.InputAutocompleteComponentProxy_created_autogenerated_anon(this), new $.InputAutocompleteComponentProxy_created_autogenerated_anon0(this));
    this.__e8 = this._root.query$1("#__e-8");
    this.__t.listen$2(this.__e8.get$on().get$blur(), new $.InputAutocompleteComponentProxy_created_autogenerated_anon1(this));
    this.__t.listen$2(this.__e8.get$on().get$focus(), new $.InputAutocompleteComponentProxy_created_autogenerated_anon2(this));
    this.__t.listen$2(this.__e8.get$on().get$keyDown(), new $.InputAutocompleteComponentProxy_created_autogenerated_anon3(this));
    this.__t.listen$2(this.__e8.get$on().get$keyUp(), new $.InputAutocompleteComponentProxy_created_autogenerated_anon4(this));
    this.__t.create$0();
  },
  inserted_autogenerated$0: function() {
    this.__t.insert$0();
  },
  removed_autogenerated$0: function() {
    this.__t.remove$0();
    this.__t = null;
    this.__e8 = null;
    this.__e7 = null;
  },
  composeChildren$0: function() {
    $.WebComponent.prototype.composeChildren$0.call(this);
    var t1 = this._root;
    if (!(typeof t1 === "object" && t1 !== null && t1.is$ShadowRoot()))
      this._root = this;
  }
};

$$.init_autogenerated_anon = {"": "Closure;",
  call$0: function() {
    return $.get$exampleData().get$autocompleteChoices();
  },
  is$Function: true
};

$$.init_autogenerated_anon0 = {"": "Closure;box_0",
  call$1: function(e) {
    this.box_0.__e0_0.get$xtag().set$choices(e);
  },
  is$Function: true
};

$$.init_autogenerated_anon1 = {"": "Closure;",
  call$0: function() {
    return $.get$exampleDatasource();
  },
  is$Function: true
};

$$.init_autogenerated_anon2 = {"": "Closure;box_0",
  call$1: function(e) {
    this.box_0.__e1_1.get$xtag().set$datasource(e);
  },
  is$Function: true
};

$$.Template_insert_anon = {"": "Closure;",
  call$1: function(t) {
    return t.insert$0();
  },
  is$Function: true
};

$$.Template_create_anon = {"": "Closure;",
  call$1: function(t) {
    return t.create$0();
  },
  is$Function: true
};

$$.Template_remove_anon = {"": "Closure;",
  call$1: function(t) {
    return t.remove$0();
  },
  is$Function: true
};

$$.Maps__emitMap_anon = {"": "Closure;box_0,result_1,visiting_2",
  call$2: function(k, v) {
    var t1, t2;
    t1 = this.box_0;
    if (t1.first_0 !== true) {
      t2 = this.result_1;
      $.getInterceptor$JSArray(t2).add$1(t2, ", ");
    }
    t1.first_0 = false;
    t1 = this.result_1;
    t2 = this.visiting_2;
    $.Collections__emitObject(k, t1, t2);
    $.getInterceptor$JSArray(t1).add$1(t1, ": ");
    $.Collections__emitObject(v, t1, t2);
  },
  is$Function: true
};

$$.ConstantMap_forEach_anon = {"": "Closure;this_0,f_1",
  call$1: function(key) {
    var t1, t2;
    t1 = this.f_1;
    t2 = this.this_0;
    return t1.call$2(key, $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, key));
  },
  is$Function: true
};

$$._LinkedHashMapImpl_forEach_anon = {"": "Closure;f_0",
  call$1: function(entry) {
    this.f_0.call$2(entry.get$key(), entry.get$value());
  },
  is$Function: true
};

$$.NoSuchMethodError_toString_anon = {"": "Closure;box_0",
  call$2: function(key, value) {
    var t1, t2, t3;
    t1 = this.box_0;
    if ($.gtB(t1.i_1, 0)) {
      t2 = t1.sb_0;
      $.getInterceptor$JSArray(t2).add$1(t2, ", ");
    }
    t2 = t1.sb_0;
    $.getInterceptor$JSArray(t2).add$1(t2, key);
    t2 = t1.sb_0;
    $.getInterceptor$JSArray(t2).add$1(t2, ": ");
    t2 = t1.sb_0;
    t3 = $.Error_safeToString(value);
    $.getInterceptor$JSArray(t2).add$1(t2, t3);
    t3 = t1.i_1;
    t1.i_1 = $.getInterceptor$JSNumber(t3).operator$add$1(t3, 1);
  },
  is$Function: true
};

$$.InputAutocompleteComponentProxy_created_autogenerated_anon = {"": "Closure;this_1",
  call$0: function() {
    var t1 = this.this_1;
    return t1.get$inputHasFocus() === true && !(t1.get$filteredChoices() == null);
  },
  is$Function: true
};

$$.InputAutocompleteComponentProxy_created_autogenerated_anon0 = {"": "Closure;this_2",
  call$1: function(__t) {
    var __e6, __e5, t1, t2;
    __e6 = $.Element_Element$html("<ul class=\"autocomplete-content\">\n              <template id=\"__e-5\" style=\"display:none\"></template>\n            </ul>");
    __e5 = __e6.query$1("#__e-5");
    t1 = this.this_2;
    __t.loop$3(__e5, new $.InputAutocompleteComponentProxy_created_autogenerated__anon(t1), new $.InputAutocompleteComponentProxy_created_autogenerated__anon0(t1));
    t2 = [$.Text_Text("\n            "), __e6, $.Text_Text("\n          ")];
    $.getInterceptor$JSArray(__t).addAll$1(__t, t2);
  },
  is$Function: true
};

$$.InputAutocompleteComponentProxy_created_autogenerated__anon = {"": "Closure;this_3",
  call$0: function() {
    return this.this_3.get$filteredChoices();
  },
  is$Function: true
};

$$.InputAutocompleteComponentProxy_created_autogenerated__anon0 = {"": "Closure;this_4",
  call$2: function(choice, __t) {
    var t1, __e3, t2, __binding2, t3;
    t1 = {};
    t1.__e4_0 = null;
    t1.__e4_0 = $.Element_Element$html("<li class=\"\">\n                  <div id=\"__e-3\"></div>\n                  <!--content select=\".choiceTemplate\"></content-->\n                </li>");
    __e3 = t1.__e4_0.query$1("#__e-3");
    t2 = this.this_4;
    __binding2 = __t.contentBind$1(new $.InputAutocompleteComponentProxy_created_autogenerated___anon(t2, choice));
    t3 = __e3.get$nodes();
    $.getInterceptor$JSArray(t3).add$1(t3, __binding2);
    __t.listen$2(t1.__e4_0.get$on().get$mouseOver(), new $.InputAutocompleteComponentProxy_created_autogenerated___anon0(t2, choice));
    __t.listen$2(t1.__e4_0.get$on().get$mouseUp(), new $.InputAutocompleteComponentProxy_created_autogenerated___anon1(t2, choice));
    __t.oneWayBind$3(new $.InputAutocompleteComponentProxy_created_autogenerated___anon2(choice), new $.InputAutocompleteComponentProxy_created_autogenerated___anon3(t1), false);
    __t.bindClass$2(t1.__e4_0, new $.InputAutocompleteComponentProxy_created_autogenerated___anon4(t2, choice));
    t3 = [$.Text_Text("\n                "), t1.__e4_0, $.Text_Text("\n              ")];
    $.getInterceptor$JSArray(__t).addAll$1(__t, t3);
  },
  is$Function: true
};

$$.InputAutocompleteComponentProxy_created_autogenerated___anon = {"": "Closure;this_5,choice_6",
  call$0: function() {
    return this.this_5.renderChoice$1(this.choice_6);
  },
  is$Function: true
};

$$.InputAutocompleteComponentProxy_created_autogenerated___anon0 = {"": "Closure;this_7,choice_8",
  call$1: function($$event) {
    this.this_7.mouseOverChoice$2(this.choice_8, $$event);
  },
  is$Function: true
};

$$.InputAutocompleteComponentProxy_created_autogenerated___anon1 = {"": "Closure;this_9,choice_10",
  call$1: function($$event) {
    this.this_9.selectChoice$1(this.choice_10);
  },
  is$Function: true
};

$$.InputAutocompleteComponentProxy_created_autogenerated___anon2 = {"": "Closure;choice_11",
  call$0: function() {
    return this.choice_11.get$key();
  },
  is$Function: true
};

$$.InputAutocompleteComponentProxy_created_autogenerated___anon3 = {"": "Closure;box_0",
  call$1: function(e) {
    var t1 = this.box_0.__e4_0.get$attributes();
    $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, "choice-key", e);
  },
  is$Function: true
};

$$.InputAutocompleteComponentProxy_created_autogenerated___anon4 = {"": "Closure;this_12,choice_13",
  call$0: function() {
    return this.this_12.isFocused$1(this.choice_13) === true ? "focused" : "notfocused";
  },
  is$Function: true
};

$$.InputAutocompleteComponentProxy_created_autogenerated_anon1 = {"": "Closure;this_14",
  call$1: function($$event) {
    this.this_14.inputBlur$1($$event);
  },
  is$Function: true
};

$$.InputAutocompleteComponentProxy_created_autogenerated_anon2 = {"": "Closure;this_15",
  call$1: function($$event) {
    this.this_15.inputFocus$1($$event);
  },
  is$Function: true
};

$$.InputAutocompleteComponentProxy_created_autogenerated_anon3 = {"": "Closure;this_16",
  call$1: function($$event) {
    this.this_16.keyDown$1($$event);
  },
  is$Function: true
};

$$.InputAutocompleteComponentProxy_created_autogenerated_anon4 = {"": "Closure;this_17",
  call$1: function($$event) {
    this.this_17.keyUp$1($$event);
  },
  is$Function: true
};

$$.InputAutocompleteComponent__positionCompleteBox_anon = {"": "Closure;this_0,content_1,rect_2,padding_3",
  call$1: function(style) {
    var t1, t2, t3, t4, t5, marginLeft, t6, t7;
    t1 = this.rect_2;
    t2 = t1.get$top();
    t3 = window.get$pageYOffset();
    t3 = $.getInterceptor$JSNumber(t2).operator$add$1(t2, t3);
    t2 = t1.get$height();
    t4 = $.S($.getInterceptor$JSNumber(t3).operator$add$1(t3, t2)) + "px";
    t5 = this.content_1;
    t5.get$style().set$top(t4);
    t4 = this.this_0;
    marginLeft = t4._parseStyleInt$1(style.get$marginLeft());
    t4._parseStyleInt$1(style.get$marginRight());
    t4 = t1.get$left();
    t6 = window.get$pageXOffset();
    t6 = $.getInterceptor$JSNumber(t4).operator$add$1(t4, t6);
    t4 = this.padding_3;
    t6 = $.getInterceptor$JSNumber(t6).operator$sub$1(t6, t4);
    t7 = $.S($.getInterceptor$JSNumber(t6).operator$add$1(t6, marginLeft)) + "px";
    t5.get$style().set$left(t7);
    t1 = t1.get$width();
    t7 = $.S($.getInterceptor$JSNumber(t1).operator$sub$1(t1, t4)) + "px";
    t5.get$style().set$width(t7);
  },
  is$Function: true
};

$$.Element_getComputedStyle_anon = {"": "Closure;this_0,pseudoElement_1",
  call$0: function() {
    return window.$$dom_getComputedStyle$2(this.this_0, this.pseudoElement_1);
  },
  is$Function: true
};

$$._FutureImpl__handleValue_anon = {"": "Closure;thenFuture_0,value_1",
  call$1: function(_) {
    this.thenFuture_0._sendValue$1(this.value_1);
  },
  is$Function: true
};

$$.anon = {"": "Closure;this_0,callback_1",
  call$0: function() {
    this.callback_1.call$1(this.this_0);
  },
  is$Function: true
};

$$.internalCallback = {"": "Closure;this_2,callback_3",
  call$0: function() {
    var t1, t2;
    t1 = this.callback_3;
    t2 = this.this_2;
    t1.call$1(t2);
    t2.set$_handle(null);
    t2 = $globalState.get$topEventLoop();
    t1 = t2.get$activeTimerCount();
    t2.set$activeTimerCount($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
  },
  is$Function: true
};

$$.invokeClosure_anon = {"": "Closure;closure_0",
  call$0: function() {
    return this.closure_0.call$0();
  },
  is$Function: true
};

$$.invokeClosure_anon0 = {"": "Closure;closure_1,arg1_2",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  },
  is$Function: true
};

$$.invokeClosure_anon1 = {"": "Closure;closure_3,arg1_4,arg2_5",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  },
  is$Function: true
};

$$._FutureImpl__scheduleUnhandledError_anon = {"": "Closure;this_0",
  call$1: function(_) {
    var t1, error;
    t1 = this.this_0;
    if (t1.get$_hasUnhandledError() === true) {
      t1._clearUnhandledError$0();
      error = t1.get$_resultOrListeners();
      $.print("Uncaught Error: " + $.S(error.get$error()));
      if (!(t1.get$stackTrace() == null))
        $.print("Stack Trace:\n" + $.S(error.get$stackTrace()) + "\n");
      throw $.$$throw(error.get$error());
    }
  },
  is$Function: true
};

$$._FutureImpl__handleError_anon = {"": "Closure;error_0,errorFuture_1",
  call$1: function(_) {
    this.errorFuture_1._sendError$1(this.error_0);
  },
  is$Function: true
};

$$._convertDartToNative_PrepareForStructuredClone_findSlot = {"": "Closure;values_1,copies_2",
  call$1: function(value) {
    var t1, t3, length$, i, t2;
    t1 = this.values_1;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this.call$1$bailout0(1, value, t1);
    t3 = $.getInterceptor$JSStringJSArray(t1);
    length$ = t1.length;
    for (i = 0; i < length$; ++i) {
      t2 = t1[i];
      if (t2 == null ? value == null : t2 === value)
        return i;
    }
    t3.add$1(t1, value);
    t1 = this.copies_2;
    $.getInterceptor$JSArray(t1).add$1(t1, null);
    return length$;
  },
  call$1$bailout0: function(state0, env0, env1, env2, env3) {
    switch (state0) {
      case 1:
        t1 = env1;
        value = env0;
        break;
      case 2:
        length$ = env3;
        t3 = env2;
        t1 = env1;
        value = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = this.values_1;
      case 1:
        state0 = 0;
        t3 = $.getInterceptor$JSStringJSArray(t1);
        length$ = t3.get$length(t1);
      case 2:
        var t1, value, t3, length$, i, t2;
        state0 = 0;
        for (i = 0; $.ltB(i, length$); ++i) {
          t2 = t3.operator$index$1(t1, i);
          if (t2 == null ? value == null : t2 === value)
            return i;
        }
        $.getInterceptor$JSArray(t1).add$1(t1, value);
        t1 = this.copies_2;
        $.getInterceptor$JSArray(t1).add$1(t1, null);
        return length$;
    }
  },
  is$Function: true
};

$$._convertDartToNative_PrepareForStructuredClone_readSlot = {"": "Closure;copies_3",
  call$1: function(i) {
    var t1 = this.copies_3;
    return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, i);
  },
  is$Function: true
};

$$._convertDartToNative_PrepareForStructuredClone_writeSlot = {"": "Closure;copies_4",
  call$2: function(i, x) {
    var t1 = this.copies_4;
    $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, i, x);
  },
  is$Function: true
};

$$._convertDartToNative_PrepareForStructuredClone_cleanupSlots = {"": "Closure;",
  call$0: function() {
  },
  is$Function: true
};

$$._convertDartToNative_PrepareForStructuredClone_walk = {"": "Closure;findSlot_5,readSlot_6,writeSlot_7",
  call$1: function(e) {
    var t1, slot, t2, length$, copy, t3, i, element, elementCopy, copy0, j, t4;
    t1 = {};
    if (e == null)
      return e;
    if (typeof e === "boolean")
      return e;
    if (typeof e === "number")
      return e;
    if (typeof e === "string")
      return e;
    if (typeof e === "object" && e !== null && !!e.is$Date)
      throw $.$$throw($.UnimplementedError$("structured clone of Date"));
    if (typeof e === "object" && e !== null && !!e.is$RegExp)
      throw $.$$throw($.UnimplementedError$("structured clone of RegExp"));
    if (typeof e === "object" && e !== null && e.is$File())
      return e;
    if (typeof e === "object" && e !== null && e.is$Blob())
      return e;
    if (typeof e === "object" && e !== null && e.is$FileList())
      return e;
    if (typeof e === "object" && e !== null && e.is$ImageData())
      return e;
    if (typeof e === "object" && e !== null && e.is$ArrayBuffer())
      return e;
    if (typeof e === "object" && e !== null && e.is$ArrayBufferView())
      return e;
    if (typeof e === "object" && e !== null && e.is$Map()) {
      slot = this.findSlot_5.call$1(e);
      t1.copy_0 = this.readSlot_6.call$1(slot);
      t2 = t1.copy_0;
      if (!(t2 == null))
        return t2;
      t1.copy_0 = {};
      this.writeSlot_7.call$2(slot, t1.copy_0);
      e.forEach$1(new $._convertDartToNative_PrepareForStructuredClone_walk_anon(t1, this));
      return t1.copy_0;
    }
    if (typeof e === "object" && e !== null && (e.constructor === Array || e.is$List())) {
      if (typeof e !== "object" || e === null || (e.constructor !== Array || !!e.immutable$list) && !e.is$JavaScriptIndexingBehavior())
        return this.call$1$bailout(1, e);
      length$ = e.length;
      slot = this.findSlot_5.call$1(e);
      t2 = this.readSlot_6;
      copy = t2.call$1(slot);
      if (!(copy == null)) {
        if (true === copy) {
          copy = new Array(length$);
          this.writeSlot_7.call$2(slot, copy);
        }
        return copy;
      }
      t1 = e instanceof Array && !!!(e.immutable$list);
      t3 = this.writeSlot_7;
      if (t1) {
        t3.call$2(slot, true);
        for (i = 0; i < length$; ++i) {
          if (i >= e.length)
            throw $.ioore(i);
          element = e[i];
          elementCopy = this.call$1(element);
          if (!(elementCopy == null ? element == null : elementCopy === element)) {
            copy0 = t2.call$1(slot);
            if (true === copy0) {
              copy0 = new Array(length$);
              t3.call$2(slot, copy0);
            }
            if (typeof copy0 !== "object" || copy0 === null || (copy0.constructor !== Array || !!copy0.immutable$list) && !copy0.is$JavaScriptIndexingBehavior())
              return this.call$1$bailout(3, e, t3, elementCopy, $.CONSTANT0, length$, copy0, slot, t2, i, copy);
            for (t1 = e.length, t2 = copy0.length, j = 0; j < i; ++j) {
              if (j >= t1)
                throw $.ioore(j);
              t4 = e[j];
              if (j >= t2)
                throw $.ioore(j);
              copy0[j] = t4;
            }
            if (i >= t2)
              throw $.ioore(i);
            copy0[i] = elementCopy;
            ++i;
            copy = copy0;
            break;
          }
        }
        if (copy == null) {
          t3.call$2(slot, e);
          copy = e;
        }
      } else {
        copy = new Array(length$);
        t3.call$2(slot, copy);
        i = 0;
      }
      if (typeof copy !== "object" || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.is$JavaScriptIndexingBehavior())
        return this.call$1$bailout(4, e, length$, copy, i, $.CONSTANT0);
      for (; i < length$; ++i) {
        if (i >= e.length)
          throw $.ioore(i);
        t1 = this.call$1(e[i]);
        if (i >= copy.length)
          throw $.ioore(i);
        copy[i] = t1;
      }
      return copy;
    }
    throw $.$$throw($.UnimplementedError$("structured clone of other type"));
  },
  call$1$bailout: function(state0, env0, env1, env2, env3, env4, env5, env6, env7, env8, env9) {
    switch (state0) {
      case 1:
        e = env0;
        break;
      case 2:
        t2 = env2;
        length$ = env1;
        e = env0;
        break;
      case 3:
        copy = env9;
        i = env8;
        t4 = env7;
        slot = env6;
        copy0 = env5;
        length$ = env4;
        t2 = env3;
        elementCopy = env2;
        t3 = env1;
        e = env0;
        break;
      case 4:
        t2 = env4;
        i = env3;
        copy = env2;
        length$ = env1;
        e = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = {};
        if (e == null)
          return e;
        if (typeof e === "boolean")
          return e;
        if (typeof e === "number")
          return e;
        if (typeof e === "string")
          return e;
        if (typeof e === "object" && e !== null && !!e.is$Date)
          throw $.$$throw($.UnimplementedError$("structured clone of Date"));
        if (typeof e === "object" && e !== null && !!e.is$RegExp)
          throw $.$$throw($.UnimplementedError$("structured clone of RegExp"));
        if (typeof e === "object" && e !== null && e.is$File())
          return e;
        if (typeof e === "object" && e !== null && e.is$Blob())
          return e;
        if (typeof e === "object" && e !== null && e.is$FileList())
          return e;
        if (typeof e === "object" && e !== null && e.is$ImageData())
          return e;
        if (typeof e === "object" && e !== null && e.is$ArrayBuffer())
          return e;
        if (typeof e === "object" && e !== null && e.is$ArrayBufferView())
          return e;
        if (typeof e === "object" && e !== null && e.is$Map()) {
          slot = this.findSlot_5.call$1(e);
          t1.copy_0 = this.readSlot_6.call$1(slot);
          t2 = t1.copy_0;
          if (!(t2 == null))
            return t2;
          t1.copy_0 = {};
          this.writeSlot_7.call$2(slot, t1.copy_0);
          e.forEach$1(new $._convertDartToNative_PrepareForStructuredClone_walk_anon(t1, this));
          return t1.copy_0;
        }
      default:
        var t1, slot, t2, e, length$, t4, copy, t3, i, element, elementCopy, copy0, j;
        if (state0 === 4 || state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && typeof e === "object" && e !== null && (e.constructor === Array || e.is$List()))
          switch (state0) {
            case 0:
            case 1:
              state0 = 0;
              t2 = $.getInterceptor$JSStringJSArray(e);
              length$ = t2.get$length(e);
            case 2:
              state0 = 0;
              slot = this.findSlot_5.call$1(e);
              t4 = this.readSlot_6;
              copy = t4.call$1(slot);
              if (!(copy == null)) {
                if (true === copy) {
                  copy = new Array(length$);
                  this.writeSlot_7.call$2(slot, copy);
                }
                return copy;
              }
              t1 = e instanceof Array && !!!(e.immutable$list);
              t3 = this.writeSlot_7;
            case 3:
              if (state0 === 3 || state0 === 0 && t1)
                switch (state0) {
                  case 0:
                    t3.call$2(slot, true);
                    i = 0;
                  case 3:
                    L0:
                      while (true)
                        switch (state0) {
                          case 0:
                            if (!$.ltB(i, length$))
                              break L0;
                            element = t2.operator$index$1(e, i);
                            elementCopy = this.call$1(element);
                          case 3:
                            if (state0 === 3 || state0 === 0 && !(elementCopy == null ? element == null : elementCopy === element))
                              switch (state0) {
                                case 0:
                                  copy0 = t4.call$1(slot);
                                  if (true === copy0) {
                                    copy0 = new Array(length$);
                                    t3.call$2(slot, copy0);
                                  }
                                case 3:
                                  state0 = 0;
                                  for (t1 = $.getInterceptor$JSArray(copy0), j = 0; j < i; ++j)
                                    t1.operator$indexSet$2(copy0, j, t2.operator$index$1(e, j));
                                  t1.operator$indexSet$2(copy0, i, elementCopy);
                                  ++i;
                                  copy = copy0;
                                  break L0;
                              }
                            ++i;
                        }
                    if (copy == null) {
                      t3.call$2(slot, e);
                      copy = e;
                    }
                }
              else {
                copy = new Array(length$);
                t3.call$2(slot, copy);
                i = 0;
              }
            case 4:
              state0 = 0;
              for (t1 = $.getInterceptor$JSArray(copy); $.ltB(i, length$); ++i)
                t1.operator$indexSet$2(copy, i, this.call$1(t2.operator$index$1(e, i)));
              return copy;
          }
        throw $.$$throw($.UnimplementedError$("structured clone of other type"));
    }
  },
  is$Function: true
};

$$._convertDartToNative_PrepareForStructuredClone_walk_anon = {"": "Closure;box_0,walk_8",
  call$2: function(key, value) {
    this.box_0.copy_0[key] = this.walk_8.call$1(value);
  },
  is$Function: true
};

$$.MutationObserver_observe_anon = {"": "Closure;parsedOptions_0",
  call$2: function(k, v) {
    if ($.CONSTANT5.containsKey$1(k) === true)
      this.parsedOptions_0[k] = true === v;
    else if ($.eqB(k, "attributeFilter"))
      this.parsedOptions_0[k] = v;
    else
      throw $.$$throw($.ArgumentError$("Illegal MutationObserver.observe option '" + $.S(k) + "'"));
  },
  is$Function: true
};

$$.MutationObserver_observe_override = {"": "Closure;parsedOptions_1",
  call$2: function(key, value) {
    if (!(value == null))
      this.parsedOptions_1[key] = value;
  },
  is$Function: true
};

$$._emptyStyleFuture_anon = {"": "Closure;",
  call$0: function() {
    return $.Element_Element$tag("div").get$style();
  },
  is$Function: true
};

$$.LoopTemplateInAttribute_insert_anon = {"": "Closure;this_0",
  call$1: function(e) {
    var t1, t2, t3;
    t1 = this.this_0;
    $.Template.prototype.remove$0.call(t1);
    t2 = t1.get$node().get$nodes();
    $.getInterceptor$JSArray(t2).clear$0(t2);
    t2 = t1.get$nodes();
    $.getInterceptor$JSArray(t2).clear$0(t2);
    for (t2 = e.get$newValue(), t2 = $.getInterceptor$JSArray(t2).get$iterator(t2); t2.moveNext$0() === true;)
      t1.iterSetup$2(t2.get$current(), t1);
    $.Template.prototype.create$0.call(t1);
    t2 = t1.get$node().get$nodes();
    t3 = t1.get$nodes();
    $.getInterceptor$JSArray(t2).addAll$1(t2, t3);
    $.Template.prototype.insert$0.call(t1);
  },
  is$Function: true
};

$$.watch_anon = {"": "Closure;",
  call$0: function() {
  },
  is$Function: true
};

$$.watch_anon0 = {"": "Closure;target_0",
  call$0: function() {
    return this.target_0;
  },
  is$Function: true
};

$$.watch_anon1 = {"": "Closure;watcher_1",
  call$0: function() {
    return $._unregister(this.watcher_1);
  },
  is$Function: true
};

$$.LoopTemplate_insert_anon = {"": "Closure;this_0",
  call$1: function(e) {
    var t1, t2;
    t1 = this.this_0;
    $.PlaceholderTemplate.prototype.remove$0.call(t1);
    for (t2 = e.get$newValue(), t2 = $.getInterceptor$JSArray(t2).get$iterator(t2); t2.moveNext$0() === true;)
      t1.iterSetup$2(t2.get$current(), t1);
    $.PlaceholderTemplate.prototype.insert$0.call(t1);
  },
  is$Function: true
};

$$.FilteredElementList__filtered_anon = {"": "Closure;",
  call$1: function(n) {
    return typeof n === "object" && n !== null && n.is$Element();
  },
  is$Function: true
};

$$.FilteredElementList_removeRange_anon = {"": "Closure;",
  call$1: function(el) {
    return el.remove$0();
  },
  is$Function: true
};

$$._ElementFactoryProvider__getColgroup_anon = {"": "Closure;",
  call$1: function(n) {
    return $.eq(n.get$tagName(), "COLGROUP");
  },
  is$Function: true
};

$$.bindCssClasses_anon = {"": "Closure;elem_0",
  call$1: function(e) {
    var t1 = this.elem_0;
    $.updateCssClass(t1, false, e.get$oldValue());
    $.updateCssClass(t1, true, e.get$newValue());
  },
  is$Function: true
};

$$.updateCssClass_anon = {"": "Closure;",
  call$1: function(e) {
    return !(e == null) && !$.eqB(e, "");
  },
  is$Function: true
};

$$.updateCssClass_anon0 = {"": "Closure;",
  call$1: function(e) {
    return !(e == null) && !$.eqB(e, "");
  },
  is$Function: true
};

$$.HashSet_forEach_anon = {"": "Closure;f_0",
  call$2: function(key, value) {
    this.f_0.call$1(key);
  },
  is$Function: true
};

$$.CssClassSet_clear_anon = {"": "Closure;",
  call$1: function(s) {
    return $.getInterceptor$JSArray(s).clear$0(s);
  },
  is$Function: true
};

$$.CssClassSet_removeAll_anon = {"": "Closure;iterable_0",
  call$1: function(s) {
    var t1 = this.iterable_0;
    return $.getInterceptor$JSArray(s).removeAll$1(s, t1);
  },
  is$Function: true
};

$$.CssClassSet_addAll_anon = {"": "Closure;iterable_0",
  call$1: function(s) {
    var t1 = this.iterable_0;
    return $.getInterceptor$JSArray(s).addAll$1(s, t1);
  },
  is$Function: true
};

$$.CssClassSet_add_anon = {"": "Closure;value_0",
  call$1: function(s) {
    var t1 = this.value_0;
    return $.getInterceptor$JSArray(s).add$1(s, t1);
  },
  is$Function: true
};

$$.Template_contentBind_anon = {"": "Closure;exp_1",
  call$0: function() {
    return $.S(this.exp_1.call$0());
  },
  is$Function: true
};

$$.Template_contentBind_anon0 = {"": "Closure;box_0,exp_2",
  call$1: function(e) {
    var t1, t2;
    t1 = this.exp_2.call$0();
    t2 = this.box_0;
    t2.bindNode_0 = $.updateBinding(t1, t2.bindNode_0, e.get$newValue());
  },
  is$Function: true
};

$$.InputAutocompleteComponent__doSearch_anon = {"": "Closure;this_0",
  call$1: function(matches) {
    var t1, t2;
    t1 = $.getInterceptor$JSArray(matches).toList$0(matches);
    t2 = this.this_0;
    t2.set$_liblib5$_matches(t1);
    $.dispatch();
    t2._positionCompleteBox$0();
  },
  is$Function: true
};

$$.Template_listen_anon = {"": "Closure;listener_0",
  call$1: function(e) {
    this.listener_0.call$1(e);
    $.dispatch();
  },
  is$Function: true
};

$$.ConditionalTemplate_insert_anon = {"": "Closure;this_0",
  call$1: function(e) {
    var t1, t2;
    t1 = this.this_0;
    t2 = t1.get$isVisible() === true;
    if (!t2 && e.get$newValue() === true) {
      t1.bodySetup$1(t1);
      $.PlaceholderTemplate.prototype.insert$0.call(t1);
      t1.set$isVisible(true);
    } else if (t2 && e.get$newValue() !== true) {
      $.PlaceholderTemplate.prototype.remove$0.call(t1);
      t1.set$isVisible(false);
    }
  },
  is$Function: true
};

$$.DomPropertyBinding_insert_anon = {"": "Closure;this_0",
  call$1: function(e) {
    var t1, t2, t3;
    t1 = this.this_0;
    t2 = t1.get$isUrl() === true;
    t3 = e.get$newValue();
    t1.setter$1(t2 ? $.sanitizeUri(t3) : t3);
  },
  is$Function: true
};

$$.Uri_hashCode_combine = {"": "Closure;",
  call$2: function(part, current) {
    var t1, t2;
    t1 = $.getInterceptor$JSNumber(current).operator$mul$1(current, 31);
    t2 = $.getInterceptor(part).get$hashCode(part);
    t2 = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t2);
    return $.getInterceptor$JSNumber(t2).operator$and$1(t2, 1073741823);
  },
  is$Function: true
};

$$.SimpleStringDatasource_query_anon = {"": "Closure;query_0",
  call$1: function(choice) {
    var t1, t2;
    t1 = choice.get$key();
    t1 = $.getInterceptor$JSString(t1).toLowerCase$0(t1);
    t2 = this.query_0;
    return $.getInterceptor$JSStringJSArray(t1).contains$1(t1, t2);
  },
  is$Function: true
};

$$.ExampleDatasource_query_anon = {"": "Closure;completer_0,future_1",
  call$0: function() {
    this.future_1.then$1(new $.ExampleDatasource_query__anon(this.completer_0));
  },
  is$Function: true
};

$$.ExampleDatasource_query__anon = {"": "Closure;completer_2",
  call$1: function(coll) {
    return this.completer_2.complete$1(coll);
  },
  is$Function: true
};

$$.IsolateNatives__processWorkerMessage_function = {"": "Closure;entryPoint_0,replyTo_1",
  call$0: function() {
    $.IsolateNatives__startIsolate(this.entryPoint_0, this.replyTo_1);
  },
  is$Function: true
};

$$._BaseSendPort_call_anon = {"": "Closure;completer_0,port_1",
  call$2: function(value, ignoreReplyTo) {
    var t1, t2;
    this.port_1.close$0();
    t1 = typeof value === "object" && value !== null && !!value.is$Exception;
    t2 = this.completer_0;
    if (t1)
      t2.completeError$1(value);
    else
      t2.complete$1(value);
  },
  is$Function: true
};

$$._WorkerSendPort_send_anon = {"": "Closure;this_0,message_1,replyTo_2",
  call$0: function() {
    var t1, t2, workerMessage, manager;
    t1 = this.this_0;
    t2 = this.replyTo_2;
    t1._checkReplyTo$1(t2);
    workerMessage = $._serializeMessage($.makeLiteralMap(["command", "message", "port", t1, "msg", this.message_1, "replyTo", t2]));
    if ($globalState.get$isWorker() === true)
      $globalState.get$mainManager().postMessage$1(workerMessage);
    else {
      t2 = $globalState.get$managers();
      t1 = t1.get$_workerId();
      manager = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, t1);
      if (!(manager == null))
        manager.postMessage$1(workerMessage);
    }
  },
  is$Function: true
};

$$._waitForPendingPorts_anon = {"": "Closure;callback_0",
  call$1: function(_) {
    return this.callback_0.call$0();
  },
  is$Function: true
};

$$._FutureImpl__FutureImpl$wait_anon = {"": "Closure;box_0,completer_1,values_2,pos_3",
  call$1: function(value) {
    var t1, t2, t3, remaining;
    t1 = this.values_2;
    t2 = this.pos_3;
    $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, t2, value);
    t2 = this.box_0;
    t3 = t2.remaining_0;
    remaining = $.getInterceptor$JSNumber(t3).operator$sub$1(t3, 1);
    t2.remaining_0 = remaining;
    if ($.eqB(remaining, 0))
      this.completer_1.complete$1(t1);
  },
  is$Function: true
};

$$._FutureImpl__FutureImpl$wait_anon0 = {"": "Closure;box_0,completer_4",
  call$1: function(error) {
    var t1 = this.box_0;
    if (t1.completed_1 !== true)
      this.completer_4.completeError$2(error.get$error(), error.get$stackTrace());
    t1.completed_1 = true;
  },
  is$Function: true
};

$$._PendingSendPortFinder_visitMap_anon = {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  },
  is$Function: true
};

$$.Storage_values_anon = {"": "Closure;values_0",
  call$2: function(k, v) {
    var t1 = this.values_0;
    return $.getInterceptor$JSArray(t1).add$1(t1, v);
  },
  is$Function: true
};

$$.ConstantMap_values_anon = {"": "Closure;this_0",
  call$1: function(key) {
    var t1 = this.this_0;
    return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, key);
  },
  is$Function: true
};

$$._LinkedHashMapImpl_values_anon = {"": "Closure;",
  call$1: function(entry) {
    return entry.get$value();
  },
  is$Function: true
};

$$._PendingSendPortFinder_visitList_anon = {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  },
  is$Function: true
};

$$._NativeJsSendPort_send_anon = {"": "Closure;this_1,message_2,replyTo_3",
  call$0: function() {
    var t1, t2, t3, t4, t5, isolate, shouldSerialize, msg;
    t1 = {};
    t2 = this.this_1;
    t3 = this.replyTo_3;
    t2._checkReplyTo$1(t3);
    t4 = $globalState.get$isolates();
    t5 = t2.get$_isolateId();
    isolate = $.getInterceptor$JSStringJSArray(t4).operator$index$1(t4, t5);
    if (isolate == null)
      return;
    if (t2.get$_receivePort().get$_liblib6$_callback() == null)
      return;
    shouldSerialize = !($globalState.get$currentContext() == null) && !$.eqB($globalState.get$currentContext().get$id(), t2.get$_isolateId());
    msg = this.message_2;
    t1.msg_0 = msg;
    t1.reply_1 = t3;
    if (shouldSerialize) {
      t1.msg_0 = $._serializeMessage(t1.msg_0);
      t1.reply_1 = $._serializeMessage(t1.reply_1);
    }
    $globalState.get$topEventLoop().enqueue$3(isolate, new $._NativeJsSendPort_send__anon(t1, t2, shouldSerialize), "receive " + $.S(msg));
  },
  is$Function: true
};

$$._NativeJsSendPort_send__anon = {"": "Closure;box_0,this_4,shouldSerialize_5",
  call$0: function() {
    var t1, t2;
    t1 = this.this_4;
    if (!(t1.get$_receivePort().get$_liblib6$_callback() == null)) {
      if (this.shouldSerialize_5 === true) {
        t2 = this.box_0;
        t2.msg_0 = $._deserializeMessage(t2.msg_0);
        t2.reply_1 = $._deserializeMessage(t2.reply_1);
      }
      t1 = t1.get$_receivePort();
      t2 = this.box_0;
      t1._liblib6$_callback$2(t2.msg_0, t2.reply_1);
    }
  },
  is$Function: true
};

$$.Storage_keys_anon = {"": "Closure;keys_0",
  call$2: function(k, v) {
    var t1 = this.keys_0;
    return $.getInterceptor$JSArray(t1).add$1(t1, k);
  },
  is$Function: true
};

$$._LinkedHashMapImpl_keys_anon = {"": "Closure;",
  call$1: function(entry) {
    return entry.get$key();
  },
  is$Function: true
};

$$._Copier_visitMap_anon = {"": "Closure;box_0,this_1",
  call$2: function(key, val) {
    var t1, t2, t3;
    t1 = this.box_0.copy_0;
    t2 = this.this_1;
    t3 = t2._dispatch$1(key);
    t2 = t2._dispatch$1(val);
    $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, t3, t2);
  },
  is$Function: true
};

$$._EventLoop__runHelper_next = {"": "Closure;this_0",
  call$0: function() {
    if (this.this_0.runIteration$0() !== true)
      return;
    $.Timer_Timer(0, new $._EventLoop__runHelper_next_anon(this));
  },
  is$Function: true
};

$$._EventLoop__runHelper_next_anon = {"": "Closure;next_1",
  call$1: function(_) {
    return this.next_1.call$0();
  },
  is$Function: true
};

$$.Closure = {"": "Object;",
  toString$0: function() {
    return "Closure";
  },
  is$Function: true
};

$$.BoundClosure = {"": "Closure;self,target",
  call$1: function(p0) {
    return this.self[this.target](p0);
  }
};
$$.BoundClosure0 = {"": "Closure;self,target,receiver",
  call$1: function(p0) {
    return this.self[this.target](this.receiver, p0);
  }
};
$$.BoundClosure1 = {"": "Closure;self,target,receiver",
  call$2: function(p0, p1) {
    return this.self[this.target](this.receiver, p0, p1);
  },
  call$1: function($receiver, other) {
    return this.call$2($receiver, other, 0);
  }
};
$$.BoundClosure2 = {"": "Closure;self,target",
  call$0: function() {
    return this.self[this.target]();
  }
};
$$.BoundClosure3 = {"": "Closure;self,target",
  call$2: function(p0, p1) {
    return this.self[this.target](p0, p1);
  }
};
$.ExampleData$ = function() {
  return new $.ExampleData();
};

$.ExampleDatasource$ = function(givenChoices) {
  var t1 = new $.ExampleDatasource(givenChoices, null);
  t1.SimpleStringDatasource$1(givenChoices);
  return t1;
};

$.init_autogenerated = function() {
  var t1, _root, __t;
  t1 = {};
  _root = document.get$body();
  t1.__e0_0 = null;
  t1.__e1_1 = null;
  __t = $.Template$(_root);
  t1.__e0_0 = _root.query$1("#__e-0");
  __t.oneWayBind$3(new $.init_autogenerated_anon(), new $.init_autogenerated_anon0(t1), false);
  $.InputAutocompleteComponentProxy$forElement(t1.__e0_0);
  __t.component$1(t1.__e0_0);
  t1.__e1_1 = _root.query$1("#__e-1");
  __t.oneWayBind$3(new $.init_autogenerated_anon1(), new $.init_autogenerated_anon2(t1), false);
  $.InputAutocompleteComponentProxy$forElement(t1.__e1_1);
  __t.component$1(t1.__e1_1);
  __t.create$0();
  __t.insert$0();
};

$.main = function() {
  $.init_autogenerated();
};

$.InputAutocompleteComponentProxy$forElement = function(e) {
  var t1 = new $.InputAutocompleteComponentProxy(null, null, null, null, false, null, null, null, -1, e, null);
  t1.WebComponent$forElement$1(e);
  return t1;
};

$._ConstantMapKeyIterable$ = function(_map) {
  return new $._ConstantMapKeyIterable(_map);
};

$.Strings__toJsStringArray = function(strings) {
  var length$, i, string;
  if (typeof strings !== "object" || strings === null || (strings.constructor !== Array || !!strings.immutable$list) && !strings.is$JavaScriptIndexingBehavior())
    return $.Strings__toJsStringArray$bailout(1, strings);
  $.checkNull(strings);
  if (!strings.constructor === Array) {
    strings = $.List_List$from(strings);
    $.setRuntimeTypeInfo(strings, []);
  }
  length$ = strings.length;
  for (i = 0; i < length$; ++i) {
    if (i >= strings.length)
      throw $.ioore(i);
    string = strings[i];
    if (!(typeof string === "string"))
      throw $.$$throw($.ArgumentError$(string));
  }
  return strings;
};

$.Strings__toJsStringArray$bailout = function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      strings = env0;
      break;
    case 2:
      strings = env2;
      length$ = env1;
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      $.checkNull(strings);
      if (!(!(strings == null) && strings.constructor === Array)) {
        strings = $.List_List$from(strings);
        $.setRuntimeTypeInfo(strings, []);
      }
      t1 = $.getInterceptor$JSStringJSArray(strings);
      length$ = t1.get$length(strings);
    case 2:
      var strings, t1, length$, i, string;
      state0 = 0;
      for (i = 0; $.ltB(i, length$); ++i) {
        string = t1.operator$index$1(strings, i);
        if (!(typeof string === "string"))
          throw $.$$throw($.ArgumentError$(string));
      }
      return strings;
  }
};

$._callInIsolate = function(isolate, function$) {
  isolate.eval$1(function$);
  $globalState.get$topEventLoop().run$0();
};

$._currentIsolate = function() {
  return $globalState.get$currentContext();
};

$.startRootIsolate = function(entry) {
  var t1, rootContext;
  t1 = $._Manager$();
  $._globalState0(t1);
  if ($globalState.get$isWorker() === true)
    return;
  rootContext = $._IsolateContext$();
  $globalState.set$rootContext(rootContext);
  $globalState.set$currentContext(rootContext);
  rootContext.eval$1(entry);
  $globalState.get$topEventLoop().run$0();
};

$._globalState = function() {
  return $globalState;
};

$._globalState0 = function(val) {
  $globalState = val;
};

$._Manager$ = function() {
  var t1 = new $._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null);
  t1._Manager$0();
  return t1;
};

$._IsolateContext$ = function() {
  var t1 = new $._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
};

$._EventLoop$ = function() {
  return new $._EventLoop($.Queue_Queue($._IsolateEvent), 0);
};

$._IsolateEvent$ = function(isolate, fn, message) {
  return new $._IsolateEvent(isolate, fn, message);
};

$._MainManagerStub$ = function() {
  return new $._MainManagerStub();
};

$.IsolateNatives_computeThisScript = function() {
  var t1, t2, src;
  for (t1 = $.CONSTANT0.get$iterator(document.getElementsByTagName('script')); t1.moveNext$0() === true;) {
    t2 = t1.get$current();
    src = t2 && t2.src;
    if (!(src == null)) {
      t2 = $.getInterceptor$JSString(src);
      t2 = t2.endsWith$1(src, "test_controller.js") !== true && t2.endsWith$1(src, "dart.js") !== true;
    } else
      t2 = false;
    if (t2)
      return src;
  }
  return;
};

$.IsolateNatives_computeGlobalThis = function() {
  return function() { return this; }();
};

$.IsolateNatives__processWorkerMessage = function(sender, e) {
  var msg, t1, t2, entryPoint, replyTo, context;
  msg = $._deserializeMessage(e.data);
  t1 = $.getInterceptor$JSStringJSArray(msg);
  switch (t1.operator$index$1(msg, "command")) {
    case "start":
      t2 = t1.operator$index$1(msg, "id");
      $globalState.set$currentManagerId(t2);
      entryPoint = $[t1.operator$index$1(msg, "functionName")];
      replyTo = $._deserializeMessage(t1.operator$index$1(msg, "replyTo"));
      context = $._IsolateContext$();
      $globalState.get$topEventLoop().enqueue$3(context, new $.IsolateNatives__processWorkerMessage_function(entryPoint, replyTo), "worker-start");
      $globalState.set$currentContext(context);
      $globalState.get$topEventLoop().run$0();
      break;
    case "spawn-worker":
      $.IsolateNatives__spawnWorker(t1.operator$index$1(msg, "functionName"), t1.operator$index$1(msg, "uri"), t1.operator$index$1(msg, "replyPort"));
      break;
    case "message":
      if (!(t1.operator$index$1(msg, "port") == null))
        t1.operator$index$1(msg, "port").send$2(t1.operator$index$1(msg, "msg"), t1.operator$index$1(msg, "replyTo"));
      $globalState.get$topEventLoop().run$0();
      break;
    case "close":
      $.IsolateNatives__log("Closing Worker");
      t1 = $globalState.get$managers();
      t2 = sender.get$id();
      $.getInterceptor$JSArray(t1).remove$1(t1, t2);
      sender.terminate$0();
      $globalState.get$topEventLoop().run$0();
      break;
    case "log":
      $.IsolateNatives__log(t1.operator$index$1(msg, "msg"));
      break;
    case "print":
      if ($globalState.get$isWorker() === true)
        $globalState.get$mainManager().postMessage$1($._serializeMessage($.makeLiteralMap(["command", "print", "msg", msg])));
      else
        $.print(t1.operator$index$1(msg, "msg"));
      break;
    case "error":
      throw $.$$throw(t1.operator$index$1(msg, "msg"));
  }
};

$.IsolateNatives__log = function(msg) {
  var trace, t1, exception;
  if ($globalState.get$isWorker() === true)
    $globalState.get$mainManager().postMessage$1($._serializeMessage($.makeLiteralMap(["command", "log", "msg", msg])));
  else
    try {
      t1 = msg;
      $.get$globalThis().console.log(t1);
    } catch (exception) {
      $.unwrapException(exception);
      trace = $.getTraceFromException(exception);
      throw $.$$throw($.Exception_Exception(trace));
    }

};

$.IsolateNatives__startIsolate = function(topLevel, replyTo) {
  $.lazyPort = $.ReceivePort_ReceivePort();
  if ($.lazyPort == null)
    $.lazyPort = $.ReceivePort_ReceivePort();
  replyTo.send$2("spawned", $.lazyPort.toSendPort$0());
  topLevel.call$0();
};

$.IsolateNatives__spawnWorker = function(functionName, uri, replyPort) {
  var worker, t1, workerId;
  if (functionName == null)
    functionName = "main";
  if (uri == null)
    uri = $.get$IsolateNatives_thisScript();
  worker = new Worker(uri);
  worker.set$onmessage(function(e) { $.IsolateNatives__processWorkerMessage.call$2(worker, e); });
  t1 = $globalState;
  workerId = t1.get$nextManagerId();
  t1.set$nextManagerId($.getInterceptor$JSNumber(workerId).operator$add$1(workerId, 1));
  worker.set$id(workerId);
  t1 = $globalState.get$managers();
  $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, workerId, worker);
  worker.postMessage$1($._serializeMessage($.makeLiteralMap(["command", "start", "id", workerId, "replyTo", $._serializeMessage(replyPort), "functionName", functionName])));
};

$._NativeJsSendPort$ = function(_receivePort, isolateId) {
  return new $._NativeJsSendPort(_receivePort, isolateId);
};

$._WorkerSendPort$ = function(_workerId, isolateId, _receivePortId) {
  return new $._WorkerSendPort(_workerId, _receivePortId, isolateId);
};

$.ReceivePortImpl$ = function() {
  var t1 = $.ReceivePortImpl__nextFreeId;
  $.ReceivePortImpl__nextFreeId = $.getInterceptor$JSNumber(t1).operator$add$1(t1, 1);
  t1 = new $.ReceivePortImpl(t1, null);
  t1.ReceivePortImpl$0();
  return t1;
};

$._waitForPendingPorts = function(message, callback) {
  var finder = $._PendingSendPortFinder$();
  finder.traverse$1(message);
  $._FutureImpl__FutureImpl$wait(finder.ports).then$1(new $._waitForPendingPorts_anon(callback));
};

$._PendingSendPortFinder$ = function() {
  var t1 = $._MessageTraverserVisitedMap$();
  t1 = new $._PendingSendPortFinder([], t1);
  t1._PendingSendPortFinder$0();
  return t1;
};

$._serializeMessage = function(message) {
  if ($globalState.get$needSerialization() === true)
    return $._JsSerializer$().traverse$1(message);
  else
    return $._JsCopier$().traverse$1(message);
};

$._deserializeMessage = function(message) {
  if ($globalState.get$needSerialization() === true)
    return $._JsDeserializer$().deserialize$1(message);
  else
    return message;
};

$._JsSerializer$ = function() {
  var t1 = new $._JsSerializer(0, $._MessageTraverserVisitedMap$());
  t1._JsSerializer$0();
  return t1;
};

$._JsCopier$ = function() {
  var t1 = new $._JsCopier($._MessageTraverserVisitedMap$());
  t1._JsCopier$0();
  return t1;
};

$._JsDeserializer$ = function() {
  return new $._JsDeserializer(null);
};

$._JsVisitedMap$ = function() {
  return new $._JsVisitedMap(null);
};

$._MessageTraverserVisitedMap$ = function() {
  return new $._MessageTraverserVisitedMap();
};

$.TimerImpl$ = function(milliseconds, callback) {
  var t1 = new $.TimerImpl(true, false, null);
  t1.TimerImpl$2(milliseconds, callback);
  return t1;
};

$.hasTimer = function() {
  return !($.get$globalThis().setTimeout == null);
};

$._ArrayIterator$ = function(_list) {
  return new $._ArrayIterator(_list, -1, null);
};

$.gtB = function(a, b) {
  return typeof a === "number" && typeof b === "number" ? a > b : $.gt$slow(a, b) === true;
};

$.geB = function(a, b) {
  return typeof a === "number" && typeof b === "number" ? a >= b : $.ge$slow(a, b) === true;
};

$.ltB = function(a, b) {
  return typeof a === "number" && typeof b === "number" ? a < b : $.lt$slow(a, b) === true;
};

$.checkNumbers = function(a, b) {
  if (typeof a === "number")
    if (typeof b === "number")
      return true;
    else
      throw $.$$throw($.ArgumentError$(b));
  return false;
};

$.eq = function(a, b) {
  if (a == null)
    return b == null;
  if (b == null)
    return false;
  if (typeof a === "object")
    if (!!a.operator$eq$1)
      return a.operator$eq$1(b);
  return a === b;
};

$.eqB = function(a, b) {
  if (a == null)
    return b == null;
  if (b == null)
    return false;
  if (typeof a === "object")
    if (!!a.operator$eq$1)
      return a.operator$eq$1(b) === true;
  return a === b;
};

$.gt$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a > b;
  return a.operator$gt$1(b);
};

$.ge$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a >= b;
  return a.operator$ge$1(b);
};

$.lt$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a < b;
  return a.operator$lt$1(b);
};

$.checkMutable = function(list, reason) {
  if (!!(list.immutable$list))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.checkGrowable = function(list, reason) {
  if (!!(list.fixed$length))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.S = function(value) {
  var res = $.getInterceptor(value).toString$0(value);
  if (!(typeof res === "string"))
    throw $.$$throw($.ArgumentError$(value));
  return res;
};

$.Primitives_objectHashCode = function(object) {
  var hash, t1;
  hash = object.$identityHash;
  if (hash == null) {
    t1 = $.Primitives_hashCodeSeed;
    hash = $.getInterceptor$JSNumber(t1).operator$add$1(t1, 1);
    $.Primitives_hashCodeSeed = hash;
    object.$identityHash = hash;
  }
  return hash;
};

$.Primitives_printString = function(string) {
  if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof window == "object") {
    if (typeof console == "object")
      console.log(string);
    return;
  }
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw 'Unable to print message: ' + String(string);
};

$.Primitives__throwFormatException = function(string) {
  throw $.$$throw($.FormatException$(string));
};

$.Primitives_parseInt = function(source, radix, handleError) {
  var match, t1, maxCharCode, digitsPart, i;
  if (handleError == null)
    handleError = $.Primitives__throwFormatException;
  $.checkString(source);
  match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
  if (radix == null) {
    if (!(match == null)) {
      t1 = $.getInterceptor$JSStringJSArray(match);
      if (!(t1.operator$index$1(match, 2) == null))
        return parseInt(source, 16);
      if (!(t1.operator$index$1(match, 3) == null))
        return parseInt(source, 10);
      return handleError.call$1(source);
    }
    radix = 10;
  } else {
    if (!(typeof radix === "number" && Math.floor(radix) === radix))
      throw $.$$throw($.ArgumentError$("Radix is not an integer"));
    if (radix < 2 || radix > 36)
      throw $.$$throw($.RangeError$("Radix " + $.S(radix) + " not in range 2..36"));
    if (!(match == null)) {
      if (radix === 10 && !($.getInterceptor$JSStringJSArray(match).operator$index$1(match, 3) == null))
        return parseInt(source, 10);
      if (radix < 10 || $.getInterceptor$JSStringJSArray(match).operator$index$1(match, 3) == null) {
        maxCharCode = radix <= 10 ? 48 + radix - 1 : 97 + radix - 10 - 1;
        t1 = $.getInterceptor$JSStringJSArray(match).operator$index$1(match, 1);
        digitsPart = $.getInterceptor$JSString(t1).toLowerCase$0(t1);
        for (t1 = $.getInterceptor$JSStringJSArray(digitsPart), i = 0; $.ltB(i, t1.get$length(digitsPart)); ++i)
          if ($.gtB(t1.charCodeAt$1(digitsPart, i), maxCharCode))
            return handleError.call$1(source);
      }
    }
    radix = radix;
  }
  if (match == null)
    return handleError.call$1(source);
  return parseInt(source, radix);
};

$.Primitives_objectTypeName = function(object) {
  var name$, decompiled, t1;
  name$ = $.constructorNameFallback(object);
  if ($.eqB(name$, "Object")) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      name$ = decompiled;
  }
  t1 = $.getInterceptor$JSString(name$);
  return t1.charCodeAt$1(name$, 0) === 36 ? t1.substring$1(name$, 1) : name$;
};

$.Primitives_newFixedList = function(length$) {
  var result = new Array(length$);
  result.fixed$length = true;
  return result;
};

$.iae = function(argument) {
  throw $.$$throw($.ArgumentError$(argument));
};

$.ioore = function(index) {
  throw $.$$throw($.RangeError$value(index));
};

$.checkNull = function(object) {
  if (object == null)
    throw $.$$throw($.ArgumentError$(null));
  return object;
};

$.checkNum = function(value) {
  if (!(typeof value === "number"))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.checkString = function(value) {
  if (!(typeof value === "string"))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.$$throw = function(ex) {
  var wrapper;
  if (ex == null)
    ex = $.CONSTANT;
  wrapper = $.DartError$(ex);
  if (!!Error.captureStackTrace)
    Error.captureStackTrace(wrapper, $.$$throw);
  else
    wrapper.stack = new Error().stack;
  return wrapper;
};

$.DartError$ = function(dartException) {
  var t1 = new $.DartError();
  t1.DartError$1(dartException);
  return t1;
};

$.DartError_toStringWrapper = function() {
  var t1 = this;
  return $.getInterceptor(t1).toString$0(t1);
};

$.unwrapException = function(ex) {
  var message, type, name$, ieErrorCode, ieFacilityNumber, t1;
  if ("dartException" in ex)
    return ex.dartException;
  message = ex.message;
  if (ex instanceof TypeError) {
    type = ex.type;
    name$ = ex.arguments ? ex.arguments[0] : "";
    if (message.indexOf("JSNull") !== -1 || $.eqB(type, "property_not_function") || $.eqB(type, "called_non_callable") || $.eqB(type, "non_object_property_call") || $.eqB(type, "non_object_property_load"))
      return $.NoSuchMethodError$(null, name$, [], $.makeLiteralMap([]), null);
    else if ($.eqB(type, "undefined_method"))
      return $.NoSuchMethodError$("", name$, [], $.makeLiteralMap([]), null);
    ieErrorCode = ex.number & 0xffff;
    ieFacilityNumber = ex.number>>16 & 0x1FFF;
    if (typeof message === "string")
      if ($.CONSTANT2.endsWith$1(message, "is null") === true || $.CONSTANT2.endsWith$1(message, "is undefined") === true || $.CONSTANT2.endsWith$1(message, "is null or undefined") === true || $.CONSTANT2.endsWith$1(message, "of undefined") === true || $.CONSTANT2.endsWith$1(message, "of null") === true)
        return $.NoSuchMethodError$(null, "<unknown>", [], $.makeLiteralMap([]), null);
      else {
        if (message.indexOf(" has no method ") === -1)
          if (message.indexOf(" is not a function") === -1)
            t1 = ieErrorCode === 438 && ieFacilityNumber === 10;
          else
            t1 = true;
        else
          t1 = true;
        if (t1)
          return $.NoSuchMethodError$("", "<unknown>", [], $.makeLiteralMap([]), null);
      }
    return $.Exception_Exception(typeof message === "string" ? message : "");
  }
  if (ex instanceof RangeError) {
    if (typeof message === "string" && message.indexOf("call stack") !== -1)
      return $.StackOverflowError$();
    return $.ArgumentError$(null);
  }
  if (typeof InternalError == 'function' && ex instanceof InternalError)
    if (typeof message === "string" && message === "too much recursion")
      return $.StackOverflowError$();
  return ex;
};

$.getTraceFromException = function(exception) {
  return $.StackTrace$(exception.stack);
};

$.StackTrace$ = function(stack) {
  return new $.StackTrace(stack);
};

$.makeLiteralMap = function(keyValuePairs) {
  var iterator, result, t1, key;
  iterator = $.CONSTANT0.get$iterator(keyValuePairs);
  result = $.LinkedHashMap_LinkedHashMap();
  for (t1 = $.getInterceptor$JSArray(result); iterator.moveNext$0() === true;) {
    key = iterator.get$current();
    iterator.moveNext$0();
    t1.operator$indexSet$2(result, key, iterator.get$current());
  }
  return result;
};

$.invokeClosure = function(closure, isolate, numberOfArguments, arg1, arg2) {
  if ($.eqB(numberOfArguments, 0))
    return $._callInIsolate(isolate, new $.invokeClosure_anon(closure));
  else if ($.eqB(numberOfArguments, 1))
    return $._callInIsolate(isolate, new $.invokeClosure_anon0(closure, arg1));
  else if ($.eqB(numberOfArguments, 2))
    return $._callInIsolate(isolate, new $.invokeClosure_anon1(closure, arg1, arg2));
  else
    throw $.$$throw($.Exception_Exception("Unsupported number of arguments for wrapped closure"));
};

$.convertDartClosureToJS = function(closure, arity) {
  var function$;
  if (closure == null)
    return;
  function$ = closure.$identity;
  if (!!function$)
    return function$;
  $._currentIsolate();
  function$ = function($0, $1) { return $.invokeClosure.call$5(closure, $._currentIsolate(), arity, $0, $1); };
  closure.$identity = function$;
  return function$;
};

$.setRuntimeTypeInfo = function(target, typeInfo) {
  if (!(target == null))
    target.builtin$typeInfo = typeInfo;
};

$.getRuntimeTypeInfo = function(target) {
  var res;
  if (target == null)
    return;
  res = target.builtin$typeInfo;
  return res == null ? {} : res;
};

$.propertyTypeCastError = function(value, property) {
  var actualType, t1;
  actualType = $.Primitives_objectTypeName(value);
  t1 = $.getInterceptor$JSStringJSArray(property);
  throw $.$$throw($.CastErrorImplementation$(actualType, t1.substring$2(property, 3, t1.get$length(property))));
};

$.propertyTypeCast = function(value, property) {
  if (value == null || !!value[property])
    return value;
  $.propertyTypeCastError(value, property);
};

$.callTypeCast = function(value, property) {
  var t1;
  if (!(value == null))
    t1 = typeof value === "object" && value[property]();
  else
    t1 = true;
  if (t1)
    return value;
  $.propertyTypeCastError(value, property);
};

$.CastErrorImplementation$ = function(actualType, expectedType) {
  return new $.CastErrorImplementation(actualType, expectedType);
};

$.throwNoSuchMethod = function(obj, name$, arguments$, expectedArgumentNames) {
  throw $.$$throw($.NoSuchMethodError$(obj, name$, arguments$, $.CONSTANT1, expectedArgumentNames));
};

$.throwCyclicInit = function(staticName) {
  throw $.$$throw($.RuntimeError$("Cyclic initialization for static " + $.S(staticName)));
};

$.getTypeArgumentAsString = function(runtimeType) {
  var t1, className;
  t1 = $.getInterceptor$JSStringJSArray(runtimeType);
  className = t1.operator$index$1(runtimeType, 0).builtin$cls;
  if ($.eqB(t1.get$length(runtimeType), 1))
    return className;
  return className + "<" + $.S($.joinArguments(runtimeType, 1)) + ">";
};

$.runtimeTypeToString = function(type) {
  var t1 = type == null;
  if (t1)
    return "dynamic";
  else if (!t1 && type.constructor === Array)
    return $.getTypeArgumentAsString(type);
  else
    return type.builtin$cls;
};

$.joinArguments = function(types, startIndex) {
  var buffer, t1, index, firstArgument;
  if (typeof types !== "string" && (typeof types !== "object" || types === null || types.constructor !== Array && !types.is$JavaScriptIndexingBehavior()))
    return $.joinArguments$bailout(1, types, startIndex);
  buffer = $.StringBuffer_StringBuffer("");
  for (t1 = $.getInterceptor$JSArray(buffer), index = startIndex, firstArgument = true; index < types.length; ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      t1.add$1(buffer, ", ");
    if (index < 0 || index >= types.length)
      throw $.ioore(index);
    t1.add$1(buffer, $.runtimeTypeToString(types[index]));
  }
  return t1.toString$0(buffer);
};

$.joinArguments$bailout = function(state0, types, startIndex) {
  var buffer, t1, t2, index, firstArgument;
  buffer = $.StringBuffer_StringBuffer("");
  for (t1 = $.getInterceptor$JSStringJSArray(types), t2 = $.getInterceptor$JSArray(buffer), index = startIndex, firstArgument = true; $.ltB(index, t1.get$length(types)); ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      t2.add$1(buffer, ", ");
    t2.add$1(buffer, $.runtimeTypeToString(t1.operator$index$1(types, index)));
  }
  return $.getInterceptor(buffer).toString$0(buffer);
};

$.isSubtype = function(s, t) {
  var t1, typeOfS, typeOfT, len, i;
  if (typeof s !== "string" && (typeof s !== "object" || s === null || s.constructor !== Array && !s.is$JavaScriptIndexingBehavior()))
    return $.isSubtype$bailout(1, s, t);
  if (typeof t !== "string" && (typeof t !== "object" || t === null || t.constructor !== Array && !t.is$JavaScriptIndexingBehavior()))
    return $.isSubtype$bailout(1, s, t);
  if (false)
    return true;
  if (s === t)
    return true;
  if (s.constructor === Array) {
    if (0 >= s.length)
      throw $.ioore(0);
    t1 = s[0];
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return $.isSubtype$bailout(2, s, t, true, t1);
    typeOfS = t1;
  } else
    typeOfS = s;
  if (t.constructor === Array) {
    if (0 >= t.length)
      throw $.ioore(0);
    t1 = t[0];
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return $.isSubtype$bailout(3, s, t, typeOfS, t1, true, true);
    typeOfT = t1;
  } else
    typeOfT = t;
  if (typeOfS["is$" + $.S($.runtimeTypeToString(typeOfT))] == null)
    return false;
  if (s.constructor === Array)
    t1 = !t.constructor === Array;
  else
    t1 = true;
  if (t1)
    return true;
  len = s.length;
  if (len !== t.length)
    return false;
  for (i = 1; i < len; ++i) {
    if (i >= s.length)
      throw $.ioore(i);
    t1 = s[i];
    if (i >= t.length)
      throw $.ioore(i);
    if (!$.isSubtype(t1, t[i]))
      return false;
  }
  return true;
};

$.isSubtype$bailout = function(state0, env0, env1, env2, env3, env4, env5) {
  switch (state0) {
    case 1:
      t = env1;
      s = env0;
      break;
    case 2:
      t2 = env3;
      t1 = env2;
      t = env1;
      s = env0;
      break;
    case 3:
      t2 = env5;
      t1 = env4;
      t3 = env3;
      typeOfS = env2;
      t = env1;
      s = env0;
      break;
    case 4:
      len = env3;
      t1 = env2;
      t = env1;
      s = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      t1 = !(s == null);
      if (s == null || t == null)
        return true;
      if ($.eqB(s, t))
        return true;
    case 2:
      if (state0 === 2 || state0 === 0 && t1 && s.constructor === Array)
        switch (state0) {
          case 0:
            t2 = $.getInterceptor$JSStringJSArray(s).operator$index$1(s, 0);
          case 2:
            state0 = 0;
            typeOfS = t2;
        }
      else
        typeOfS = s;
      t2 = !(t == null);
    case 3:
      if (state0 === 3 || state0 === 0 && t2 && t.constructor === Array)
        switch (state0) {
          case 0:
            t3 = $.getInterceptor$JSStringJSArray(t).operator$index$1(t, 0);
          case 3:
            state0 = 0;
            typeOfT = t3;
        }
      else
        typeOfT = t;
      if (typeOfS["is$" + $.S($.runtimeTypeToString(typeOfT))] == null)
        return false;
      if (t1 && s.constructor === Array)
        t1 = !(t2 && t.constructor === Array);
      else
        t1 = true;
      if (t1)
        return true;
      t1 = $.getInterceptor$JSStringJSArray(s);
      len = t1.get$length(s);
    case 4:
      var t, s, t1, t2, typeOfS, t3, typeOfT, len, i;
      state0 = 0;
      t2 = $.getInterceptor$JSStringJSArray(t);
      if (!$.eqB(len, t2.get$length(t)))
        return false;
      for (i = 1; $.ltB(i, len); ++i)
        if (!$.isSubtype(t1.operator$index$1(s, i), t2.operator$index$1(t, i)))
          return false;
      return true;
  }
};

$.typeNameInChrome = function(obj) {
  return $.typeNameInWebKitCommon(obj.constructor.name);
};

$.typeNameInSafari = function(obj) {
  return $.typeNameInWebKitCommon($.constructorNameFallback(obj));
};

$.typeNameInWebKitCommon = function(tag) {
  var name$ = tag;
  if (name$ === "Window")
    return "DOMWindow";
  if (name$ === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if (name$ === "WebKitMutationObserver")
    return "MutationObserver";
  if (name$ === "AudioChannelMerger")
    return "ChannelMergerNode";
  if (name$ === "AudioChannelSplitter")
    return "ChannelSplitterNode";
  if (name$ === "AudioGainNode")
    return "GainNode";
  if (name$ === "AudioPannerNode")
    return "PannerNode";
  if (name$ === "JavaScriptAudioNode")
    return "ScriptProcessorNode";
  if (name$ === "Oscillator")
    return "OscillatorNode";
  if (name$ === "RealtimeAnalyserNode")
    return "AnalyserNode";
  return name$;
};

$.typeNameInOpera = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === "Window")
    return "DOMWindow";
  if (name$ === "ApplicationCache")
    return "DOMApplicationCache";
  return name$;
};

$.typeNameInFirefox = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === "Window")
    return "DOMWindow";
  if (name$ === "CSS2Properties")
    return "CSSStyleDeclaration";
  if (name$ === "DataTransfer")
    return "Clipboard";
  if (name$ === "DragEvent")
    return "MouseEvent";
  if (name$ === "GeoGeolocation")
    return "Geolocation";
  if (name$ === "MouseScrollEvent")
    return "WheelEvent";
  if (name$ === "OfflineResourceList")
    return "DOMApplicationCache";
  if (name$ === "WorkerMessageEvent")
    return "MessageEvent";
  if (name$ === "XMLDocument")
    return "Document";
  return name$;
};

$.typeNameInIE = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === "Window")
    return "DOMWindow";
  if (name$ === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if (name$ === "ApplicationCache")
    return "DOMApplicationCache";
  if (name$ === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if (name$ === "DataTransfer")
    return "Clipboard";
  if (name$ === "DragEvent")
    return "MouseEvent";
  if (name$ === "HTMLDDElement")
    return "HTMLElement";
  if (name$ === "HTMLDTElement")
    return "HTMLElement";
  if (name$ === "HTMLTableDataCellElement")
    return "HTMLTableCellElement";
  if (name$ === "HTMLTableHeaderCellElement")
    return "HTMLTableCellElement";
  if (name$ === "HTMLPhraseElement")
    return "HTMLElement";
  if (name$ === "MSStyleCSSProperties")
    return "CSSStyleDeclaration";
  if (name$ === "MouseWheelEvent")
    return "WheelEvent";
  if (name$ === "Position")
    return "Geoposition";
  if (name$ === "Object")
    if (window.DataView && (obj instanceof window.DataView))
      return "DataView";
  return name$;
};

$.constructorNameFallback = function(object) {
  var constructor$, name$, t1, string;
  if (object == null)
    return "Null";
  constructor$ = object.constructor;
  if (typeof(constructor$) === "function") {
    name$ = constructor$.name;
    if (typeof name$ === "string")
      t1 = !(name$ === "") && !(name$ === "Object") && !(name$ === "Function.prototype");
    else
      t1 = false;
    if (t1)
      return name$;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
};

$.alternateTag = function(object, tag) {
  if (!!/^HTML[A-Z].*Element$/.test(tag)) {
    if (Object.prototype.toString.call(object) === "[object Object]")
      return;
    return "HTMLElement";
  }
  return;
};

$.callHasOwnProperty = function(function$, object, property) {
  return function$.call(object, property);
};

$.getFunctionForTypeNameOf = function() {
  if (!(typeof(navigator) === "object"))
    return $.typeNameInChrome;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf("Chrome") !== -1 || userAgent.indexOf("DumpRenderTree") !== -1)
    return $.typeNameInChrome;
  else if (userAgent.indexOf("Firefox") !== -1)
    return $.typeNameInFirefox;
  else if (userAgent.indexOf("MSIE") !== -1)
    return $.typeNameInIE;
  else if (userAgent.indexOf("Opera") !== -1)
    return $.typeNameInOpera;
  else if (userAgent.indexOf("AppleWebKit") !== -1)
    return $.typeNameInSafari;
  else
    return $.constructorNameFallback;
};

$.getTypeNameOf = function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return $._getTypeNameOf.call$1(obj);
};

$.toStringForNativeObject = function(obj) {
  return "Instance of " + $.getTypeNameOf(obj);
};

$.hashCodeForNativeObject = function(object) {
  return $.Primitives_objectHashCode(object);
};

$.defineProperty = function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
};

$.dynamicBind = function(obj, name$, methods, arguments$) {
  var tag, hasOwnPropertyFunction, method, secondTag, proto;
  tag = $.getTypeNameOf(obj);
  hasOwnPropertyFunction = Object.prototype.hasOwnProperty;
  method = $.dynamicBindLookup(hasOwnPropertyFunction, tag, methods);
  if (method == null) {
    secondTag = $.alternateTag(obj, tag);
    if (!(secondTag == null))
      method = $.dynamicBindLookup(hasOwnPropertyFunction, secondTag, methods);
  }
  if (method == null)
    method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, $.getTypeNameOf($.CONSTANT9));
  proto = Object.getPrototypeOf(obj);
  if (method == null)
    method = function () {if (Object.getPrototypeOf(this) === proto) {throw new TypeError(name$ + " is not a function");} else {return Object.prototype[name$].apply(this, arguments);}};
  if (!$.callHasOwnProperty(hasOwnPropertyFunction, proto, name$))
    $.defineProperty(proto, name$, method);
  return method.apply(obj, arguments$);
};

$.dynamicBindLookup = function(hasOwnPropertyFunction, tag, methods) {
  var method, i, entry;
  method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, tag);
  if (method == null && !($._dynamicMetadata0() == null))
    for (i = 0; i < $._dynamicMetadata0().length; ++i) {
      entry = $._dynamicMetadata0()[i];
      if ($.callHasOwnProperty(hasOwnPropertyFunction, entry.get$_set(), tag)) {
        method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, entry.get$_tag());
        if (!(method == null))
          break;
      }
    }
  return method;
};

$.lookupDynamicClass = function(hasOwnPropertyFunction, methods, className) {
  return $.callHasOwnProperty(hasOwnPropertyFunction, methods, className) ? methods[className] : null;
};

$.dynamicFunction = function(name$) {
  var f, methods, dartMethod, bind;
  f = Object.prototype[name$];
  if (!(f == null) && !!f.methods)
    return f.methods;
  methods = {};
  dartMethod = Object.getPrototypeOf($.CONSTANT9)[name$];
  if (!(dartMethod == null))
    methods["Object"] = dartMethod;
  bind = function() {return $.dynamicBind.call$4(this, name$, methods, Array.prototype.slice.call(arguments));};
  bind.methods = methods;
  $.defineProperty(Object.prototype, name$, bind);
  return methods;
};

$.MetaInfo$ = function(_tag, _tags, _set) {
  return new $.MetaInfo(_tag, _tags, _set);
};

$._dynamicMetadata0 = function() {
  if (typeof($dynamicMetadata) === "undefined") {
    var t1 = [];
    $._dynamicMetadata(t1);
  }
  return $dynamicMetadata;
};

$._dynamicMetadata = function(table) {
  $dynamicMetadata = table;
};

$.buildDynamicMetadata = function(inputTable) {
  var result, i, tag, tags, set, tagNames, j;
  result = [];
  for (i = 0; i < inputTable.length; ++i) {
    tag = inputTable[i][0];
    tags = inputTable[i][1];
    set = {};
    tagNames = tags.split("|");
    for (j = 0; j < tagNames.length; ++j)
      set[tagNames[j]] = true;
    result.push($.MetaInfo$(tag, tags, set));
  }
  return result;
};

$.dynamicSetMetadata = function(inputTable) {
  var t1 = $.buildDynamicMetadata(inputTable);
  $._dynamicMetadata(t1);
};

$.regExpExec = function(regExp, str) {
  var result = $.regExpGetNative(regExp).exec(str);
  if (result == null)
    return;
  return result;
};

$.regExpTest = function(regExp, str) {
  return $.regExpGetNative(regExp).test(str);
};

$.regExpGetNative = function(regExp) {
  var r = regExp._re;
  return r == null ? regExp._re = $.regExpMakeNative(regExp, false) : r;
};

$.regExpMakeNative = function(regExp, global) {
  var pattern, sb, e, isMultiLine, isCaseSensitive, t1, t2, exception;
  pattern = regExp.get$pattern();
  isMultiLine = regExp.get$isMultiLine();
  isCaseSensitive = regExp.get$isCaseSensitive();
  $.checkString(pattern);
  sb = $.StringBuffer_StringBuffer("");
  if (isMultiLine === true) {
    t1 = sb;
    $.getInterceptor$JSArray(t1).add$1(t1, "m");
  }
  if (isCaseSensitive !== true) {
    t1 = sb;
    $.getInterceptor$JSArray(t1).add$1(t1, "i");
  }
  if (global === true) {
    t1 = sb;
    $.getInterceptor$JSArray(t1).add$1(t1, "g");
  }
  try {
    t1 = pattern;
    t2 = sb;
    t1 = new RegExp(t1, $.getInterceptor(t2).toString$0(t2));
    return t1;
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    throw $.$$throw($.IllegalJSRegExpException$(pattern, String(e)));
  }

};

$.JSSyntaxRegExp$ = function(pattern, caseSensitive, multiLine) {
  return new $.JSSyntaxRegExp(pattern, multiLine, caseSensitive);
};

$.JSSyntaxRegExp__globalVersionOf = function(other) {
  var t1, t2, re;
  t1 = other.get$pattern();
  t2 = other.get$isMultiLine();
  re = $.JSSyntaxRegExp$(t1, other.get$isCaseSensitive(), t2);
  re._re = $.regExpMakeNative(re, true);
  return re;
};

$._MatchImplementation$ = function(pattern, str, start, end, _groups) {
  return new $._MatchImplementation(pattern, str, start, end, _groups);
};

$._AllMatchesIterable$ = function(_re, _str) {
  return new $._AllMatchesIterable(_re, _str);
};

$._AllMatchesIterator$ = function(re, _str) {
  return new $._AllMatchesIterator($.JSSyntaxRegExp__globalVersionOf(re), _str, null);
};

$.StringMatch$ = function(start, str, pattern) {
  return new $.StringMatch(start, str, pattern);
};

$.allMatchesInStringUnchecked = function(needle, haystack) {
  var result, t1, length$, patternLength, startIndex, position, endIndex;
  result = $.List_List(0, $.Match);
  $.setRuntimeTypeInfo(result, [$.Match]);
  t1 = $.getInterceptor$JSStringJSArray(haystack);
  length$ = t1.get$length(haystack);
  patternLength = needle.length;
  for (startIndex = 0; true;) {
    position = t1.indexOf$2(haystack, needle, startIndex);
    if ($.eqB(position, -1))
      break;
    result.push($.StringMatch$(position, haystack, needle));
    endIndex = $.getInterceptor$JSNumber(position).operator$add$1(position, patternLength);
    if ($.eqB(endIndex, length$))
      break;
    else
      startIndex = $.eqB(position, endIndex) ? $.getInterceptor$JSNumber(startIndex).operator$add$1(startIndex, 1) : endIndex;
  }
  return result;
};

$.stringContainsUnchecked = function(receiver, other, startIndex) {
  var substr, t1;
  if (typeof other === "string")
    return !$.eqB($.CONSTANT2.indexOf$2(receiver, other, startIndex), -1);
  else if (typeof other === "object" && other !== null && !!other.is$JSSyntaxRegExp)
    return other.hasMatch$1($.CONSTANT2.substring$1(receiver, startIndex));
  else {
    substr = $.CONSTANT2.substring$1(receiver, startIndex);
    t1 = $.getInterceptor$JSString(other).allMatches$1(other, substr);
    return $.getInterceptor$JSArray(t1).get$iterator(t1).moveNext$0();
  }
};

$.stringReplaceJS = function(receiver, replacer, to) {
  return receiver.replace(replacer, to.replace('$', '$$$$'));
};

$.stringReplaceAllUnchecked = function(receiver, from, to) {
  var result, length$, t1, i;
  $.checkString(to);
  if (from === "")
    if (receiver === "")
      return to;
    else {
      result = $.StringBuffer_StringBuffer("");
      length$ = receiver.length;
      t1 = $.getInterceptor$JSArray(result);
      t1.add$1(result, to);
      for (i = 0; i < length$; ++i) {
        if (i >= receiver.length)
          throw $.ioore(i);
        t1.add$1(result, receiver[i]);
        t1.add$1(result, to);
      }
      return t1.toString$0(result);
    }
  else
    return $.stringReplaceJS(receiver, $.regExpMakeNative($.JSSyntaxRegExp$(from.replace($.regExpMakeNative($.get$quoteRegExp(), true), "\\$&"), true, false), true), to);
};

$.AsyncError$ = function(error, stackTrace) {
  return new $.AsyncError(error, stackTrace, null);
};

$.AsyncError$withCause = function(error, stackTrace, cause) {
  return new $.AsyncError(error, stackTrace, cause);
};

$.Future_Future$immediate = function(value) {
  return $._FutureImpl$immediate(value);
};

$.Completer_Completer = function() {
  return $._CompleterImpl$();
};

$._CompleterImpl$ = function() {
  return new $._CompleterImpl($._FutureImpl$(), false);
};

$._FutureListener__FutureListener$wrap = function(future) {
  return $._FutureListenerWrapper$(future);
};

$._FutureListenerWrapper$ = function(future) {
  return new $._FutureListenerWrapper(future, null);
};

$._FutureImpl$ = function() {
  return new $._FutureImpl(0, null);
};

$._FutureImpl$immediate = function(value) {
  var t1 = new $._FutureImpl(0, null);
  t1._FutureImpl$immediate$1(value);
  return t1;
};

$._FutureImpl__FutureImpl$wait = function(futures) {
  var t1, t2, completer, values, i, t3, i0;
  t1 = {};
  t2 = $.getInterceptor$JSStringJSArray(futures);
  if (t2.get$isEmpty(futures) === true)
    return $.Future_Future$immediate($.CONSTANT10);
  completer = $.Completer_Completer();
  t1.remaining_0 = t2.get$length(futures);
  values = $.List_List$fixedLength(t2.get$length(futures), null);
  $.setRuntimeTypeInfo(values, []);
  t1.completed_1 = false;
  for (t2 = t2.get$iterator(futures), i = 0; t2.moveNext$0() === true; i = i0) {
    t3 = t2.get$current();
    i0 = i + 1;
    t3.then$1(new $._FutureImpl__FutureImpl$wait_anon(t1, completer, values, i)).catchError$1(new $._FutureImpl__FutureImpl$wait_anon0(t1, completer));
  }
  return completer.get$future();
};

$._ThenFuture$ = function(_onValue) {
  return new $._ThenFuture(_onValue, null, 0, null);
};

$._CatchErrorFuture$ = function(_onError, _test) {
  return new $._CatchErrorFuture(_test, _onError, null, 0, null);
};

$._SubscribeFuture$ = function(onValue, _onError) {
  return new $._SubscribeFuture(_onError, onValue, null, 0, null);
};

$._FutureWrapper$ = function(_future) {
  return new $._FutureWrapper(_future);
};

$.Timer_Timer = function(milliseconds, callback) {
  return $.TimerImpl$(milliseconds, callback);
};

$.Arrays_copy = function(src, srcStart, dst, dstStart, count) {
  var i, j, t1, t2, t3;
  if (typeof dst !== "object" || dst === null || (dst.constructor !== Array || !!dst.immutable$list) && !dst.is$JavaScriptIndexingBehavior())
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1, t1 = src.length, t2 = dst.length; i >= srcStart; --i, --j) {
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
  else
    for (t1 = src.length, t2 = dst.length, i = srcStart, j = dstStart; i < srcStart + count; ++i, ++j) {
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
};

$.Arrays_copy$bailout = function(state0, src, srcStart, dst, dstStart, count) {
  var i, j;
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1; i >= srcStart; --i, --j) {
      if (i < 0 || i >= src.length)
        throw $.ioore(i);
      $.CONSTANT0.operator$indexSet$2(dst, j, src[i]);
    }
  else
    for (i = srcStart, j = dstStart; i < srcStart + count; ++i, ++j) {
      if (i < 0 || i >= src.length)
        throw $.ioore(i);
      $.CONSTANT0.operator$indexSet$2(dst, j, src[i]);
    }
};

$.Arrays_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.eqB(a[i], element))
      return i;
  }
  return -1;
};

$.IterableMixinWorkaround_contains = function(iterable, element) {
  var t1;
  for (t1 = $.getInterceptor$JSArray(iterable).get$iterator(iterable); t1.moveNext$0() === true;)
    if ($.eqB(element, t1.get$current()))
      return true;
  return false;
};

$.IterableMixinWorkaround_removeAll = function(collection, elementsToRemove) {
  var t1, t2;
  for (t1 = $.getInterceptor$JSArray(elementsToRemove).get$iterator(elementsToRemove), t2 = $.getInterceptor$JSArray(collection); t1.moveNext$0() === true;)
    t2.remove$1(collection, t1.get$current());
};

$.IterableMixinWorkaround_removeAllList = function(collection, elementsToRemove) {
  var t1;
  if (typeof elementsToRemove === "object" && elementsToRemove !== null && !!elementsToRemove.is$Set)
    ;
  else
    $.getInterceptor$JSArray(elementsToRemove).toSet$0(elementsToRemove);
  t1 = $.throwNoSuchMethod("", "get setToRemve", [], null);
  collection.removeMatching$1($.getInterceptor$JSStringJSArray(t1).get$contains(t1));
};

$.IterableMixinWorkaround_joinList = function(list, separator) {
  var t1, buffer, i, t2;
  if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !list.is$JavaScriptIndexingBehavior()))
    return $.IterableMixinWorkaround_joinList$bailout(1, list, separator);
  if (typeof separator !== "string")
    return $.IterableMixinWorkaround_joinList$bailout(1, list, separator);
  if ($.getInterceptor$JSStringJSArray(list).get$isEmpty(list) === true)
    return "";
  t1 = list.length;
  if (t1 === 1) {
    if (0 >= t1)
      throw $.ioore(0);
    return $.S(list[0]);
  }
  buffer = $.StringBuffer_StringBuffer("");
  if (separator === "")
    for (t1 = $.getInterceptor$JSArray(buffer), i = 0; i < list.length; ++i)
      t1.add$1(buffer, $.S(list[i]));
  else {
    if (0 >= list.length)
      throw $.ioore(0);
    t1 = $.S(list[0]);
    t2 = $.getInterceptor$JSArray(buffer);
    t2.add$1(buffer, t1);
    for (i = 1; i < list.length; ++i) {
      t2.add$1(buffer, separator);
      if (i >= list.length)
        throw $.ioore(i);
      t2.add$1(buffer, $.S(list[i]));
    }
  }
  return $.getInterceptor(buffer).toString$0(buffer);
};

$.IterableMixinWorkaround_joinList$bailout = function(state0, list, separator) {
  var t1, buffer, t2, i, t3;
  t1 = $.getInterceptor$JSStringJSArray(list);
  if (t1.get$isEmpty(list) === true)
    return "";
  if ($.eqB(t1.get$length(list), 1))
    return $.S(t1.operator$index$1(list, 0));
  buffer = $.StringBuffer_StringBuffer("");
  if (separator == null || $.eqB(separator, ""))
    for (t2 = $.getInterceptor$JSArray(buffer), i = 0; $.ltB(i, t1.get$length(list)); ++i)
      t2.add$1(buffer, $.S(t1.operator$index$1(list, i)));
  else {
    t2 = $.S(t1.operator$index$1(list, 0));
    t3 = $.getInterceptor$JSArray(buffer);
    t3.add$1(buffer, t2);
    for (i = 1; $.ltB(i, t1.get$length(list)); ++i) {
      t3.add$1(buffer, separator);
      t3.add$1(buffer, $.S(t1.operator$index$1(list, i)));
    }
  }
  return $.getInterceptor(buffer).toString$0(buffer);
};

$.IterableMixinWorkaround_sortList = function(l, compare) {
  if (compare == null)
    compare = $.Comparable_compare;
  $._Sort__doSort(l, 0, l.length - 1, compare);
};

$.Collections_collectionToString = function(c) {
  var result, t1;
  result = $.StringBuffer_StringBuffer("");
  t1 = $.List_List(0);
  $.setRuntimeTypeInfo(t1, []);
  $.Collections__emitCollection(c, result, t1);
  return $.getInterceptor(result).toString$0(result);
};

$.Collections__emitCollection = function(c, result, visiting) {
  var t1, isList, t2, t3, first, t4;
  t1 = $.getInterceptor$JSArray(visiting);
  t1.add$1(visiting, c);
  isList = typeof c === "object" && c !== null && (c.constructor === Array || c.is$List());
  t2 = isList ? "[" : "{";
  t3 = $.getInterceptor$JSArray(result);
  t3.add$1(result, t2);
  for (t2 = $.getInterceptor$JSArray(c).get$iterator(c), first = true; t2.moveNext$0() === true; first = false) {
    t4 = t2.get$current();
    if (!first)
      t3.add$1(result, ", ");
    $.Collections__emitObject(t4, result, visiting);
  }
  t3.add$1(result, isList ? "]" : "}");
  t1.removeLast$0(visiting);
};

$.Collections__emitObject = function(o, result, visiting) {
  var t1;
  if (typeof o === "object" && o !== null && (o.constructor === Array || o.is$Collection()))
    if ($.Collections__containsRef(visiting, o)) {
      t1 = typeof o === "object" && o !== null && (o.constructor === Array || o.is$List()) ? "[...]" : "{...}";
      $.getInterceptor$JSArray(result).add$1(result, t1);
    } else
      $.Collections__emitCollection(o, result, visiting);
  else if (typeof o === "object" && o !== null && o.is$Map())
    if ($.Collections__containsRef(visiting, o))
      $.getInterceptor$JSArray(result).add$1(result, "{...}");
    else
      $.Maps__emitMap(o, result, visiting);
  else
    $.getInterceptor$JSArray(result).add$1(result, o);
};

$.Collections__containsRef = function(c, ref) {
  var t1, t2;
  for (t1 = $.getInterceptor$JSArray(c).get$iterator(c); t1.moveNext$0() === true;) {
    t2 = t1.get$current();
    if (t2 == null ? ref == null : t2 === ref)
      return true;
  }
  return false;
};

$.Maps_mapToString = function(m) {
  var result, t1;
  result = $.StringBuffer_StringBuffer("");
  t1 = $.List_List(0);
  $.setRuntimeTypeInfo(t1, []);
  $.Maps__emitMap(m, result, t1);
  return $.getInterceptor(result).toString$0(result);
};

$.Maps__emitMap = function(m, result, visiting) {
  var t1, t2, t3;
  t1 = {};
  t2 = $.getInterceptor$JSArray(visiting);
  t2.add$1(visiting, m);
  t3 = $.getInterceptor$JSArray(result);
  t3.add$1(result, "{");
  t1.first_0 = true;
  t1 = new $.Maps__emitMap_anon(t1, result, visiting);
  $.getInterceptor$JSArray(m).forEach$1(m, t1);
  t3.add$1(result, "}");
  t2.removeLast$0(visiting);
};

$._Sort__doSort = function(a, left, right, compare) {
  if (right - left <= 32)
    $._Sort_insertionSort_(a, left, right, compare);
  else
    $._Sort__dualPivotQuicksort(a, left, right, compare);
};

$._Sort_insertionSort_ = function(a, left, right, compare) {
  var i, el, j, t1, t2, j0;
  if (typeof a !== "object" || a === null || (a.constructor !== Array || !!a.immutable$list) && !a.is$JavaScriptIndexingBehavior())
    return $._Sort_insertionSort_$bailout(1, a, left, right, compare);
  for (i = left + 1; i <= right; ++i) {
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    el = a[i];
    j = i;
    while (true) {
      if (j > left) {
        t1 = j - 1;
        if (t1 < 0 || t1 >= a.length)
          throw $.ioore(t1);
        t2 = $.gtB(compare.call$2(a[t1], el), 0);
        t1 = t2;
      } else
        t1 = false;
      t2 = a.length;
      if (!t1)
        break;
      j0 = j - 1;
      if (j0 < 0 || j0 >= t2)
        throw $.ioore(j0);
      t1 = a[j0];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      a[j] = t1;
      j = j0;
    }
    if (j < 0 || j >= t2)
      throw $.ioore(j);
    a[j] = el;
  }
};

$._Sort_insertionSort_$bailout = function(state0, a, left, right, compare) {
  var i, el, j, t1, t2, j0;
  for (i = left + 1; i <= right; ++i) {
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    el = a[i];
    j = i;
    while (true) {
      if (j > left) {
        t1 = j - 1;
        if (t1 < 0 || t1 >= a.length)
          throw $.ioore(t1);
        t2 = $.gtB(compare.call$2(a[t1], el), 0);
        t1 = t2;
      } else
        t1 = false;
      if (!t1)
        break;
      j0 = j - 1;
      if (j0 < 0 || j0 >= a.length)
        throw $.ioore(j0);
      $.CONSTANT0.operator$indexSet$2(a, j, a[j0]);
      j = j0;
    }
    $.CONSTANT0.operator$indexSet$2(a, j, el);
  }
};

$._Sort__dualPivotQuicksort = function(a, left, right, compare) {
  var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, t2, less, great, pivots_are_equal, k, ak, comp, great0, less0, t3;
  if (typeof a !== "object" || a === null || (a.constructor !== Array || !!a.immutable$list) && !a.is$JavaScriptIndexingBehavior())
    return $._Sort__dualPivotQuicksort$bailout(1, a, left, right, compare);
  sixth = $.CONSTANT3.operator$tdiv$1(right - left + 1, 6);
  index1 = left + sixth;
  index5 = right - sixth;
  index3 = $.CONSTANT3.operator$tdiv$1(left + right, 2);
  index2 = index3 - sixth;
  index4 = index3 + sixth;
  t1 = a.length;
  if (index1 < 0 || index1 >= t1)
    throw $.ioore(index1);
  el1 = a[index1];
  if (index2 < 0 || index2 >= t1)
    throw $.ioore(index2);
  el2 = a[index2];
  if (index3 < 0 || index3 >= t1)
    throw $.ioore(index3);
  el3 = a[index3];
  if (index4 < 0 || index4 >= t1)
    throw $.ioore(index4);
  el4 = a[index4];
  if (index5 < 0 || index5 >= t1)
    throw $.ioore(index5);
  el5 = a[index5];
  if ($.gtB(compare.call$2(el1, el2), 0)) {
    t0 = el2;
    el2 = el1;
    el1 = t0;
  }
  if ($.gtB(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  if ($.gtB(compare.call$2(el1, el3), 0)) {
    t0 = el1;
    el1 = el3;
    el3 = t0;
  }
  if ($.gtB(compare.call$2(el2, el3), 0)) {
    t0 = el2;
    el2 = el3;
    el3 = t0;
  }
  if ($.gtB(compare.call$2(el1, el4), 0)) {
    t0 = el1;
    el1 = el4;
    el4 = t0;
  }
  if ($.gtB(compare.call$2(el3, el4), 0)) {
    t0 = el4;
    el4 = el3;
    el3 = t0;
  }
  if ($.gtB(compare.call$2(el2, el5), 0)) {
    t0 = el2;
    el2 = el5;
    el5 = t0;
  }
  if ($.gtB(compare.call$2(el2, el3), 0)) {
    t0 = el2;
    el2 = el3;
    el3 = t0;
  }
  if ($.gtB(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  t1 = a.length;
  if (index1 >= t1)
    throw $.ioore(index1);
  a[index1] = el1;
  if (index3 >= t1)
    throw $.ioore(index3);
  a[index3] = el3;
  if (index5 >= t1)
    throw $.ioore(index5);
  a[index5] = el5;
  if (left < 0 || left >= t1)
    throw $.ioore(left);
  t2 = a[left];
  if (index2 >= t1)
    throw $.ioore(index2);
  a[index2] = t2;
  if (right < 0 || right >= t1)
    throw $.ioore(right);
  t2 = a[right];
  if (index4 >= t1)
    throw $.ioore(index4);
  a[index4] = t2;
  less = left + 1;
  great = right - 1;
  pivots_are_equal = $.eqB(compare.call$2(el2, el4), 0);
  if (pivots_are_equal)
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      comp = compare.call$2(ak, el2);
      if ($.eqB(comp, 0))
        continue;
      if ($.ltB(comp, 0)) {
        if (k !== less) {
          t1 = a.length;
          if (less >= t1)
            throw $.ioore(less);
          t2 = a[less];
          if (k >= t1)
            throw $.ioore(k);
          a[k] = t2;
          a[less] = ak;
        }
        ++less;
      } else
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          comp = compare.call$2(a[great], el2);
          if ($.gtB(comp, 0)) {
            --great;
            continue;
          } else {
            t1 = $.ltB(comp, 0);
            t2 = a.length;
            great0 = great - 1;
            if (t1) {
              if (less >= t2)
                throw $.ioore(less);
              t1 = a[less];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              less0 = less + 1;
              if (great >= t2)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              great = great0;
              less = less0;
              break;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              t1 = a[great];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              a[great] = ak;
              great = great0;
              break;
            }
          }
        }
    }
  else
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.ltB(compare.call$2(ak, el2), 0)) {
        if (k !== less) {
          t1 = a.length;
          if (less >= t1)
            throw $.ioore(less);
          t2 = a[less];
          if (k >= t1)
            throw $.ioore(k);
          a[k] = t2;
          a[less] = ak;
        }
        ++less;
      } else if ($.gtB(compare.call$2(ak, el4), 0))
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          if ($.gtB(compare.call$2(a[great], el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t1 = $.ltB(compare.call$2(a[great], el2), 0);
            t2 = a.length;
            great0 = great - 1;
            if (t1) {
              if (less >= t2)
                throw $.ioore(less);
              t1 = a[less];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              less0 = less + 1;
              if (great >= t2)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              less = less0;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              t1 = a[great];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              a[great] = ak;
            }
            great = great0;
            break;
          }
        }
    }
  t1 = less - 1;
  t2 = a.length;
  if (t1 >= t2)
    throw $.ioore(t1);
  t3 = a[t1];
  if (left >= t2)
    throw $.ioore(left);
  a[left] = t3;
  a[t1] = el2;
  t1 = great + 1;
  if (t1 < 0 || t1 >= t2)
    throw $.ioore(t1);
  t3 = a[t1];
  if (right >= t2)
    throw $.ioore(right);
  a[right] = t3;
  a[t1] = el4;
  $._Sort__doSort(a, left, less - 2, compare);
  $._Sort__doSort(a, great + 2, right, compare);
  if (pivots_are_equal)
    return;
  if (less < index1 && great > index5) {
    while (true) {
      if (less >= a.length)
        throw $.ioore(less);
      if (!$.eqB(compare.call$2(a[less], el2), 0))
        break;
      ++less;
    }
    while (true) {
      if (great < 0 || great >= a.length)
        throw $.ioore(great);
      if (!$.eqB(compare.call$2(a[great], el4), 0))
        break;
      --great;
    }
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.eqB(compare.call$2(ak, el2), 0)) {
        if (k !== less) {
          t1 = a.length;
          if (less >= t1)
            throw $.ioore(less);
          t2 = a[less];
          if (k >= t1)
            throw $.ioore(k);
          a[k] = t2;
          a[less] = ak;
        }
        ++less;
      } else if ($.eqB(compare.call$2(ak, el4), 0))
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          if ($.eqB(compare.call$2(a[great], el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t1 = $.ltB(compare.call$2(a[great], el2), 0);
            t2 = a.length;
            great0 = great - 1;
            if (t1) {
              if (less >= t2)
                throw $.ioore(less);
              t1 = a[less];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              less0 = less + 1;
              if (great >= t2)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              less = less0;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              t1 = a[great];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              a[great] = ak;
            }
            great = great0;
            break;
          }
        }
    }
    $._Sort__doSort(a, less, great, compare);
  } else
    $._Sort__doSort(a, less, great, compare);
};

$._Sort__dualPivotQuicksort$bailout = function(state0, a, left, right, compare) {
  var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, less, great, pivots_are_equal, k, ak, comp, t2, great0, less0;
  sixth = $.CONSTANT3.operator$tdiv$1(right - left + 1, 6);
  index1 = left + sixth;
  index5 = right - sixth;
  index3 = $.CONSTANT3.operator$tdiv$1(left + right, 2);
  index2 = index3 - sixth;
  index4 = index3 + sixth;
  t1 = a.length;
  if (index1 < 0 || index1 >= t1)
    throw $.ioore(index1);
  el1 = a[index1];
  if (index2 < 0 || index2 >= t1)
    throw $.ioore(index2);
  el2 = a[index2];
  if (index3 < 0 || index3 >= t1)
    throw $.ioore(index3);
  el3 = a[index3];
  if (index4 < 0 || index4 >= t1)
    throw $.ioore(index4);
  el4 = a[index4];
  if (index5 < 0 || index5 >= t1)
    throw $.ioore(index5);
  el5 = a[index5];
  if ($.gtB(compare.call$2(el1, el2), 0)) {
    t0 = el2;
    el2 = el1;
    el1 = t0;
  }
  if ($.gtB(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  if ($.gtB(compare.call$2(el1, el3), 0)) {
    t0 = el1;
    el1 = el3;
    el3 = t0;
  }
  if ($.gtB(compare.call$2(el2, el3), 0)) {
    t0 = el2;
    el2 = el3;
    el3 = t0;
  }
  if ($.gtB(compare.call$2(el1, el4), 0)) {
    t0 = el1;
    el1 = el4;
    el4 = t0;
  }
  if ($.gtB(compare.call$2(el3, el4), 0)) {
    t0 = el4;
    el4 = el3;
    el3 = t0;
  }
  if ($.gtB(compare.call$2(el2, el5), 0)) {
    t0 = el2;
    el2 = el5;
    el5 = t0;
  }
  if ($.gtB(compare.call$2(el2, el3), 0)) {
    t0 = el2;
    el2 = el3;
    el3 = t0;
  }
  if ($.gtB(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  $.CONSTANT0.operator$indexSet$2(a, index1, el1);
  $.CONSTANT0.operator$indexSet$2(a, index3, el3);
  $.CONSTANT0.operator$indexSet$2(a, index5, el5);
  if (left < 0 || left >= a.length)
    throw $.ioore(left);
  $.CONSTANT0.operator$indexSet$2(a, index2, a[left]);
  if (right < 0 || right >= a.length)
    throw $.ioore(right);
  $.CONSTANT0.operator$indexSet$2(a, index4, a[right]);
  less = left + 1;
  great = right - 1;
  pivots_are_equal = $.eqB(compare.call$2(el2, el4), 0);
  if (pivots_are_equal)
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      comp = compare.call$2(ak, el2);
      if ($.eqB(comp, 0))
        continue;
      if ($.ltB(comp, 0)) {
        if (k !== less) {
          if (less >= a.length)
            throw $.ioore(less);
          $.CONSTANT0.operator$indexSet$2(a, k, a[less]);
          $.CONSTANT0.operator$indexSet$2(a, less, ak);
        }
        ++less;
      } else
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          comp = compare.call$2(a[great], el2);
          if ($.gtB(comp, 0)) {
            --great;
            continue;
          } else {
            t1 = $.ltB(comp, 0);
            t2 = a.length;
            great0 = great - 1;
            if (t1) {
              if (less >= t2)
                throw $.ioore(less);
              $.CONSTANT0.operator$indexSet$2(a, k, a[less]);
              less0 = less + 1;
              if (great >= a.length)
                throw $.ioore(great);
              $.CONSTANT0.operator$indexSet$2(a, less, a[great]);
              $.CONSTANT0.operator$indexSet$2(a, great, ak);
              great = great0;
              less = less0;
              break;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              $.CONSTANT0.operator$indexSet$2(a, k, a[great]);
              $.CONSTANT0.operator$indexSet$2(a, great, ak);
              great = great0;
              break;
            }
          }
        }
    }
  else
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.ltB(compare.call$2(ak, el2), 0)) {
        if (k !== less) {
          if (less >= a.length)
            throw $.ioore(less);
          $.CONSTANT0.operator$indexSet$2(a, k, a[less]);
          $.CONSTANT0.operator$indexSet$2(a, less, ak);
        }
        ++less;
      } else if ($.gtB(compare.call$2(ak, el4), 0))
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          if ($.gtB(compare.call$2(a[great], el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t1 = $.ltB(compare.call$2(a[great], el2), 0);
            t2 = a.length;
            great0 = great - 1;
            if (t1) {
              if (less >= t2)
                throw $.ioore(less);
              $.CONSTANT0.operator$indexSet$2(a, k, a[less]);
              less0 = less + 1;
              if (great >= a.length)
                throw $.ioore(great);
              $.CONSTANT0.operator$indexSet$2(a, less, a[great]);
              $.CONSTANT0.operator$indexSet$2(a, great, ak);
              great = great0;
              less = less0;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              $.CONSTANT0.operator$indexSet$2(a, k, a[great]);
              $.CONSTANT0.operator$indexSet$2(a, great, ak);
              great = great0;
            }
            break;
          }
        }
    }
  t1 = less - 1;
  if (t1 >= a.length)
    throw $.ioore(t1);
  $.CONSTANT0.operator$indexSet$2(a, left, a[t1]);
  $.CONSTANT0.operator$indexSet$2(a, t1, el2);
  t1 = great + 1;
  if (t1 < 0 || t1 >= a.length)
    throw $.ioore(t1);
  $.CONSTANT0.operator$indexSet$2(a, right, a[t1]);
  $.CONSTANT0.operator$indexSet$2(a, t1, el4);
  $._Sort__doSort(a, left, less - 2, compare);
  $._Sort__doSort(a, great + 2, right, compare);
  if (pivots_are_equal)
    return;
  if (less < index1 && great > index5) {
    while (true) {
      if (less >= a.length)
        throw $.ioore(less);
      if (!$.eqB(compare.call$2(a[less], el2), 0))
        break;
      ++less;
    }
    while (true) {
      if (great < 0 || great >= a.length)
        throw $.ioore(great);
      if (!$.eqB(compare.call$2(a[great], el4), 0))
        break;
      --great;
    }
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.eqB(compare.call$2(ak, el2), 0)) {
        if (k !== less) {
          if (less >= a.length)
            throw $.ioore(less);
          $.CONSTANT0.operator$indexSet$2(a, k, a[less]);
          $.CONSTANT0.operator$indexSet$2(a, less, ak);
        }
        ++less;
      } else if ($.eqB(compare.call$2(ak, el4), 0))
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          if ($.eqB(compare.call$2(a[great], el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t1 = $.ltB(compare.call$2(a[great], el2), 0);
            t2 = a.length;
            great0 = great - 1;
            if (t1) {
              if (less >= t2)
                throw $.ioore(less);
              $.CONSTANT0.operator$indexSet$2(a, k, a[less]);
              less0 = less + 1;
              if (great >= a.length)
                throw $.ioore(great);
              $.CONSTANT0.operator$indexSet$2(a, less, a[great]);
              $.CONSTANT0.operator$indexSet$2(a, great, ak);
              great = great0;
              less = less0;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              $.CONSTANT0.operator$indexSet$2(a, k, a[great]);
              $.CONSTANT0.operator$indexSet$2(a, great, ak);
              great = great0;
            }
            break;
          }
        }
    }
    $._Sort__doSort(a, less, great, compare);
  } else
    $._Sort__doSort(a, less, great, compare);
};

$.MappedIterable$ = function(_iterable, _f, S, T) {
  var t1 = new $.MappedIterable(_iterable, _f);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$.MappedIterator$ = function(_iterator, _f) {
  return new $.MappedIterator(null, _iterator, _f);
};

$.WhereIterable$ = function(_iterable, _f, E) {
  var t1 = new $.WhereIterable(_iterable, _f);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.WhereIterator$ = function(_iterator, _f) {
  return new $.WhereIterator(_iterator, _f);
};

$.Comparable_compare = function(a, b) {
  return $.getInterceptor$JSStringJSNumber(a).compareTo$1(a, b);
};

$.Error_safeToString = function(object) {
  var t1;
  if (typeof object === "number" && Math.floor(object) === object || typeof object === "number" || typeof object === "boolean" || null == object)
    return $.getInterceptor(object).toString$0(object);
  if (typeof object === "string") {
    t1 = $.CONSTANT2.replaceAll$2(object, "\\", "\\\\");
    t1 = $.getInterceptor$JSString(t1).replaceAll$2(t1, "\n", "\\n");
    t1 = $.getInterceptor$JSString(t1).replaceAll$2(t1, "\r", "\\r");
    return "\"" + $.S($.getInterceptor$JSString(t1).replaceAll$2(t1, "\"", "\\\"")) + "\"";
  }
  return "Instance of '" + $.S($.Primitives_objectTypeName(object)) + "'";
};

$.ArgumentError$ = function(message) {
  return new $.ArgumentError(message);
};

$.RangeError$ = function(message) {
  return new $.RangeError(message);
};

$.RangeError$value = function(value) {
  return new $.RangeError("value " + $.S(value));
};

$.NoSuchMethodError$ = function(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames) {
  return new $.NoSuchMethodError(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames);
};

$.UnsupportedError$ = function(message) {
  return new $.UnsupportedError(message);
};

$.UnimplementedError$ = function(message) {
  return new $.UnimplementedError(message);
};

$.StateError$ = function(message) {
  return new $.StateError(message);
};

$.StackOverflowError$ = function() {
  return new $.StackOverflowError();
};

$.RuntimeError$ = function(message) {
  return new $.RuntimeError(message);
};

$.Exception_Exception = function(message) {
  return $._ExceptionImplementation$(message);
};

$._ExceptionImplementation$ = function(message) {
  return new $._ExceptionImplementation(message);
};

$.FormatException$ = function(message) {
  return new $.FormatException(message);
};

$.IllegalJSRegExpException$ = function(_pattern, _errmsg) {
  return new $.IllegalJSRegExpException(_pattern, _errmsg);
};

$.int_parse = function(source, onError, radix) {
  return $.Primitives_parseInt(source, radix, onError);
};

$.List_List = function(length$) {
  if (!(typeof length$ === "number" && Math.floor(length$) === length$) || length$ < 0)
    throw $.$$throw($.ArgumentError$("Length must be a positive integer: " + $.S(length$) + "."));
  return new Array(length$);
};

$.List_List$fixedLength = function(length$, fill) {
  var result, t1, i;
  if (!(typeof length$ === "number" && Math.floor(length$) === length$) || length$ < 0)
    throw $.$$throw($.ArgumentError$("Length must be a positive integer: " + $.S(length$) + "."));
  result = $.Primitives_newFixedList(length$);
  if (typeof result !== "object" || result === null || (result.constructor !== Array || !!result.immutable$list) && !result.is$JavaScriptIndexingBehavior())
    return $.List_List$fixedLength$bailout(1, length$, fill, result);
  if (!$.eqB(length$, 0) && !(fill == null))
    for (t1 = result.length, i = 0; i < t1; ++i)
      result[i] = fill;
  return result;
};

$.List_List$fixedLength$bailout = function(state0, length$, fill, result) {
  var i;
  if (!$.eqB(length$, 0) && !(fill == null))
    for (i = 0; i < result.length; ++i)
      $.CONSTANT0.operator$indexSet$2(result, i, fill);
  return result;
};

$.List_List$from = function(other, E) {
  var list, t1;
  list = $.List_List(0, E);
  $.setRuntimeTypeInfo(list, [E]);
  for (t1 = $.getInterceptor$JSArray(other).get$iterator(other); t1.moveNext$0() === true;)
    list.push(t1.get$current());
  return list;
};

$.Map_Map = function(K, V) {
  return $._HashMapImpl$(K, V);
};

$.HashMap_HashMap = function(K, V) {
  return $._HashMapImpl$(K, V);
};

$.LinkedHashMap_LinkedHashMap = function(K, V) {
  return $._LinkedHashMapImpl$(K, V);
};

$._HashMapImpl$ = function(K, V) {
  var t1 = new $._HashMapImpl(null, null, null, null, null);
  $.setRuntimeTypeInfo(t1, [K, V]);
  t1._HashMapImpl$0();
  return t1;
};

$._HashMapImpl__computeLoadLimit = function(capacity) {
  return $.CONSTANT3.operator$tdiv$1(capacity * 3, 4);
};

$._HashMapImpl__nextProbe = function(currentProbe, numberOfProbes, length$) {
  var t1, t2;
  t1 = $.getInterceptor$JSNumber(currentProbe).operator$add$1(currentProbe, numberOfProbes);
  t2 = $.getInterceptor$JSNumber(length$).operator$sub$1(length$, 1);
  return $.getInterceptor$JSNumber(t1).operator$and$1(t1, t2);
};

$._HashMapImplKeyIterable$ = function(_map, E) {
  var t1 = new $._HashMapImplKeyIterable(_map);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$._HashMapImplValueIterable$ = function(_map, E) {
  var t1 = new $._HashMapImplValueIterable(_map);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$._HashMapImplKeyIterator$ = function(map) {
  return new $._HashMapImplKeyIterator(map, -1, null);
};

$._HashMapImplValueIterator$ = function(map) {
  return new $._HashMapImplValueIterator(map, -1, null);
};

$._HashMapImplIndexIterator$ = function(map) {
  return new $._HashMapImplIndexIterator(map, -1, null);
};

$._KeyValuePair$ = function(key, value) {
  return new $._KeyValuePair(key, value);
};

$._LinkedHashMapImpl$ = function(K, V) {
  var t1 = new $._LinkedHashMapImpl(null, null);
  $.setRuntimeTypeInfo(t1, [K, V]);
  t1._LinkedHashMapImpl$0();
  return t1;
};

$.print = function(object) {
  if (typeof object === "string")
    $.Primitives_printString(object);
  else
    $.Primitives_printString($.getInterceptor(object).toString$0(object));
};

$.Queue_Queue = function(E) {
  return $.DoubleLinkedQueue$(E);
};

$.DoubleLinkedQueueEntry$ = function(e) {
  var t1 = new $.DoubleLinkedQueueEntry(null, null, null);
  t1.DoubleLinkedQueueEntry$1(e);
  return t1;
};

$._DoubleLinkedQueueEntrySentinel$ = function() {
  var t1 = new $._DoubleLinkedQueueEntrySentinel(null, null, null);
  t1.DoubleLinkedQueueEntry$1(null);
  t1._DoubleLinkedQueueEntrySentinel$0();
  return t1;
};

$.DoubleLinkedQueue$ = function(E) {
  var t1 = new $.DoubleLinkedQueue(null);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.DoubleLinkedQueue$0();
  return t1;
};

$._DoubleLinkedQueueIterator$ = function(sentinel) {
  return new $._DoubleLinkedQueueIterator(sentinel, sentinel, null);
};

$.RegExp_RegExp = function(pattern, caseSensitive, multiLine) {
  return $.JSSyntaxRegExp$(pattern, caseSensitive, multiLine);
};

$.Set_Set = function(E) {
  return $.HashSet$(E);
};

$.Set_Set$from = function(other, E) {
  return $.HashSet_HashSet$from(other, E);
};

$.HashSet$ = function(E) {
  var t1 = new $.HashSet($._HashMapImpl$($.getRuntimeTypeInfo(this)[0], $.getRuntimeTypeInfo(this)[0]));
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.HashSet_HashSet$from = function(other, E) {
  var set, t1;
  set = $.HashSet$(E);
  for (t1 = $.getInterceptor$JSArray(other).get$iterator(other); t1.moveNext$0() === true;)
    set.add$1(t1.get$current());
  return set;
};

$._HashSetIterator$ = function(set) {
  var t1 = set._backingMap._liblib0$_keys;
  return new $._HashSetIterator($.getInterceptor$JSArray(t1).get$iterator(t1));
};

$.StringBuffer_StringBuffer = function(content$) {
  return $._StringBufferImpl$(content$);
};

$._StringBufferImpl$ = function(content$) {
  var t1 = new $._StringBufferImpl(null, null);
  t1._StringBufferImpl$1(content$);
  return t1;
};

$.Strings_join = function(strings, separator) {
  $.checkNull(strings);
  return $.Strings__toJsStringArray(strings).join(separator);
};

$.window = function() {
  return window;
};

$.document = function() {
  return document;
};

$.BodyElementEvents$ = function(_ptr) {
  return new $.BodyElementEvents(_ptr);
};

$.DivElement_DivElement = function() {
  return document.$$dom_createElement$1("div");
};

$.DocumentEvents$ = function(_ptr) {
  return new $.DocumentEvents(_ptr);
};

$._emptyStyleFuture = function() {
  return $._createMeasurementFuture(new $._emptyStyleFuture_anon(), $.Completer_Completer());
};

$._FrozenCssClassSet$ = function() {
  return new $._FrozenCssClassSet();
};

$._ChildrenElementList$_wrap = function(element) {
  return new $._ChildrenElementList(element, element.get$$$dom_children());
};

$._FrozenElementList$_wrap = function(_nodeList) {
  return new $._FrozenElementList(_nodeList);
};

$._FrozenElementListIterator$ = function(_list) {
  return new $._FrozenElementListIterator(_list, -1, null);
};

$._ElementCssClassSet$ = function(_element) {
  return new $._ElementCssClassSet(_element);
};

$.Element_Element$html = function(html) {
  return $._ElementFactoryProvider_createElement_html(html);
};

$.Element_Element$tag = function(tag) {
  return document.createElement(tag);
};

$._ElementFactoryProvider_createElement_html = function(html) {
  var match, t1, tag, t2, parentTag, temp, element;
  match = $.get$_START_TAG_REGEXP().firstMatch$1(html);
  if (!(match == null)) {
    t1 = match.group$1(1);
    tag = $.getInterceptor$JSString(t1).toLowerCase$0(t1);
    t1 = window.get$navigator().get$userAgent();
    if ($.getInterceptor$JSString(t1).contains$2(t1, "Opera", 0) !== true) {
      t1 = window.get$navigator().get$userAgent();
      t2 = $.getInterceptor$JSString(t1).contains$2(t1, "MSIE", 0) === true;
      t1 = t2;
    } else
      t1 = false;
    if (t1 && $.CONSTANT6.containsKey$1(tag) === true)
      return $._ElementFactoryProvider__createTableForIE(html, tag);
    parentTag = $.CONSTANT7.operator$index$1(tag);
    if (parentTag == null)
      parentTag = "div";
  } else {
    parentTag = "div";
    tag = null;
  }
  temp = $.Element_Element$tag(parentTag);
  temp.set$innerHtml(html);
  t1 = temp.get$children();
  if ($.eqB($.getInterceptor$JSStringJSArray(t1).get$length(t1), 1)) {
    t1 = temp.get$children();
    element = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, 0);
  } else {
    if ($.eqB(parentTag, "html")) {
      t1 = temp.get$children();
      t2 = $.eqB($.getInterceptor$JSStringJSArray(t1).get$length(t1), 2);
      t1 = t2;
    } else
      t1 = false;
    if (t1) {
      t1 = temp.get$children();
      t2 = $.eqB(tag, "head") ? 0 : 1;
      element = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, t2);
    } else {
      $._ElementFactoryProvider__singleNode(temp.get$children());
      element = null;
    }
  }
  element.remove$0();
  return element;
};

$._ElementFactoryProvider__createTableForIE = function(html, tag) {
  var div, table, element;
  div = $.Element_Element$tag("div");
  div.set$innerHtml("<table>" + $.S(html) + "</table>");
  table = $._ElementFactoryProvider__singleNode(div.get$children());
  element = null;
  switch (tag) {
    case "td":
    case "th":
      element = $._ElementFactoryProvider__singleNode($._ElementFactoryProvider__singleNode(table.get$rows()).get$cells());
      break;
    case "tr":
      element = $._ElementFactoryProvider__singleNode(table.get$rows());
      break;
    case "tbody":
      element = $._ElementFactoryProvider__singleNode(table.get$tBodies());
      break;
    case "thead":
      element = table.get$tHead();
      break;
    case "tfoot":
      element = table.get$tFoot();
      break;
    case "caption":
      element = table.get$caption();
      break;
    case "colgroup":
      element = $._ElementFactoryProvider__getColgroup(table);
      break;
    case "col":
      element = $._ElementFactoryProvider__singleNode($._ElementFactoryProvider__getColgroup(table).get$children());
      break;
  }
  element.remove$0();
  return element;
};

$._ElementFactoryProvider__getColgroup = function(table) {
  var t1, t2;
  t1 = table.get$children();
  t2 = new $._ElementFactoryProvider__getColgroup_anon();
  t2 = $.getInterceptor$JSArray(t1).where$1(t1, t2);
  return $._ElementFactoryProvider__singleNode($.getInterceptor$JSArray(t2).toList$0(t2));
};

$._ElementFactoryProvider__singleNode = function(list) {
  var t1 = $.getInterceptor$JSStringJSArray(list);
  if ($.eqB(t1.get$length(list), 1))
    return t1.operator$index$1(list, 0);
  throw $.$$throw($.ArgumentError$("HTML had " + $.S(t1.get$length(list)) + " " + "top level elements but 1 expected"));
};

$.ElementEvents$ = function(_ptr) {
  return new $.ElementEvents(_ptr);
};

$.Events$ = function(_ptr) {
  return new $.Events(_ptr);
};

$.EventListenerList$ = function(_ptr, _type) {
  return new $.EventListenerList(_ptr, _type);
};

$.InputElementEvents$ = function(_ptr) {
  return new $.InputElementEvents(_ptr);
};

$.MediaElementEvents$ = function(_ptr) {
  return new $.MediaElementEvents(_ptr);
};

$.MutationObserver_MutationObserver = function(callback) {
  return $.MutationObserver__create(callback);
};

$.MutationObserver__create = function(callback) {
  0;
  return new(window.MutationObserver||window.WebKitMutationObserver||window.MozMutationObserver)($.convertDartClosureToJS(callback, 2));
};

$._ChildNodeListLazy$ = function(_this) {
  return new $._ChildNodeListLazy(_this);
};

$.Text_Text = function(data) {
  return document.createTextNode(data);
};

$.WindowEvents$ = function(_ptr) {
  return new $.WindowEvents(_ptr);
};

$._FrameSetElementEvents$ = function(_ptr) {
  return new $._FrameSetElementEvents(_ptr);
};

$._ElementAttributeMap$ = function(element) {
  return new $._ElementAttributeMap(element);
};

$._MeasurementRequest$ = function(computeValue, completer) {
  return new $._MeasurementRequest(computeValue, completer, null, false);
};

$._MeasurementScheduler__MeasurementScheduler$best = function(callback) {
  if (!!(window.MutationObserver || window.WebKitMutationObserver))
    return $._MutationObserverScheduler$(callback);
  return $._PostMessageScheduler$(callback);
};

$._PostMessageScheduler$ = function(callback) {
  var t1 = new $._PostMessageScheduler("DART-MEASURE", false, callback);
  t1._PostMessageScheduler$1(callback);
  return t1;
};

$._MutationObserverScheduler$ = function(callback) {
  var t1 = new $._MutationObserverScheduler(null, null, false, callback);
  t1._MutationObserverScheduler$1(callback);
  return t1;
};

$._maybeScheduleMeasurementFrame = function() {
  if ($._measurementScheduler == null)
    $._measurementScheduler = $._MeasurementScheduler__MeasurementScheduler$best($._completeMeasurementFutures);
  $._measurementScheduler.maybeSchedule$0();
};

$._createMeasurementFuture = function(computeValue, completer) {
  var t1, t2;
  if ($._pendingRequests == null) {
    $._pendingRequests = [];
    $._maybeScheduleMeasurementFrame();
  }
  t1 = $._pendingRequests;
  t2 = $._MeasurementRequest$(computeValue, completer);
  $.getInterceptor$JSArray(t1).add$1(t1, t2);
  return completer.get$future();
};

$._completeMeasurementFutures = function() {
  var request, e, t1, t2, exception, completedRequests, readyMeasurementFrameCallbacks, t3, t4;
  t1 = $._pendingRequests;
  if (!(t1 == null))
    for (t1 = $.getInterceptor$JSArray(t1).get$iterator(t1); t1.moveNext$0() === true;) {
      request = t1.get$current();
      try {
        t2 = request.computeValue$0();
        request.set$value(t2);
      } catch (exception) {
        t2 = $.unwrapException(exception);
        e = t2;
        t2 = e;
        request.set$value(t2);
        request.set$exception(true);
      }

    }
  completedRequests = $._pendingRequests;
  readyMeasurementFrameCallbacks = $._pendingMeasurementFrameCallbacks;
  $._pendingRequests = null;
  $._pendingMeasurementFrameCallbacks = null;
  if (!(completedRequests == null))
    for (t1 = $.getInterceptor$JSArray(completedRequests).get$iterator(completedRequests); t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      t3 = t2.get$exception() === true;
      t4 = t2.get$completer();
      t2 = t2.get$value();
      if (t3)
        t4.completeError$1(t2);
      else
        t4.complete$1(t2);
    }
  if (!(readyMeasurementFrameCallbacks == null))
    for (t1 = $.getInterceptor$JSArray(readyMeasurementFrameCallbacks).get$iterator(readyMeasurementFrameCallbacks); t1.moveNext$0() === true;)
      t1.get$current().call$0();
};

$._convertNativeToDart_Window = function(win) {
  return $._DOMWindowCrossFrame__createSafe(win);
};

$._DOMWindowCrossFrame$ = function(_window) {
  return new $._DOMWindowCrossFrame(_window);
};

$._DOMWindowCrossFrame__createSafe = function(w) {
  var t1 = window;
  if (w == null ? t1 == null : w === t1)
    return w;
  else
    return $._DOMWindowCrossFrame$(w);
};

$.FixedSizeListIterator$ = function(array) {
  return new $.FixedSizeListIterator(array, $.getInterceptor$JSStringJSArray(array).get$length(array), -1, null);
};

$._convertDartToNative_PrepareForStructuredClone = function(value) {
  var values, copies, t1, t2, t3, t4, copy;
  values = [];
  copies = [];
  t1 = new $._convertDartToNative_PrepareForStructuredClone_findSlot(values, copies);
  t2 = new $._convertDartToNative_PrepareForStructuredClone_readSlot(copies);
  t3 = new $._convertDartToNative_PrepareForStructuredClone_writeSlot(copies);
  t4 = new $._convertDartToNative_PrepareForStructuredClone_cleanupSlots();
  copy = new $._convertDartToNative_PrepareForStructuredClone_walk(t1, t2, t3).call$1(value);
  t4.call$0();
  return copy;
};

$.FilteredElementList$ = function(node) {
  return new $.FilteredElementList(node, node.get$nodes());
};

$.Lists_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (typeof a !== "string" && (typeof a !== "object" || a === null || a.constructor !== Array && !a.is$JavaScriptIndexingBehavior()))
    return $.Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof startIndex !== "number")
    return $.Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof endIndex !== "number")
    return $.Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.eqB(a[i], element))
      return i;
  }
  return -1;
};

$.Lists_indexOf$bailout = function(state0, a, element, startIndex, endIndex) {
  var t1, i;
  t1 = $.getInterceptor$JSStringJSArray(a);
  if ($.geB(startIndex, t1.get$length(a)))
    return -1;
  if ($.ltB(startIndex, 0))
    startIndex = 0;
  for (i = startIndex; $.ltB(i, endIndex); i = $.getInterceptor$JSNumber(i).operator$add$1(i, 1))
    if ($.eqB(t1.operator$index$1(a, i), element))
      return i;
  return -1;
};

$.Lists_getRange = function(a, start, length$, accumulator) {
  var end, i;
  if (typeof a !== "string" && (typeof a !== "object" || a === null || a.constructor !== Array && !a.is$JavaScriptIndexingBehavior()))
    return $.Lists_getRange$bailout(1, a, start, length$, accumulator);
  if (typeof start !== "number")
    return $.Lists_getRange$bailout(1, a, start, length$, accumulator);
  if ($.ltB(length$, 0))
    throw $.$$throw($.ArgumentError$("length"));
  if (start < 0)
    throw $.$$throw($.RangeError$value(start));
  if (typeof length$ !== "number")
    throw $.iae(length$);
  end = start + length$;
  if (end > a.length)
    throw $.$$throw($.RangeError$value(end));
  for (i = start; i < end; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    accumulator.push(a[i]);
  }
  return accumulator;
};

$.Lists_getRange$bailout = function(state0, a, start, length$, accumulator) {
  var end, t1, i;
  if ($.ltB(length$, 0))
    throw $.$$throw($.ArgumentError$("length"));
  if ($.ltB(start, 0))
    throw $.$$throw($.RangeError$value(start));
  end = $.getInterceptor$JSNumber(start).operator$add$1(start, length$);
  t1 = $.getInterceptor$JSStringJSArray(a);
  if ($.gtB(end, t1.get$length(a)))
    throw $.$$throw($.RangeError$value(end));
  for (i = start; $.ltB(i, end); i = $.getInterceptor$JSNumber(i).operator$add$1(i, 1))
    accumulator.push(t1.operator$index$1(a, i));
  return accumulator;
};

$.ReceivePort_ReceivePort = function() {
  return $.ReceivePortImpl$();
};

$._AttributeClassSet$ = function(_element) {
  return new $._AttributeClassSet(_element);
};

$.Uri$ = function(uri) {
  var t1, t2;
  t1 = $.get$Uri__splitRe().firstMatch$1(uri);
  t2 = $.getInterceptor$JSStringJSArray(t1);
  return new $.Uri($.Uri__emptyIfNull(t2.operator$index$1(t1, 1)), $.Uri__emptyIfNull(t2.operator$index$1(t1, 2)), $.Uri__emptyIfNull(t2.operator$index$1(t1, 3)), $.Uri__parseIntOrZero(t2.operator$index$1(t1, 4)), $.Uri__emptyIfNull(t2.operator$index$1(t1, 5)), $.Uri__emptyIfNull(t2.operator$index$1(t1, 6)), $.Uri__emptyIfNull(t2.operator$index$1(t1, 7)));
};

$.Uri__emptyIfNull = function(val) {
  return !(val == null) ? val : "";
};

$.Uri__parseIntOrZero = function(val) {
  if (!(val == null) && !$.eqB(val, ""))
    return $.int_parse(val, null, null);
  else
    return 0;
};

$.Uri__addIfNonEmpty = function(sb, test, first, second) {
  var t1, t2;
  if (!("" === test)) {
    t1 = first == null ? "null" : first;
    t2 = $.getInterceptor$JSArray(sb);
    t2.add$1(sb, t1);
    t2.add$1(sb, second == null ? "null" : second);
  }
};

$.AutocompleteChoiceImpl$ = function(key, label, obj) {
  return new $.AutocompleteChoiceImpl(key, label, obj);
};

$.AutocompleteChoiceRendererImpl$ = function() {
  return new $.AutocompleteChoiceRendererImpl();
};

$.SimpleStringDatasource$ = function(_givenChoices) {
  var t1 = new $.SimpleStringDatasource(_givenChoices, null);
  t1.SimpleStringDatasource$1(_givenChoices);
  return t1;
};

$.SafeHtml$unsafe = function(_html) {
  return new $.SafeHtml(_html);
};

$.updateBinding = function(value, node, stringValue) {
  var isSafeHtml, node0;
  isSafeHtml = typeof value === "object" && value !== null && !!value.is$SafeHtml;
  if (stringValue == null)
    stringValue = $.getInterceptor(value).toString$0(value);
  if (!isSafeHtml && typeof node === "object" && node !== null && node.is$Text())
    node.set$text(stringValue);
  else {
    node0 = isSafeHtml ? $.Element_Element$html(stringValue) : $.Text_Text(stringValue);
    node.replaceWith$1(node0);
    node = node0;
  }
  return node;
};

$.updateCssClass = function(elem, addClasses, classes) {
  var t1, t2;
  if ($.eqB(classes, "") || classes == null)
    return;
  if (addClasses)
    if (typeof classes === "string")
      if ($.CONSTANT2.contains$1(classes, " ") === true) {
        t1 = elem.get$classes();
        t2 = classes.split(" ");
        $.getInterceptor$JSArray(t1).addAll$1(t1, t2);
      } else {
        t1 = elem.get$classes();
        $.getInterceptor$JSArray(t1).add$1(t1, classes);
      }
    else {
      t1 = $.getRuntimeTypeInfo(classes);
      t2 = $.String;
      t2 = $.isSubtype(t1[0], t2);
      if (typeof classes === "object" && classes !== null && (classes.constructor === Array || classes.is$List()) && t2) {
        t1 = elem.get$classes();
        t2 = new $.updateCssClass_anon();
        t2 = $.getInterceptor$JSArray(classes).where$1(classes, t2);
        $.getInterceptor$JSArray(t1).addAll$1(t1, t2);
      } else
        throw $.$$throw($.ArgumentError$("classes must be a String or List<String>."));
    }
  else if (typeof classes === "string")
    if ($.CONSTANT2.contains$1(classes, " ") === true) {
      t1 = elem.get$classes();
      t2 = classes.split(" ");
      $.getInterceptor$JSArray(t1).removeAll$1(t1, t2);
    } else {
      t1 = elem.get$classes();
      $.getInterceptor$JSArray(t1).remove$1(t1, classes);
    }
  else {
    t1 = $.getRuntimeTypeInfo(classes);
    t2 = $.String;
    t2 = $.isSubtype(t1[0], t2);
    if (typeof classes === "object" && classes !== null && (classes.constructor === Array || classes.is$List()) && t2) {
      t1 = elem.get$classes();
      t2 = new $.updateCssClass_anon0();
      t2 = $.getInterceptor$JSArray(classes).where$1(classes, t2);
      $.getInterceptor$JSArray(t1).removeAll$1(t1, t2);
    } else
      throw $.$$throw($.ArgumentError$("classes must be a String or List<String>."));
  }
};

$.bindCssClasses = function(elem, exp) {
  return $.watchAndInvoke(exp, new $.bindCssClasses_anon(elem), null);
};

$.sanitizeUri = function(uri) {
  if (typeof uri === "object" && uri !== null && !!uri.is$SafeUri)
    return uri.toString$0();
  uri = $.getInterceptor(uri).toString$0(uri);
  return $._isSafeUri(uri) ? uri : "#";
};

$._isSafeUri = function(uri) {
  var scheme, t1;
  scheme = $.Uri$(uri).scheme;
  if ($.eqB(scheme, ""))
    return true;
  t1 = $.getInterceptor$JSString(scheme);
  return $.CONSTANT0.contains$1($.CONSTANT8, t1.toLowerCase$0(scheme)) === true || "MAILTO" === t1.toUpperCase$0(scheme);
};

$.Listener$ = function(target, listener) {
  return new $.Listener(target, listener);
};

$.Binding$ = function(exp, action) {
  return new $.Binding(exp, action, null);
};

$.ClassAttrBinding$ = function(elem, exp) {
  return new $.ClassAttrBinding(elem, exp, null);
};

$.DomPropertyBinding$ = function(getter, setter, isUrl) {
  return new $.DomPropertyBinding(setter, getter, isUrl, null);
};

$.ComponentItem$ = function(elem) {
  return new $.ComponentItem(elem);
};

$.Template$ = function(node) {
  return new $.Template(node, [], []);
};

$.ConditionalTemplate$ = function(reference, exp, bodySetup) {
  return new $.ConditionalTemplate(false, bodySetup, exp, null, reference, [], []);
};

$.LoopTemplate$ = function(reference, exp, iterSetup) {
  return new $.LoopTemplate(iterSetup, exp, null, reference, [], []);
};

$.LoopTemplateInAttribute$ = function(node, exp, iterSetup) {
  return new $.LoopTemplateInAttribute(iterSetup, exp, null, node, [], []);
};

$.watch = function(target, callback, debugName) {
  var isList, e, trace, t1, exp, exception, watcher;
  if (callback == null)
    return new $.watch_anon();
  if ($._watchers == null)
    $._watchers = [];
  isList = false;
  t1 = target;
  if (typeof t1 === "object" && t1 !== null && !!t1.is$Handle)
    exp = $.propertyTypeCast(target, "is$Handle").get$_getter();
  else {
    t1 = target;
    if (typeof t1 === "function" || typeof t1 === "object" && t1 !== null && !!t1.is$Function) {
      exp = target;
      try {
        t1 = target.call$0();
        isList = typeof t1 === "object" && t1 !== null && (t1.constructor === Array || t1.is$List());
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        trace = $.getTraceFromException(exception);
        $.print("error: evaluating " + $.S(!(debugName == null) ? debugName : "<unnamed>") + " " + "watcher threw error (" + $.S(e) + ", " + $.S(trace) + ")");
      }

    } else {
      t1 = target;
      if (typeof t1 === "object" && t1 !== null && (t1.constructor === Array || t1.is$List())) {
        exp = new $.watch_anon0(target);
        isList = true;
      } else
        exp = null;
    }
  }
  watcher = isList === true ? $._ListWatcher$(exp, callback, debugName) : $._Watcher$(exp, callback, debugName);
  t1 = $._watchers;
  $.getInterceptor$JSArray(t1).add$1(t1, watcher);
  return new $.watch_anon1(watcher);
};

$.watchAndInvoke = function(exp, callback, debugName) {
  var res = $.watch(exp, callback, debugName);
  if (typeof exp === "function" || typeof exp === "object" && exp !== null && !!exp.is$Function)
    callback.call$1($.WatchEvent$(null, exp.call$0()));
  else
    callback.call$1($.WatchEvent$(null, exp));
  return res;
};

$.WatchEvent$ = function(oldValue, newValue) {
  return new $.WatchEvent(oldValue, newValue);
};

$._Watcher$ = function(_getter, _callback, debugName) {
  var t1 = new $._Watcher(debugName, _getter, _callback, null);
  t1._Watcher$3(_getter, _callback, debugName);
  return t1;
};

$._unregister = function(watcher) {
  var t1, index;
  t1 = $._watchers;
  index = $.getInterceptor$JSStringJSArray(t1).indexOf$1(t1, watcher);
  if (!$.eqB(index, -1)) {
    t1 = $._watchers;
    $.getInterceptor$JSArray(t1).removeRange$2(t1, index, 1);
  }
};

$.dispatch = function() {
  var total, t1, dirty, total0;
  if ($._watchers == null)
    return;
  total = 0;
  do {
    for (t1 = $._watchers, t1 = $.getInterceptor$JSArray(t1).get$iterator(t1), dirty = false; t1.moveNext$0() === true;)
      if (t1.get$current().compareAndNotify$0() === true)
        dirty = true;
    if (dirty) {
      total0 = total + 1;
      t1 = total < 10;
      total = total0;
    } else
      t1 = false;
  } while (t1);
  if (total === 10)
    $.print("Possible loop in watchers propagation, stopped dispatch.");
};

$._ListWatcher$ = function(getter, callback, debugName, T) {
  var t1 = new $._ListWatcher(debugName, getter, callback, null);
  $.setRuntimeTypeInfo(t1, [T]);
  t1._Watcher$3(getter, callback, debugName);
  t1._ListWatcher$3(getter, callback, debugName);
  return t1;
};

$.WebComponent__matches = function(node, selector) {
  if (typeof node === "object" && node !== null && node.is$Text())
    return $.eq(selector, "*");
  return $.callTypeCast(node, "is$Element").matches$1(selector);
};

$.WebComponent__isActive = function(node) {
  for (node = node.get$parent(); !(node == null); node = node.get$parent())
    if ($.eqB(node.get$tagName(), "CONTENT") || $.eqB(node.get$tagName(), "SHADOW"))
      return false;
  return true;
};

$.WebComponent__distribute = function(insertionPoint, nodes) {
  var t1, t2;
  for (t1 = $.getInterceptor$JSArray(nodes).get$iterator(nodes); t1.moveNext$0() === true;) {
    t2 = t1.get$current();
    insertionPoint.get$parent().insertBefore$2(t2, insertionPoint);
  }
  insertionPoint.remove$0();
};

$.Primitives__throwFormatException.call$1 = $.Primitives__throwFormatException;
$.Primitives__throwFormatException.$name = "Primitives__throwFormatException";
$.$$throw.call$1 = $.$$throw;
$.$$throw.$name = "$$throw";
$.dynamicBind.call$4 = $.dynamicBind;
$.dynamicBind.$name = "dynamicBind";
$.invokeClosure.call$5 = $.invokeClosure;
$.invokeClosure.$name = "invokeClosure";
$._completeMeasurementFutures.call$0 = $._completeMeasurementFutures;
$._completeMeasurementFutures.$name = "_completeMeasurementFutures";
$.typeNameInChrome.call$1 = $.typeNameInChrome;
$.typeNameInChrome.$name = "typeNameInChrome";
$.typeNameInSafari.call$1 = $.typeNameInSafari;
$.typeNameInSafari.$name = "typeNameInSafari";
$.DartError_toStringWrapper.call$0 = $.DartError_toStringWrapper;
$.DartError_toStringWrapper.$name = "DartError_toStringWrapper";
$.typeNameInOpera.call$1 = $.typeNameInOpera;
$.typeNameInOpera.$name = "typeNameInOpera";
$.typeNameInFirefox.call$1 = $.typeNameInFirefox;
$.typeNameInFirefox.$name = "typeNameInFirefox";
$.typeNameInIE.call$1 = $.typeNameInIE;
$.typeNameInIE.$name = "typeNameInIE";
$.constructorNameFallback.call$1 = $.constructorNameFallback;
$.constructorNameFallback.$name = "constructorNameFallback";
$.IsolateNatives__processWorkerMessage.call$2 = $.IsolateNatives__processWorkerMessage;
$.IsolateNatives__processWorkerMessage.$name = "IsolateNatives__processWorkerMessage";
$.Comparable_compare.call$2 = $.Comparable_compare;
$.Comparable_compare.$name = "Comparable_compare";
Isolate.$finishClasses($$);
$$ = {};
$.List = {builtin$cls: 'List'};
$.String = {builtin$cls: 'String', is$String: true};
$.Node = {builtin$cls: 'Node'};
$.AutocompleteChoice = {builtin$cls: 'AutocompleteChoice'};
$.CssStyleDeclaration = {builtin$cls: 'CssStyleDeclaration'};
$.ReceivePort = {builtin$cls: 'ReceivePort'};
$._ManagerStub = {builtin$cls: '_ManagerStub'};
$.Match = {builtin$cls: 'Match'};
$.$int = {builtin$cls: '$int'};
$.Element = {builtin$cls: 'Element'};
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
$.CONSTANT10 = Isolate.makeConstantList([]);
$.CONSTANT1 = new Isolate.$isolateProperties.ConstantMap(0, {}, Isolate.$isolateProperties.CONSTANT10);
$.CONSTANT11 = Isolate.makeConstantList(["caption", "col", "colgroup", "tbody", "td", "tfoot", "th", "thead", "tr"]);
$.CONSTANT6 = new Isolate.$isolateProperties.ConstantMap(9, {caption: null, col: null, colgroup: null, tbody: null, td: null, tfoot: null, th: null, thead: null, tr: null}, Isolate.$isolateProperties.CONSTANT11);
$.CONSTANT12 = Isolate.makeConstantList(["childList", "attributes", "characterData", "subtree", "attributeOldValue", "characterDataOldValue"]);
$.CONSTANT5 = new Isolate.$isolateProperties.ConstantMap(6, {childList: true, attributes: true, characterData: true, subtree: true, attributeOldValue: true, characterDataOldValue: true}, Isolate.$isolateProperties.CONSTANT12);
$.CONSTANT = new Isolate.$isolateProperties.NullThrownError();
$.CONSTANT4 = new Isolate.$isolateProperties._DeletedKeySentinel();
$.CONSTANT13 = Isolate.makeConstantList(["body", "head", "caption", "td", "th", "colgroup", "col", "tr", "tbody", "tfoot", "thead", "track"]);
$.CONSTANT7 = new Isolate.$isolateProperties.ConstantMap(12, {body: "html", head: "html", caption: "table", td: "tr", th: "tr", colgroup: "table", col: "colgroup", tr: "tbody", tbody: "table", tfoot: "table", thead: "table", track: "audio"}, Isolate.$isolateProperties.CONSTANT13);
$.CONSTANT0 = new Isolate.$isolateProperties.JSArray();
$.CONSTANT9 = new Isolate.$isolateProperties.Object();
$.CONSTANT3 = new Isolate.$isolateProperties.JSInt();
$.CONSTANT2 = new Isolate.$isolateProperties.JSString();
$.CONSTANT8 = Isolate.makeConstantList(["http", "https", "ftp", "mailto"]);
$.Uri__COMPONENT_SCHEME = 1;
$.Uri__COMPONENT_DOMAIN = 3;
$.KeyCode_ENTER = 13;
$.Uri__COMPONENT_PORT = 4;
$.Uri__COMPONENT_USER_INFO = 2;
$._SAFE_SCHEMES = Isolate.$isolateProperties.CONSTANT8;
$.Uri__COMPONENT_QUERY_DATA = 6;
$.Uri__COMPONENT_PATH = 5;
$.Uri__COMPONENT_FRAGMENT = 7;
$._ElementFactoryProvider__CUSTOM_PARENT_TAG_MAP = Isolate.$isolateProperties.CONSTANT7;
$._ElementFactoryProvider__TABLE_TAGS = Isolate.$isolateProperties.CONSTANT6;
$.KeyCode_UP = 38;
$.KeyCode_DOWN = 40;
$.lazyPort = null;
$._pendingRequests = null;
$._pendingMeasurementFrameCallbacks = null;
$._measurementScheduler = null;
$.Primitives_hashCodeSeed = 0;
$.Primitives_DOLLAR_CHAR_VALUE = 36;
$.ReceivePortImpl__nextFreeId = 1;
$._getTypeNameOf = null;
$._SPAWNED_SIGNAL = "spawned";
$._Sort__INSERTION_SORT_THRESHOLD = 32;
$._HashMapImpl__DELETED_KEY = Isolate.$isolateProperties.CONSTANT4;
$._HashMapImpl__INITIAL_CAPACITY = 8;
$.useShadowDom = false;
$._FutureImpl__INCOMPLETE = 0;
$._watchers = null;
$._FutureImpl__VALUE = 1;
$._FutureImpl__ERROR = 2;
$._FutureImpl__UNHANDLED_ERROR = 4;
$.getInterceptor$JSStringJSArray = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return void 0;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSStringJSNumber = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return void 0;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSString = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return void 0;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSNumber = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (receiver == null)
    return void 0;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return $.JSInt.prototype;
    return $.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return $.JSNull.prototype;
  if (typeof receiver == "function")
    return $.JSFunction.prototype;
  if (typeof receiver == "boolean")
    return $.JSBool.prototype;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSArray = function(receiver) {
  if (receiver == null)
    return void 0;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return $.ObjectInterceptor.prototype;
};
Isolate.$lazy($, 'exampleData', 'exampleData', 'get$exampleData', function() {
  return $.ExampleData$();
});
Isolate.$lazy($, '_splitRe', 'Uri__splitRe', 'get$Uri__splitRe', function() {
  return $.RegExp_RegExp("^(?:([^:/?#.]+):)?(?://(?:([^/?#]*)@)?([\\w\\d\\-\\u0100-\\uffff.%]*)(?::([0-9]+))?)?([^?#]+)?(?:\\?([^#]*))?(?:#(.*))?$", true, false);
});
Isolate.$lazy($, 'exampleDatasource', 'exampleDatasource', 'get$exampleDatasource', function() {
  return $.ExampleDatasource$($.get$exampleData().get$autocompleteChoices());
});
Isolate.$lazy($, 'quoteRegExp', 'quoteRegExp', 'get$quoteRegExp', function() {
  return $.JSSyntaxRegExp$("[-[\\]{}()*+?.,\\\\^$|#\\s]", true, false);
});
Isolate.$lazy($, 'globalThis', 'globalThis', 'get$globalThis', function() {
  return $.IsolateNatives_computeGlobalThis();
});
Isolate.$lazy($, '_START_TAG_REGEXP', '_START_TAG_REGEXP', 'get$_START_TAG_REGEXP', function() {
  return $.RegExp_RegExp("<(\\w+)", true, false);
});
Isolate.$lazy($, 'globalWindow', 'globalWindow', 'get$globalWindow', function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, 'globalWorker', 'globalWorker', 'get$globalWorker', function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, 'globalPostMessageDefined', 'globalPostMessageDefined', 'get$globalPostMessageDefined', function() {
  return $.get$globalThis().postMessage !== (void 0);
});
Isolate.$lazy($, 'thisScript', 'IsolateNatives_thisScript', 'get$IsolateNatives_thisScript', function() {
  return $.IsolateNatives_computeThisScript();
});
var $ = null;
Isolate.$finishClasses($$);
$$ = {};
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
$.$defineNativeClass = function(cls, desc) {
  var fields = desc[''];
  var fields_array = fields ? fields.split(',') : [];
  for (var i = 0; i < fields_array.length; i++) {
    $.$generateAccessor(fields_array[i], desc);
  }
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var method in desc) {
    if (method) {        if (hasOwnProperty.call(desc, method)) {
        $.dynamicFunction(method)[cls] = desc[method];
      }
    }
  }
};

(function(table) {
  for (var key in table)
    $.defineProperty(Object.prototype, key, table[key]);
})({
  is$JavaScriptIndexingBehavior: function() {
    return false;
  },
  is$Collection: function() {
    return false;
  },
  is$List: function() {
    return false;
  },
  is$Map: function() {
    return false;
  },
  is$ArrayBuffer: function() {
    return false;
  },
  is$ArrayBufferView: function() {
    return false;
  },
  is$Blob: function() {
    return false;
  },
  is$Element: function() {
    return false;
  },
  is$File: function() {
    return false;
  },
  is$FileList: function() {
    return false;
  },
  is$ImageData: function() {
    return false;
  },
  is$Node: function() {
    return false;
  },
  is$ShadowRoot: function() {
    return false;
  },
  is$Text: function() {
    return false;
  },
  toString$0: function() {
    return $.toStringForNativeObject(this);
  },
  get$hashCode: function() {
    return $.hashCodeForNativeObject(this);
  }
});

$.$defineNativeClass("Worker", {
  get$id: function() {
    return this.id;
  },
  set$id: function(i) {
    this.id = i;
  },
  set$onmessage: function(f) {
    this.onmessage = f;
  },
  postMessage$1: function(msg) {
    this.postMessage(msg);
  },
  terminate$0: function() {
    this.terminate();
  }
});

$.$defineNativeClass("HTMLAnchorElement", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("ArrayBufferView", {
  is$ArrayBufferView: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLBodyElement", {
  get$on: function() {
    return $.BodyElementEvents$(this);
  }
});

$.$defineNativeClass("HTMLButtonElement", {"": "value="});

$.$defineNativeClass("HTMLCanvasElement", {"": "height>,width="});

$.$defineNativeClass("CharacterData", {"": "length>",
  remove$0: function() {
    return this.remove();
  }
});

$.$defineNativeClass("ClientRect", {"": "height>,left>,top>,width>"});

$.$defineNativeClass("CSSStyleDeclaration", {"": "length>",
  _getPropertyValue$1: function(propertyName) {
    return this.getPropertyValue(propertyName);
  },
  getPropertyValue$1: function(propertyName) {
    var propValue = this._getPropertyValue$1(propertyName);
    return !(propValue == null) ? propValue : "";
  },
  setProperty$3: function(propertyName, value, priority) {
    this.setProperty(propertyName, value, priority);
    if (!!this.setAttribute)
      this.setAttribute(propertyName, value);
  },
  get$clear: function() {
    return this.getPropertyValue$1("clear");
  },
  clear$0: function() {
    return this.get$clear().call$0();
  },
  get$height: function() {
    return this.getPropertyValue$1("height");
  },
  get$left: function() {
    return this.getPropertyValue$1("left");
  },
  set$left: function(value) {
    this.setProperty$3("left", value, "");
  },
  get$marginLeft: function() {
    return this.getPropertyValue$1("margin-left");
  },
  get$marginRight: function() {
    return this.getPropertyValue$1("margin-right");
  },
  get$top: function() {
    return this.getPropertyValue$1("top");
  },
  set$top: function(value) {
    this.setProperty$3("top", value, "");
  },
  get$width: function() {
    return this.getPropertyValue$1("width");
  },
  set$width: function(value) {
    this.setProperty$3("width", value, "");
  }
});

$.$defineNativeClass("Document", {"": "$$dom_body:body~",
  get$on: function() {
    return $.DocumentEvents$(this);
  },
  $$dom_createElement$1: function(tagName) {
    return this.createElement(tagName);
  },
  $$dom_getElementById$1: function(elementId) {
    return this.getElementById(elementId);
  },
  $$dom_getElementsByName$1: function(elementName) {
    return this.getElementsByName(elementName);
  },
  $$dom_getElementsByTagName$1: function(tagname) {
    return this.getElementsByTagName(tagname);
  },
  $$dom_querySelector$1: function(selectors) {
    return this.querySelector(selectors);
  },
  $$dom_querySelectorAll$1: function(selectors) {
    return this.querySelectorAll(selectors);
  },
  query$1: function(selectors) {
    if ($.RegExp_RegExp("^#[_a-zA-Z]\\w*$", true, false).hasMatch$1(selectors) === true)
      return this.$$dom_getElementById$1($.getInterceptor$JSString(selectors).substring$1(selectors, 1));
    return this.$$dom_querySelector$1(selectors);
  },
  queryAll$1: function(selectors) {
    var mutableMatches, len, copyOfMatches, t1, i;
    if ($.RegExp_RegExp("^\\[name=[\"'][^'\"]+['\"]\\]$", true, false).hasMatch$1(selectors) === true) {
      mutableMatches = this.$$dom_getElementsByName$1($.CONSTANT2.substring$2(selectors, 7, selectors.length - 2));
      if (typeof mutableMatches !== "string" && (typeof mutableMatches !== "object" || mutableMatches === null || mutableMatches.constructor !== Array && !mutableMatches.is$JavaScriptIndexingBehavior()))
        return this.queryAll$1$bailout(1, mutableMatches);
      len = mutableMatches.length;
      copyOfMatches = $.List_List$fixedLength(len, null, $.Element);
      $.setRuntimeTypeInfo(copyOfMatches, [$.Element]);
      for (t1 = mutableMatches.length, i = 0; i < len; ++i) {
        if (i >= t1)
          throw $.ioore(i);
        copyOfMatches[i] = mutableMatches[i];
      }
      return $._FrozenElementList$_wrap(copyOfMatches);
    } else if ($.RegExp_RegExp("^[*a-zA-Z0-9]+$", true, false).hasMatch$1(selectors) === true) {
      mutableMatches = this.$$dom_getElementsByTagName$1(selectors);
      if (typeof mutableMatches !== "string" && (typeof mutableMatches !== "object" || mutableMatches === null || mutableMatches.constructor !== Array && !mutableMatches.is$JavaScriptIndexingBehavior()))
        return this.queryAll$1$bailout(3, mutableMatches);
      len = mutableMatches.length;
      copyOfMatches = $.List_List$fixedLength(len, null, $.Element);
      $.setRuntimeTypeInfo(copyOfMatches, [$.Element]);
      for (t1 = mutableMatches.length, i = 0; i < len; ++i) {
        if (i >= t1)
          throw $.ioore(i);
        copyOfMatches[i] = mutableMatches[i];
      }
      return $._FrozenElementList$_wrap(copyOfMatches);
    } else
      return $._FrozenElementList$_wrap(this.$$dom_querySelectorAll$1(selectors));
  },
  queryAll$1$bailout: function(state0, env0, env1, env2) {
    switch (state0) {
      case 1:
        mutableMatches = env0;
        break;
      case 2:
        len = env2;
        t2 = env1;
        mutableMatches = env0;
        break;
      case 3:
        mutableMatches = env0;
        break;
      case 4:
        t2 = env2;
        mutableMatches = env1;
        len = env0;
        break;
    }
    switch (state0) {
      case 0:
      default:
        var mutableMatches, t2, len, copyOfMatches, i, t1;
        if (state0 === 2 || state0 === 1 || state0 === 0 && $.RegExp_RegExp("^\\[name=[\"'][^'\"]+['\"]\\]$", true, false).hasMatch$1(selectors) === true)
          switch (state0) {
            case 0:
              mutableMatches = this.$$dom_getElementsByName$1($.CONSTANT2.substring$2(selectors, 7, selectors.length - 2));
            case 1:
              state0 = 0;
              t2 = $.getInterceptor$JSStringJSArray(mutableMatches);
              len = t2.get$length(mutableMatches);
            case 2:
              state0 = 0;
              copyOfMatches = $.List_List$fixedLength(len, null, $.Element);
              $.setRuntimeTypeInfo(copyOfMatches, [$.Element]);
              for (i = 0; $.ltB(i, len); ++i) {
                t1 = t2.operator$index$1(mutableMatches, i);
                if (i >= copyOfMatches.length)
                  throw $.ioore(i);
                copyOfMatches[i] = t1;
              }
              return $._FrozenElementList$_wrap(copyOfMatches);
          }
        else
          switch (state0) {
            case 0:
            default:
              if (state0 === 4 || state0 === 3 || state0 === 0 && $.RegExp_RegExp("^[*a-zA-Z0-9]+$", true, false).hasMatch$1(selectors) === true)
                switch (state0) {
                  case 0:
                    mutableMatches = this.$$dom_getElementsByTagName$1(selectors);
                  case 3:
                    state0 = 0;
                    t2 = $.getInterceptor$JSStringJSArray(mutableMatches);
                    len = t2.get$length(mutableMatches);
                  case 4:
                    state0 = 0;
                    copyOfMatches = $.List_List$fixedLength(len, null, $.Element);
                    $.setRuntimeTypeInfo(copyOfMatches, [$.Element]);
                    for (i = 0; $.ltB(i, len); ++i) {
                      t1 = t2.operator$index$1(mutableMatches, i);
                      if (i >= copyOfMatches.length)
                        throw $.ioore(i);
                      copyOfMatches[i] = t1;
                    }
                    return $._FrozenElementList$_wrap(copyOfMatches);
                }
              else
                return $._FrozenElementList$_wrap(this.$$dom_querySelectorAll$1(selectors));
          }
    }
  }
});

$.$defineNativeClass("DocumentFragment", {
  get$children: function() {
    if (this._children == null)
      this._children = $.FilteredElementList$(this);
    return this._children;
  },
  query$1: function(selectors) {
    return this.$$dom_querySelector$1(selectors);
  },
  queryAll$1: function(selectors) {
    return $._FrozenElementList$_wrap(this.$$dom_querySelectorAll$1(selectors));
  },
  get$innerHtml: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$innerHtml")) {
      var e, t1, t2;
      e = $.Element_Element$tag("div");
      t1 = e.get$nodes();
      t2 = this.clone$1(true);
      $.getInterceptor$JSArray(t1).add$1(t1, t2);
      return e.get$innerHtml();
    } else
      return Object.prototype.get$innerHtml.call(this);
  },
  get$outerHtml: function() {
    return this.get$innerHtml();
  },
  set$innerHtml: function(value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("set$innerHtml")) {
      var t1, e, nodes;
      t1 = this.get$nodes();
      $.getInterceptor$JSArray(t1).clear$0(t1);
      e = $.Element_Element$tag("div");
      e.set$innerHtml(value);
      nodes = $.List_List$from(e.get$nodes());
      $.setRuntimeTypeInfo(nodes, []);
      t1 = this.get$nodes();
      $.getInterceptor$JSArray(t1).addAll$1(t1, nodes);
    } else
      return Object.prototype.set$innerHtml.call(this, value);
  },
  get$hidden: function() {
    return false;
  },
  get$id: function() {
    return "";
  },
  get$tagName: function() {
    return "";
  },
  get$parent: function() {
    return;
  },
  get$attributes: function() {
    return $.CONSTANT1;
  },
  get$classes: function() {
    return $._FrozenCssClassSet$();
  },
  get$style: function() {
    return $.Element_Element$tag("div").get$style();
  },
  get$computedStyle: function() {
    return $._emptyStyleFuture();
  },
  getComputedStyle$1: function(pseudoElement) {
    return $._emptyStyleFuture();
  },
  blur$0: function() {
  },
  get$blur: function() {
    return new $.BoundClosure2(this, "blur$0");
  },
  focus$0: function() {
  },
  get$focus: function() {
    return new $.BoundClosure2(this, "focus$0");
  },
  set$hidden: function(value) {
    throw $.$$throw($.UnsupportedError$("Hidden can't be set for document fragments."));
  },
  set$id: function(value) {
    throw $.$$throw($.UnsupportedError$("ID can't be set for document fragments."));
  },
  get$on: function() {
    return $.ElementEvents$(this);
  },
  $$dom_querySelector$1: function(selectors) {
    return this.querySelector(selectors);
  },
  $$dom_querySelectorAll$1: function(selectors) {
    return this.querySelectorAll(selectors);
  }
});

$.$defineNativeClass("DOMException", {"": "message>",
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("Element", {"": "xtag=,$$dom_children:children~,hidden=,id=,innerHtml:innerHTML},outerHtml:outerHTML~,$$dom_className:className},clientWidth>,$$dom_firstElementChild:firstElementChild~,$$dom_lastElementChild:lastElementChild~,style>,tagName>",
  get$attributes: function() {
    return $._ElementAttributeMap$(this);
  },
  get$children: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$children")) {
      return $._ChildrenElementList$_wrap(this);
    } else
      return Object.prototype.get$children.call(this);
  },
  set$children: function(value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("set$children")) {
      var copy, children, t1;
      copy = $.List_List$from(value);
      $.setRuntimeTypeInfo(copy, []);
      children = this.get$children();
      t1 = $.getInterceptor$JSArray(children);
      t1.clear$0(children);
      t1.addAll$1(children, copy);
    } else
      return Object.prototype.set$children.call(this, value);
  },
  query$1: function(selectors) {
    return this.$$dom_querySelector$1(selectors);
  },
  queryAll$1: function(selectors) {
    return $._FrozenElementList$_wrap(this.$$dom_querySelectorAll$1(selectors));
  },
  get$classes: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$classes")) {
      return $._ElementCssClassSet$(this);
    } else
      return Object.prototype.get$classes.call(this);
  },
  get$computedStyle: function() {
    return this.getComputedStyle$1("");
  },
  getComputedStyle$1: function(pseudoElement) {
    return $._createMeasurementFuture(new $.Element_getComputedStyle_anon(this, pseudoElement), $.Completer_Completer());
  },
  matches$1: function(selectors) {
    if (!!this.matches)
      return this.matches(selectors);
    else if (!!this.webkitMatchesSelector)
      return this.webkitMatchesSelector(selectors);
    else if (!!this.mozMatchesSelector)
      return this.mozMatchesSelector(selectors);
    else if (!!this.msMatchesSelector)
      return this.msMatchesSelector(selectors);
  },
  get$on: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$on")) {
      return $.ElementEvents$(this);
    } else
      return Object.prototype.get$on.call(this);
  },
  blur$0: function() {
    return this.blur();
  },
  get$blur: function() {
    return new $.BoundClosure2(this, "blur$0");
  },
  focus$0: function() {
    return this.focus();
  },
  get$focus: function() {
    return new $.BoundClosure2(this, "focus$0");
  },
  $$dom_getAttribute$1: function(name$) {
    return this.getAttribute(name$);
  },
  getBoundingClientRect$0: function() {
    return this.getBoundingClientRect();
  },
  $$dom_hasAttribute$1: function(name$) {
    return this.hasAttribute(name$);
  },
  $$dom_querySelector$1: function(selectors) {
    return this.querySelector(selectors);
  },
  $$dom_querySelectorAll$1: function(selectors) {
    return this.querySelectorAll(selectors);
  },
  $$dom_removeAttribute$1: function(name$) {
    return this.removeAttribute(name$);
  },
  $$dom_setAttribute$2: function(name$, value) {
    return this.setAttribute(name$,value);
  },
  createShadowRoot$0: function() {
    return this.webkitCreateShadowRoot();
  },
  is$Element: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLEmbedElement", {"": "height>,width="});

$.$defineNativeClass("ErrorEvent", {"": "message>"});

$.$defineNativeClass("Event", {
  preventDefault$0: function() {
    return this.preventDefault();
  }
});

$.$defineNativeClass("EventException", {"": "message>",
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("EventTarget", {
  get$on: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$on")) {
      return $.Events$(this);
    } else
      return Object.prototype.get$on.call(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$$dom_addEventListener$3")) {
      return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
    } else
      return Object.prototype.$$dom_addEventListener$3.call(this, type, listener, useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$$dom_removeEventListener$3")) {
      return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
    } else
      return Object.prototype.$$dom_removeEventListener$3.call(this, type, listener, useCapture);
  }
});

$.$defineNativeClass("FileException", {"": "message>",
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("HTMLFormElement", {"": "length>",
  reset$0: function() {
    return this.reset();
  }
});

$.$defineNativeClass("HTMLCollection", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  get$contains: function() {
    return new $.BoundClosure(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.Node);
    $.setRuntimeTypeInfo(t1, [$.Node]);
    return t1;
  },
  toSet$0: function() {
    return $.Set_Set$from(this, $.Node);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  sort$0: function() {
    return this.sort$1(null);
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLDocument", {
  get$body: function() {
    return $.document().get$$$dom_body();
  }
});

$.$defineNativeClass("XMLHttpRequestException", {"": "message>",
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("HTMLIFrameElement", {"": "height>,width="});

$.$defineNativeClass("HTMLImageElement", {"": "height>,width=",
  complete$1: function(arg0) {
    return this.complete.call$1(arg0);
  }
});

$.$defineNativeClass("HTMLInputElement", {"": "height>,pattern>,value=,width=",
  get$on: function() {
    return $.InputElementEvents$(this);
  },
  is$Element: function() {
    return true;
  },
  is$Node: function() {
    return true;
  }
});

$.$defineNativeClass("KeyboardEvent", {
  get$keyCode: function() {
    return this.keyCode;
  }
});

$.$defineNativeClass("HTMLLIElement", {"": "value="});

$.$defineNativeClass("HTMLMediaElement", {"": "error>",
  get$on: function() {
    return $.MediaElementEvents$(this);
  },
  loop$3: function(arg0, arg1, arg2) {
    return this.loop.call$3(arg0, arg1, arg2);
  }
});

$.$defineNativeClass("MediaKeyEvent", {"": "message>"});

$.$defineNativeClass("MessageEvent", {"": "ports>"});

$.$defineNativeClass("HTMLMeterElement", {"": "value="});

$.$defineNativeClass("MutationEvent", {"": "newValue>"});

$.$defineNativeClass("MutationObserver", {
  observe$9$attributeFilter$attributeOldValue$attributes$characterData$characterDataOldValue$childList$options$subtree: function(target, attributeFilter, attributeOldValue, attributes, characterData, characterDataOldValue, childList, options, subtree) {
    var parsedOptions, t1;
    parsedOptions = {};
    if (!(options == null)) {
      t1 = new $.MutationObserver_observe_anon(parsedOptions);
      $.getInterceptor$JSArray(options).forEach$1(options, t1);
    }
    t1 = new $.MutationObserver_observe_override(parsedOptions);
    t1.call$2("childList", childList);
    t1.call$2("attributes", attributes);
    t1.call$2("characterData", characterData);
    t1.call$2("subtree", subtree);
    t1.call$2("attributeOldValue", attributeOldValue);
    t1.call$2("characterDataOldValue", characterDataOldValue);
    if (!(attributeFilter == null))
      t1.call$2("attributeFilter", attributeFilter);
    this._call$2(target, parsedOptions);
  },
  observe$2$attributes: function(target, attributes) {
    return this.observe$9$attributeFilter$attributeOldValue$attributes$characterData$characterDataOldValue$childList$options$subtree(target, null, null, attributes, null, null, null, null, null);
  },
  _call$2: function(target, options) {
    return this.observe(target,options);
  }
});

$.$defineNativeClass("MutationRecord", {"": "oldValue>"});

$.$defineNativeClass("NamedNodeMap", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  get$contains: function() {
    return new $.BoundClosure(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.Node);
    $.setRuntimeTypeInfo(t1, [$.Node]);
    return t1;
  },
  toSet$0: function() {
    return $.Set_Set$from(this, $.Node);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  sort$0: function() {
    return this.sort$1(null);
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Navigator", {"": "userAgent>"});

$.$defineNativeClass("Node", {"": "$$dom_attributes:attributes~,$$dom_childNodes:childNodes~,$$dom_localName:localName~,$$dom_namespaceUri:namespaceURI~,nextNode:nextSibling~,parent:parentElement~,parentNode>,text:textContent|",
  get$nodes: function() {
    return $._ChildNodeListLazy$(this);
  },
  remove$0: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("remove$0")) {
      var t1 = this.parentNode;
      if (!(t1 == null))
        t1.$$dom_removeChild$1(this);
    } else
      return Object.prototype.remove$0.call(this);
  },
  replaceWith$1: function(otherNode) {
    var parent$, exception;
    try {
      parent$ = this.parentNode;
      parent$.$$dom_replaceChild$2(otherNode, this);
    } catch (exception) {
      $.unwrapException(exception);
    }

    return this;
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_appendChild$1: function(newChild) {
    return this.appendChild(newChild);
  },
  clone$1: function(deep) {
    if (Object.getPrototypeOf(this).hasOwnProperty("clone$1")) {
      return this.cloneNode(deep);
    } else
      return Object.prototype.clone$1.call(this, deep);
  },
  contains$1: function(other) {
    return this.contains(other);
  },
  get$contains: function() {
    return new $.BoundClosure(this, "contains$1");
  },
  insertBefore$2: function(newChild, refChild) {
    return this.insertBefore(newChild,refChild);
  },
  $$dom_removeChild$1: function(oldChild) {
    return this.removeChild(oldChild);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_replaceChild$2: function(newChild, oldChild) {
    return this.replaceChild(newChild,oldChild);
  },
  is$Node: function() {
    return true;
  }
});

$.$defineNativeClass("NodeList", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  get$contains: function() {
    return new $.BoundClosure(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.Node);
    $.setRuntimeTypeInfo(t1, [$.Node]);
    return t1;
  },
  toSet$0: function() {
    return $.Set_Set$from(this, $.Node);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  sort$0: function() {
    return this.sort$1(null);
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLObjectElement", {"": "height>,width="});

$.$defineNativeClass("HTMLOptionElement", {"": "value="});

$.$defineNativeClass("HTMLOutputElement", {"": "value="});

$.$defineNativeClass("HTMLParamElement", {"": "value="});

$.$defineNativeClass("PositionError", {"": "message>"});

$.$defineNativeClass("HTMLProgressElement", {"": "value="});

$.$defineNativeClass("RadioNodeList", {"": "value="});

$.$defineNativeClass("RangeException", {"": "message>",
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("HTMLSelectElement", {"": "length=,value="});

$.$defineNativeClass("ShadowRoot", {"": "innerHtml:innerHTML}",
  clone$1: function(deep) {
    return this.cloneNode(deep);
  },
  is$ShadowRoot: function() {
    return true;
  }
});

$.$defineNativeClass("SpeechRecognitionError", {"": "error>,message>"});

$.$defineNativeClass("SQLError", {"": "message>"});

$.$defineNativeClass("SQLException", {"": "message>"});

$.$defineNativeClass("Storage", {
  containsKey$1: function(key) {
    return !(this.$$dom_getItem$1(key) == null);
  },
  operator$index$1: function(key) {
    return this.$$dom_getItem$1(key);
  },
  operator$indexSet$2: function(key, value) {
    this.$$dom_setItem$2(key, value);
  },
  remove$1: function(key) {
    var value = this.operator$index$1(key);
    this.$$dom_removeItem$1(key);
    return value;
  },
  clear$0: function() {
    return this.$$dom_clear$0();
  },
  forEach$1: function(f) {
    var i, key;
    for (i = 0; true; ++i) {
      key = this.$$dom_key$1(i);
      if (key == null)
        return;
      f.call$2(key, this.operator$index$1(key));
    }
  },
  get$keys: function() {
    var keys = [];
    this.forEach$1(new $.Storage_keys_anon(keys));
    return keys;
  },
  get$values: function() {
    var values = [];
    this.forEach$1(new $.Storage_values_anon(values));
    return values;
  },
  get$length: function() {
    return this.length;
  },
  get$isEmpty: function() {
    return this.$$dom_key$1(0) == null;
  },
  $$dom_clear$0: function() {
    return this.clear();
  },
  $$dom_getItem$1: function(key) {
    return this.getItem(key);
  },
  $$dom_key$1: function(index) {
    return this.key(index);
  },
  $$dom_removeItem$1: function(key) {
    return this.removeItem(key);
  },
  $$dom_setItem$2: function(key, data) {
    return this.setItem(key,data);
  },
  is$Map: function() {
    return true;
  }
});

$.$defineNativeClass("StorageEvent", {"": "key>,newValue>,oldValue>"});

$.$defineNativeClass("HTMLTableElement", {"": "caption>,rows>,tBodies>,tFoot>,tHead>"});

$.$defineNativeClass("HTMLTableRowElement", {"": "cells>"});

$.$defineNativeClass("HTMLTableSectionElement", {"": "rows>"});

$.$defineNativeClass("Text", {
  is$Text: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLTextAreaElement", {"": "rows>,value="});

$.$defineNativeClass("Uint8Array", {
  get$length: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$length")) {
      return this.length;
    } else
      return Object.prototype.get$length.call(this);
  },
  operator$index$1: function(index) {
    if (Object.getPrototypeOf(this).hasOwnProperty("operator$index$1")) {
      return this[index];
    } else
      return Object.prototype.operator$index$1.call(this, index);
  },
  operator$indexSet$2: function(index, value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("operator$indexSet$2")) {
      this[index] = value;
    } else
      return Object.prototype.operator$indexSet$2.call(this, index, value);
  },
  get$iterator: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$iterator")) {
      return $.FixedSizeListIterator$(this);
    } else
      return Object.prototype.get$iterator.call(this);
  },
  contains$1: function(element) {
    if (Object.getPrototypeOf(this).hasOwnProperty("contains$1")) {
      return $.IterableMixinWorkaround_contains(this, element);
    } else
      return Object.prototype.contains$1.call(this, element);
  },
  get$contains: function() {
    return new $.BoundClosure(this, "contains$1");
  },
  forEach$1: function(f) {
    if (Object.getPrototypeOf(this).hasOwnProperty("forEach$1")) {
      var t1;
      for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
        f.call$1(t1.get$current());
      return;
    } else
      return Object.prototype.forEach$1.call(this, f);
  },
  join$1: function(separator) {
    if (Object.getPrototypeOf(this).hasOwnProperty("join$1")) {
      return $.IterableMixinWorkaround_joinList(this, separator);
    } else
      return Object.prototype.join$1.call(this, separator);
  },
  where$1: function(f) {
    if (Object.getPrototypeOf(this).hasOwnProperty("where$1")) {
      return $.WhereIterable$(this, f);
    } else
      return Object.prototype.where$1.call(this, f);
  },
  toList$0: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("toList$0")) {
      var t1 = $.List_List$from(this, $.$int);
      $.setRuntimeTypeInfo(t1, [$.$int]);
      return t1;
    } else
      return Object.prototype.toList$0.call(this);
  },
  toSet$0: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("toSet$0")) {
      return $.Set_Set$from(this, $.$int);
    } else
      return Object.prototype.toSet$0.call(this);
  },
  get$isEmpty: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$isEmpty")) {
      return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
    } else
      return Object.prototype.get$isEmpty.call(this);
  },
  add$1: function(value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("add$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
    } else
      return Object.prototype.add$1.call(this, value);
  },
  addLast$1: function(value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("addLast$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
    } else
      return Object.prototype.addLast$1.call(this, value);
  },
  addAll$1: function(iterable) {
    if (Object.getPrototypeOf(this).hasOwnProperty("addAll$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
    } else
      return Object.prototype.addAll$1.call(this, iterable);
  },
  set$length: function(value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("set$length")) {
      throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
    } else
      return Object.prototype.set$length.call(this, value);
  },
  clear$0: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("clear$0")) {
      throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
    } else
      return Object.prototype.clear$0.call(this);
  },
  sort$1: function(compare) {
    if (Object.getPrototypeOf(this).hasOwnProperty("sort$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
    } else
      return Object.prototype.sort$1.call(this, compare);
  },
  sort$0: function() {
    return this.sort$1(null);
  },
  indexOf$2: function(element, start) {
    if (Object.getPrototypeOf(this).hasOwnProperty("indexOf$2")) {
      return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
    } else
      return Object.prototype.indexOf$2.call(this, element, start);
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$last")) {
      var t1 = $.getInterceptor$JSStringJSArray(this);
      if ($.gtB(t1.get$length(this), 0)) {
        t1 = t1.get$length(this);
        return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
      }
      throw $.$$throw($.StateError$("No elements"));
    } else
      return Object.prototype.get$last.call(this);
  },
  removeLast$0: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("removeLast$0")) {
      throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
    } else
      return Object.prototype.removeLast$0.call(this);
  },
  remove$1: function(object) {
    if (Object.getPrototypeOf(this).hasOwnProperty("remove$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
    } else
      return Object.prototype.remove$1.call(this, object);
  },
  removeAll$1: function(elements) {
    if (Object.getPrototypeOf(this).hasOwnProperty("removeAll$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
    } else
      return Object.prototype.removeAll$1.call(this, elements);
  },
  removeRange$2: function(start, rangeLength) {
    if (Object.getPrototypeOf(this).hasOwnProperty("removeRange$2")) {
      throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
    } else
      return Object.prototype.removeRange$2.call(this, start, rangeLength);
  },
  getRange$2: function(start, rangeLength) {
    if (Object.getPrototypeOf(this).hasOwnProperty("getRange$2")) {
      return $.Lists_getRange(this, start, rangeLength, []);
    } else
      return Object.prototype.getRange$2.call(this, start, rangeLength);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Uint8ClampedArray", {
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    this[index] = value;
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  get$contains: function() {
    return new $.BoundClosure(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.$int);
    $.setRuntimeTypeInfo(t1, [$.$int]);
    return t1;
  },
  toSet$0: function() {
    return $.Set_Set$from(this, $.$int);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  sort$0: function() {
    return this.sort$1(null);
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLVideoElement", {"": "height>,width="});

$.$defineNativeClass("DOMWindow", {"": "navigator>,pageXOffset>,pageYOffset>",
  get$on: function() {
    return $.WindowEvents$(this);
  },
  get$parent: function() {
    return $._convertNativeToDart_Window(this.parent);
  },
  get$top: function() {
    return $._convertNativeToDart_Window(this.top);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  close$0: function() {
    return this.close();
  },
  $$dom_getComputedStyle$2: function(element, pseudoElement) {
    return this.getComputedStyle(element,pseudoElement);
  },
  postMessage$3: function(message, targetOrigin, messagePorts) {
    var t1, t2;
    t1 = $ === message;
    if (t1)
      message = null;
    t1 = !t1;
    t2 = $ === messagePorts;
    if (t2)
      messagePorts = null;
    if (t1 && t2) {
      this._postMessage_1$2($._convertDartToNative_PrepareForStructuredClone(message), targetOrigin);
      return;
    }
    if (t1) {
      this._postMessage_2$3($._convertDartToNative_PrepareForStructuredClone(message), targetOrigin, messagePorts);
      return;
    }
    throw $.$$throw($.ArgumentError$("Incorrect number or type of arguments"));
  },
  postMessage$2: function(message, targetOrigin) {
    return this.postMessage$3(message, targetOrigin, $);
  },
  _postMessage_1$2: function(message, targetOrigin) {
    return this.postMessage(message,targetOrigin);
  },
  _postMessage_2$3: function(message, targetOrigin, messagePorts) {
    return this.postMessage(message,targetOrigin,messagePorts);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  setTimeout$2: function(handler, timeout) {
    return this.setTimeout($.convertDartClosureToJS(handler, 0),timeout);
  }
});

$.$defineNativeClass("XPathException", {"": "message>",
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("HTMLFrameSetElement", {
  get$on: function() {
    return $._FrameSetElementEvents$(this);
  }
});

$.$defineNativeClass("SVGFEBlendElement", {"": "height>,width>"});

$.$defineNativeClass("SVGFEColorMatrixElement", {"": "height>,width>"});

$.$defineNativeClass("SVGFEComponentTransferElement", {"": "height>,width>"});

$.$defineNativeClass("SVGFECompositeElement", {"": "height>,width>"});

$.$defineNativeClass("SVGFEConvolveMatrixElement", {"": "height>,width>"});

$.$defineNativeClass("SVGFEDiffuseLightingElement", {"": "height>,width>"});

$.$defineNativeClass("SVGFEDisplacementMapElement", {"": "height>,width>"});

$.$defineNativeClass("SVGFEDropShadowElement", {"": "height>,width>"});

$.$defineNativeClass("SVGFEFloodElement", {"": "height>,width>"});

$.$defineNativeClass("SVGFEGaussianBlurElement", {"": "height>,width>"});

$.$defineNativeClass("SVGFEImageElement", {"": "height>,width>"});

$.$defineNativeClass("SVGFEMergeElement", {"": "height>,width>"});

$.$defineNativeClass("SVGFEMorphologyElement", {"": "height>,width>"});

$.$defineNativeClass("SVGFEOffsetElement", {"": "height>,width>"});

$.$defineNativeClass("SVGFESpecularLightingElement", {"": "height>,width>"});

$.$defineNativeClass("SVGFETileElement", {"": "height>,width>"});

$.$defineNativeClass("SVGFETurbulenceElement", {"": "height>,width>"});

$.$defineNativeClass("SVGFilterElement", {"": "height>,width>"});

$.$defineNativeClass("SVGForeignObjectElement", {"": "height>,width>"});

$.$defineNativeClass("SVGImageElement", {"": "height>,width>"});

$.$defineNativeClass("SVGMaskElement", {"": "height>,width>"});

$.$defineNativeClass("SVGPatternElement", {"": "height>,width>"});

$.$defineNativeClass("SVGRectElement", {"": "height>,width>"});

$.$defineNativeClass("SVGElement", {
  get$classes: function() {
    if (this._cssClassSet == null)
      this._cssClassSet = $._AttributeClassSet$(this);
    return this._cssClassSet;
  },
  get$children: function() {
    return $.FilteredElementList$(this);
  },
  set$children: function(value) {
    var children, t1;
    children = this.get$children();
    t1 = $.getInterceptor$JSArray(children);
    t1.clear$0(children);
    t1.addAll$1(children, value);
  },
  get$outerHtml: function() {
    var container, cloned, t1;
    container = $.Element_Element$tag("div");
    cloned = this.clone$1(true);
    t1 = container.get$children();
    $.getInterceptor$JSArray(t1).add$1(t1, cloned);
    return container.get$innerHtml();
  },
  get$innerHtml: function() {
    var container, cloned, t1, t2;
    container = $.Element_Element$tag("div");
    cloned = this.clone$1(true);
    t1 = container.get$children();
    t2 = cloned.get$children();
    $.getInterceptor$JSArray(t1).addAll$1(t1, t2);
    return container.get$innerHtml();
  },
  set$innerHtml: function(svg) {
    var container, t1;
    container = $.Element_Element$tag("div");
    container.set$innerHtml("<svg version=\"1.1\">" + $.S(svg) + "</svg>");
    t1 = container.get$children();
    this.set$children($.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, 0).get$children());
  },
  get$$$dom_children: function() {
    throw $.$$throw($.UnsupportedError$("Cannot get dom_children on SVG."));
  },
  get$id: function() {
    return this.id;
  },
  set$id: function(value) {
    this.id = value;
  }
});

$.$defineNativeClass("SVGException", {"": "message>",
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("SVGSVGElement", {"": "height>,width>"});

$.$defineNativeClass("SVGUseElement", {"": "height>,width>"});

// 92 dynamic classes.
// 240 classes
// 22 !leaf
(function() {
  var v0_Uint8Array = "Uint8Array|Uint8ClampedArray", v1_Text = "Text|CDATASection", v2_MediaElement = "HTMLMediaElement|HTMLVideoElement|HTMLAudioElement", v3_SvgElement = "SVGElement|SVGAElement|SVGAltGlyphDefElement|SVGTextContentElement|SVGTextPositioningElement|SVGAltGlyphElement|SVGTRefElement|SVGTSpanElement|SVGTextElement|SVGTextPathElement|SVGAltGlyphItemElement|SVGAnimationElement|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGSetElement|SVGClipPathElement|SVGComponentTransferFunctionElement|SVGFEFuncRElement|SVGFEFuncGElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGCursorElement|SVGDescElement|SVGEllipseElement|SVGFEBlendElement|SVGFEColorMatrixElement|SVGFEComponentTransferElement|SVGFECompositeElement|SVGDefsElement|SVGCircleElement|SVGFEConvolveMatrixElement|SVGFEDiffuseLightingElement|SVGFEDistantLightElement|SVGFEMergeElement|SVGFEDropShadowElement|SVGFEDisplacementMapElement|SVGFEOffsetElement|SVGFESpotLightElement|SVGFEGaussianBlurElement|SVGFETurbulenceElement|SVGFEMergeNodeElement|SVGFEMorphologyElement|SVGFontFaceElement|SVGFEFloodElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceUriElement|SVGForeignObjectElement|SVGFEPointLightElement|SVGFESpecularLightingElement|SVGGlyphElement|SVGGElement|SVGHKernElement|SVGFontFaceSrcElement|SVGFEImageElement|SVGFETileElement|SVGGradientElement|SVGLinearGradientElement|SVGRadialGradientElement|SVGFilterElement|SVGGlyphRefElement|SVGMarkerElement|SVGImageElement|SVGMetadataElement|SVGMissingGlyphElement|SVGMPathElement|SVGLineElement|SVGMaskElement|SVGFontElement|SVGPathElement|SVGPatternElement|SVGPolygonElement|SVGPolylineElement|SVGRectElement|SVGScriptElement|SVGStopElement|SVGStyleElement|SVGSVGElement|SVGSymbolElement|SVGTitleElement|SVGSwitchElement|SVGVKernElement|SVGViewElement|SVGUseElement", v4_Element = [v2_MediaElement, v3_SvgElement, "Element|HTMLQuoteElement|HTMLScriptElement|HTMLSelectElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTextAreaElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement|HTMLAppletElement|HTMLBaseFontElement|HTMLDirectoryElement|HTMLFontElement|HTMLFrameElement|HTMLFrameSetElement|HTMLMarqueeElement|HTMLElement|HTMLAnchorElement|HTMLAreaElement|HTMLBRElement|HTMLBaseElement|HTMLBodyElement|HTMLButtonElement|HTMLCanvasElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDivElement|HTMLEmbedElement|HTMLFieldSetElement|HTMLFormElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLIFrameElement|HTMLImageElement|HTMLInputElement|HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMenuElement|HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLObjectElement|HTMLOptGroupElement|HTMLOptionElement|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement|HTMLPreElement|HTMLProgressElement"].join("|"), v5_DocumentFragment = "DocumentFragment|ShadowRoot", v6_CharacterData = [v1_Text, "CharacterData|Comment"].join("|"), v7_Document = "Document|SVGDocument|HTMLDocument", v8_Node = [v4_Element, v5_DocumentFragment, v6_CharacterData, v7_Document, "Node|Attr|DocumentType|EntityReference|Notation|ProcessingInstruction"].join("|");
  $.dynamicSetMetadata([["Uint8Array", v0_Uint8Array], ["ArrayBufferView", [v0_Uint8Array, "ArrayBufferView"].join("|")], ["HTMLCollection", "HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection"], ["Text", v1_Text], ["CharacterData", v6_CharacterData], ["HTMLMediaElement", v2_MediaElement], ["Document", v7_Document], ["DocumentFragment", v5_DocumentFragment], ["SVGElement", v3_SvgElement], ["Element", v4_Element], ["Node", v8_Node], ["Event", "Event|RTCDataChannelEvent|RTCIceCandidateEvent|SpeechInputEvent|SpeechRecognitionError|SpeechRecognitionEvent|StorageEvent|UIEvent|TextEvent|TouchEvent|MouseEvent|WheelEvent|CompositionEvent|SVGZoomEvent|KeyboardEvent|TrackEvent|WebKitTransitionEvent|WebGLContextEvent|IDBVersionChangeEvent|IDBVersionChangeEvent|DeviceMotionEvent|BeforeLoadEvent|CloseEvent|CustomEvent|ErrorEvent|HashChangeEvent|DeviceOrientationEvent|ProgressEvent|XMLHttpRequestProgressEvent|AudioProcessingEvent|WebKitAnimationEvent|OfflineAudioCompletionEvent|MediaKeyEvent|MediaStreamEvent|MediaStreamTrackEvent|MessageEvent|MutationEvent|OverflowEvent|PageTransitionEvent|PopStateEvent"], ["NodeList", "NodeList|RadioNodeList"], ["EventTarget", [v8_Node, "EventTarget|DOMWindow"].join("|")]]);
})();

$.main.call$0 = $.main;

//
// BEGIN invoke [main].
//
if (typeof document !== 'undefined' && document.readyState !== 'complete') {
  document.addEventListener('readystatechange', function () {
    if (document.readyState == 'complete') {
      if (typeof dartMainRunner === 'function') {
        dartMainRunner(function() { $.startRootIsolate($.main); });
      } else {
        $.startRootIsolate($.main);
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner === 'function') {
    dartMainRunner(function() { $.startRootIsolate($.main); });
  } else {
    $.startRootIsolate($.main);
  }
}
//
// END invoke [main].
//

function init() {
Isolate.$isolateProperties = {};
function generateAccessor(field, prototype) {
  var len = field.length;
  var lastCharCode = field.charCodeAt(len - 1);
  var needsAccessor = (lastCharCode & 63) >= 60;
  if (needsAccessor) {
    var needsGetter = (lastCharCode & 3) > 0;
    var needsSetter = (lastCharCode & 2) == 0;
    var renaming = (lastCharCode & 64) != 0;
    var accessorName = field = field.substring(0, len - 1);
    if (renaming) {
      var divider = field.indexOf(":");
      accessorName = field.substring(0, divider);
      field = field.substring(divider + 1);
    }
    if (needsGetter) {
      var getterString = "return this." + field + ";";
      prototype["get$" + accessorName] = new Function(getterString);
    }
    if (needsSetter) {
      var setterString = "this." + field + " = v;";
      prototype["set$" + accessorName] = new Function("v", setterString);
    }
  }
  return field;
};
Isolate.$isolateProperties.$generateAccessor = generateAccessor;
Isolate.$defineClass = function(cls, fields, prototype) {
  var constructor;
  if (typeof fields == 'function') {
    constructor = fields;
  } else {
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0) str += ", ";
      var field = fields[i];
      field = generateAccessor(field, prototype);
      str += field;
      body += "this." + field + " = " + field + ";\n";
    }
    str += ") {" + body + "}\n";
    str += "return " + cls + ";";
    constructor = new Function(str)();
  }
  constructor.prototype = prototype;
  constructor.builtin$cls = cls;
  return constructor;
};
var supportsProto = false;
var tmp = Isolate.$defineClass('c', ['f?'], {}).prototype;
if (tmp.__proto__) {
  tmp.__proto__ = {};
  if (typeof tmp.get$f !== 'undefined') supportsProto = true;
}
Isolate.$pendingClasses = {};
Isolate.$finishClasses = function(collectedClasses) {
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var cls in collectedClasses) {
    if (hasOwnProperty.call(collectedClasses, cls)) {
      var desc = collectedClasses[cls];
      var fields = desc[''], supr;
      if (typeof fields == 'string') {
        var s = fields.split(';'); supr = s[0];
        fields = s[1] == '' ? [] : s[1].split(',');
      } else {
        supr = desc['super'];
      }
      Isolate.$isolateProperties[cls] = Isolate.$defineClass(cls, fields, desc);
      if (supr) Isolate.$pendingClasses[cls] = supr;
    }
  }
  var pendingClasses = Isolate.$pendingClasses;
  Isolate.$pendingClasses = {};
  var finishedClasses = {};
  function finishClass(cls) {
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (hasOwnProperty.call(finishedClasses, cls)) return;
    finishedClasses[cls] = true;
    var superclass = pendingClasses[cls];
    if (!superclass) return;
    finishClass(superclass);
    var constructor = Isolate.$isolateProperties[cls];
    var superConstructor = Isolate.$isolateProperties[superclass];
    var prototype = constructor.prototype;
    if (supportsProto) {
      prototype.__proto__ = superConstructor.prototype;
      prototype.constructor = constructor;
    } else {
      function tmp() {};
      tmp.prototype = superConstructor.prototype;
      var newPrototype = new tmp();
      constructor.prototype = newPrototype;
      newPrototype.constructor = constructor;
      for (var member in prototype) {
        if (!member) continue;          if (hasOwnProperty.call(prototype, member)) {
          newPrototype[member] = prototype[member];
        }
      }
    }
  }
  for (var cls in pendingClasses) finishClass(cls);
};
Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
  var getter = new Function("{ return $." + fieldName + ";}");
  var sentinelUndefined = {};
  var sentinelInProgress = {};
  prototype[fieldName] = sentinelUndefined;
  prototype[getterName] = function() {
    var result = $[fieldName];
    try {
      if (result === sentinelUndefined) {
        $[fieldName] = sentinelInProgress;
        try {
          result = $[fieldName] = lazyValue();
        } finally {
          if (result === sentinelUndefined) {
            if ($[fieldName] === sentinelInProgress) {
              $[fieldName] = null;
            }
          }
        }
      } else if (result === sentinelInProgress) {
        $.throwCyclicInit(staticName);
      }
      return result;
    } finally {
      $[getterName] = getter;
    }
  };
};
Isolate.$finishIsolateConstructor = function(oldIsolate) {
  var isolateProperties = oldIsolate.$isolateProperties;
  var isolatePrototype = oldIsolate.prototype;
  var str = "{\n";
  str += "var properties = Isolate.$isolateProperties;\n";
  for (var staticName in isolateProperties) {
    if (Object.prototype.hasOwnProperty.call(isolateProperties, staticName)) {
      str += "this." + staticName + "= properties." + staticName + ";\n";
    }
  }
  str += "}\n";
  var newIsolate = new Function(str);
  newIsolate.prototype = isolatePrototype;
  isolatePrototype.constructor = newIsolate;
  newIsolate.$isolateProperties = isolateProperties;
  return newIsolate;
};
}

//@ sourceMappingURL=example.html_bootstrap.dart.js.map