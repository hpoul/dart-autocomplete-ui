// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
(function($) {
var A = {};
delete A.x;
var B = {};
delete B.x;
var C = {};
delete C.x;
var D = {};
delete D.x;
var E = {};
delete E.x;
var F = {};
delete F.x;
var G = {};
delete G.x;
var H = {};
delete H.x;
var J = {};
delete J.x;
var K = {};
delete K.x;
var L = {};
delete L.x;
var M = {};
delete M.x;
var N = {};
delete N.x;
var O = {};
delete O.x;
var P = {};
delete P.x;
var Q = {};
delete Q.x;
var R = {};
delete R.x;
var S = {};
delete S.x;
var T = {};
delete T.x;
var U = {};
delete U.x;
var V = {};
delete V.x;
var W = {};
delete W.x;
var X = {};
delete X.x;
var Y = {};
delete Y.x;
var Z = {};
delete Z.x;
function Isolate() {}
init();

$ = Isolate.$isolateProperties;
var $$ = {};

// Native classes
// Method closures
$$.BoundClosure$i1 = [J, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$1: function(p0) {
    return this.__js_helper$_target.call(this._self, this._receiver, p0);
  },
  $is_Object__Object: true,
  $is_args1: true
}];

$$.BoundClosure$0 = [H, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$0: function() {
    return this.__js_helper$_target.call(this._self);
  },
  $is_void_: true
}];

$$.BoundClosure$i0 = [H, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$0: function() {
    return this.__js_helper$_target.call(this._self, this._receiver);
  },
  $is_void_: true
}];

$$.BoundClosure$1 = [H, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$1: function(p0) {
    return this.__js_helper$_target.call(this._self, p0);
  },
  $is_Object__Object: true,
  $is_args1: true
}];

$$.BoundClosure$2 = [P, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$2: function(p0, p1) {
    return this.__js_helper$_target.call(this._self, p0, p1);
  },
  call$1: function(p0) {
    return this.call$2(p0, null);
  },
  "+call:1:0": 0,
  $is_args2: true,
  $is_Object__Object: true,
  $is_args1: true
}];

$$.BoundClosure$i10 = [P, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$1: function(p0) {
    return this.__js_helper$_target.call(this._self, this._receiver, p0);
  },
  call$0: function() {
    return this.call$1(null);
  },
  "+call:0:0": 0,
  $is_Object__Object: true,
  $is_args1: true,
  $is_void_: true
}];

$$.BoundClosure$20 = [P, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$2: function(p0, p1) {
    return this.__js_helper$_target.call(this._self, p0, p1);
  },
  $is_args2: true
}];

$$.BoundClosure$3 = [P, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$3: function(p0, p1, p2) {
    return this.__js_helper$_target.call(this._self, p0, p1, p2);
  }
}];

$$.BoundClosure$4 = [P, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$4: function(p0, p1, p2, p3) {
    return this.__js_helper$_target.call(this._self, p0, p1, p2, p3);
  }
}];

$$.BoundClosure$i2 = [P, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$2: function(p0, p1) {
    return this.__js_helper$_target.call(this._self, this._receiver, p0, p1);
  },
  $is_args2: true
}];

$$.BoundClosure$21 = [P, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$2$specification$zoneValues: function(p0, p1) {
    return this.__js_helper$_target.call(this._self, p0, p1);
  },
  call$1$specification: function(p0) {
    return this.call$2$specification$zoneValues(p0, null);
  },
  "+call:1:0:specification": 0,
  call$0: function() {
    return this.call$2$specification$zoneValues(null, null);
  },
  "+call:0:0": 0,
  call$catchAll: function() {
    return {specification: null, zoneValues: null};
  },
  $is_void_: true
}];

$$.BoundClosure$7 = [B, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$7: function(p0, p1, p2, p3, p4, p5, p6) {
    return this.__js_helper$_target.call(this._self, p0, p1, p2, p3, p4, p5, p6);
  },
  call$1: function(p0) {
    return this.call$7(p0, null, null, null, null, null, null);
  },
  "+call:1:0": 0,
  call$2: function(p0, p1) {
    return this.call$7(p0, p1, null, null, null, null, null);
  },
  "+call:2:0": 0,
  call$3: function(p0, p1, p2) {
    return this.call$7(p0, p1, p2, null, null, null, null);
  },
  "+call:3:0": 0,
  call$4: function(p0, p1, p2, p3) {
    return this.call$7(p0, p1, p2, p3, null, null, null);
  },
  "+call:4:0": 0,
  call$5: function(p0, p1, p2, p3, p4) {
    return this.call$7(p0, p1, p2, p3, p4, null, null);
  },
  "+call:5:0": 0,
  call$6: function(p0, p1, p2, p3, p4, p5) {
    return this.call$7(p0, p1, p2, p3, p4, p5, null);
  },
  "+call:6:0": 0,
  $is_args2: true,
  $is_Object__Object: true,
  $is_args1: true
}];

$$.Closure$2 = [H, {"": "Closure;call$2,$name", $is_args2: true}];

$$.Closure$1 = [H, {"": "Closure;call$1,$name", $is_Object__Object: true, $is_args1: true}];

$$.Closure$0 = [H, {"": "Closure;call$0,$name", $is_void_: true}];

$$.Closure$7 = [H, {"": "Closure;call$7,$name"}];

$$.Closure$22 = [P, {"": "Closure;call$2,$name",
  call$1: function(p0) {
    return this.call$2(p0, null);
  },
  "+call:1:0": 0,
  $is_args2: true,
  $is_Object__Object: true,
  $is_args1: true
}];

$$.Closure$5 = [P, {"": "Closure;call$5,$name"}];

$$.Closure$4 = [P, {"": "Closure;call$4,$name"}];

$$.Closure$6 = [P, {"": "Closure;call$6,$name"}];

$$.Closure$3 = [P, {"": "Closure;call$3$onError$radix,$name",
  call$1: function(p0) {
    return this.call$3$onError$radix(p0, null, null);
  },
  "+call:1:0": 0,
  call$2$onError: function(p0, p1) {
    return this.call$3$onError$radix(p0, p1, null);
  },
  "+call:2:0:onError": 0,
  call$catchAll: function() {
    return {onError: null, radix: null};
  },
  $is_Object__Object: true,
  $is_args1: true
}];

init.mangledNames = {get$$$: "$", get$_autocomplete_result$__$choice: "__$choice", get$_autocomplete_result$__$renderer: "__$renderer", get$_autocomplete_result$__$searchquery: "__$searchquery", get$_cachedConstructors: "_cachedConstructors", get$_cachedDeclarations: "_cachedDeclarations", get$_cachedFields: "_cachedFields", get$_cachedGetters: "_cachedGetters", get$_cachedMembers: "_cachedMembers", get$_cachedMetadata: "_cachedMetadata", get$_cachedMethods: "_cachedMethods", get$_cachedMethodsMap: "_cachedMethodsMap", get$_cachedSetters: "_cachedSetters", get$_cachedSuperinterfaces: "_cachedSuperinterfaces", get$_cachedTypeVariables: "_cachedTypeVariables", get$_cachedVariables: "_cachedVariables", get$_fieldsDescriptor: "_fieldsDescriptor", get$_fieldsMetadata: "_fieldsMetadata", get$_focusedItemIndex: "_focusedItemIndex", get$_input_autocomplete$__$datasource: "__$datasource", get$_input_autocomplete$__$model: "__$model", get$_input_autocomplete$__$selectedchoice: "__$selectedchoice", get$_jsConstructorCache: "_jsConstructorCache", get$_jsConstructorOrInterceptor: "_jsConstructorOrInterceptor", get$_mangledName: "_mangledName", get$_metadata: "_metadata", get$_owner: "_owner", get$_renderer: "_renderer", get$_simple_autocomplete_example$__$exampleDatasource: "__$exampleDatasource", get$_simple_autocomplete_example$__$selectedchoice: "__$selectedchoice", get$_superclass: "_superclass", get$choice: "choice", get$choices: "choices", get$datasource: "datasource", get$exampleDatasource: "exampleDatasource", get$filteredChoices: "filteredChoices", get$hasSearched: "hasSearched", get$hash: "hash", get$index: "index", get$inputHasFocus: "inputHasFocus", get$length: "length", get$method_0: "method_0", get$model: "model", get$mynull: "mynull", get$renderer: "renderer", get$searchquery: "searchquery", get$selectedchoice: "selectedchoice", get$this_0: "this_0", get$this_1: "this_1", get$this_2: "this_2", get$value: "value", get$xyz: "xyz"};
(function (reflectionData) {
  function map(x){x={x:x};delete x.x;return x}
  if (!init.libraries) init.libraries = [];
  if (!init.mangledNames) init.mangledNames = map();
  if (!init.mangledGlobalNames) init.mangledGlobalNames = map();
  if (!init.statics) init.statics = map();
  if (!init.interfaces) init.interfaces = map();
  if (!init.globalFunctions) init.globalFunctions = map();
  var libraries = init.libraries;
  var mangledNames = init.mangledNames;
  var mangledGlobalNames = init.mangledGlobalNames;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var length = reflectionData.length;
  for (var i = 0; i < length; i++) {
    var data = reflectionData[i];
    var name = data[0];
    var uri = data[1];
    var metadata = data[2];
    var globalObject = data[3];
    var descriptor = data[4];
    var isRoot = !!data[5];
    var fields = descriptor && descriptor[""];
    var classes = [];
    var functions = [];
    function processStatics(descriptor) {
      for (var property in descriptor) {
        if (!hasOwnProperty.call(descriptor, property)) continue;
        if (property === "") continue;
        var element = descriptor[property];
        var firstChar = property.substring(0, 1);
        var previousProperty;
        if (firstChar === "+") {
          mangledGlobalNames[previousProperty] = property.substring(1);
          if (descriptor[property] == 1) descriptor[previousProperty].$reflectable = 1;
          if (element && element.length) init.interfaces[previousProperty] = element;
        } else if (firstChar === "@") {
          property = property.substring(1);
          $[property]["@"] = element;
        } else if (firstChar === "*") {
          globalObject[previousProperty].$defaultValues = element;
          var optionalMethods = descriptor.$methodsWithOptionalArguments;
          if (!optionalMethods) {
            descriptor.$methodsWithOptionalArguments = optionalMethods = {}
          }
          optionalMethods[property] = previousProperty;
        } else if (typeof element === "function") {
          globalObject[previousProperty = property] = element;
          functions.push(property);
          init.globalFunctions[property] = element;
        } else {
          previousProperty = property;
          var newDesc = {};
          var previousProp;
          for (var prop in element) {
            if (!hasOwnProperty.call(element, prop)) continue;
            firstChar = prop.substring(0, 1);
            if (prop === "static") {
              processStatics(init.statics[property] = element[prop]);
            } else if (firstChar === "+") {
              mangledNames[previousProp] = prop.substring(1);
              if (element[prop] == 1) element[previousProp].$reflectable = 1;
            } else if (firstChar === "@" && prop !== "@") {
              newDesc[prop.substring(1)]["@"] = element[prop];
            } else if (firstChar === "*") {
              newDesc[previousProp].$defaultValues = element[prop];
              var optionalMethods = newDesc.$methodsWithOptionalArguments;
              if (!optionalMethods) {
                newDesc.$methodsWithOptionalArguments = optionalMethods={}
              }
              optionalMethods[prop] = previousProp;
            } else {
              newDesc[previousProp = prop] = element[prop];
            }
          }
          $$[property] = [globalObject, newDesc];
          classes.push(property);
        }
      }
    }
    processStatics(descriptor);
    libraries.push([name, uri, classes, functions, metadata, fields, isRoot,
                    globalObject]);
  }
})([
["_foreign_helper", "dart:_foreign_helper", , H, {
JS_CONST: {"": "Object;code"}}],
["_interceptors", "dart:_interceptors", , J, {
getInterceptor: function(object) {
  return void 0;
},

makeDispatchRecord: function(interceptor, proto, extension, indexability) {
  return {i: interceptor, p: proto, e: extension, x: indexability};
},

getNativeInterceptor: function(object) {
  var record, proto, objectProto;
  record = object[init.dispatchPropertyName];
  if (record == null)
    if ($.initNativeDispatchFlag == null) {
      H.initNativeDispatch();
      record = object[init.dispatchPropertyName];
    }
  if (record != null) {
    proto = record.p;
    if (false === proto)
      return record.i;
    if (true === proto)
      return object;
    objectProto = Object.getPrototypeOf(object);
    if (proto === objectProto)
      return record.i;
    if (record.e === objectProto)
      return proto(object, record);
  }
  record = H.lookupDispatchRecord(object);
  if (record == null)
    return C.C_UnknownJavaScriptObject;
  Object.defineProperty(Object.getPrototypeOf(object), init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
  return J.getNativeInterceptor(object);
},

findIndexForNativeSubclassType: function(type) {
  var t1, map, t2, i;
  t1 = $.mapTypeToInterceptor;
  if (t1 == null)
    return;
  map = t1;
  for (t1 = map.length, t2 = J.getInterceptor(type), i = 0; i + 1 < t1; i += 3) {
    if (i >= t1)
      throw H.ioore(map, i);
    if (t2.$eq(type, map[i]))
      return i;
  }
  return;
},

findInterceptorConstructorForType: function(type) {
  var index, t1;
  index = J.findIndexForNativeSubclassType(type);
  if (index == null)
    return;
  t1 = $.mapTypeToInterceptor;
  if (typeof index !== "number")
    throw index.$add();
  return J.$index$asx(t1, index + 1);
},

findConstructorForNativeSubclassType: function(type, $name) {
  var index, t1;
  index = J.findIndexForNativeSubclassType(type);
  if (index == null)
    return;
  t1 = $.mapTypeToInterceptor;
  if (typeof index !== "number")
    throw index.$add();
  return J.$index$asx(t1, index + 2)[$name];
},

Interceptor: {"": "Object;",
  $eq: function(receiver, other) {
    return receiver === other;
  },
  get$hashCode: function(receiver) {
    return H.Primitives_objectHashCode(receiver);
  },
  toString$0: function(receiver) {
    return H.Primitives_objectToString(receiver);
  },
  noSuchMethod$1: function(receiver, invocation) {
    throw H.wrapException(P.NoSuchMethodError$(receiver, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
  },
  get$runtimeType: function(receiver) {
    return new H.TypeImpl(H.getRuntimeTypeString(receiver), null);
  },
  $isInterceptor: true
},

JSBool: {"": "bool/Interceptor;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver ? 519018 : 218159;
  },
  get$runtimeType: function(receiver) {
    return C.Type_EsU;
  },
  $isbool: true
},

JSNull: {"": "Interceptor;",
  $eq: function(receiver, other) {
    return null == other;
  },
  toString$0: function(receiver) {
    return "null";
  },
  get$hashCode: function(receiver) {
    return 0;
  },
  get$runtimeType: function(receiver) {
    return C.Type_eZO;
  }
},

JavaScriptObject: {"": "Interceptor;",
  get$hashCode: function(_) {
    return 0;
  },
  get$runtimeType: function(_) {
    return C.Type_XXD;
  }
},

PlainJavaScriptObject: {"": "JavaScriptObject;"},

UnknownJavaScriptObject: {"": "JavaScriptObject;"},

JSArray: {"": "List/Interceptor;",
  add$1: function(receiver, value) {
    if (!!receiver.fixed$length)
      H.throwExpression(P.UnsupportedError$("add"));
    receiver.push(value);
  },
  get$add: function(_receiver) {
    return new J.BoundClosure$i1(this, J.JSArray.prototype.add$1, _receiver, "add$1");
  },
  removeAt$1: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(new P.ArgumentError(index));
    if (index < 0 || index >= receiver.length)
      throw H.wrapException(new P.RangeError("value " + index));
    if (!!receiver.fixed$length)
      H.throwExpression(P.UnsupportedError$("removeAt"));
    return receiver.splice(index, 1)[0];
  },
  insert$2: function(receiver, index, value) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(new P.ArgumentError(index));
    if (index < 0 || index > receiver.length)
      throw H.wrapException(new P.RangeError("value " + index));
    if (!!receiver.fixed$length)
      H.throwExpression(P.UnsupportedError$("insert"));
    receiver.splice(index, 0, value);
  },
  removeLast$0: function(receiver) {
    if (!!receiver.fixed$length)
      H.throwExpression(P.UnsupportedError$("removeLast"));
    if (receiver.length === 0)
      throw H.wrapException(new P.RangeError("value -1"));
    return receiver.pop();
  },
  remove$1: function(receiver, element) {
    var i;
    if (!!receiver.fixed$length)
      H.throwExpression(P.UnsupportedError$("remove"));
    for (i = 0; i < receiver.length; ++i)
      if (J.$eq(receiver[i], element)) {
        receiver.splice(i, 1);
        return true;
      }
    return false;
  },
  where$1: function(receiver, f) {
    var t1 = new H.WhereIterable(receiver, f);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  addAll$1: function(receiver, collection) {
    var t1;
    for (t1 = J.get$iterator$ax(collection); t1.moveNext$0();)
      this.add$1(receiver, t1.get$current());
  },
  forEach$1: function(receiver, f) {
    return H.IterableMixinWorkaround_forEach(receiver, f);
  },
  map$1: function(receiver, f) {
    var t1 = new H.MappedListIterable(receiver, f);
    H.setRuntimeTypeInfo(t1, [null, null]);
    return t1;
  },
  join$1: function(receiver, separator) {
    var list, t1, i, t2;
    list = P.List_List(receiver.length, null);
    for (t1 = list.length, i = 0; i < receiver.length; ++i) {
      t2 = H.S(receiver[i]);
      if (i >= t1)
        throw H.ioore(list, i);
      list[i] = t2;
    }
    return list.join(separator);
  },
  firstWhere$2$orElse: function(receiver, test, orElse) {
    return H.IterableMixinWorkaround_firstWhere(receiver, test, orElse);
  },
  firstWhere$1: function($receiver, test) {
    return this.firstWhere$2$orElse($receiver, test, null);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  sublist$2: function(receiver, start, end) {
    if (typeof start !== "number" || Math.floor(start) !== start)
      throw H.wrapException(new P.ArgumentError(start));
    if (start < 0 || start > receiver.length)
      throw H.wrapException(P.RangeError$range(start, 0, receiver.length));
    if (end == null)
      end = receiver.length;
    else {
      if (typeof end !== "number" || Math.floor(end) !== end)
        throw H.wrapException(new P.ArgumentError(end));
      if (end < start || end > receiver.length)
        throw H.wrapException(P.RangeError$range(end, start, receiver.length));
    }
    if (start === end)
      return [];
    return receiver.slice(start, end);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  getRange$2: function(receiver, start, end) {
    H.IterableMixinWorkaround__rangeCheck(receiver, start, end);
    return H.SubListIterable$(receiver, start, end, null);
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw H.wrapException(P.StateError$("No elements"));
  },
  get$last: function(receiver) {
    var t1 = receiver.length;
    if (t1 > 0)
      return receiver[t1 - 1];
    throw H.wrapException(new P.StateError("No elements"));
  },
  get$single: function(receiver) {
    var t1 = receiver.length;
    if (t1 === 1) {
      if (0 >= t1)
        throw H.ioore(receiver, 0);
      return receiver[0];
    }
    if (t1 === 0)
      throw H.wrapException(new P.StateError("No elements"));
    throw H.wrapException(new P.StateError("More than one element"));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    if (!!receiver.immutable$list)
      H.throwExpression(P.UnsupportedError$("set range"));
    H.IterableMixinWorkaround_setRangeList(receiver, start, end, iterable, skipCount);
  },
  any$1: function(receiver, f) {
    return H.IterableMixinWorkaround_any(receiver, f);
  },
  indexOf$2: function(receiver, element, start) {
    return H.Arrays_indexOf(receiver, element, start, receiver.length);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  lastIndexOf$2: function(receiver, element, start) {
    return H.IterableMixinWorkaround_lastIndexOfList(receiver, element, start);
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  contains$1: function(receiver, other) {
    var i;
    for (i = 0; i < receiver.length; ++i)
      if (J.$eq(receiver[i], other))
        return true;
    return false;
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  "+isEmpty": 0,
  get$isNotEmpty: function(receiver) {
    return receiver.length !== 0;
  },
  "+isNotEmpty": 0,
  toString$0: function(receiver) {
    return H.IterableMixinWorkaround_toStringIterable(receiver, "[", "]");
  },
  toList$1$growable: function(receiver, growable) {
    return P.List_List$from(receiver, growable, H.getRuntimeTypeArgument(receiver, "JSArray", 0));
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$iterator: function(receiver) {
    var t1 = new H.ListIterator(receiver, receiver.length, 0, null);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(receiver, "JSArray", 0)]);
    return t1;
  },
  get$hashCode: function(receiver) {
    return H.Primitives_objectHashCode(receiver);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  "+length": 0,
  set$length: function(receiver, newLength) {
    if (typeof newLength !== "number" || Math.floor(newLength) !== newLength)
      throw H.wrapException(new P.ArgumentError(newLength));
    if (newLength < 0)
      throw H.wrapException(new P.RangeError("value " + newLength));
    if (!!receiver.fixed$length)
      H.throwExpression(P.UnsupportedError$("set length"));
    receiver.length = newLength;
  },
  "+length=": 0,
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(new P.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw H.wrapException(new P.RangeError("value " + index));
    return receiver[index];
  },
  "+[]:1:0": 0,
  $indexSet: function(receiver, index, value) {
    if (!!receiver.immutable$list)
      H.throwExpression(P.UnsupportedError$("indexed set"));
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(new P.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw H.wrapException(new P.RangeError("value " + index));
    receiver[index] = value;
  },
  "+[]=:2:0": 0,
  $isList: true,
  $asList: null,
  $asIterable: null,
  $isList: true,
  $isEfficientLength: true,
  $isIterable: true
},

JSMutableArray: {"": "JSArray;", $isJSMutableArray: true,
  $asJSArray: function() {
    return [null];
  },
  $asList: function() {
    return [null];
  },
  $asIterable: function() {
    return [null];
  }
},

JSFixedArray: {"": "JSMutableArray;"},

JSExtendableArray: {"": "JSMutableArray;", $isJSExtendableArray: true},

JSNumber: {"": "num/Interceptor;",
  compareTo$1: function(receiver, b) {
    var bIsNegative;
    if (typeof b !== "number")
      throw H.wrapException(new P.ArgumentError(b));
    if (receiver < b)
      return -1;
    else if (receiver > b)
      return 1;
    else if (receiver === b) {
      if (receiver === 0) {
        bIsNegative = this.get$isNegative(b);
        if (this.get$isNegative(receiver) === bIsNegative)
          return 0;
        if (this.get$isNegative(receiver))
          return -1;
        return 1;
      }
      return 0;
    } else if (isNaN(receiver)) {
      if (this.get$isNaN(b))
        return 0;
      return 1;
    } else
      return -1;
  },
  get$isNegative: function(receiver) {
    return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
  },
  get$isNaN: function(receiver) {
    return isNaN(receiver);
  },
  remainder$1: function(receiver, b) {
    return receiver % b;
  },
  abs$0: function(receiver) {
    return Math.abs(receiver);
  },
  toInt$0: function(receiver) {
    var t1;
    if (receiver >= -2147483648 && receiver <= 2147483647)
      return receiver | 0;
    if (isFinite(receiver)) {
      t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
      return t1 + 0;
    }
    throw H.wrapException(P.UnsupportedError$('' + receiver));
  },
  round$0: function(receiver) {
    return this.toInt$0(this.roundToDouble$0(receiver));
  },
  roundToDouble$0: function(receiver) {
    if (receiver < 0)
      return -Math.round(-receiver);
    else
      return Math.round(receiver);
  },
  toRadixString$1: function(receiver, radix) {
    if (radix < 2 || radix > 36)
      throw H.wrapException(P.RangeError$(radix));
    return receiver.toString(radix);
  },
  toString$0: function(receiver) {
    if (receiver === 0 && 1 / receiver < 0)
      return "-0.0";
    else
      return "" + receiver;
  },
  get$hashCode: function(receiver) {
    return receiver & 0x1FFFFFFF;
  },
  $negate: function(receiver) {
    return -receiver;
  },
  $add: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver + other;
  },
  $sub: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver - other;
  },
  $div: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver / other;
  },
  $mul: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver * other;
  },
  $tdiv: function(receiver, other) {
    if ((receiver | 0) === receiver && (other | 0) === other && 0 !== other && -1 !== other)
      return receiver / other | 0;
    else
      return this._slowTdiv$1(receiver, other);
  },
  _slowTdiv$1: function(receiver, other) {
    return this.toInt$0(receiver / other);
  },
  $shl: function(receiver, other) {
    if (other < 0)
      throw H.wrapException(new P.ArgumentError(other));
    if (other > 31)
      return 0;
    return receiver << other >>> 0;
  },
  $shr: function(receiver, other) {
    if (other < 0)
      throw H.wrapException(new P.ArgumentError(other));
    if (receiver > 0) {
      if (other > 31)
        return 0;
      return receiver >>> other;
    }
    if (other > 31)
      other = 31;
    return receiver >> other >>> 0;
  },
  $and: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return (receiver & other) >>> 0;
  },
  $lt: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(P.ArgumentError$(other));
    return receiver < other;
  },
  $gt: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(P.ArgumentError$(other));
    return receiver > other;
  },
  $le: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver <= other;
  },
  $ge: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver >= other;
  },
  $isnum: true,
  static: {
"": "JSNumber__MIN_INT32,JSNumber__MAX_INT32",
}

},

JSInt: {"": "int/JSNumber;",
  get$runtimeType: function(receiver) {
    return C.Type_SnA;
  },
  $isdouble: true,
  $isnum: true,
  $isint: true
},

JSDouble: {"": "double/JSNumber;",
  get$runtimeType: function(receiver) {
    return C.Type_qq1;
  },
  $isdouble: true,
  $isnum: true
},

JSString: {"": "String/Interceptor;",
  codeUnitAt$1: function(receiver, index) {
    if (typeof index !== "number")
      throw H.wrapException(P.ArgumentError$(index));
    if (index < 0)
      throw H.wrapException(P.RangeError$value(index));
    if (index >= receiver.length)
      throw H.wrapException(P.RangeError$value(index));
    return receiver.charCodeAt(index);
  },
  allMatches$1: function(receiver, str) {
    return H.allMatchesInStringUnchecked(receiver, str);
  },
  matchAsPrefix$2: function(receiver, string, start) {
    var t1, t2, i, t3;
    if (start < 0 || start > string.length)
      throw H.wrapException(P.RangeError$range(start, 0, string.length));
    t1 = receiver.length;
    t2 = string.length;
    if (start + t1 > t2)
      return;
    for (i = 0; i < t1; ++i) {
      t3 = start + i;
      if (t3 < 0)
        H.throwExpression(new P.RangeError("value " + H.S(t3)));
      if (t3 >= t2)
        H.throwExpression(new P.RangeError("value " + H.S(t3)));
      t3 = string.charCodeAt(t3);
      if (i >= t1)
        H.throwExpression(new P.RangeError("value " + i));
      if (t3 !== receiver.charCodeAt(i))
        return;
    }
    return new H.StringMatch(start, string, receiver);
  },
  matchAsPrefix$1: function($receiver, string) {
    return this.matchAsPrefix$2($receiver, string, 0);
  },
  $add: function(receiver, other) {
    if (typeof other !== "string")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver + other;
  },
  endsWith$1: function(receiver, other) {
    var otherLength, t1;
    otherLength = other.length;
    t1 = receiver.length;
    if (otherLength > t1)
      return false;
    return other === this.substring$1(receiver, t1 - otherLength);
  },
  replaceAll$2: function(receiver, from, to) {
    return H.stringReplaceAllUnchecked(receiver, from, to);
  },
  split$1: function(receiver, pattern) {
    return receiver.split(pattern);
  },
  startsWith$2: function(receiver, pattern, index) {
    var endIndex;
    if (index < 0 || index > receiver.length)
      throw H.wrapException(P.RangeError$range(index, 0, receiver.length));
    if (typeof pattern === "string") {
      endIndex = index + pattern.length;
      if (endIndex > receiver.length)
        return false;
      return pattern == receiver.substring(index, endIndex);
    }
    return J.matchAsPrefix$2$s(pattern, receiver, index) != null;
  },
  startsWith$1: function($receiver, pattern) {
    return this.startsWith$2($receiver, pattern, 0);
  },
  substring$2: function(receiver, startIndex, endIndex) {
    var t1;
    if (typeof startIndex !== "number")
      H.throwExpression(P.ArgumentError$(startIndex));
    if (endIndex == null)
      endIndex = receiver.length;
    if (typeof endIndex !== "number")
      H.throwExpression(P.ArgumentError$(endIndex));
    t1 = J.getInterceptor$n(startIndex);
    if (t1.$lt(startIndex, 0))
      throw H.wrapException(P.RangeError$value(startIndex));
    if (t1.$gt(startIndex, endIndex))
      throw H.wrapException(P.RangeError$value(startIndex));
    if (J.$gt$n(endIndex, receiver.length))
      throw H.wrapException(P.RangeError$value(endIndex));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  toLowerCase$0: function(receiver) {
    return receiver.toLowerCase();
  },
  trim$0: function(receiver) {
    var endIndex, startIndex, codeUnit, endIndex0, endIndex1;
    for (endIndex = receiver.length, startIndex = 0; startIndex < endIndex;) {
      if (startIndex >= endIndex)
        H.throwExpression(new P.RangeError("value " + startIndex));
      codeUnit = receiver.charCodeAt(startIndex);
      if (codeUnit === 32 || codeUnit === 13 || J.JSString__isWhitespace(codeUnit))
        ++startIndex;
      else
        break;
    }
    if (startIndex === endIndex)
      return "";
    for (endIndex0 = endIndex; true; endIndex0 = endIndex1) {
      endIndex1 = endIndex0 - 1;
      if (endIndex1 < 0)
        H.throwExpression(new P.RangeError("value " + endIndex1));
      if (endIndex1 >= endIndex)
        H.throwExpression(new P.RangeError("value " + endIndex1));
      codeUnit = receiver.charCodeAt(endIndex1);
      if (codeUnit === 32 || codeUnit === 13 || J.JSString__isWhitespace(codeUnit))
        ;
      else
        break;
    }
    if (startIndex === 0 && endIndex0 === endIndex)
      return receiver;
    return receiver.substring(startIndex, endIndex0);
  },
  indexOf$2: function(receiver, pattern, start) {
    var t1, match, t2, i;
    if (pattern == null)
      H.throwExpression(new P.ArgumentError(null));
    if (typeof start !== "number" || Math.floor(start) !== start)
      throw H.wrapException(new P.ArgumentError(start));
    if (start < 0 || start > receiver.length)
      throw H.wrapException(P.RangeError$range(start, 0, receiver.length));
    if (typeof pattern === "string")
      return receiver.indexOf(pattern, start);
    t1 = J.getInterceptor$s(pattern);
    if (typeof pattern === "object" && pattern !== null && !!t1.$isJSSyntaxRegExp) {
      match = pattern._execGlobal$2(receiver, start);
      return match == null ? -1 : match._match.index;
    }
    for (t2 = receiver.length, i = start; i <= t2; ++i)
      if (t1.matchAsPrefix$2(pattern, receiver, i) != null)
        return i;
    return -1;
  },
  indexOf$1: function($receiver, pattern) {
    return this.indexOf$2($receiver, pattern, 0);
  },
  lastIndexOf$2: function(receiver, pattern, start) {
    var t1, t2, i;
    start = receiver.length;
    if (typeof pattern === "string") {
      t1 = pattern.length;
      if (typeof start !== "number")
        throw start.$add();
      t2 = receiver.length;
      if (start + t1 > t2)
        start = t2 - t1;
      return receiver.lastIndexOf(pattern, start);
    }
    t1 = J.getInterceptor$s(pattern);
    i = start;
    while (true) {
      if (typeof i !== "number")
        throw i.$ge();
      if (!(i >= 0))
        break;
      if (t1.matchAsPrefix$2(pattern, receiver, i) != null)
        return i;
      --i;
    }
    return -1;
  },
  lastIndexOf$1: function($receiver, pattern) {
    return this.lastIndexOf$2($receiver, pattern, null);
  },
  contains$2: function(receiver, other, startIndex) {
    if (other == null)
      H.throwExpression(new P.ArgumentError(null));
    if (startIndex < 0 || startIndex > receiver.length)
      throw H.wrapException(P.RangeError$range(startIndex, 0, receiver.length));
    return H.stringContainsUnchecked(receiver, other, startIndex);
  },
  contains$1: function($receiver, other) {
    return this.contains$2($receiver, other, 0);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  "+isEmpty": 0,
  get$isNotEmpty: function(receiver) {
    return receiver.length !== 0;
  },
  "+isNotEmpty": 0,
  compareTo$1: function(receiver, other) {
    var t1;
    if (typeof other !== "string")
      throw H.wrapException(new P.ArgumentError(other));
    if (receiver === other)
      t1 = 0;
    else
      t1 = receiver < other ? -1 : 1;
    return t1;
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$hashCode: function(receiver) {
    var t1, hash, i;
    for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
      hash = 536870911 & hash + receiver.charCodeAt(i);
      hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
      hash ^= hash >> 6;
    }
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  get$runtimeType: function(receiver) {
    return C.Type_Ejg;
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  "+length": 0,
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(new P.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw H.wrapException(new P.RangeError("value " + index));
    return receiver[index];
  },
  "+[]:1:0": 0,
  $isString: true,
  static: {
JSString__isWhitespace: function(codeUnit) {
  if (codeUnit < 256)
    switch (codeUnit) {
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 32:
      case 133:
      case 160:
        return true;
      default:
        return false;
    }
  switch (codeUnit) {
    case 5760:
    case 6158:
    case 8192:
    case 8193:
    case 8194:
    case 8195:
    case 8196:
    case 8197:
    case 8198:
    case 8199:
    case 8200:
    case 8201:
    case 8202:
    case 8232:
    case 8233:
    case 8239:
    case 8287:
    case 12288:
    case 65279:
      return true;
    default:
      return false;
  }
}}

}}],
["_isolate_helper", "dart:_isolate_helper", , H, {
_callInIsolate: function(isolate, $function) {
  var result = isolate.eval$1($function);
  $globalState.topEventLoop.run$0();
  return result;
},

startRootIsolate: function(entry) {
  var rootContext, t1;
  $globalState = H._Manager$(entry);
  if ($globalState.isWorker === true)
    return;
  rootContext = H._IsolateContext$();
  $globalState.rootContext = rootContext;
  $globalState.currentContext = rootContext;
  t1 = J.getInterceptor(entry);
  if (!!t1.$is_args1)
    rootContext.eval$1(new H.startRootIsolate_closure(entry));
  else if (!!t1.$is_args2)
    rootContext.eval$1(new H.startRootIsolate_closure0(entry));
  else
    rootContext.eval$1(entry);
  $globalState.topEventLoop.run$0();
},

IsolateNatives_computeThisScript: function() {
  var currentScript = init.currentScript;
  if (currentScript != null)
    return String(currentScript.src);
  if (typeof version == "function" && typeof os == "object" && "system" in os)
    return H.IsolateNatives_computeThisScriptD8();
  if (typeof version == "function" && typeof system == "function")
    return thisFilename();
  return;
},

IsolateNatives_computeThisScriptD8: function() {
  var stack, matches;
  stack = new Error().stack;
  if (stack == null) {
    stack = (function() {try { throw new Error() } catch(e) { return e.stack }})();
    if (stack == null)
      throw H.wrapException(P.UnsupportedError$("No stack trace"));
  }
  matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
  if (matches != null)
    return matches[1];
  matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
  if (matches != null)
    return matches[1];
  throw H.wrapException(P.UnsupportedError$("Cannot extract URI from \"" + stack + "\""));
},

IsolateNatives__processWorkerMessage: function(sender, e) {
  var msg, t1, functionName, entryPoint, args, message, isSpawnUri, replyTo, context, t2;
  msg = H._deserializeMessage(e.data);
  t1 = J.getInterceptor$asx(msg);
  switch (t1.$index(msg, "command")) {
    case "start":
      $globalState.currentManagerId = t1.$index(msg, "id");
      functionName = t1.$index(msg, "functionName");
      entryPoint = functionName == null ? $globalState.entry : init.globalFunctions[functionName];
      args = t1.$index(msg, "args");
      message = H._deserializeMessage(t1.$index(msg, "msg"));
      isSpawnUri = t1.$index(msg, "isSpawnUri");
      replyTo = H._deserializeMessage(t1.$index(msg, "replyTo"));
      context = H._IsolateContext$();
      $globalState.topEventLoop.events._add$1(new H._IsolateEvent(context, new H.IsolateNatives__processWorkerMessage_closure(entryPoint, args, message, isSpawnUri, replyTo), "worker-start"));
      $globalState.currentContext = context;
      $globalState.topEventLoop.run$0();
      break;
    case "spawn-worker":
      H.IsolateNatives__spawnWorker(t1.$index(msg, "functionName"), t1.$index(msg, "uri"), t1.$index(msg, "args"), t1.$index(msg, "msg"), t1.$index(msg, "isSpawnUri"), t1.$index(msg, "replyPort"));
      break;
    case "message":
      if (t1.$index(msg, "port") != null)
        J.send$1$x(t1.$index(msg, "port"), t1.$index(msg, "msg"));
      $globalState.topEventLoop.run$0();
      break;
    case "close":
      t1 = $globalState.managers;
      t2 = $.get$IsolateNatives_workerIds();
      t1.remove$1(t1, t2.$index(t2, sender));
      sender.terminate();
      $globalState.topEventLoop.run$0();
      break;
    case "log":
      H.IsolateNatives__log(t1.$index(msg, "msg"));
      break;
    case "print":
      if ($globalState.isWorker === true) {
        t1 = $globalState.mainManager;
        t2 = H._serializeMessage(H.fillLiteralMap(["command", "print", "msg", msg], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
        t1.toString;
        self.postMessage(t2);
      } else
        P.print(t1.$index(msg, "msg"));
      break;
    case "error":
      throw H.wrapException(t1.$index(msg, "msg"));
    default:
  }
},

IsolateNatives__log: function(msg) {
  var trace, t1, t2, exception;
  if ($globalState.isWorker === true) {
    t1 = $globalState.mainManager;
    t2 = H._serializeMessage(H.fillLiteralMap(["command", "log", "msg", msg], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
    t1.toString;
    self.postMessage(t2);
  } else
    try {
      $.get$globalThis().console.log(msg);
    } catch (exception) {
      H.unwrapException(exception);
      trace = new H._StackTrace(exception, null);
      throw H.wrapException(P.Exception_Exception(trace));
    }

},

IsolateNatives__startIsolate: function(topLevel, args, message, isSpawnUri, replyTo) {
  var t1;
  H.Primitives_initializeStatics($globalState.currentContext.id);
  $.lazyPort = H.ReceivePortImpl$();
  t1 = $.lazyPort;
  t1.toString;
  J.send$1$x(replyTo, ["spawned", new H._NativeJsSendPort(t1, $globalState.currentContext.id)]);
  if (isSpawnUri !== true)
    topLevel.call$1(message);
  else {
    t1 = J.getInterceptor(topLevel);
    if (!!t1.$is_args2)
      topLevel.call$2(args, message);
    else if (!!t1.$is_args1)
      topLevel.call$1(args);
    else
      topLevel.call$0();
  }
},

IsolateNatives__spawnWorker: function(functionName, uri, args, message, isSpawnUri, replyPort) {
  var worker, t1, workerId;
  if (uri == null)
    uri = $.get$IsolateNatives_thisScript();
  worker = new Worker(uri);
  worker.onmessage = function(e) { H.IsolateNatives__processWorkerMessage$closure.call$2(worker, e); };
  t1 = $globalState;
  workerId = t1.nextManagerId;
  t1.nextManagerId = workerId + 1;
  t1 = $.get$IsolateNatives_workerIds();
  t1.$indexSet(t1, worker, workerId);
  t1 = $globalState.managers;
  t1.$indexSet(t1, workerId, worker);
  worker.postMessage(H._serializeMessage(H.fillLiteralMap(["command", "start", "id", workerId, "replyTo", H._serializeMessage(replyPort), "args", args, "msg", H._serializeMessage(message), "isSpawnUri", isSpawnUri, "functionName", functionName], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null))));
},

_waitForPendingPorts: function(message, callback) {
  var finder = H._PendingSendPortFinder$();
  finder.traverse$1(message);
  P.Future_wait(finder.ports).then$1(new H._waitForPendingPorts_closure(callback));
},

_serializeMessage: function(message) {
  var t1;
  if ($globalState.supportsWorkers === true) {
    t1 = new H._JsSerializer(0, new H._MessageTraverserVisitedMap());
    t1._visited = new H._JsVisitedMap(null);
    return t1.traverse$1(message);
  } else {
    t1 = new H._JsCopier(new H._MessageTraverserVisitedMap());
    t1._visited = new H._JsVisitedMap(null);
    return t1.traverse$1(message);
  }
},

_deserializeMessage: function(message) {
  if ($globalState.supportsWorkers === true)
    return new H._JsDeserializer(null).deserialize$1(message);
  else
    return message;
},

_MessageTraverser_isPrimitive: function(x) {
  return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
},

_Deserializer_isPrimitive: function(x) {
  return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
},

startRootIsolate_closure: {"": "Closure;entry_0",
  call$0: function() {
    this.entry_0.call$1([]);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

startRootIsolate_closure0: {"": "Closure;entry_1",
  call$0: function() {
    this.entry_1.call$2([], null);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

_Manager: {"": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates,mainManager,managers,entry",
  _nativeDetectEnvironment$0: function() {
    var t1, t2;
    t1 = $.get$globalWindow() == null;
    t2 = $.get$globalWorker();
    this.isWorker = t1 && $.get$globalPostMessageDefined() === true;
    if (this.isWorker !== true)
      t2 = t2 != null && $.get$IsolateNatives_thisScript() != null;
    else
      t2 = true;
    this.supportsWorkers = t2;
    this.fromCommandLine = t1 && this.isWorker !== true;
  },
  _nativeInitWorkerMessageHandler$0: function() {
    var $function = function (e) { H.IsolateNatives__processWorkerMessage$closure.call$2(this.mainManager, e); };
    $.get$globalThis().onmessage = $function;
    $.get$globalThis().dartPrint = function (object) {};
  },
  _Manager$1: function(entry) {
    this._nativeDetectEnvironment$0();
    this.topEventLoop = new H._EventLoop(P.ListQueue$(null, H._IsolateEvent), 0);
    this.isolates = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, H._IsolateContext);
    this.managers = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, null);
    if (this.isWorker === true) {
      this.mainManager = new H._MainManagerStub();
      this._nativeInitWorkerMessageHandler$0();
    }
  },
  static: {
_Manager$: function(entry) {
  var t1 = new H._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null, entry);
  t1._Manager$1(entry);
  return t1;
}}

},

_IsolateContext: {"": "Object;id>,ports,isolateStatics<",
  eval$1: function(code) {
    var old, result;
    old = $globalState.currentContext;
    $globalState.currentContext = this;
    $ = this.isolateStatics;
    result = null;
    try {
      result = code.call$0();
    } finally {
      $globalState.currentContext = old;
      if (old != null)
        $ = old.get$isolateStatics();
    }
    return result;
  },
  lookup$1: function(portId) {
    var t1 = this.ports;
    return t1.$index(t1, portId);
  },
  register$2: function(_, portId, port) {
    var t1;
    if (this.ports.containsKey$1(portId))
      throw H.wrapException(P.Exception_Exception("Registry: ports must be registered only once."));
    t1 = this.ports;
    t1.$indexSet(t1, portId, port);
    t1 = $globalState.isolates;
    t1.$indexSet(t1, this.id, this);
  },
  unregister$1: function(portId) {
    var t1 = this.ports;
    t1.remove$1(t1, portId);
    if (this.ports._collection$_length === 0) {
      t1 = $globalState.isolates;
      t1.remove$1(t1, this.id);
    }
  },
  _IsolateContext$0: function() {
    var t1, t2;
    t1 = $globalState;
    t2 = t1.nextIsolateId;
    t1.nextIsolateId = t2 + 1;
    this.id = t2;
    this.ports = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, P.ReceivePort);
    this.isolateStatics = new Isolate();
  },
  $is_IsolateContext: true,
  static: {
_IsolateContext$: function() {
  var t1 = new H._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
}}

},

_EventLoop: {"": "Object;events,activeTimerCount",
  dequeue$0: function() {
    var t1 = this.events;
    if (t1._head === t1._tail)
      return;
    return t1.removeFirst$0();
  },
  checkOpenReceivePortsFromCommandLine$0: function() {
    if ($globalState.rootContext != null && $globalState.isolates.containsKey$1($globalState.rootContext.id) && $globalState.fromCommandLine === true && $globalState.rootContext.ports._collection$_length === 0)
      throw H.wrapException(P.Exception_Exception("Program exited with open ReceivePorts."));
  },
  runIteration$0: function() {
    var $event, t1, t2;
    $event = this.dequeue$0();
    if ($event == null) {
      this.checkOpenReceivePortsFromCommandLine$0();
      t1 = $globalState;
      if (t1.isWorker === true && t1.isolates._collection$_length === 0 && t1.topEventLoop.activeTimerCount === 0) {
        t1 = t1.mainManager;
        t2 = H._serializeMessage(H.fillLiteralMap(["command", "close"], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
        t1.toString;
        self.postMessage(t2);
      }
      return false;
    }
    $event.process$0();
    return true;
  },
  _runHelper$0: function() {
    if ($.get$globalWindow() != null)
      new H._EventLoop__runHelper_next(this).call$0();
    else
      for (; this.runIteration$0();)
        ;
  },
  run$0: function() {
    var e, trace, exception, t1, t2;
    if ($globalState.isWorker !== true)
      this._runHelper$0();
    else
      try {
        this._runHelper$0();
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        trace = new H._StackTrace(exception, null);
        t1 = $globalState.mainManager;
        t2 = H._serializeMessage(H.fillLiteralMap(["command", "error", "msg", H.S(e) + "\n" + H.S(trace)], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
        t1.toString;
        self.postMessage(t2);
      }

  },
  get$run: function() {
    return new H.BoundClosure$0(this, H._EventLoop.prototype.run$0, null, "run$0");
  }
},

_EventLoop__runHelper_next: {"": "Closure;this_0",
  call$0: function() {
    if (!this.this_0.runIteration$0())
      return;
    P.Timer_Timer(C.Duration_0, this);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

_IsolateEvent: {"": "Object;isolate,fn,message>",
  process$0: function() {
    this.isolate.eval$1(this.fn);
  },
  $is_IsolateEvent: true
},

_MainManagerStub: {"": "Object;"},

IsolateNatives__processWorkerMessage_closure: {"": "Closure;entryPoint_0,args_1,message_2,isSpawnUri_3,replyTo_4",
  call$0: function() {
    H.IsolateNatives__startIsolate(this.entryPoint_0, this.args_1, this.message_2, this.isSpawnUri_3, this.replyTo_4);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

_BaseSendPort: {"": "Object;", $isSendPort: true},

_NativeJsSendPort: {"": "_BaseSendPort;_receivePort,_isolateId",
  send$2: function(_, message, replyTo) {
    H._waitForPendingPorts(message, new H._NativeJsSendPort_send_closure(this, message));
  },
  send$1: function($receiver, message) {
    return this.send$2($receiver, message, null);
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$is_NativeJsSendPort && J.$eq(this._receivePort, other._receivePort);
  },
  get$hashCode: function(_) {
    return this._receivePort.get$_id();
  },
  $is_NativeJsSendPort: true,
  $isSendPort: true
},

_NativeJsSendPort_send_closure: {"": "Closure;this_1,message_2",
  call$0: function() {
    var t1, t2, t3, t4, isolate, shouldSerialize, msg;
    t1 = {};
    t2 = $globalState.isolates;
    t3 = this.this_1;
    t4 = t3._isolateId;
    isolate = t2.$index(t2, t4);
    if (isolate == null)
      return;
    if ((t3._receivePort.get$__isolate_helper$_controller()._state & 4) !== 0)
      return;
    shouldSerialize = $globalState.currentContext != null && $globalState.currentContext.id !== t4;
    msg = this.message_2;
    t1.msg_0 = msg;
    if (shouldSerialize)
      t1.msg_0 = H._serializeMessage(t1.msg_0);
    t2 = $globalState.topEventLoop;
    t4 = "receive " + H.S(msg);
    t2.events._add$1(new H._IsolateEvent(isolate, new H._NativeJsSendPort_send__closure(t1, t3, shouldSerialize), t4));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

_NativeJsSendPort_send__closure: {"": "Closure;box_0,this_3,shouldSerialize_4",
  call$0: function() {
    var t1, t2;
    t1 = this.this_3._receivePort;
    if ((t1.get$__isolate_helper$_controller()._state & 4) === 0) {
      if (this.shouldSerialize_4) {
        t2 = this.box_0;
        t2.msg_0 = H._deserializeMessage(t2.msg_0);
      }
      t1 = t1.get$__isolate_helper$_controller();
      t2 = this.box_0.msg_0;
      if (t1._state >= 4)
        H.throwExpression(t1._badEventState$0());
      t1._async$_add$1(t2);
    }
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

_WorkerSendPort: {"": "_BaseSendPort;_workerId,_receivePortId,_isolateId",
  send$2: function(_, message, replyTo) {
    H._waitForPendingPorts(message, new H._WorkerSendPort_send_closure(this, message));
  },
  send$1: function($receiver, message) {
    return this.send$2($receiver, message, null);
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    if (typeof other === "object" && other !== null && !!t1.$is_WorkerSendPort)
      t1 = J.$eq(this._workerId, other._workerId) && J.$eq(this._isolateId, other._isolateId) && J.$eq(this._receivePortId, other._receivePortId);
    else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    var t1, t2, t3;
    t1 = J.$shl$n(this._workerId, 16);
    t2 = J.$shl$n(this._isolateId, 8);
    t3 = this._receivePortId;
    if (typeof t3 !== "number")
      throw H.iae(t3);
    return (t1 ^ t2 ^ t3) >>> 0;
  },
  $is_WorkerSendPort: true,
  $isSendPort: true
},

_WorkerSendPort_send_closure: {"": "Closure;this_0,message_1",
  call$0: function() {
    var t1, workerMessage, t2, manager;
    t1 = this.this_0;
    workerMessage = H._serializeMessage(H.fillLiteralMap(["command", "message", "port", t1, "msg", this.message_1], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
    if ($globalState.isWorker === true) {
      $globalState.mainManager.toString;
      self.postMessage(workerMessage);
    } else {
      t2 = $globalState.managers;
      manager = t2.$index(t2, t1._workerId);
      if (manager != null)
        manager.postMessage(workerMessage);
    }
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

ReceivePortImpl: {"": "Stream;_id<,__isolate_helper$_controller<",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var t1 = this.__isolate_helper$_controller;
    t1.toString;
    t1 = new P._ControllerStream(t1);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  listen$1: function(onData) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
  },
  close$0: function(_) {
    var t1 = this.__isolate_helper$_controller;
    if ((t1._state & 4) !== 0)
      return;
    t1.close$0(t1);
    $globalState.currentContext.unregister$1(this._id);
  },
  get$close: function(_receiver) {
    return new H.BoundClosure$i0(this, H.ReceivePortImpl.prototype.close$0, _receiver, "close$0");
  },
  ReceivePortImpl$0: function() {
    this.__isolate_helper$_controller = P.StreamController_StreamController(this.get$close(this), null, null, null, true, null);
    var t1 = $globalState.currentContext;
    t1.register$2(t1, this._id, this);
  },
  $asStream: function() {
    return [null];
  },
  $isReceivePort: true,
  $isStream: true,
  static: {
"": "ReceivePortImpl__nextFreeId",
ReceivePortImpl$: function() {
  var t1 = $.ReceivePortImpl__nextFreeId;
  $.ReceivePortImpl__nextFreeId = t1 + 1;
  t1 = new H.ReceivePortImpl(t1, null);
  t1.ReceivePortImpl$0();
  return t1;
}}

},

_waitForPendingPorts_closure: {"": "Closure;callback_0",
  call$1: function(_) {
    return this.callback_0.call$0();
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_PendingSendPortFinder: {"": "_MessageTraverser;ports,_visited",
  visitPrimitive$1: function(x) {
  },
  visitList$1: function(list) {
    var t1 = this._visited;
    if (t1.$index(t1, list) != null)
      return;
    t1 = this._visited;
    t1.$indexSet(t1, list, true);
    J.forEach$1$ax(list, this.get$_dispatch());
  },
  visitMap$1: function(map) {
    var t1 = this._visited;
    if (t1.$index(t1, map) != null)
      return;
    t1 = this._visited;
    t1.$indexSet(t1, map, true);
    J.forEach$1$ax(map.get$values(map), this.get$_dispatch());
  },
  visitSendPort$1: function(port) {
  },
  _PendingSendPortFinder$0: function() {
    this._visited = new H._JsVisitedMap(null);
  },
  static: {
_PendingSendPortFinder$: function() {
  var t1 = new H._PendingSendPortFinder([], new H._MessageTraverserVisitedMap());
  t1._PendingSendPortFinder$0();
  return t1;
}}

},

_JsSerializer: {"": "_Serializer;_nextFreeRefId,_visited",
  visitSendPort$1: function(x) {
    if (!!x.$is_NativeJsSendPort)
      return ["sendport", $globalState.currentManagerId, x._isolateId, x._receivePort.get$_id()];
    if (!!x.$is_WorkerSendPort)
      return ["sendport", x._workerId, x._isolateId, x._receivePortId];
    throw H.wrapException("Illegal underlying port " + H.S(x));
  }
},

_JsCopier: {"": "_Copier;_visited",
  visitSendPort$1: function(x) {
    if (!!x.$is_NativeJsSendPort)
      return new H._NativeJsSendPort(x._receivePort, x._isolateId);
    if (!!x.$is_WorkerSendPort)
      return new H._WorkerSendPort(x._workerId, x._receivePortId, x._isolateId);
    throw H.wrapException("Illegal underlying port " + H.S(x));
  }
},

_JsDeserializer: {"": "_Deserializer;_deserialized",
  deserializeSendPort$1: function(list) {
    var t1, managerId, isolateId, receivePortId, isolate, receivePort;
    t1 = J.getInterceptor$asx(list);
    managerId = t1.$index(list, 1);
    isolateId = t1.$index(list, 2);
    receivePortId = t1.$index(list, 3);
    if (J.$eq(managerId, $globalState.currentManagerId)) {
      t1 = $globalState.isolates;
      isolate = t1.$index(t1, isolateId);
      if (isolate == null)
        return;
      receivePort = isolate.lookup$1(receivePortId);
      if (receivePort == null)
        return;
      return new H._NativeJsSendPort(receivePort, isolateId);
    } else
      return new H._WorkerSendPort(managerId, receivePortId, isolateId);
  }
},

_JsVisitedMap: {"": "Object;tagged",
  $index: function(_, object) {
    return object.__MessageTraverser__attached_info__;
  },
  "+[]:1:0": 0,
  $indexSet: function(_, object, info) {
    this.tagged.push(object);
    object.__MessageTraverser__attached_info__ = info;
  },
  "+[]=:2:0": 0,
  reset$0: function(_) {
    this.tagged = P.List_List(null, null);
  },
  cleanup$0: function() {
    var $length, i, t1;
    for ($length = this.tagged.length, i = 0; i < $length; ++i) {
      t1 = this.tagged;
      if (i >= t1.length)
        throw H.ioore(t1, i);
      t1[i].__MessageTraverser__attached_info__ = null;
    }
    this.tagged = null;
  }
},

_MessageTraverserVisitedMap: {"": "Object;",
  $index: function(_, object) {
    return;
  },
  "+[]:1:0": 0,
  $indexSet: function(_, object, info) {
  },
  "+[]=:2:0": 0,
  reset$0: function(_) {
  },
  cleanup$0: function() {
  }
},

_MessageTraverser: {"": "Object;",
  traverse$1: function(x) {
    var result, t1;
    if (H._MessageTraverser_isPrimitive(x))
      return this.visitPrimitive$1(x);
    t1 = this._visited;
    t1.reset$0(t1);
    result = null;
    try {
      result = this._dispatch$1(x);
    } finally {
      this._visited.cleanup$0();
    }
    return result;
  },
  _dispatch$1: function(x) {
    var t1;
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    t1 = J.getInterceptor(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || !!t1.$isList))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && !!t1.$isMap)
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!t1.$isSendPort)
      return this.visitSendPort$1(x);
    return this.visitObject$1(x);
  },
  get$_dispatch: function() {
    return new H.BoundClosure$1(this, H._MessageTraverser.prototype._dispatch$1, null, "_dispatch$1");
  },
  visitObject$1: function(x) {
    throw H.wrapException("Message serialization: Illegal value " + H.S(x) + " passed");
  }
},

_Copier: {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copy, len, t2, i, t3;
    t1 = this._visited;
    copy = t1.$index(t1, list);
    if (copy != null)
      return copy;
    t1 = J.getInterceptor$asx(list);
    len = t1.get$length(list);
    copy = P.List_List(len, null);
    t2 = this._visited;
    t2.$indexSet(t2, list, copy);
    if (typeof len !== "number")
      throw H.iae(len);
    t2 = copy.length;
    i = 0;
    for (; i < len; ++i) {
      t3 = this._dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw H.ioore(copy, i);
      copy[i] = t3;
    }
    return copy;
  },
  visitMap$1: function(map) {
    var t1, t2;
    t1 = {};
    t2 = this._visited;
    t1.copy_0 = t2.$index(t2, map);
    t2 = t1.copy_0;
    if (t2 != null)
      return t2;
    t1.copy_0 = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    t2 = this._visited;
    t2.$indexSet(t2, map, t1.copy_0);
    map.forEach$1(map, new H._Copier_visitMap_closure(t1, this));
    return t1.copy_0;
  }
},

_Copier_visitMap_closure: {"": "Closure;box_0,this_1",
  call$2: function(key, val) {
    var t1 = this.this_1;
    J.$indexSet$ax(this.box_0.copy_0, t1._dispatch$1(key), t1._dispatch$1(val));
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

_Serializer: {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, list);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, list, id);
    return ["list", id, this._serializeList$1(list)];
  },
  visitMap$1: function(map) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, map);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, map, id);
    return ["map", id, this._serializeList$1(J.toList$0$ax(map.get$keys())), this._serializeList$1(J.toList$0$ax(map.get$values(map)))];
  },
  _serializeList$1: function(list) {
    var t1, len, result, t2, i, t3;
    t1 = J.getInterceptor$asx(list);
    len = t1.get$length(list);
    result = P.List_List(len, null);
    if (typeof len !== "number")
      throw H.iae(len);
    t2 = result.length;
    i = 0;
    for (; i < len; ++i) {
      t3 = this._dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw H.ioore(result, i);
      result[i] = t3;
    }
    return result;
  }
},

_Deserializer: {"": "Object;",
  deserialize$1: function(x) {
    if (H._Deserializer_isPrimitive(x))
      return x;
    this._deserialized = P.HashMap_HashMap(null, null, null, null, null);
    return this._deserializeHelper$1(x);
  },
  _deserializeHelper$1: function(x) {
    var t1, id;
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    t1 = J.getInterceptor$asx(x);
    switch (t1.$index(x, 0)) {
      case "ref":
        id = t1.$index(x, 1);
        t1 = this._deserialized;
        return t1.$index(t1, id);
      case "list":
        return this._deserializeList$1(x);
      case "map":
        return this._deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      default:
        return this.deserializeObject$1(x);
    }
  },
  _deserializeList$1: function(x) {
    var t1, id, dartList, len, i;
    t1 = J.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    dartList = t1.$index(x, 2);
    t1 = this._deserialized;
    t1.$indexSet(t1, id, dartList);
    t1 = J.getInterceptor$asx(dartList);
    len = t1.get$length(dartList);
    if (typeof len !== "number")
      throw H.iae(len);
    i = 0;
    for (; i < len; ++i)
      t1.$indexSet(dartList, i, this._deserializeHelper$1(t1.$index(dartList, i)));
    return dartList;
  },
  _deserializeMap$1: function(x) {
    var result, t1, id, t2, keys, values, len, i;
    result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    t1 = J.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    t2 = this._deserialized;
    t2.$indexSet(t2, id, result);
    keys = t1.$index(x, 2);
    values = t1.$index(x, 3);
    t1 = J.getInterceptor$asx(keys);
    len = t1.get$length(keys);
    if (typeof len !== "number")
      throw H.iae(len);
    t2 = J.getInterceptor$asx(values);
    i = 0;
    for (; i < len; ++i)
      result.$indexSet(result, this._deserializeHelper$1(t1.$index(keys, i)), this._deserializeHelper$1(t2.$index(values, i)));
    return result;
  },
  deserializeObject$1: function(x) {
    throw H.wrapException("Unexpected serialized object");
  }
},

TimerImpl: {"": "Object;_once,_inEventLoop,_handle",
  cancel$0: function() {
    if ($.get$globalThis().setTimeout != null) {
      if (this._inEventLoop)
        throw H.wrapException(P.UnsupportedError$("Timer in event loop cannot be canceled."));
      if (this._handle == null)
        return;
      var t1 = $globalState.topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount - 1;
      if (this._once)
        $.get$globalThis().clearTimeout(this._handle);
      else
        $.get$globalThis().clearInterval(this._handle);
      this._handle = null;
    } else
      throw H.wrapException(P.UnsupportedError$("Canceling a timer."));
  },
  TimerImpl$2: function(milliseconds, callback) {
    var t1, t2;
    if (milliseconds === 0)
      t1 = $.get$globalThis().setTimeout == null || $globalState.isWorker === true;
    else
      t1 = false;
    if (t1) {
      this._handle = 1;
      t1 = $globalState.topEventLoop;
      t2 = $globalState.currentContext;
      t1.events._add$1(new H._IsolateEvent(t2, new H.TimerImpl_internalCallback(this, callback), "timer"));
      this._inEventLoop = true;
    } else if ($.get$globalThis().setTimeout != null) {
      t1 = $globalState.topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount + 1;
      this._handle = $.get$globalThis().setTimeout(H.convertDartClosureToJS(new H.TimerImpl_internalCallback0(this, callback), 0), milliseconds);
    } else
      throw H.wrapException(P.UnsupportedError$("Timer greater than 0."));
  },
  static: {
TimerImpl$: function(milliseconds, callback) {
  var t1 = new H.TimerImpl(true, false, null);
  t1.TimerImpl$2(milliseconds, callback);
  return t1;
}}

},

TimerImpl_internalCallback: {"": "Closure;this_0,callback_1",
  call$0: function() {
    this.this_0._handle = null;
    this.callback_1.call$0();
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

TimerImpl_internalCallback0: {"": "Closure;this_2,callback_3",
  call$0: function() {
    this.this_2._handle = null;
    var t1 = $globalState.topEventLoop;
    t1.activeTimerCount = t1.activeTimerCount - 1;
    this.callback_3.call$0();
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
}}],
["_js_helper", "dart:_js_helper", , H, {
isJsIndexable: function(object, record) {
  var result, t1;
  if (record != null) {
    result = record.x;
    if (result != null)
      return result;
  }
  t1 = J.getInterceptor(object);
  return typeof object === "object" && object !== null && !!t1.$isJavaScriptIndexingBehavior;
},

S: function(value) {
  var res;
  if (typeof value === "string")
    return value;
  if (typeof value === "number") {
    if (value !== 0)
      return "" + value;
  } else if (true === value)
    return "true";
  else if (false === value)
    return "false";
  else if (value == null)
    return "null";
  res = J.toString$0(value);
  if (typeof res !== "string")
    throw H.wrapException(P.ArgumentError$(value));
  return res;
},

throwInvalidReflectionError: function(memberName) {
  throw H.wrapException(P.UnsupportedError$("Can't use '" + H.S(memberName) + "' in reflection because it is not included in a @MirrorsUsed annotation."));
},

Primitives_initializeStatics: function(id) {
  $.Primitives_mirrorFunctionCacheName = $.Primitives_mirrorFunctionCacheName + ("_" + H.S(id));
  $.Primitives_mirrorInvokeCacheName = $.Primitives_mirrorInvokeCacheName + ("_" + H.S(id));
},

Primitives_objectHashCode: function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = Math.random() * 0x3fffffff | 0;
    object.$identityHash = hash;
  }
  return hash;
},

Primitives__throwFormatException: function(string) {
  throw H.wrapException(P.FormatException$(string));
},

Primitives_parseInt: function(source, radix, handleError) {
  var match, t1, maxCharCode, digitsPart, i, t2;
  if (handleError == null)
    handleError = H.Primitives__throwFormatException$closure;
  if (typeof source !== "string")
    H.throwExpression(new P.ArgumentError(source));
  match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
  if (radix == null) {
    if (match != null) {
      t1 = match.length;
      if (2 >= t1)
        throw H.ioore(match, 2);
      if (match[2] != null)
        return parseInt(source, 16);
      if (3 >= t1)
        throw H.ioore(match, 3);
      if (match[3] != null)
        return parseInt(source, 10);
      return handleError.call$1(source);
    }
    radix = 10;
  } else {
    if (typeof radix !== "number" || Math.floor(radix) !== radix)
      throw H.wrapException(new P.ArgumentError("Radix is not an integer"));
    if (radix < 2 || radix > 36)
      throw H.wrapException(P.RangeError$("Radix " + radix + " not in range 2..36"));
    if (match != null) {
      if (radix === 10) {
        if (3 >= match.length)
          throw H.ioore(match, 3);
        t1 = match[3] != null;
      } else
        t1 = false;
      if (t1)
        return parseInt(source, 10);
      if (radix >= 10) {
        if (3 >= match.length)
          throw H.ioore(match, 3);
        t1 = match[3] == null;
      } else
        t1 = true;
      if (t1) {
        maxCharCode = radix <= 10 ? 48 + radix - 1 : 97 + radix - 10 - 1;
        if (1 >= match.length)
          throw H.ioore(match, 1);
        digitsPart = match[1];
        t1 = J.getInterceptor$asx(digitsPart);
        i = 0;
        while (true) {
          t2 = t1.get$length(digitsPart);
          if (typeof t2 !== "number")
            throw H.iae(t2);
          if (!(i < t2))
            break;
          t1.codeUnitAt$1(digitsPart, 0);
          if (t1.codeUnitAt$1(digitsPart, i) > maxCharCode)
            return handleError.call$1(source);
          ++i;
        }
      }
    }
  }
  if (match == null)
    return handleError.call$1(source);
  return parseInt(source, radix);
},

Primitives_parseDouble: function(source, handleError) {
  var result, trimmed;
  if (typeof source !== "string")
    H.throwExpression(new P.ArgumentError(source));
  if (handleError == null)
    handleError = H.Primitives__throwFormatException$closure;
  if (!/^\s*[+-]?(?:Infinity|NaN|(?:\.\d+|\d+(?:\.\d*)?)(?:[eE][+-]?\d+)?)\s*$/.test(source))
    return handleError.call$1(source);
  result = parseFloat(source);
  if (isNaN(result)) {
    trimmed = J.trim$0$s(source);
    if (trimmed === "NaN" || trimmed === "+NaN" || trimmed === "-NaN")
      return result;
    return handleError.call$1(source);
  }
  return result;
},

Primitives_objectTypeName: function(object) {
  var $name, decompiled, t1;
  $name = H.constructorNameFallback(J.getInterceptor(object));
  if (J.$eq($name, "Object")) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      $name = decompiled;
  }
  t1 = J.getInterceptor$s($name);
  if (t1.codeUnitAt$1($name, 0) === 36)
    $name = t1.substring$1($name, 1);
  t1 = H.getRuntimeTypeInfo(object);
  return H.S($name) + H.joinArguments(t1, 0);
},

Primitives_objectToString: function(object) {
  return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
},

Primitives_newFixedList: function($length) {
  var result = new Array($length);
  result.fixed$length = true;
  return result;
},

Primitives__fromCharCodeApply: function(array) {
  var end, t1, result, i, subarray, t2;
  end = array.length;
  for (t1 = end <= 500, result = "", i = 0; i < end; i += 500) {
    if (t1)
      subarray = array;
    else {
      t2 = i + 500;
      t2 = t2 < end ? t2 : end;
      subarray = array.slice(i, t2);
    }
    result += String.fromCharCode.apply(null, subarray);
  }
  return result;
},

Primitives_stringFromCodePoints: function(codePoints) {
  var a, $arguments, t1, t2, i;
  a = [];
  $arguments = H.substitute(codePoints.$asJSArray, H.getRuntimeTypeInfo(codePoints));
  t1 = $arguments == null ? null : $arguments[0];
  t2 = new H.ListIterator(codePoints, codePoints.length, 0, null);
  t2.$builtinTypeInfo = [t1];
  for (; t2.moveNext$0();) {
    i = t2._current;
    if (typeof i !== "number" || Math.floor(i) !== i)
      throw H.wrapException(new P.ArgumentError(i));
    if (i <= 65535)
      a.push(i);
    else if (i <= 1114111) {
      a.push(55296 + (C.JSInt_methods.$shr(i - 65536, 10) & 1023));
      a.push(56320 + (i & 1023));
    } else
      throw H.wrapException(new P.ArgumentError(i));
  }
  return H.Primitives__fromCharCodeApply(a);
},

Primitives_stringFromCharCodes: function(charCodes) {
  var t1, i;
  for (t1 = new H.ListIterator(charCodes, charCodes.length, 0, null), H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(charCodes, "JSArray", 0)]); t1.moveNext$0();) {
    i = t1._current;
    if (typeof i !== "number" || Math.floor(i) !== i)
      throw H.wrapException(new P.ArgumentError(i));
    if (i < 0)
      throw H.wrapException(new P.ArgumentError(i));
    if (i > 65535)
      return H.Primitives_stringFromCodePoints(charCodes);
  }
  return H.Primitives__fromCharCodeApply(charCodes);
},

Primitives_valueFromDecomposedDate: function(years, month, day, hours, minutes, seconds, milliseconds, isUtc) {
  var jsMonth, value, t1;
  if (typeof years !== "number" || Math.floor(years) !== years)
    H.throwExpression(new P.ArgumentError(years));
  if (typeof month !== "number" || Math.floor(month) !== month)
    H.throwExpression(new P.ArgumentError(month));
  if (typeof day !== "number" || Math.floor(day) !== day)
    H.throwExpression(new P.ArgumentError(day));
  if (typeof hours !== "number" || Math.floor(hours) !== hours)
    H.throwExpression(new P.ArgumentError(hours));
  if (typeof minutes !== "number" || Math.floor(minutes) !== minutes)
    H.throwExpression(new P.ArgumentError(minutes));
  if (typeof seconds !== "number" || Math.floor(seconds) !== seconds)
    H.throwExpression(new P.ArgumentError(seconds));
  jsMonth = J.$sub$n(month, 1);
  value = isUtc ? Date.UTC(years, jsMonth, day, hours, minutes, seconds, milliseconds) : new Date(years, jsMonth, day, hours, minutes, seconds, milliseconds).valueOf();
  if (isNaN(value) || value < -8640000000000000 || value > 8640000000000000)
    throw H.wrapException(new P.ArgumentError(null));
  t1 = J.getInterceptor$n(years);
  if (t1.$le(years, 0) || t1.$lt(years, 100))
    return H.Primitives_patchUpY2K(value, years, isUtc);
  return value;
},

Primitives_patchUpY2K: function(value, years, isUtc) {
  var date = new Date(value);
  if (isUtc)
    date.setUTCFullYear(years);
  else
    date.setFullYear(years);
  return date.valueOf();
},

Primitives_lazyAsJsDate: function(receiver) {
  if (receiver.date === void 0)
    receiver.date = new Date(receiver.millisecondsSinceEpoch);
  return receiver.date;
},

Primitives_getYear: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0 : H.Primitives_lazyAsJsDate(receiver).getFullYear() + 0;
},

Primitives_getMonth: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : H.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
},

Primitives_getDay: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0 : H.Primitives_lazyAsJsDate(receiver).getDate() + 0;
},

Primitives_getHours: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0 : H.Primitives_lazyAsJsDate(receiver).getHours() + 0;
},

Primitives_getMinutes: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0 : H.Primitives_lazyAsJsDate(receiver).getMinutes() + 0;
},

Primitives_getSeconds: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0 : H.Primitives_lazyAsJsDate(receiver).getSeconds() + 0;
},

Primitives_getMilliseconds: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0 : H.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0;
},

Primitives_getProperty: function(object, key) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw H.wrapException(new P.ArgumentError(object));
  return object[key];
},

Primitives_setProperty: function(object, key, value) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw H.wrapException(new P.ArgumentError(object));
  object[key] = value;
},

Primitives_applyFunction: function($function, positionalArguments, namedArguments) {
  var t1, buffer, $arguments, allNamedArguments, listOfNamedArguments, t2, t3, t4, selectorName, jsFunction;
  t1 = {};
  t1.argumentCount_0 = 0;
  buffer = P.StringBuffer$("");
  $arguments = [];
  t1.argumentCount_0 = t1.argumentCount_0 + J.get$length$asx(positionalArguments);
  C.JSArray_methods.addAll$1($arguments, positionalArguments);
  if ("call$catchAll" in $function) {
    allNamedArguments = $function.call$catchAll();
    if (namedArguments != null && !namedArguments.get$isEmpty(namedArguments))
      namedArguments.forEach$1(namedArguments, new H.Primitives_applyFunction_closure(allNamedArguments));
    listOfNamedArguments = Object.getOwnPropertyNames(allNamedArguments);
    t2 = t1.argumentCount_0;
    t3 = J.getInterceptor$asx(listOfNamedArguments);
    t4 = t3.get$length(listOfNamedArguments);
    if (typeof t4 !== "number")
      throw H.iae(t4);
    t1.argumentCount_0 = t2 + t4;
    t3.forEach$1(listOfNamedArguments, new H.Primitives_applyFunction_closure0(buffer, $arguments, allNamedArguments));
  } else if (namedArguments != null && !namedArguments.get$isEmpty(namedArguments))
    namedArguments.forEach$1(namedArguments, new H.Primitives_applyFunction_closure1(t1, buffer, $arguments));
  selectorName = "call$" + H.S(t1.argumentCount_0) + H.S(buffer);
  jsFunction = $function[selectorName];
  if (jsFunction == null) {
    if (namedArguments == null)
      t1 = [];
    else {
      t1 = namedArguments.get$keys();
      t1 = P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0));
    }
    return J.noSuchMethod$1($function, new H.JSInvocationMirror(C.Symbol_call, selectorName, 0, $arguments, t1, null));
  }
  return jsFunction.apply($function, $arguments);
},

Primitives_getConstructorOrInterceptor: function(className) {
  if (className == "String")
    return C.C_JSString;
  if (className == "int")
    return C.C_JSInt;
  if (className == "double")
    return C.C_JSDouble;
  if (className == "num")
    return C.C_JSNumber;
  if (className == "bool")
    return C.C_JSBool;
  if (className == "List")
    return C.C_JSArray;
  return init.allClasses[className];
},

JsCache_allocate: function() {
  var result = {x:0};
  delete result.x;
  return result;
},

iae: function(argument) {
  throw H.wrapException(P.ArgumentError$(argument));
},

ioore: function(receiver, index) {
  if (receiver == null)
    J.get$length$asx(receiver);
  if (typeof index !== "number" || Math.floor(index) !== index)
    H.iae(index);
  throw H.wrapException(P.RangeError$value(index));
},

wrapException: function(ex) {
  var wrapper;
  if (ex == null)
    ex = new P.NullThrownError();
  wrapper = new Error();
  wrapper.dartException = ex;
  if ("defineProperty" in Object) {
    Object.defineProperty(wrapper, "message", { get: H.toStringWrapper$closure.call$0 });
    wrapper.name = "";
  } else
    wrapper.toString = H.toStringWrapper$closure.call$0;
  return wrapper;
},

toStringWrapper: function() {
  return J.toString$0(this.dartException);
},

throwExpression: function(ex) {
  throw H.wrapException(ex);
},

makeLiteralListConst: function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
},

unwrapException: function(ex) {
  var t1, message, number, ieErrorCode, t2, t3, t4, nullLiteralCall, t5, t6, t7, t8, t9, match;
  t1 = new H.unwrapException_saveStackTrace(ex);
  if (ex == null)
    return;
  if (typeof ex !== "object")
    return ex;
  if ("dartException" in ex)
    return t1.call$1(ex.dartException);
  else if (!("message" in ex))
    return ex;
  message = ex.message;
  if ("number" in ex && typeof ex.number == "number") {
    number = ex.number;
    ieErrorCode = number & 65535;
    if ((C.JSInt_methods.$shr(number, 16) & 8191) === 10)
      switch (ieErrorCode) {
        case 438:
          return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
        case 445:
        case 5007:
          t2 = H.S(message) + " (Error " + ieErrorCode + ")";
          return t1.call$1(new H.NullError(t2, null));
        default:
      }
  }
  if (ex instanceof TypeError) {
    t2 = $.get$TypeErrorDecoder_noSuchMethodPattern();
    t3 = $.get$TypeErrorDecoder_notClosurePattern();
    t4 = $.get$TypeErrorDecoder_nullCallPattern();
    nullLiteralCall = $.get$TypeErrorDecoder_nullLiteralCallPattern();
    t5 = $.get$TypeErrorDecoder_undefinedCallPattern();
    t6 = $.get$TypeErrorDecoder_undefinedLiteralCallPattern();
    t7 = $.get$TypeErrorDecoder_nullPropertyPattern();
    $.get$TypeErrorDecoder_nullLiteralPropertyPattern();
    t8 = $.get$TypeErrorDecoder_undefinedPropertyPattern();
    t9 = $.get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
    match = t2.matchTypeError$1(message);
    if (match != null)
      return t1.call$1(H.JsNoSuchMethodError$(message, match));
    else {
      match = t3.matchTypeError$1(message);
      if (match != null) {
        match.method = "call";
        return t1.call$1(H.JsNoSuchMethodError$(message, match));
      } else {
        match = t4.matchTypeError$1(message);
        if (match == null) {
          match = nullLiteralCall.matchTypeError$1(message);
          if (match == null) {
            match = t5.matchTypeError$1(message);
            if (match == null) {
              match = t6.matchTypeError$1(message);
              if (match == null) {
                match = t7.matchTypeError$1(message);
                if (match == null) {
                  match = nullLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = t8.matchTypeError$1(message);
                    if (match == null) {
                      match = t9.matchTypeError$1(message);
                      t2 = match != null;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
          } else
            t2 = true;
        } else
          t2 = true;
        if (t2) {
          t2 = match == null ? null : match.method;
          return t1.call$1(new H.NullError(message, t2));
        }
      }
    }
    t2 = typeof message === "string" ? message : "";
    return t1.call$1(new H.UnknownJsTypeError(t2));
  }
  if (ex instanceof RangeError) {
    if (typeof message === "string" && message.indexOf("call stack") !== -1)
      return new P.StackOverflowError();
    return t1.call$1(new P.ArgumentError(null));
  }
  if (typeof InternalError == "function" && ex instanceof InternalError)
    if (typeof message === "string" && message === "too much recursion")
      return new P.StackOverflowError();
  return ex;
},

objectHashCode: function(object) {
  if (object == null || typeof object != 'object')
    return J.get$hashCode$(object);
  else
    return H.Primitives_objectHashCode(object);
},

fillLiteralMap: function(keyValuePairs, result) {
  var $length, index, index0, index1;
  $length = keyValuePairs.length;
  for (index = 0; index < $length; index = index1) {
    index0 = index + 1;
    index1 = index0 + 1;
    result.$indexSet(result, keyValuePairs[index], keyValuePairs[index0]);
  }
  return result;
},

invokeClosure: function(closure, isolate, numberOfArguments, arg1, arg2, arg3, arg4) {
  var t1 = J.getInterceptor(numberOfArguments);
  if (t1.$eq(numberOfArguments, 0))
    return H._callInIsolate(isolate, new H.invokeClosure_closure(closure));
  else if (t1.$eq(numberOfArguments, 1))
    return H._callInIsolate(isolate, new H.invokeClosure_closure0(closure, arg1));
  else if (t1.$eq(numberOfArguments, 2))
    return H._callInIsolate(isolate, new H.invokeClosure_closure1(closure, arg1, arg2));
  else if (t1.$eq(numberOfArguments, 3))
    return H._callInIsolate(isolate, new H.invokeClosure_closure2(closure, arg1, arg2, arg3));
  else if (t1.$eq(numberOfArguments, 4))
    return H._callInIsolate(isolate, new H.invokeClosure_closure3(closure, arg1, arg2, arg3, arg4));
  else
    throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
},

convertDartClosureToJS: function(closure, arity) {
  var $function;
  if (closure == null)
    return;
  $function = closure.$identity;
  if (!!$function)
    return $function;
  $function = (function(closure, arity, context, invoke) {  return function(a1, a2, a3, a4) {     return invoke(closure, context, arity, a1, a2, a3, a4);  };})(closure,arity,$globalState.currentContext,H.invokeClosure$closure.call$7);
  closure.$identity = $function;
  return $function;
},

propertyTypeCastError: function(value, property) {
  var t1 = J.getInterceptor$asx(property);
  throw H.wrapException(H.CastErrorImplementation$(H.Primitives_objectTypeName(value), t1.substring$2(property, 3, t1.get$length(property))));
},

interceptedTypeCast: function(value, property) {
  var t1;
  if (value != null)
    t1 = typeof value === "object" && J.getInterceptor(value)[property];
  else
    t1 = true;
  if (t1)
    return value;
  H.propertyTypeCastError(value, property);
},

throwCyclicInit: function(staticName) {
  throw H.wrapException(P.CyclicInitializationError$("Cyclic initialization for static " + H.S(staticName)));
},

createRuntimeType: function($name) {
  return new H.TypeImpl($name, null);
  "5,6,7";
},

"+createRuntimeType:1:0": 1,

setRuntimeTypeInfo: function(target, typeInfo) {
  if (target != null)
    target.$builtinTypeInfo = typeInfo;
  return target;
},

getRuntimeTypeInfo: function(target) {
  if (target == null)
    return;
  return target.$builtinTypeInfo;
},

getRuntimeTypeArguments: function(target, substitutionName) {
  return H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
},

getRuntimeTypeArgument: function(target, substitutionName, index) {
  var $arguments = H.getRuntimeTypeArguments(target, substitutionName);
  return $arguments == null ? null : $arguments[index];
},

runtimeTypeToString: function(type) {
  if (type == null)
    return "dynamic";
  else if (typeof type === "object" && type !== null && type.constructor === Array)
    return type[0].builtin$cls + H.joinArguments(type, 1);
  else if (typeof type == "function")
    return type.builtin$cls;
  else if (typeof type === "number" && Math.floor(type) === type)
    return C.JSInt_methods.toString$0(type);
  else
    return;
},

joinArguments: function(types, startIndex) {
  var buffer, index, firstArgument, allDynamic, argument, str;
  if (types == null)
    return "";
  buffer = P.StringBuffer$("");
  for (index = startIndex, firstArgument = true, allDynamic = true; index < types.length; ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer._contents = buffer._contents + ", ";
    argument = types[index];
    if (argument != null)
      allDynamic = false;
    str = H.runtimeTypeToString(argument);
    str = typeof str === "string" ? str : str;
    buffer._contents = buffer._contents + str;
  }
  return allDynamic ? "" : "<" + H.S(buffer) + ">";
},

getRuntimeTypeString: function(object) {
  var className = typeof object === "object" && object !== null && object.constructor === Array ? "List" : J.getInterceptor(object).constructor.builtin$cls;
  return className + H.joinArguments(object.$builtinTypeInfo, 0);
},

substitute: function(substitution, $arguments) {
  if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
    $arguments = substitution;
  else if (typeof substitution == "function") {
    substitution = H.invokeOn(substitution, null, $arguments);
    if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
      $arguments = substitution;
    else if (typeof substitution == "function")
      $arguments = H.invokeOn(substitution, null, $arguments);
  }
  return $arguments;
},

checkSubtype: function(object, isField, checks, asField) {
  var $arguments, interceptor;
  if (object == null)
    return false;
  $arguments = H.getRuntimeTypeInfo(object);
  interceptor = J.getInterceptor(object);
  if (interceptor[isField] == null)
    return false;
  return H.areSubtypes(H.substitute(interceptor[asField], $arguments), checks);
},

areSubtypes: function(s, t) {
  var len, i;
  if (s == null || t == null)
    return true;
  len = s.length;
  for (i = 0; i < len; ++i)
    if (!H.isSubtype(s[i], t[i]))
      return false;
  return true;
},

checkFunctionSubtype: function(target, signatureName, contextName, context, typeArguments) {
  var interceptor, signatureLocation, typeSignature, targetSignatureFunction, targetSignature;
  if (target == null)
    return true;
  interceptor = J.getInterceptor(target);
  if ("$is_" + H.S(signatureName) in interceptor)
    return true;
  signatureLocation = $;
  if (contextName != null)
    signatureLocation = init.allClasses[contextName];
  typeSignature = signatureLocation["$signature_" + H.S(signatureName)];
  if (typeSignature == null)
    return false;
  targetSignatureFunction = interceptor.$signature;
  if (targetSignatureFunction == null)
    return false;
  targetSignature = H.invokeOn(targetSignatureFunction, interceptor, null);
  if (typeof typeSignature == "function")
    if (typeArguments != null)
      typeSignature = H.invokeOn(typeSignature, null, typeArguments);
    else
      typeSignature = context != null ? H.invokeOn(typeSignature, null, H.getRuntimeTypeArguments(context, contextName)) : H.invokeOn(typeSignature, null, null);
  return H.isFunctionSubtype(targetSignature, typeSignature);
},

computeSignature: function(signature, context, contextName) {
  return H.invokeOn(signature, context, H.getRuntimeTypeArguments(context, contextName));
},

isSupertypeOfNull: function(type) {
  return type == null || type.builtin$cls === "Object" || type.builtin$cls === "Null";
},

checkSubtypeOfRuntimeType: function(o, t) {
  var rti, type;
  if (o == null)
    return H.isSupertypeOfNull(t);
  if (t == null)
    return true;
  rti = H.getRuntimeTypeInfo(o);
  o = J.getInterceptor(o);
  if (rti != null) {
    type = rti.slice();
    type.splice(0, 0, o);
  } else
    type = o;
  return H.isSubtype(type, t);
},

isSubtype: function(s, t) {
  var targetSignatureFunction, t1, typeOfS, t2, typeOfT, substitution;
  if (s === t)
    return true;
  if (s == null || t == null)
    return true;
  if ("func" in t) {
    if (!("func" in s)) {
      if ("$is_" + H.S(t.func) in s)
        return true;
      targetSignatureFunction = s.$signature;
      if (targetSignatureFunction == null)
        return false;
      s = targetSignatureFunction.apply(s, null);
    }
    return H.isFunctionSubtype(s, t);
  }
  if (t.builtin$cls === "Function" && "func" in s)
    return true;
  t1 = typeof s === "object" && s !== null && s.constructor === Array;
  typeOfS = t1 ? s[0] : s;
  t2 = typeof t === "object" && t !== null && t.constructor === Array;
  typeOfT = t2 ? t[0] : t;
  if (!("$is" + H.runtimeTypeToString(typeOfT) in typeOfS))
    return false;
  substitution = typeOfT !== typeOfS ? typeOfS["$as" + H.runtimeTypeToString(typeOfT)] : null;
  if (!t1 && substitution == null || !t2)
    return true;
  t1 = t1 ? s.slice(1) : null;
  t2 = t2 ? t.slice(1) : null;
  return H.areSubtypes(H.substitute(substitution, t1), t2);
},

isAssignable: function(s, t) {
  return H.isSubtype(s, t) || H.isSubtype(t, s);
},

areAssignable: function(s, t, allowShorter) {
  var sLength, tLength, i, t1, t2;
  if (t == null && s == null)
    return true;
  if (t == null)
    return allowShorter;
  if (s == null)
    return false;
  sLength = s.length;
  tLength = t.length;
  if (allowShorter) {
    if (sLength < tLength)
      return false;
  } else if (sLength !== tLength)
    return false;
  for (i = 0; i < tLength; ++i) {
    t1 = s[i];
    t2 = t[i];
    if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
      return false;
  }
  return true;
},

areAssignableMaps: function(s, t) {
  if (t == null)
    return true;
  if (s == null)
    return false;
  return      function (t, s, isAssignable) {
       for (var $name in t) {
         if (!s.hasOwnProperty($name)) {
           return false;
         }
         var tType = t[$name];
         var sType = s[$name];
         if (!isAssignable.call$2(sType, tType)) {
          return false;
         }
       }
       return true;
     }(t, s, H.isAssignable$closure)
  ;
},

isFunctionSubtype: function(s, t) {
  var sReturnType, tReturnType, sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, pos, t1, t2, tPos, sPos;
  if (!("func" in s))
    return false;
  if ("void" in s) {
    if (!("void" in t) && "ret" in t)
      return false;
  } else if (!("void" in t)) {
    sReturnType = s.ret;
    tReturnType = t.ret;
    if (!(H.isSubtype(sReturnType, tReturnType) || H.isSubtype(tReturnType, sReturnType)))
      return false;
  }
  sParameterTypes = s.args;
  tParameterTypes = t.args;
  sOptionalParameterTypes = s.opt;
  tOptionalParameterTypes = t.opt;
  sParametersLen = sParameterTypes != null ? sParameterTypes.length : 0;
  tParametersLen = tParameterTypes != null ? tParameterTypes.length : 0;
  sOptionalParametersLen = sOptionalParameterTypes != null ? sOptionalParameterTypes.length : 0;
  tOptionalParametersLen = tOptionalParameterTypes != null ? tOptionalParameterTypes.length : 0;
  if (sParametersLen > tParametersLen)
    return false;
  if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
    return false;
  if (sParametersLen === tParametersLen) {
    if (!H.areAssignable(sParameterTypes, tParameterTypes, false))
      return false;
    if (!H.areAssignable(sOptionalParameterTypes, tOptionalParameterTypes, true))
      return false;
  } else {
    for (pos = 0; pos < sParametersLen; ++pos) {
      t1 = sParameterTypes[pos];
      t2 = tParameterTypes[pos];
      if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
        return false;
    }
    for (tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos) {
      t1 = sOptionalParameterTypes[sPos];
      t2 = tParameterTypes[tPos];
      if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
        return false;
    }
    for (sPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos) {
      t1 = tOptionalParameterTypes[sPos];
      t2 = tOptionalParameterTypes[tPos];
      if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
        return false;
    }
  }
  return H.areAssignableMaps(s.named, t.named);
},

invokeOn: function($function, receiver, $arguments) {
  return $function.apply(receiver, $arguments);
},

typeNameInChrome: function(obj) {
  return obj.constructor.name;
},

typeNameInSafari: function(obj) {
  return H.constructorNameFallback(obj);
},

typeNameInOpera: function(obj) {
  return H.constructorNameFallback(obj);
},

typeNameInFirefox: function(obj) {
  var $name = H.constructorNameFallback(obj);
  if ($name === "BeforeUnloadEvent")
    return "Event";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "GeoGeolocation")
    return "Geolocation";
  if ($name === "WorkerMessageEvent")
    return "MessageEvent";
  if ($name === "XMLDocument")
    return "Document";
  return $name;
},

typeNameInIE: function(obj) {
  var $name = H.constructorNameFallback(obj);
  if ($name === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if ($name === "BeforeUnloadEvent")
    return "Event";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "HTMLDDElement")
    return "HTMLElement";
  if ($name === "HTMLDTElement")
    return "HTMLElement";
  if ($name === "HTMLPhraseElement")
    return "HTMLElement";
  if ($name === "Position")
    return "Geoposition";
  if ($name === "Object")
    if (window.DataView && obj instanceof window.DataView)
      return "DataView";
  return $name;
},

constructorNameFallback: function(object) {
  var $constructor, $name, t1, string;
  if (object == null)
    return "Null";
  $constructor = object.constructor;
  if (typeof $constructor === "function") {
    $name = $constructor.builtin$cls;
    if ($name != null)
      return $name;
    $name = $constructor.name;
    if (typeof $name === "string")
      t1 = $name !== "" && $name !== "Object" && $name !== "Function.prototype";
    else
      t1 = false;
    if (t1)
      return $name;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
},

alternateTag: function(object, tag) {
  if (!!/^HTML[A-Z].*Element$/.test(tag)) {
    if (Object.prototype.toString.call(object) === "[object Object]")
      return;
    return "HTMLElement";
  }
  return;
},

getFunctionForTypeNameOf: function() {
  var getTagFunction = H.getBaseFunctionForTypeNameOf();
  if (typeof dartExperimentalFixupGetTag == "function")
    return H.applyExperimentalFixup(dartExperimentalFixupGetTag, getTagFunction);
  return getTagFunction;
},

getBaseFunctionForTypeNameOf: function() {
  if (typeof navigator !== "object")
    return H.typeNameInChrome$closure;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf("Chrome") !== -1 || userAgent.indexOf("DumpRenderTree") !== -1)
    return H.typeNameInChrome$closure;
  else if (userAgent.indexOf("Firefox") !== -1)
    return H.typeNameInFirefox$closure;
  else if (userAgent.indexOf("Trident/") !== -1)
    return H.typeNameInIE$closure;
  else if (userAgent.indexOf("Opera") !== -1)
    return H.typeNameInOpera$closure;
  else if (userAgent.indexOf("AppleWebKit") !== -1)
    return H.typeNameInSafari$closure;
  else
    return H.constructorNameFallback$closure;
},

applyExperimentalFixup: function(fixupJSFunction, originalGetTagDartFunction) {
  return new H.applyExperimentalFixup_newGetTagDartFunction(fixupJSFunction((function(invoke, closure){return function(arg){ return invoke(closure, arg); };})(H.callDartFunctionWith1Arg$closure.call$2, originalGetTagDartFunction)));
},

callDartFunctionWith1Arg: function(fn, arg) {
  return fn.call$1(arg);
},

toStringForNativeObject: function(obj) {
  return "Instance of " + $.get$getTypeNameOf().call$1(obj);
},

hashCodeForNativeObject: function(object) {
  return H.Primitives_objectHashCode(object);
},

defineProperty: function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
},

lookupInterceptor: function(hasOwnPropertyFunction, tag) {
  var map = init.interceptorsByTag;
  return hasOwnPropertyFunction.call(map, tag) ? map[tag] : null;
},

lookupDispatchRecord: function(obj) {
  var hasOwnPropertyFunction, tag, interceptorClass, secondTag, interceptor;
  hasOwnPropertyFunction = Object.prototype.hasOwnProperty;
  tag = $.get$getTypeNameOf().call$1(obj);
  interceptorClass = H.lookupInterceptor(hasOwnPropertyFunction, tag);
  if (interceptorClass == null) {
    secondTag = H.alternateTag(obj, tag);
    if (secondTag != null)
      interceptorClass = H.lookupInterceptor(hasOwnPropertyFunction, secondTag);
  }
  if (interceptorClass == null)
    return;
  interceptor = interceptorClass.prototype;
  if (init.leafTags[tag] === true)
    return H.makeLeafDispatchRecord(interceptor);
  else
    return J.makeDispatchRecord(interceptor, Object.getPrototypeOf(obj), null, null);
},

makeLeafDispatchRecord: function(interceptor) {
  return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
},

makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
  var interceptor = interceptorClass.prototype;
  if (init.leafTags[tag] === true)
    return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
  else
    return J.makeDispatchRecord(interceptor, proto, null, null);
},

initNativeDispatch: function() {
  var context, map, tags, i, tag, proto, record;
  $.initNativeDispatchFlag = true;
  if (typeof window != "undefined") {
    context = window;
    map = init.interceptorsByTag;
    tags = Object.getOwnPropertyNames(map);
    for (i = 0; i < tags.length; ++i) {
      tag = tags[i];
      if (typeof context[tag] == "function") {
        proto = context[tag].prototype;
        if (proto != null) {
          record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
          if (record != null)
            Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        }
      }
    }
  }
},

regExpGetGlobalNative: function(regexp) {
  var nativeRegexp = regexp.get$_nativeGlobalVersion();
  nativeRegexp.lastIndex = 0;
  return nativeRegexp;
},

allMatchesInStringUnchecked: function(needle, haystack) {
  var result, $length, patternLength, startIndex, position, endIndex;
  result = P.List_List(null, P.Match);
  H.setRuntimeTypeInfo(result, [P.Match]);
  $length = haystack.length;
  patternLength = needle.length;
  for (startIndex = 0; true;) {
    position = C.JSString_methods.indexOf$2(haystack, needle, startIndex);
    if (position === -1)
      break;
    result.push(new H.StringMatch(position, haystack, needle));
    endIndex = position + patternLength;
    if (endIndex === $length)
      break;
    else
      startIndex = position === endIndex ? startIndex + 1 : endIndex;
  }
  return result;
},

stringContainsUnchecked: function(receiver, other, startIndex) {
  var t1;
  if (typeof other === "string")
    return C.JSString_methods.indexOf$2(receiver, other, startIndex) !== -1;
  else {
    t1 = J.getInterceptor$s(other);
    if (typeof other === "object" && other !== null && !!t1.$isJSSyntaxRegExp) {
      t1 = C.JSString_methods.substring$1(receiver, startIndex);
      return other._nativeRegExp.test(t1);
    } else
      return J.get$isNotEmpty$asx(t1.allMatches$1(other, C.JSString_methods.substring$1(receiver, startIndex)));
  }
},

stringReplaceAllUnchecked: function(receiver, from, to) {
  var result, $length, i, t1;
  if (typeof from === "string")
    if (from === "")
      if (receiver === "")
        return to;
      else {
        result = P.StringBuffer$("");
        $length = receiver.length;
        result.write$1(to);
        for (i = 0; i < $length; ++i) {
          t1 = receiver[i];
          result._contents = result._contents + t1;
          result._contents = result._contents + to;
        }
        return result._contents;
      }
    else
      return receiver.replace(new RegExp(from.replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), "\\$&"), 'g'), to.replace("$", "$$$$"));
  else {
    t1 = J.getInterceptor(from);
    if (typeof from === "object" && from !== null && !!t1.$isJSSyntaxRegExp)
      return receiver.replace(H.regExpGetGlobalNative(from), to.replace("$", "$$$$"));
    else {
      if (from == null)
        H.throwExpression(new P.ArgumentError(null));
      throw H.wrapException("String.replaceAll(Pattern) UNIMPLEMENTED");
    }
  }
},

ConstantMap: {"": "Object;",
  get$isEmpty: function(_) {
    return J.$eq(this.get$length(this), 0);
  },
  "+isEmpty": 0,
  get$isNotEmpty: function(_) {
    return !J.$eq(this.get$length(this), 0);
  },
  "+isNotEmpty": 0,
  toString$0: function(_) {
    return P.Maps_mapToString(this);
  },
  _throwUnmodifiable$0: function() {
    throw H.wrapException(P.UnsupportedError$("Cannot modify unmodifiable Map"));
  },
  $indexSet: function(_, key, val) {
    return this._throwUnmodifiable$0();
  },
  "+[]=:2:0": 0,
  putIfAbsent$2: function(key, ifAbsent) {
    return this._throwUnmodifiable$0();
  },
  remove$1: function(_, key) {
    return this._throwUnmodifiable$0();
  },
  addAll$1: function(_, other) {
    return this._throwUnmodifiable$0();
  },
  $isMap: true
},

ConstantStringMap: {"": "ConstantMap;length>,__js_helper$_jsObject,__js_helper$_keys",
  containsValue$1: function(needle) {
    var t1 = this.get$values(this);
    return t1.any$1(t1, new H.ConstantStringMap_containsValue_closure(this, needle));
  },
  "+containsValue:1:0": 0,
  containsKey$1: function(key) {
    if (typeof key !== "string")
      return false;
    if (key === "__proto__")
      return false;
    return this.__js_helper$_jsObject.hasOwnProperty(key);
  },
  "+containsKey:1:0": 0,
  $index: function(_, key) {
    if (typeof key !== "string")
      return;
    if (!this.containsKey$1(key))
      return;
    return this.__js_helper$_jsObject[key];
  },
  "+[]:1:0": 0,
  forEach$1: function(_, f) {
    J.forEach$1$ax(this.__js_helper$_keys, new H.ConstantStringMap_forEach_closure(this, f));
  },
  get$keys: function() {
    var t1 = new H._ConstantMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "ConstantStringMap", 0)]);
    return t1;
  },
  "+keys": 0,
  get$values: function(_) {
    return J.map$1$ax(this.__js_helper$_keys, new H.ConstantStringMap_values_closure(this));
  },
  "+values": 0,
  $asConstantMap: null,
  $asMap: null,
  $isEfficientLength: true
},

ConstantStringMap_containsValue_closure: {"": "Closure;this_0,needle_1",
  call$1: function(value) {
    return J.$eq(value, this.needle_1);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

ConstantStringMap_forEach_closure: {"": "Closure;this_0,f_1",
  call$1: function(key) {
    var t1 = this.this_0;
    return this.f_1.call$2(key, t1.$index(t1, key));
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

ConstantStringMap_values_closure: {"": "Closure;this_0",
  call$1: function(key) {
    var t1 = this.this_0;
    return t1.$index(t1, key);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_ConstantMapKeyIterable: {"": "IterableBase;__js_helper$_map",
  get$iterator: function(_) {
    return J.get$iterator$ax(this.__js_helper$_map.__js_helper$_keys);
  },
  $asIterableBase: null,
  $asIterable: null
},

JSInvocationMirror: {"": "Object;__js_helper$_memberName,_internalName,_kind,_arguments,_namedArgumentNames,_namedIndices",
  get$memberName: function() {
    var $name, t1, unmangledName;
    $name = this.__js_helper$_memberName;
    t1 = J.getInterceptor($name);
    if (typeof $name === "object" && $name !== null && !!t1.$isSymbol)
      return $name;
    t1 = $.get$mangledNames();
    unmangledName = t1.$index(t1, $name);
    if (unmangledName != null) {
      t1 = J.split$1$s(unmangledName, ":");
      if (0 >= t1.length)
        throw H.ioore(t1, 0);
      $name = t1[0];
    }
    this.__js_helper$_memberName = new H.Symbol0($name);
    return this.__js_helper$_memberName;
  },
  get$isGetter: function() {
    return this._kind === 1;
  },
  get$isSetter: function() {
    return this._kind === 2;
  },
  get$positionalArguments: function() {
    var t1, argumentCount, list, index;
    if (this._kind === 1)
      return C.List_empty;
    t1 = this._arguments;
    argumentCount = t1.length - this._namedArgumentNames.length;
    if (argumentCount === 0)
      return C.List_empty;
    list = [];
    for (index = 0; index < argumentCount; ++index) {
      if (index >= t1.length)
        throw H.ioore(t1, index);
      list.push(t1[index]);
    }
    return H.makeLiteralListConst(list);
  },
  get$namedArguments: function() {
    var t1, namedArgumentCount, t2, namedArgumentsStartIndex, map, i, t3, t4;
    if (this._kind !== 0)
      return H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    t1 = this._namedArgumentNames;
    namedArgumentCount = t1.length;
    t2 = this._arguments;
    namedArgumentsStartIndex = t2.length - namedArgumentCount;
    if (namedArgumentCount === 0)
      return H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    map = P.LinkedHashMap_LinkedHashMap(null, null, null, P.Symbol, null);
    for (i = 0; i < namedArgumentCount; ++i) {
      if (i >= t1.length)
        throw H.ioore(t1, i);
      t3 = t1[i];
      t4 = namedArgumentsStartIndex + i;
      if (t4 < 0 || t4 >= t2.length)
        throw H.ioore(t2, t4);
      map.$indexSet(map, new H.Symbol0(t3), t2[t4]);
    }
    return map;
  },
  _getCachedInvocation$1: function(object) {
    var interceptor, $name, isIntercepted, interceptor0, receiver, method;
    interceptor = J.getInterceptor(object);
    $name = this._internalName;
    isIntercepted = $.interceptedNames.indexOf($name) !== -1;
    if (isIntercepted) {
      interceptor0 = object === interceptor ? null : interceptor;
      receiver = interceptor;
      interceptor = interceptor0;
    } else {
      receiver = object;
      interceptor = null;
    }
    method = receiver[$name];
    if (typeof method === "function") {
      if (!("$reflectable" in method))
        H.throwInvalidReflectionError(J.get$_name$x(this.get$memberName()));
      return new H.CachedInvocation(method, isIntercepted, interceptor);
    } else
      return new H.CachedNoSuchMethodInvocation(interceptor);
  },
  static: {
"": "JSInvocationMirror_METHOD,JSInvocationMirror_GETTER,JSInvocationMirror_SETTER",
}

},

CachedInvocation: {"": "Object;jsFunction,isIntercepted,cachedInterceptor",
  get$isNoSuchMethod: function() {
    return false;
  },
  invokeOn$2: function(victim, $arguments) {
    var receiver, arguments0;
    if (!this.isIntercepted) {
      if (typeof $arguments !== "object" || $arguments === null || $arguments.constructor !== Array)
        $arguments = P.List_List$from($arguments, true, null);
      receiver = victim;
    } else {
      arguments0 = [victim];
      C.JSArray_methods.addAll$1(arguments0, $arguments);
      receiver = this.cachedInterceptor;
      receiver = receiver != null ? receiver : victim;
      $arguments = arguments0;
    }
    return this.jsFunction.apply(receiver, $arguments);
  }
},

CachedNoSuchMethodInvocation: {"": "Object;interceptor",
  get$isNoSuchMethod: function() {
    return true;
  },
  invokeOn$2: function(victim, invocation) {
    var receiver = this.interceptor;
    return J.noSuchMethod$1(receiver == null ? victim : receiver, invocation);
  }
},

Primitives_applyFunction_closure: {"": "Closure;allNamedArguments_1",
  call$2: function(key, argument) {
    this.allNamedArguments_1[key] = argument;
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

Primitives_applyFunction_closure0: {"": "Closure;buffer_2,arguments_3,allNamedArguments_4",
  call$1: function($name) {
    this.buffer_2.write$1("$" + H.S($name));
    this.arguments_3.push(this.allNamedArguments_4[$name]);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Primitives_applyFunction_closure1: {"": "Closure;box_0,buffer_5,arguments_6",
  call$2: function($name, argument) {
    var t1;
    this.buffer_5.write$1("$" + H.S($name));
    this.arguments_6.push(argument);
    t1 = this.box_0;
    t1.argumentCount_0 = t1.argumentCount_0 + 1;
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

TypeErrorDecoder: {"": "Object;_pattern,_arguments,_argumentsExpr,_expr,_method,_receiver",
  matchTypeError$1: function(message) {
    var match, result, t1;
    match = new RegExp(this._pattern).exec(message);
    if (match == null)
      return;
    result = {};
    t1 = this._arguments;
    if (t1 !== -1)
      result.arguments = match[t1 + 1];
    t1 = this._argumentsExpr;
    if (t1 !== -1)
      result.argumentsExpr = match[t1 + 1];
    t1 = this._expr;
    if (t1 !== -1)
      result.expr = match[t1 + 1];
    t1 = this._method;
    if (t1 !== -1)
      result.method = match[t1 + 1];
    t1 = this._receiver;
    if (t1 !== -1)
      result.receiver = match[t1 + 1];
    return result;
  },
  static: {
"": "TypeErrorDecoder_noSuchMethodPattern,TypeErrorDecoder_notClosurePattern,TypeErrorDecoder_nullCallPattern,TypeErrorDecoder_nullLiteralCallPattern,TypeErrorDecoder_undefinedCallPattern,TypeErrorDecoder_undefinedLiteralCallPattern,TypeErrorDecoder_nullPropertyPattern,TypeErrorDecoder_nullLiteralPropertyPattern,TypeErrorDecoder_undefinedPropertyPattern,TypeErrorDecoder_undefinedLiteralPropertyPattern",
TypeErrorDecoder_extractPattern: function(message) {
  var match, $arguments, argumentsExpr, expr, method, receiver;
  message = message.replace(String({}), '$receiver$').replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), '\\$&');
  match = message.match(/\\\$[a-zA-Z]+\\\$/g);
  if (match == null)
    match = [];
  $arguments = match.indexOf("\\$arguments\\$");
  argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
  expr = match.indexOf("\\$expr\\$");
  method = match.indexOf("\\$method\\$");
  receiver = match.indexOf("\\$receiver\\$");
  return new H.TypeErrorDecoder(message.replace('\\$arguments\\$', '((?:x|[^x])*)').replace('\\$argumentsExpr\\$', '((?:x|[^x])*)').replace('\\$expr\\$', '((?:x|[^x])*)').replace('\\$method\\$', '((?:x|[^x])*)').replace('\\$receiver\\$', '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
},

TypeErrorDecoder_provokeCallErrorOn: function(expression) {
  return function($expr$) {
  var $argumentsExpr$ = '$arguments$'
  try {
    $expr$.$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}(expression);
},

TypeErrorDecoder_provokeCallErrorOnNull: function() {
  return function() {
  var $argumentsExpr$ = '$arguments$'
  try {
    null.$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}();
},

TypeErrorDecoder_provokeCallErrorOnUndefined: function() {
  return function() {
  var $argumentsExpr$ = '$arguments$'
  try {
    (void 0).$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}();
},

TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
  return function($expr$) {
  try {
    $expr$.$method$;
  } catch (e) {
    return e.message;
  }
}(expression);
},

TypeErrorDecoder_provokePropertyErrorOnNull: function() {
  return function() {
  try {
    null.$method$;
  } catch (e) {
    return e.message;
  }
}();
},

TypeErrorDecoder_provokePropertyErrorOnUndefined: function() {
  return function() {
  try {
    (void 0).$method$;
  } catch (e) {
    return e.message;
  }
}();
}}

},

NullError: {"": "Error;_message,_method",
  toString$0: function(_) {
    var t1 = this._method;
    if (t1 == null)
      return "NullError: " + H.S(this._message);
    return "NullError: Cannot call \"" + H.S(t1) + "\" on null";
  },
  $isNoSuchMethodError: true,
  $isError: true
},

JsNoSuchMethodError: {"": "Error;_message,_method,_receiver",
  toString$0: function(_) {
    var t1, t2;
    t1 = this._method;
    if (t1 == null)
      return "NoSuchMethodError: " + H.S(this._message);
    t2 = this._receiver;
    if (t2 == null)
      return "NoSuchMethodError: Cannot call \"" + t1 + "\" (" + H.S(this._message) + ")";
    return "NoSuchMethodError: Cannot call \"" + t1 + "\" on \"" + t2 + "\" (" + H.S(this._message) + ")";
  },
  $isNoSuchMethodError: true,
  $isError: true,
  static: {
JsNoSuchMethodError$: function(_message, match) {
  var t1, t2;
  t1 = match == null;
  t2 = t1 ? null : match.method;
  t1 = t1 ? null : match.receiver;
  return new H.JsNoSuchMethodError(_message, t2, t1);
}}

},

UnknownJsTypeError: {"": "Error;_message",
  toString$0: function(_) {
    var t1 = this._message;
    return C.JSString_methods.get$isEmpty(t1) ? "Error" : "Error: " + t1;
  }
},

unwrapException_saveStackTrace: {"": "Closure;ex_0",
  call$1: function(error) {
    var t1 = J.getInterceptor(error);
    if (typeof error === "object" && error !== null && !!t1.$isError)
      if (error.$thrownJsError == null)
        error.$thrownJsError = this.ex_0;
    return error;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_StackTrace: {"": "Object;_exception,_trace",
  toString$0: function(_) {
    var t1, trace;
    t1 = this._trace;
    if (t1 != null)
      return t1;
    t1 = this._exception;
    trace = typeof t1 === "object" ? t1.stack : null;
    t1 = trace == null ? "" : trace;
    this._trace = t1;
    return t1;
  }
},

invokeClosure_closure: {"": "Closure;closure_0",
  call$0: function() {
    return this.closure_0.call$0();
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

invokeClosure_closure0: {"": "Closure;closure_1,arg1_2",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

invokeClosure_closure1: {"": "Closure;closure_3,arg1_4,arg2_5",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

invokeClosure_closure2: {"": "Closure;closure_6,arg1_7,arg2_8,arg3_9",
  call$0: function() {
    return this.closure_6.call$3(this.arg1_7, this.arg2_8, this.arg3_9);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

invokeClosure_closure3: {"": "Closure;closure_10,arg1_11,arg2_12,arg3_13,arg4_14",
  call$0: function() {
    return this.closure_10.call$4(this.arg1_11, this.arg2_12, this.arg3_13, this.arg4_14);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Closure: {"": "Object;",
  toString$0: function(_) {
    return "Closure";
  },
  $isClosure: true,
  $isFunction: true
},

BoundClosure: {"": "Closure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (this === other)
      return true;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isBoundClosure)
      return false;
    return this._self === other._self && this.__js_helper$_target === other.__js_helper$_target && this._receiver === other._receiver;
  },
  get$hashCode: function(_) {
    var t1, receiverHashCode;
    t1 = this._receiver;
    if (t1 == null)
      receiverHashCode = H.Primitives_objectHashCode(this._self);
    else
      receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
    return (receiverHashCode ^ H.Primitives_objectHashCode(this.__js_helper$_target)) >>> 0;
  },
  $isBoundClosure: true
},

Creates: {"": "Object;types"},

Returns: {"": "Object;types"},

JSName: {"": "Object;name>"},

CastErrorImplementation: {"": "Error;message>",
  toString$0: function(_) {
    return this.message;
  },
  $isError: true,
  static: {
CastErrorImplementation$: function(actualType, expectedType) {
  return new H.CastErrorImplementation("CastError: Casting value of type " + actualType + " to incompatible type " + H.S(expectedType));
}}

},

RuntimeError: {"": "Error;message>",
  toString$0: function(_) {
    return "RuntimeError: " + this.message;
  },
  static: {
RuntimeError$: function(message) {
  return new H.RuntimeError(message);
}}

},

TypeImpl: {"": "Object;_typeName<,_unmangledName",
  toString$0: function(_) {
    var t1, unmangledName, unmangledName0;
    t1 = this._unmangledName;
    if (t1 != null)
      return t1;
    unmangledName = this._typeName;
    unmangledName0 = H.unmangleGlobalNameIfPreservedAnyways(unmangledName);
    unmangledName = unmangledName0 == null ? unmangledName : unmangledName0;
    this._unmangledName = unmangledName;
    return unmangledName;
  },
  get$hashCode: function(_) {
    return J.get$hashCode$(this._typeName);
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$isTypeImpl && J.$eq(this._typeName, other._typeName);
  },
  $isTypeImpl: true,
  $isType: true
},

TypeVariable: {"": "Object;owner<,name>,bound"},

applyExperimentalFixup_newGetTagDartFunction: {"": "Closure;newGetTagJSFunction_0",
  call$1: function(object) {
    return this.newGetTagJSFunction_0(object);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

JSSyntaxRegExp: {"": "Object;_nativeRegExp,_nativeGlobalRegExp,_nativeAnchoredRegExp",
  get$_nativeGlobalVersion: function() {
    var t1 = this._nativeGlobalRegExp;
    if (t1 != null)
      return t1;
    t1 = this._nativeRegExp;
    t1 = H.JSSyntaxRegExp_makeNative(t1.source, t1.multiline, !t1.ignoreCase, true);
    this._nativeGlobalRegExp = t1;
    return t1;
  },
  get$_nativeAnchoredVersion: function() {
    var t1 = this._nativeAnchoredRegExp;
    if (t1 != null)
      return t1;
    t1 = this._nativeRegExp;
    t1 = H.JSSyntaxRegExp_makeNative(t1.source + "|()", t1.multiline, !t1.ignoreCase, true);
    this._nativeAnchoredRegExp = t1;
    return t1;
  },
  firstMatch$1: function(str) {
    var m;
    if (typeof str !== "string")
      H.throwExpression(new P.ArgumentError(str));
    m = this._nativeRegExp.exec(str);
    if (m == null)
      return;
    return H._MatchImplementation$(this, m);
  },
  hasMatch$1: function(str) {
    if (typeof str !== "string")
      H.throwExpression(new P.ArgumentError(str));
    return this._nativeRegExp.test(str);
  },
  allMatches$1: function(_, str) {
    if (typeof str !== "string")
      H.throwExpression(new P.ArgumentError(str));
    return new H._AllMatchesIterable(this, str);
  },
  _execGlobal$2: function(string, start) {
    var regexp, match;
    regexp = this.get$_nativeGlobalVersion();
    regexp.lastIndex = start;
    match = regexp.exec(string);
    if (match == null)
      return;
    return H._MatchImplementation$(this, match);
  },
  _execAnchored$2: function(string, start) {
    var regexp, match, t1, t2;
    regexp = this.get$_nativeAnchoredVersion();
    regexp.lastIndex = start;
    match = regexp.exec(string);
    if (match == null)
      return;
    t1 = match.length;
    t2 = t1 - 1;
    if (t2 < 0)
      throw H.ioore(match, t2);
    if (match[t2] != null)
      return;
    J.set$length$asx(match, t2);
    return H._MatchImplementation$(this, match);
  },
  matchAsPrefix$2: function(_, string, start) {
    var t1;
    if (!(start < 0)) {
      t1 = J.get$length$asx(string);
      if (typeof t1 !== "number")
        throw H.iae(t1);
      t1 = start > t1;
    } else
      t1 = true;
    if (t1)
      throw H.wrapException(P.RangeError$range(start, 0, J.get$length$asx(string)));
    return this._execAnchored$2(string, start);
  },
  matchAsPrefix$1: function($receiver, string) {
    return this.matchAsPrefix$2($receiver, string, 0);
  },
  $isJSSyntaxRegExp: true,
  static: {
JSSyntaxRegExp_makeNative: function(pattern, multiLine, caseSensitive, global) {
  var m, i, g, regexp, errorMessage;
  m = multiLine ? "m" : "";
  i = caseSensitive ? "" : "i";
  g = global ? "g" : "";
  regexp = (function() {try {return new RegExp(pattern, m + i + g);} catch (e) {return e;}})();
  if (regexp instanceof RegExp)
    return regexp;
  errorMessage = String(regexp);
  throw H.wrapException(P.FormatException$("Illegal RegExp pattern: " + pattern + ", " + errorMessage));
}}

},

_MatchImplementation: {"": "Object;pattern,_match",
  $index: function(_, index) {
    var t1 = this._match;
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    return t1[index];
  },
  "+[]:1:0": 0,
  _MatchImplementation$2: function(pattern, _match) {
  },
  $isMatch: true,
  static: {
_MatchImplementation$: function(pattern, _match) {
  var t1 = new H._MatchImplementation(pattern, _match);
  t1._MatchImplementation$2(pattern, _match);
  return t1;
}}

},

_AllMatchesIterable: {"": "IterableBase;_re,_string",
  get$iterator: function(_) {
    return new H._AllMatchesIterator(this._re, this._string, null);
  },
  $asIterableBase: function() {
    return [P.Match];
  },
  $asIterable: function() {
    return [P.Match];
  }
},

_AllMatchesIterator: {"": "Object;_regExp,_string,__js_helper$_current",
  get$current: function() {
    return this.__js_helper$_current;
  },
  "+current": 0,
  moveNext$0: function() {
    var t1, t2, index;
    if (this._string == null)
      return false;
    t1 = this.__js_helper$_current;
    if (t1 != null) {
      t1 = t1._match;
      t2 = t1.index;
      if (0 >= t1.length)
        throw H.ioore(t1, 0);
      t1 = J.get$length$asx(t1[0]);
      if (typeof t1 !== "number")
        throw H.iae(t1);
      index = t2 + t1;
      if (this.__js_helper$_current._match.index === index)
        ++index;
    } else
      index = 0;
    this.__js_helper$_current = this._regExp._execGlobal$2(this._string, index);
    if (this.__js_helper$_current == null) {
      this._string = null;
      return false;
    }
    return true;
  }
},

StringMatch: {"": "Object;start,input,pattern",
  $index: function(_, g) {
    if (!J.$eq(g, 0))
      H.throwExpression(new P.RangeError("value " + H.S(g)));
    return this.pattern;
  },
  "+[]:1:0": 0,
  $isMatch: true
}}],
["app_bootstrap", "example.html_bootstrap.dart", , E, {
main: function() {
  $._librariesToLoad = ["package:autocomplete_ui/autocomplete_result.dart", "package:autocomplete_ui/input_autocomplete.html.0.dart", "package:autocomplete_ui/example/simple_autocomplete_example.dart", "example.html.0.dart"];
  $._useDirtyChecking = false;
  A.initPolymer();
}},
1],
["", "package:autocomplete_ui/autocomplete_result.dart", , U, {
AutocompleteResult: {"": ["PolymerElement_ChangeNotifier;_autocomplete_result$__$choice%-,_autocomplete_result$__$searchquery%-,_autocomplete_result$__$renderer%-,_changes,_records,_changes,_records,_declaration,_observers,_unbound,_unbindAllJob,_propertyObserver,syntax,_shadowRoots,$$-", null, null, null, null, null, null, null, null, null, null, null, null, null, null, function() {
    return [C.C_Reflectable];
  }],
  get$choice: function(receiver) {
    return receiver._autocomplete_result$__$choice;
    "19,20,21,22";
  },
  "+choice": 1,
  set$choice: function(receiver, value) {
    receiver._autocomplete_result$__$choice = this.notifyPropertyChange$3(receiver, C.Symbol_choice, receiver._autocomplete_result$__$choice, value);
    "11,16,19,20";
  },
  "+choice=": 1,
  get$searchquery: function(receiver) {
    return receiver._autocomplete_result$__$searchquery;
    "7,20,21,22";
  },
  "+searchquery": 1,
  set$searchquery: function(receiver, value) {
    receiver._autocomplete_result$__$searchquery = this.notifyPropertyChange$3(receiver, C.Symbol_searchquery, receiver._autocomplete_result$__$searchquery, value);
    "11,16,7,20";
  },
  "+searchquery=": 1,
  get$renderer: function(receiver) {
    return receiver._autocomplete_result$__$renderer;
    "23,20,22";
  },
  "+renderer": 1,
  set$renderer: function(receiver, value) {
    receiver._autocomplete_result$__$renderer = this.notifyPropertyChange$3(receiver, C.Symbol_renderer, receiver._autocomplete_result$__$renderer, value);
    "11,16,23,20";
  },
  "+renderer=": 1,
  get$applyAuthorStyles: function(receiver) {
    return true;
    "24";
  },
  "+applyAuthorStyles": 1,
  enteredView$0: function(receiver) {
    A.Polymer.prototype.enteredView$0.call(this, receiver);
    J.set$innerHtml$x(J.query$1$x(this.getShadowRoot$1(receiver, "tapo-autocomplete-result"), ".result-label"), J.get$outerHtml$x(J.renderChoice$2$x(receiver._autocomplete_result$__$renderer, receiver._autocomplete_result$__$choice, receiver._autocomplete_result$__$searchquery)));
    "11";
  },
  "+enteredView:0:0": 1,
  "@": function() {
    return [C.CustomTag_aJM];
  },
  static: {
AutocompleteResult$created: function(receiver) {
  var t1, t2, t3, t4, t5;
  t1 = $.get$Polymer__polymerSyntax();
  t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
  t3 = J.JSString;
  t4 = W.Element;
  t5 = new B.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null);
  H.setRuntimeTypeInfo(t5, [t3, t4]);
  receiver.syntax = t1;
  receiver._shadowRoots = t2;
  receiver.$$ = t5;
  C.AutocompleteResult_methods.Element$created$0(receiver);
  C.AutocompleteResult_methods.PolymerElement$created$0(receiver);
  return receiver;
  "8";
},

"+new AutocompleteResult$created:0:0": 1}

},

"+AutocompleteResult": [],

PolymerElement_ChangeNotifier: {"": "PolymerElement+ChangeNotifier;", $isObservable: true}}],
["custom_element.polyfill", "package:custom_element/polyfill.dart", , B, {
_isReady: function() {
  var t1, customElements;
  if ($.get$context() == null)
    return true;
  t1 = $.get$context();
  customElements = t1.$index(t1, "CustomElements");
  if (customElements == null)
    return "register" in document;
  return J.$eq(J.$index$asx(customElements, "ready"), true);
},

closure: {"": "Closure;",
  call$0: function() {
    if (B._isReady())
      return P._Future$immediate(null, null);
    var t1 = new W._EventStream(new W.Events(document)._ptr, "WebComponentsReady", false);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1.get$first(t1);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
}}],
["dart._collection.dev", "dart:_collection-dev", , H, {
Arrays_copy: function(src, srcStart, dst, dstStart, count) {
  var i, j, t1;
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1; i >= srcStart; --i, --j) {
      if (i < 0 || i >= src.length)
        throw H.ioore(src, i);
      C.JSArray_methods.$indexSet(dst, j, src[i]);
    }
  else
    for (t1 = srcStart + count, j = dstStart, i = srcStart; i < t1; ++i, ++j) {
      if (i < 0 || i >= src.length)
        throw H.ioore(src, i);
      C.JSArray_methods.$indexSet(dst, j, src[i]);
    }
},

Arrays_indexOf: function(a, element, startIndex, endIndex) {
  var i;
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i >>> 0 !== i || i >= a.length)
      throw H.ioore(a, i);
    if (J.$eq(a[i], element))
      return i;
  }
  return -1;
},

Arrays_lastIndexOf: function(a, element, startIndex) {
  var t1, i;
  if (typeof startIndex !== "number")
    throw startIndex.$lt();
  if (startIndex < 0)
    return -1;
  t1 = a.length;
  if (startIndex >= t1)
    startIndex = t1 - 1;
  for (i = startIndex; i >= 0; --i) {
    if (i >= a.length)
      throw H.ioore(a, i);
    if (J.$eq(a[i], element))
      return i;
  }
  return -1;
},

IterableMixinWorkaround_forEach: function(iterable, f) {
  var t1;
  for (t1 = new H.ListIterator(iterable, iterable.length, 0, null), H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(iterable, "JSArray", 0)]); t1.moveNext$0();)
    f.call$1(t1._current);
},

IterableMixinWorkaround_any: function(iterable, f) {
  var t1;
  for (t1 = new H.ListIterator(iterable, iterable.length, 0, null), H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(iterable, "JSArray", 0)]); t1.moveNext$0();)
    if (f.call$1(t1._current) === true)
      return true;
  return false;
},

IterableMixinWorkaround_fold: function(iterable, initialValue, combine) {
  var t1;
  for (t1 = new H.ListIterator(iterable, iterable.length, 0, null), H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(iterable, "JSArray", 0)]); t1.moveNext$0();)
    initialValue = combine.call$2(initialValue, t1._current);
  return initialValue;
},

IterableMixinWorkaround_firstWhere: function(iterable, test, orElse) {
  var t1, element;
  for (t1 = new H.ListIterator(iterable, iterable.length, 0, null), H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(iterable, "JSArray", 0)]); t1.moveNext$0();) {
    element = t1._current;
    if (test.call$1(element) === true)
      return element;
  }
  return orElse.call$0();
},

IterableMixinWorkaround_toStringIterable: function(iterable, leftDelimiter, rightDelimiter) {
  var result, i, t1;
  for (i = 0; i < $.get$IterableMixinWorkaround__toStringList().length; ++i) {
    t1 = $.get$IterableMixinWorkaround__toStringList();
    if (i >= t1.length)
      throw H.ioore(t1, i);
    if (t1[i] === iterable)
      return H.S(leftDelimiter) + "..." + H.S(rightDelimiter);
  }
  result = P.StringBuffer$("");
  try {
    $.get$IterableMixinWorkaround__toStringList().push(iterable);
    result.write$1(leftDelimiter);
    result.writeAll$2(iterable, ", ");
    result.write$1(rightDelimiter);
  } finally {
    t1 = $.get$IterableMixinWorkaround__toStringList();
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    t1.pop();
  }
  return result.get$_contents();
},

IterableMixinWorkaround_sortList: function(list, compare) {
  compare = P.Comparable_compare$closure;
  H.Sort__doSort(list, 0, list.length - 1, compare);
},

IterableMixinWorkaround_lastIndexOfList: function(list, element, start) {
  return H.Arrays_lastIndexOf(list, element, list.length - 1);
},

IterableMixinWorkaround__rangeCheck: function(list, start, end) {
  var t1;
  if (start < 0 || start > list.length)
    throw H.wrapException(P.RangeError$range(start, 0, list.length));
  t1 = J.getInterceptor$n(end);
  if (t1.$lt(end, start) || t1.$gt(end, list.length))
    throw H.wrapException(P.RangeError$range(end, start, list.length));
},

IterableMixinWorkaround_setRangeList: function(list, start, end, from, skipCount) {
  var $length;
  H.IterableMixinWorkaround__rangeCheck(list, start, end);
  $length = end - start;
  if ($length === 0)
    return;
  if (skipCount < 0)
    throw H.wrapException(new P.ArgumentError(skipCount));
  if (skipCount + $length > from.length)
    throw H.wrapException(P.StateError$("Not enough elements"));
  H.Arrays_copy(from, skipCount, list, start, $length);
},

printToConsole: function(line) {
  if (typeof dartPrint == "function") {
    dartPrint(line);
    return;
  }
  if (typeof console == "object" && typeof console.log == "function") {
    console.log(line);
    return;
  }
  if (typeof window == "object")
    return;
  if (typeof print == "function") {
    print(line);
    return;
  }
  throw "Unable to print message: " + String(line);
},

Sort__doSort: function(a, left, right, compare) {
  if (J.$le$n(J.$sub$n(right, left), 32))
    H.Sort__insertionSort(a, left, right, compare);
  else
    H.Sort__dualPivotQuicksort(a, left, right, compare);
},

Sort__insertionSort: function(a, left, right, compare) {
  var i, t1, t2, el, j, t3;
  for (i = J.$add$ns(left, 1), t1 = J.getInterceptor$asx(a); t2 = J.getInterceptor$n(i), t2.$le(i, right); i = t2.$add(i, 1)) {
    el = t1.$index(a, i);
    j = i;
    while (true) {
      t3 = J.getInterceptor$n(j);
      if (!(t3.$gt(j, left) && J.$gt$n(compare.call$2(t1.$index(a, t3.$sub(j, 1)), el), 0)))
        break;
      t1.$indexSet(a, j, t1.$index(a, t3.$sub(j, 1)));
      j = t3.$sub(j, 1);
    }
    t1.$indexSet(a, j, el);
  }
},

Sort__dualPivotQuicksort: function(a, left, right, compare) {
  var t1, sixth, t2, index1, index5, index3, t3, index2, index4, el1, el2, el3, el4, el5, t0, less, great, k, ak, comp, t4, less0, great0, pivots_are_equal;
  t1 = J.getInterceptor$n(right);
  sixth = J.$tdiv$n(J.$add$ns(t1.$sub(right, left), 1), 6);
  t2 = J.getInterceptor$ns(left);
  index1 = t2.$add(left, sixth);
  index5 = t1.$sub(right, sixth);
  index3 = J.$tdiv$n(t2.$add(left, right), 2);
  t3 = J.getInterceptor$n(index3);
  index2 = t3.$sub(index3, sixth);
  index4 = t3.$add(index3, sixth);
  t3 = J.getInterceptor$asx(a);
  el1 = t3.$index(a, index1);
  el2 = t3.$index(a, index2);
  el3 = t3.$index(a, index3);
  el4 = t3.$index(a, index4);
  el5 = t3.$index(a, index5);
  if (J.$gt$n(compare.call$2(el1, el2), 0)) {
    t0 = el2;
    el2 = el1;
    el1 = t0;
  }
  if (J.$gt$n(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  if (J.$gt$n(compare.call$2(el1, el3), 0)) {
    t0 = el3;
    el3 = el1;
    el1 = t0;
  }
  if (J.$gt$n(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if (J.$gt$n(compare.call$2(el1, el4), 0)) {
    t0 = el4;
    el4 = el1;
    el1 = t0;
  }
  if (J.$gt$n(compare.call$2(el3, el4), 0)) {
    t0 = el4;
    el4 = el3;
    el3 = t0;
  }
  if (J.$gt$n(compare.call$2(el2, el5), 0)) {
    t0 = el5;
    el5 = el2;
    el2 = t0;
  }
  if (J.$gt$n(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if (J.$gt$n(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  t3.$indexSet(a, index1, el1);
  t3.$indexSet(a, index3, el3);
  t3.$indexSet(a, index5, el5);
  t3.$indexSet(a, index2, t3.$index(a, left));
  t3.$indexSet(a, index4, t3.$index(a, right));
  less = t2.$add(left, 1);
  great = t1.$sub(right, 1);
  if (J.$eq(compare.call$2(el2, el4), 0)) {
    for (k = less; t1 = J.getInterceptor$n(k), t1.$le(k, great); k = t1.$add(k, 1)) {
      ak = t3.$index(a, k);
      comp = compare.call$2(ak, el2);
      t2 = J.getInterceptor(comp);
      if (t2.$eq(comp, 0))
        continue;
      if (t2.$lt(comp, 0)) {
        if (!t1.$eq(k, less)) {
          t3.$indexSet(a, k, t3.$index(a, less));
          t3.$indexSet(a, less, ak);
        }
        less = J.$add$ns(less, 1);
      } else
        for (; true;) {
          comp = compare.call$2(t3.$index(a, great), el2);
          t2 = J.getInterceptor$n(comp);
          if (t2.$gt(comp, 0)) {
            great = J.$sub$n(great, 1);
            continue;
          } else {
            t4 = J.getInterceptor$n(great);
            if (t2.$lt(comp, 0)) {
              t3.$indexSet(a, k, t3.$index(a, less));
              less0 = J.$add$ns(less, 1);
              t3.$indexSet(a, less, t3.$index(a, great));
              great0 = t4.$sub(great, 1);
              t3.$indexSet(a, great, ak);
              great = great0;
              less = less0;
              break;
            } else {
              t3.$indexSet(a, k, t3.$index(a, great));
              great0 = t4.$sub(great, 1);
              t3.$indexSet(a, great, ak);
              great = great0;
              break;
            }
          }
        }
    }
    pivots_are_equal = true;
  } else {
    for (k = less; t1 = J.getInterceptor$n(k), t1.$le(k, great); k = t1.$add(k, 1)) {
      ak = t3.$index(a, k);
      if (J.$lt$n(compare.call$2(ak, el2), 0)) {
        if (!t1.$eq(k, less)) {
          t3.$indexSet(a, k, t3.$index(a, less));
          t3.$indexSet(a, less, ak);
        }
        less = J.$add$ns(less, 1);
      } else if (J.$gt$n(compare.call$2(ak, el4), 0))
        for (; true;)
          if (J.$gt$n(compare.call$2(t3.$index(a, great), el4), 0)) {
            great = J.$sub$n(great, 1);
            if (J.$lt$n(great, k))
              break;
            continue;
          } else {
            t2 = J.getInterceptor$n(great);
            if (J.$lt$n(compare.call$2(t3.$index(a, great), el2), 0)) {
              t3.$indexSet(a, k, t3.$index(a, less));
              less0 = J.$add$ns(less, 1);
              t3.$indexSet(a, less, t3.$index(a, great));
              great0 = t2.$sub(great, 1);
              t3.$indexSet(a, great, ak);
              great = great0;
              less = less0;
            } else {
              t3.$indexSet(a, k, t3.$index(a, great));
              great0 = t2.$sub(great, 1);
              t3.$indexSet(a, great, ak);
              great = great0;
            }
            break;
          }
    }
    pivots_are_equal = false;
  }
  t1 = J.getInterceptor$n(less);
  t3.$indexSet(a, left, t3.$index(a, t1.$sub(less, 1)));
  t3.$indexSet(a, t1.$sub(less, 1), el2);
  t2 = J.getInterceptor$ns(great);
  t3.$indexSet(a, right, t3.$index(a, t2.$add(great, 1)));
  t3.$indexSet(a, t2.$add(great, 1), el4);
  H.Sort__doSort(a, left, t1.$sub(less, 2), compare);
  H.Sort__doSort(a, t2.$add(great, 2), right, compare);
  if (pivots_are_equal)
    return;
  if (t1.$lt(less, index1) && t2.$gt(great, index5)) {
    for (; J.$eq(compare.call$2(t3.$index(a, less), el2), 0);)
      less = J.$add$ns(less, 1);
    for (; J.$eq(compare.call$2(t3.$index(a, great), el4), 0);)
      great = J.$sub$n(great, 1);
    for (k = less; t1 = J.getInterceptor$n(k), t1.$le(k, great); k = t1.$add(k, 1)) {
      ak = t3.$index(a, k);
      if (J.$eq(compare.call$2(ak, el2), 0)) {
        if (!t1.$eq(k, less)) {
          t3.$indexSet(a, k, t3.$index(a, less));
          t3.$indexSet(a, less, ak);
        }
        less = J.$add$ns(less, 1);
      } else if (J.$eq(compare.call$2(ak, el4), 0))
        for (; true;)
          if (J.$eq(compare.call$2(t3.$index(a, great), el4), 0)) {
            great = J.$sub$n(great, 1);
            if (J.$lt$n(great, k))
              break;
            continue;
          } else {
            t2 = J.getInterceptor$n(great);
            if (J.$lt$n(compare.call$2(t3.$index(a, great), el2), 0)) {
              t3.$indexSet(a, k, t3.$index(a, less));
              less0 = J.$add$ns(less, 1);
              t3.$indexSet(a, less, t3.$index(a, great));
              great0 = t2.$sub(great, 1);
              t3.$indexSet(a, great, ak);
              great = great0;
              less = less0;
            } else {
              t3.$indexSet(a, k, t3.$index(a, great));
              great0 = t2.$sub(great, 1);
              t3.$indexSet(a, great, ak);
              great = great0;
            }
            break;
          }
    }
    H.Sort__doSort(a, less, great, compare);
  } else
    H.Sort__doSort(a, less, great, compare);
},

ListIterable: {"": "IterableBase;",
  get$iterator: function(_) {
    var t1 = new H.ListIterator(this, this.get$length(this), 0, null);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
    return t1;
  },
  forEach$1: function(_, action) {
    var $length, i;
    $length = this.get$length(this);
    if (typeof $length !== "number")
      throw H.iae($length);
    i = 0;
    for (; i < $length; ++i) {
      action.call$1(this.elementAt$1(this, i));
      if ($length !== this.get$length(this))
        throw H.wrapException(P.ConcurrentModificationError$(this));
    }
  },
  get$isEmpty: function(_) {
    return J.$eq(this.get$length(this), 0);
  },
  "+isEmpty": 0,
  get$first: function(_) {
    if (J.$eq(this.get$length(this), 0))
      throw H.wrapException(new P.StateError("No elements"));
    return this.elementAt$1(this, 0);
  },
  get$last: function(_) {
    if (J.$eq(this.get$length(this), 0))
      throw H.wrapException(new P.StateError("No elements"));
    return this.elementAt$1(this, J.$sub$n(this.get$length(this), 1));
  },
  get$single: function(_) {
    if (J.$eq(this.get$length(this), 0))
      throw H.wrapException(new P.StateError("No elements"));
    if (J.$gt$n(this.get$length(this), 1))
      throw H.wrapException(new P.StateError("Too many elements"));
    return this.elementAt$1(this, 0);
  },
  contains$1: function(_, element) {
    var $length, i;
    $length = this.get$length(this);
    if (typeof $length !== "number")
      throw H.iae($length);
    i = 0;
    for (; i < $length; ++i) {
      if (J.$eq(this.elementAt$1(this, i), element))
        return true;
      if ($length !== this.get$length(this))
        throw H.wrapException(P.ConcurrentModificationError$(this));
    }
    return false;
  },
  any$1: function(_, test) {
    var $length, i;
    $length = this.get$length(this);
    if (typeof $length !== "number")
      throw H.iae($length);
    i = 0;
    for (; i < $length; ++i) {
      if (test.call$1(this.elementAt$1(this, i)) === true)
        return true;
      if ($length !== this.get$length(this))
        throw H.wrapException(P.ConcurrentModificationError$(this));
    }
    return false;
  },
  firstWhere$2$orElse: function(_, test, orElse) {
    var $length, i, element;
    $length = this.get$length(this);
    if (typeof $length !== "number")
      throw H.iae($length);
    i = 0;
    for (; i < $length; ++i) {
      element = this.elementAt$1(this, i);
      if (test.call$1(element) === true)
        return element;
      if ($length !== this.get$length(this))
        throw H.wrapException(P.ConcurrentModificationError$(this));
    }
    return orElse.call$0();
  },
  firstWhere$1: function($receiver, test) {
    return this.firstWhere$2$orElse($receiver, test, null);
  },
  join$1: function(_, separator) {
    var $length, t1, first, buffer, i, str;
    $length = this.get$length(this);
    if (separator.length !== 0) {
      t1 = J.getInterceptor($length);
      if (t1.$eq($length, 0))
        return "";
      first = H.S(this.elementAt$1(this, 0));
      if (!t1.$eq($length, this.get$length(this)))
        throw H.wrapException(P.ConcurrentModificationError$(this));
      buffer = P.StringBuffer$(first);
      if (typeof $length !== "number")
        throw H.iae($length);
      i = 1;
      for (; i < $length; ++i) {
        buffer._contents = buffer._contents + separator;
        str = this.elementAt$1(this, i);
        str = typeof str === "string" ? str : H.S(str);
        buffer._contents = buffer._contents + str;
        if ($length !== this.get$length(this))
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
      return buffer._contents;
    } else {
      buffer = P.StringBuffer$("");
      if (typeof $length !== "number")
        throw H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        str = this.elementAt$1(this, i);
        str = typeof str === "string" ? str : H.S(str);
        buffer._contents = buffer._contents + str;
        if ($length !== this.get$length(this))
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
      return buffer._contents;
    }
  },
  where$1: function(_, test) {
    return P.IterableBase.prototype.where$1.call(this, this, test);
  },
  map$1: function(_, f) {
    var t1 = new H.MappedListIterable(this, f);
    H.setRuntimeTypeInfo(t1, [null, null]);
    return t1;
  },
  fold$2: function(_, initialValue, combine) {
    var $length, value, i;
    $length = this.get$length(this);
    if (typeof $length !== "number")
      throw H.iae($length);
    value = initialValue;
    i = 0;
    for (; i < $length; ++i) {
      value = combine.call$2(value, this.elementAt$1(this, i));
      if ($length !== this.get$length(this))
        throw H.wrapException(P.ConcurrentModificationError$(this));
    }
    return value;
  },
  toList$1$growable: function(_, growable) {
    var result, i, t1;
    if (growable) {
      result = P.List_List(null, H.getRuntimeTypeArgument(this, "ListIterable", 0));
      H.setRuntimeTypeInfo(result, [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
      C.JSArray_methods.set$length(result, this.get$length(this));
    } else {
      result = P.List_List(this.get$length(this), H.getRuntimeTypeArgument(this, "ListIterable", 0));
      H.setRuntimeTypeInfo(result, [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
    }
    i = 0;
    while (true) {
      t1 = this.get$length(this);
      if (typeof t1 !== "number")
        throw H.iae(t1);
      if (!(i < t1))
        break;
      t1 = this.elementAt$1(this, i);
      if (i >= result.length)
        throw H.ioore(result, i);
      result[i] = t1;
      ++i;
    }
    return result;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  $asIterableBase: null,
  $asIterable: null,
  $isEfficientLength: true
},

SubListIterable: {"": "ListIterable;_iterable,_start,_endOrLength",
  get$_endIndex: function() {
    var $length, t1;
    $length = J.get$length$asx(this._iterable);
    t1 = this._endOrLength;
    if (t1 == null || J.$gt$n(t1, $length))
      return $length;
    return t1;
  },
  get$_startIndex: function() {
    var $length, t1;
    $length = J.get$length$asx(this._iterable);
    t1 = this._start;
    if (typeof $length !== "number")
      throw H.iae($length);
    if (t1 > $length)
      return $length;
    return t1;
  },
  get$length: function(_) {
    var $length, t1, t2;
    $length = J.get$length$asx(this._iterable);
    t1 = this._start;
    if (typeof $length !== "number")
      throw H.iae($length);
    if (t1 >= $length)
      return 0;
    t2 = this._endOrLength;
    if (t2 == null || J.$ge$n(t2, $length))
      return $length - t1;
    return J.$sub$n(t2, t1);
  },
  "+length": 0,
  elementAt$1: function(_, index) {
    var realIndex = J.$add$ns(this.get$_startIndex(), index);
    if (J.$lt$n(index, 0) || J.$ge$n(realIndex, this.get$_endIndex()))
      throw H.wrapException(P.RangeError$range(index, 0, this.get$length(this)));
    return J.elementAt$1$ax(this._iterable, realIndex);
  },
  SubListIterable$3: function(_iterable, _start, _endOrLength, $E) {
    var t1, t2;
    t1 = this._start;
    if (t1 < 0)
      throw H.wrapException(new P.RangeError("value " + t1));
    t2 = this._endOrLength;
    if (t2 != null) {
      if (J.$lt$n(t2, 0))
        throw H.wrapException(new P.RangeError("value " + H.S(t2)));
      if (typeof t2 !== "number")
        throw H.iae(t2);
      if (t1 > t2)
        throw H.wrapException(P.RangeError$range(t1, 0, t2));
    }
  },
  $asListIterable: null,
  $asIterable: null,
  static: {
SubListIterable$: function(_iterable, _start, _endOrLength, $E) {
  var t1 = new H.SubListIterable(_iterable, _start, _endOrLength);
  H.setRuntimeTypeInfo(t1, [$E]);
  t1.SubListIterable$3(_iterable, _start, _endOrLength, $E);
  return t1;
}}

},

ListIterator: {"": "Object;_iterable,_length,_index,_current",
  get$current: function() {
    return this._current;
  },
  "+current": 0,
  moveNext$0: function() {
    var t1, t2, $length, t3;
    t1 = this._iterable;
    t2 = J.getInterceptor$asx(t1);
    $length = t2.get$length(t1);
    if (!J.$eq(this._length, $length))
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    t3 = this._index;
    if (typeof $length !== "number")
      throw H.iae($length);
    if (t3 >= $length) {
      this._current = null;
      return false;
    }
    this._current = t2.elementAt$1(t1, t3);
    this._index = this._index + 1;
    return true;
  }
},

MappedIterable: {"": "IterableBase;_iterable,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$iterator: function(_) {
    var t1 = this._iterable;
    t1 = t1.get$iterator(t1);
    t1 = new H.MappedIterator(null, t1, this._f);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "MappedIterable", 0), H.getRuntimeTypeArgument(this, "MappedIterable", 1)]);
    return t1;
  },
  get$length: function(_) {
    var t1 = this._iterable;
    return t1.get$length(t1);
  },
  "+length": 0,
  get$isEmpty: function(_) {
    var t1 = this._iterable;
    return t1.get$isEmpty(t1);
  },
  "+isEmpty": 0,
  get$first: function(_) {
    var t1 = this._iterable;
    return this._f$1(t1.get$first(t1));
  },
  get$last: function(_) {
    var t1 = this._iterable;
    return this._f$1(t1.get$last(t1));
  },
  get$single: function(_) {
    var t1 = this._iterable;
    return this._f$1(t1.get$single(t1));
  },
  elementAt$1: function(_, index) {
    var t1 = this._iterable;
    return this._f$1(t1.elementAt$1(t1, index));
  },
  $asIterableBase: function($S, $T) {
    return [$T];
  },
  $asIterable: function($S, $T) {
    return [$T];
  },
  static: {
MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
  var t1;
  if (!!iterable.$isEfficientLength) {
    t1 = new H.EfficientLengthMappedIterable(iterable, $function);
    H.setRuntimeTypeInfo(t1, [$S, $T]);
    return t1;
  }
  t1 = new H.MappedIterable(iterable, $function);
  H.setRuntimeTypeInfo(t1, [$S, $T]);
  return t1;
}}

},

EfficientLengthMappedIterable: {"": "MappedIterable;_iterable,_f", $asMappedIterable: null,
  $asIterable: function($S, $T) {
    return [$T];
  },
  $isEfficientLength: true
},

MappedIterator: {"": "Iterator;_current,_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    var t1 = this._iterator;
    if (t1.moveNext$0()) {
      this._current = this._f$1(t1.get$current());
      return true;
    }
    this._current = null;
    return false;
  },
  get$current: function() {
    return this._current;
  },
  "+current": 0,
  $asIterator: function($S, $T) {
    return [$T];
  }
},

MappedListIterable: {"": "ListIterable;_source,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$length: function(_) {
    return J.get$length$asx(this._source);
  },
  "+length": 0,
  elementAt$1: function(_, index) {
    return this._f$1(J.elementAt$1$ax(this._source, index));
  },
  $asListIterable: function($S, $T) {
    return [$T];
  },
  $asIterable: function($S, $T) {
    return [$T];
  },
  $isEfficientLength: true
},

WhereIterable: {"": "IterableBase;_iterable,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$iterator: function(_) {
    var t1 = J.get$iterator$ax(this._iterable);
    t1 = new H.WhereIterator(t1, this._f);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "WhereIterable", 0)]);
    return t1;
  },
  $asIterableBase: null,
  $asIterable: null
},

WhereIterator: {"": "Iterator;_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    for (var t1 = this._iterator; t1.moveNext$0();)
      if (this._f$1(t1.get$current()) === true)
        return true;
    return false;
  },
  get$current: function() {
    return this._iterator.get$current();
  },
  "+current": 0,
  $asIterator: null
},

ExpandIterable: {"": "IterableBase;_iterable,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$iterator: function(_) {
    var t1 = J.get$iterator$ax(this._iterable);
    t1 = new H.ExpandIterator(t1, this._f, C.C_EmptyIterator, null);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "ExpandIterable", 0), H.getRuntimeTypeArgument(this, "ExpandIterable", 1)]);
    return t1;
  },
  $asIterableBase: function($S, $T) {
    return [$T];
  },
  $asIterable: function($S, $T) {
    return [$T];
  }
},

ExpandIterator: {"": "Object;_iterator,_f,_currentExpansion,_current",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$current: function() {
    return this._current;
  },
  "+current": 0,
  moveNext$0: function() {
    if (this._currentExpansion == null)
      return false;
    for (var t1 = this._iterator; !this._currentExpansion.moveNext$0();) {
      this._current = null;
      if (t1.moveNext$0()) {
        this._currentExpansion = null;
        this._currentExpansion = J.get$iterator$ax(this._f$1(t1.get$current()));
      } else
        return false;
    }
    this._current = this._currentExpansion.get$current();
    return true;
  }
},

EmptyIterator: {"": "Object;",
  moveNext$0: function() {
    return false;
  },
  get$current: function() {
    return;
  },
  "+current": 0
},

FixedLengthListMixin: {"": "Object;",
  set$length: function(receiver, newLength) {
    throw H.wrapException(P.UnsupportedError$("Cannot change the length of a fixed-length list"));
  },
  "+length=": 0,
  add$1: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
  },
  get$add: function(_receiver) {
    return new J.BoundClosure$i1(this, H.FixedLengthListMixin.prototype.add$1, _receiver, "add$1");
  },
  addAll$1: function(receiver, iterable) {
    throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
  },
  remove$1: function(receiver, element) {
    throw H.wrapException(P.UnsupportedError$("Cannot remove from a fixed-length list"));
  }
},

UnmodifiableListMixin: {"": "Object;",
  $indexSet: function(_, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
  },
  "+[]=:2:0": 0,
  set$length: function(_, newLength) {
    throw H.wrapException(P.UnsupportedError$("Cannot change the length of an unmodifiable list"));
  },
  "+length=": 0,
  add$1: function(_, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot add to an unmodifiable list"));
  },
  get$add: function(_receiver) {
    return new J.BoundClosure$i1(this, H.UnmodifiableListMixin.prototype.add$1, _receiver, "add$1");
  },
  addAll$1: function(_, iterable) {
    throw H.wrapException(P.UnsupportedError$("Cannot add to an unmodifiable list"));
  },
  remove$1: function(_, element) {
    throw H.wrapException(P.UnsupportedError$("Cannot remove from an unmodifiable list"));
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
  },
  $isList: true,
  $asList: null,
  $isEfficientLength: true,
  $isIterable: true,
  $asIterable: null
},

UnmodifiableListBase: {"": "ListBase+UnmodifiableListMixin;", $asListBase: null, $asList: null, $asIterable: null, $isList: true, $isEfficientLength: true, $isIterable: true},

ReversedListIterable: {"": "ListIterable;_source",
  get$length: function(_) {
    return J.get$length$asx(this._source);
  },
  "+length": 0,
  elementAt$1: function(_, index) {
    var t1, t2;
    t1 = this._source;
    t2 = J.getInterceptor$asx(t1);
    return t2.elementAt$1(t1, J.$sub$n(J.$sub$n(t2.get$length(t1), 1), index));
  },
  $asListIterable: null,
  $asIterable: null
},

Symbol0: {"": "Object;_name>",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$isSymbol0 && J.$eq(this._name, other._name);
  },
  get$hashCode: function(_) {
    return 536870911 & 664597 * J.get$hashCode$(this._name);
  },
  toString$0: function(_) {
    return "Symbol(\"" + H.S(this._name) + "\")";
  },
  $isSymbol0: true,
  $isSymbol: true,
  static: {
"": "Symbol_validationPattern",
Symbol_validate: function($name) {
  var t1 = J.getInterceptor$asx($name);
  if (t1.get$isEmpty($name) === true)
    return $name;
  if (t1.startsWith$1($name, "_"))
    throw H.wrapException(new P.ArgumentError("\"" + H.S($name) + "\" is a private identifier"));
  t1 = $.get$Symbol_validationPattern()._nativeRegExp;
  if (typeof $name !== "string")
    H.throwExpression(new P.ArgumentError($name));
  if (!t1.test($name))
    throw H.wrapException(new P.ArgumentError("\"" + H.S($name) + "\" is not an identifier or an empty String"));
  return $name;
}}

}}],
["dart._js_mirrors", "dart:_js_mirrors", , H, {
s: function($name) {
  if ($name == null)
    return;
  return new H.Symbol0($name);
},

setterSymbol: function(symbol) {
  return H.s(H.S(J.get$_name$x(symbol)) + "=");
},

reflect: function(reflectee) {
  var t1 = J.getInterceptor(reflectee);
  if (typeof reflectee === "object" && reflectee !== null && !!t1.$isClosure)
    return new H.JsClosureMirror(reflectee);
  else
    return new H.JsInstanceMirror(reflectee);
},

reflectClassByMangledName: function(mangledName) {
  var t1, unmangledName;
  t1 = $.get$mangledGlobalNames();
  unmangledName = t1.$index(t1, mangledName);
  return H.reflectClassByName(H.s(unmangledName == null ? mangledName : unmangledName), mangledName);
},

reflectClassByName: function(symbol, mangledName) {
  var mirror, t1, typeArgIndex, t2, constructorOrInterceptor, index, $constructor, descriptor, fields, fieldsMetadata, mixins;
  if ($.classMirrors == null)
    $.classMirrors = H.JsCache_allocate();
  mirror = $.classMirrors[mangledName];
  if (mirror != null)
    return mirror;
  t1 = J.getInterceptor$asx(mangledName);
  typeArgIndex = t1.indexOf$1(mangledName, "<");
  if (typeArgIndex !== -1) {
    t2 = H.reflectClassByMangledName(t1.substring$2(mangledName, 0, typeArgIndex));
    mirror = new H.JsTypeBoundClassMirror(t2, t1.substring$2(mangledName, typeArgIndex + 1, J.$sub$n(t1.get$length(mangledName), 1)), null, null, null, null, null, t2.get$simpleName());
    $.classMirrors[mangledName] = mirror;
    return mirror;
  }
  constructorOrInterceptor = H.Primitives_getConstructorOrInterceptor(mangledName);
  if (constructorOrInterceptor == null) {
    index = init.functionAliases[mangledName];
    if (index != null) {
      mirror = new H.JsTypedefMirror(mangledName, null, symbol);
      mirror.referent = new H.JsFunctionTypeMirror(init.metadata[index], null, null, null, mirror);
      $.classMirrors[mangledName] = mirror;
      return mirror;
    }
    throw H.wrapException(P.UnsupportedError$("Cannot find class for: " + H.S(symbol._name)));
  }
  t1 = J.getInterceptor(constructorOrInterceptor);
  $constructor = typeof constructorOrInterceptor === "object" && constructorOrInterceptor !== null && !!t1.$isInterceptor ? constructorOrInterceptor.constructor : constructorOrInterceptor;
  descriptor = $constructor["@"];
  if (descriptor == null) {
    fields = null;
    fieldsMetadata = null;
  } else {
    fields = descriptor[""];
    t1 = J.getInterceptor$asx(fields);
    if (typeof fields === "object" && fields !== null && (fields.constructor === Array || !!t1.$isList)) {
      t2 = t1.getRange$2(fields, 1, t1.get$length(fields));
      fieldsMetadata = t2.toList$0(t2);
      fields = t1.$index(fields, 0);
    } else
      fieldsMetadata = null;
    if (typeof fields !== "string")
      fields = "";
  }
  t1 = J.split$1$s(fields, ";");
  if (0 >= t1.length)
    throw H.ioore(t1, 0);
  mixins = J.split$1$s(t1[0], "+");
  if (mixins.length > 1) {
    t1 = $.get$mangledGlobalNames();
    t1 = t1.$index(t1, mangledName) == null;
  } else
    t1 = false;
  mirror = t1 ? H.reflectMixinApplication(mixins, mangledName) : new H.JsClassMirror(mangledName, constructorOrInterceptor, fields, fieldsMetadata, H.JsCache_allocate(), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, symbol);
  $.classMirrors[mangledName] = mirror;
  return mirror;
},

filterMethods: function(methods) {
  var result, t1, method;
  result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
  for (t1 = J.get$iterator$ax(methods); t1.moveNext$0();) {
    method = t1.get$current();
    if (!method.get$isConstructor() && !method.get$isGetter() && !method.get$isSetter())
      result.$indexSet(result, method.get$simpleName(), method);
  }
  return result;
},

filterGetters: function(methods, fields) {
  var result, t1, t2, method;
  result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
  for (t1 = J.get$iterator$ax(methods), t2 = J.getInterceptor$asx(fields); t1.moveNext$0();) {
    method = t1.get$current();
    if (method.get$isGetter()) {
      if (t2.$index(fields, method.get$simpleName()) != null)
        continue;
      result.$indexSet(result, method.get$simpleName(), method);
    }
  }
  return result;
},

filterSetters: function(methods, fields) {
  var result, t1, t2, method, $name, t3;
  result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
  for (t1 = J.get$iterator$ax(methods), t2 = J.getInterceptor$asx(fields); t1.moveNext$0();) {
    method = t1.get$current();
    if (method.get$isSetter()) {
      $name = J.get$_name$x(method.get$simpleName());
      t3 = J.getInterceptor$asx($name);
      if (t2.$index(fields, H.s(t3.substring$2($name, 0, J.$sub$n(t3.get$length($name), 1)))) != null)
        continue;
      result.$indexSet(result, method.get$simpleName(), method);
    }
  }
  return result;
},

reflectMixinApplication: function(mixinNames, mangledName) {
  var mixins, t1, mangledName0, t2, unmangledName, it, superclass;
  mixins = [];
  for (t1 = new H.ListIterator(mixinNames, mixinNames.length, 0, null), H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(mixinNames, "JSArray", 0)]); t1.moveNext$0();) {
    mangledName0 = t1._current;
    t2 = $.get$mangledGlobalNames();
    unmangledName = t2.$index(t2, mangledName0);
    mixins.push(H.reflectClassByName(H.s(unmangledName == null ? mangledName0 : unmangledName), mangledName0));
  }
  it = new H.ListIterator(mixins, mixins.length, 0, null);
  H.setRuntimeTypeInfo(it, [H.getRuntimeTypeArgument(mixins, "JSArray", 0)]);
  it.moveNext$0();
  superclass = it._current;
  for (; it.moveNext$0();)
    superclass = new H.JsMixinApplication(superclass, it._current, null, H.s(mangledName));
  return superclass;
},

typeMirrorFromRuntimeTypeRepresentation: function(type) {
  var representation;
  if (type == null)
    return $.get$JsMirrorSystem__dynamicType();
  representation = H.runtimeTypeToString(type);
  if (representation == null)
    return P.reflectClass(C.Type_EjN);
  return H.reflectClassByMangledName(new H.TypeImpl(representation, null)._typeName);
},

computeTypeMirror: function(owner, type) {
  var context, ownerClass, t1, $name, typeVariables, i, t2;
  if (typeof type !== "number" || Math.floor(type) !== type)
    return H.typeMirrorFromRuntimeTypeRepresentation(type);
  for (context = owner; ownerClass = null, context != null;) {
    t1 = J.getInterceptor(context);
    if (typeof context === "object" && context !== null && !!t1.$isClassMirror) {
      ownerClass = context;
      break;
    }
    context = context.get$owner();
  }
  $name = new H.Symbol0(H.Symbol_validate(J.get$name$x(init.metadata[type])));
  typeVariables = ownerClass.get$typeVariables();
  t1 = J.getInterceptor$asx(typeVariables);
  i = 0;
  while (true) {
    t2 = t1.get$length(typeVariables);
    if (typeof t2 !== "number")
      throw H.iae(t2);
    if (!(i < t2))
      break;
    if (J.$eq(t1.$index(typeVariables, i).get$simpleName(), $name))
      if (ownerClass.get$isOriginalDeclaration())
        return t1.$index(typeVariables, i);
      else
        return J.$index$asx(ownerClass.get$typeArguments(), i);
    ++i;
  }
},

computeQualifiedName: function(owner, simpleName) {
  if (owner == null)
    return simpleName;
  return H.s(H.S(J.get$_name$x(owner.get$qualifiedName())) + "." + H.S(J.get$_name$x(simpleName)));
},

extractMetadata: function(victim) {
  var metadataFunction, source, index, t1;
  metadataFunction = victim["@"];
  if (metadataFunction != null)
    return metadataFunction();
  if (typeof victim !== "function")
    return C.List_empty;
  source = Function.prototype.toString.call(victim);
  index = C.JSString_methods.lastIndexOf$1(source, new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("\"[0-9,]*\";?[ \n\r]*}", false, true, false), null, null));
  if (index === -1)
    return C.List_empty;
  ++index;
  t1 = new H.MappedListIterable(C.JSString_methods.substring$2(source, index, C.JSString_methods.indexOf$2(source, "\"", index)).split(","), P.int_parse$closure);
  H.setRuntimeTypeInfo(t1, [null, null]);
  t1 = new H.MappedListIterable(t1, new H.extractMetadata_closure());
  H.setRuntimeTypeInfo(t1, [null, null]);
  return t1.toList$0(t1);
},

parseCompactFieldSpecification: function(owner, fieldSpecification, isStatic, result) {
  var t1, fieldNames, fieldsMetadata, t2, fieldNumber, field, fieldNumber0, metadata, mirror;
  t1 = J.getInterceptor$asx(fieldSpecification);
  if (typeof fieldSpecification === "object" && fieldSpecification !== null && (fieldSpecification.constructor === Array || !!t1.$isList)) {
    fieldNames = H.splitFields(t1.$index(fieldSpecification, 0), ",");
    fieldsMetadata = t1.sublist$1(fieldSpecification, 1);
  } else {
    fieldNames = typeof fieldSpecification === "string" ? H.splitFields(fieldSpecification, ",") : [];
    fieldsMetadata = null;
  }
  for (t1 = new H.ListIterator(fieldNames, fieldNames.length, 0, null), H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(fieldNames, "JSArray", 0)]), t2 = fieldsMetadata != null, fieldNumber = 0; t1.moveNext$0();) {
    field = t1._current;
    if (t2) {
      fieldNumber0 = fieldNumber + 1;
      if (fieldNumber >= fieldsMetadata.length)
        throw H.ioore(fieldsMetadata, fieldNumber);
      metadata = fieldsMetadata[fieldNumber];
      fieldNumber = fieldNumber0;
    } else
      metadata = null;
    mirror = H.JsVariableMirror_JsVariableMirror$from(field, metadata, owner, isStatic);
    if (mirror != null)
      result.push(mirror);
  }
},

splitFields: function(string, pattern) {
  var t1 = J.getInterceptor$asx(string);
  if (t1.get$isEmpty(string) === true)
    return [];
  return t1.split$1(string, pattern);
},

isOperatorName: function($name) {
  switch ($name) {
    case "==":
    case "[]":
    case "*":
    case "/":
    case "%":
    case "~/":
    case "+":
    case "<<":
    case ">>":
    case ">=":
    case ">":
    case "<=":
    case "<":
    case "&":
    case "^":
    case "|":
    case "-":
    case "unary-":
    case "[]=":
    case "~":
      return true;
    default:
      return false;
  }
},

isReflectiveDataInPrototype: function(key) {
  var t1, firstChar;
  t1 = J.getInterceptor(key);
  if (t1.$eq(key, "") || t1.$eq(key, "$methodsWithOptionalArguments"))
    return true;
  firstChar = t1.$index(key, 0);
  t1 = J.getInterceptor(firstChar);
  return t1.$eq(firstChar, "*") || t1.$eq(firstChar, "+");
},

JsMirrorSystem: {"": "Object;_cachedLibraries,isolate",
  get$libraries: function() {
    var t1, result, t2, library;
    t1 = this._cachedLibraries;
    if (t1 != null)
      return t1;
    result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    for (t1 = $.get$JsMirrorSystem_librariesByName(), t1 = t1.get$values(t1), t2 = t1._iterable, t2 = t2.get$iterator(t2), t2 = new H.MappedIterator(null, t2, t1._f), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "MappedIterable", 0), H.getRuntimeTypeArgument(t1, "MappedIterable", 1)]); t2.moveNext$0();)
      for (t1 = J.get$iterator$ax(t2._current); t1.moveNext$0();) {
        library = t1.get$current();
        result.$indexSet(result, library.get$uri(), library);
      }
    t1 = new H.UnmodifiableMapView(result);
    H.setRuntimeTypeInfo(t1, [P.Uri, P.LibraryMirror]);
    this._cachedLibraries = t1;
    return t1;
  },
  static: {
"": "JsMirrorSystem__dynamicType,JsMirrorSystem__voidType,JsMirrorSystem_librariesByName",
JsMirrorSystem_computeLibrariesByName: function() {
  var result, jsLibraries, t1, data, t2, $name, t3, uri, classes, functions, metadataFunction, fields, isRoot, globalObject, metadata;
  result = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, [J.JSArray, P.LibraryMirror]);
  jsLibraries = init.libraries;
  if (jsLibraries == null)
    return result;
  for (jsLibraries.toString, t1 = new H.ListIterator(jsLibraries, jsLibraries.length, 0, null), H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(jsLibraries, "JSArray", 0)]); t1.moveNext$0();) {
    data = t1._current;
    t2 = J.getInterceptor$asx(data);
    $name = t2.$index(data, 0);
    t3 = t2.$index(data, 1);
    uri = P.Uri$_fromMatch($.get$Uri__splitRe().firstMatch$1(t3));
    classes = t2.$index(data, 2);
    functions = t2.$index(data, 3);
    metadataFunction = t2.$index(data, 4);
    fields = t2.$index(data, 5);
    isRoot = t2.$index(data, 6);
    globalObject = t2.$index(data, 7);
    metadata = metadataFunction == null ? C.List_empty : metadataFunction();
    J.add$1$ax(result.putIfAbsent$2($name, new H.JsMirrorSystem_computeLibrariesByName_closure()), new H.JsLibraryMirror(uri, classes, functions, metadata, fields, isRoot, globalObject, null, null, null, null, null, null, null, null, null, null, H.s($name)));
  }
  return result;
}}

},

JsMirrorSystem_computeLibrariesByName_closure: {"": "Closure;",
  call$0: function() {
    return [];
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

JsMirror: {"": "Object;",
  toString$0: function(_) {
    return this.get$_prettyName();
  },
  _getField$1: function(receiver) {
    throw H.wrapException(P.UnimplementedError$(null));
  },
  _setField$2: function(receiver, arg) {
    throw H.wrapException(P.UnimplementedError$(null));
  },
  $isMirror: true
},

JsIsolateMirror: {"": "JsMirror;_isolateContext",
  get$_prettyName: function() {
    return "Isolate";
  },
  get$rootLibrary: function() {
    var t1 = $.get$currentJsMirrorSystem().get$libraries().__js_mirrors$_source;
    t1 = t1.get$values(t1);
    return t1.firstWhere$1(t1, new H.JsIsolateMirror_rootLibrary_closure());
  },
  $isMirror: true
},

JsIsolateMirror_rootLibrary_closure: {"": "Closure;",
  call$1: function(library) {
    return library.get$_isRoot();
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

JsDeclarationMirror: {"": "JsMirror;simpleName<",
  get$qualifiedName: function() {
    return H.computeQualifiedName(this.get$owner(), this.get$simpleName());
  },
  get$isPrivate: function() {
    return J.startsWith$1$s(J.get$_name$x(this.get$simpleName()), "_");
  },
  toString$0: function(_) {
    return this.get$_prettyName() + " on '" + H.S(J.get$_name$x(this.get$simpleName())) + "'";
  },
  get$_methods: function() {
    throw H.wrapException(H.RuntimeError$("Should not call _methods"));
  },
  _invoke$2: function(positionalArguments, namedArguments) {
    throw H.wrapException(H.RuntimeError$("Should not call _invoke"));
  },
  get$location: function(_) {
    return H.throwExpression(P.UnimplementedError$(null));
  },
  $isMirror: true
},

JsTypeVariableMirror: {"": "JsTypeMirror;owner<,_typeVariable,_cachedUpperBound,simpleName",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    if (typeof other === "object" && other !== null && !!t1.$isJsTypeVariableMirror)
      t1 = J.$eq(this.simpleName, other.simpleName) && J.$eq(this.owner, other.owner);
    else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    return (1073741823 & J.get$hashCode$(C.Type_AGr._typeName) ^ 17 * J.get$hashCode$(this.simpleName) ^ 19 * J.get$hashCode$(this.owner)) >>> 0;
  },
  get$_prettyName: function() {
    return "TypeVariableMirror";
  },
  $isJsTypeVariableMirror: true,
  $isMirror: true
},

JsTypeMirror: {"": "JsDeclarationMirror;simpleName",
  get$_prettyName: function() {
    return "TypeMirror";
  },
  get$owner: function() {
    return;
  },
  get$metadata: function() {
    return H.throwExpression(P.UnimplementedError$(null));
  },
  get$typeVariables: function() {
    return H.throwExpression(P.UnimplementedError$(null));
  },
  get$typeArguments: function() {
    return H.throwExpression(P.UnimplementedError$(null));
  },
  get$isOriginalDeclaration: function() {
    return true;
  },
  get$originalDeclaration: function() {
    return this;
  },
  $isMirror: true
},

JsLibraryMirror: {"": "JsDeclarationMirror_JsObjectMirror;uri<,_classes,_functions,_metadata,_compactFieldSpecification,_isRoot<,_globalObject<,_cachedFunctionMirrors,_cachedFields,_cachedClasses,_cachedFunctions,_cachedGetters,_cachedSetters,_cachedVariables,_cachedMembers,_cachedDeclarations,_cachedMetadata,simpleName",
  get$_prettyName: function() {
    return "LibraryMirror";
  },
  get$qualifiedName: function() {
    return this.simpleName;
  },
  get$_methods: function() {
    return this.get$_functionMirrors();
  },
  get$classes: function(_) {
    var t1, result, className, t2, unmangledName, cls;
    t1 = this._cachedClasses;
    if (t1 != null)
      return t1;
    result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    for (t1 = J.get$iterator$ax(this._classes); t1.moveNext$0();) {
      className = t1.get$current();
      t2 = $.get$mangledGlobalNames();
      unmangledName = t2.$index(t2, className);
      cls = H.reflectClassByName(H.s(unmangledName == null ? className : unmangledName), className);
      t2 = J.getInterceptor(cls);
      if (typeof cls === "object" && cls !== null && !!t2.$isJsClassMirror) {
        result.$indexSet(result, cls.simpleName, cls);
        cls._owner = this;
      }
    }
    t1 = new H.UnmodifiableMapView(result);
    H.setRuntimeTypeInfo(t1, [P.Symbol, P.ClassMirror]);
    this._cachedClasses = t1;
    return t1;
  },
  setField$2: function(fieldName, arg) {
    var $name, t1, t2, mirror;
    $name = J.get$_name$x(fieldName);
    J.endsWith$1$s($name, "=");
    t1 = this.get$functions();
    t2 = H.s(H.S($name) + "=");
    t1 = t1.__js_mirrors$_source;
    mirror = t1.$index(t1, t2);
    if (mirror == null) {
      t1 = this.get$variables().__js_mirrors$_source;
      mirror = t1.$index(t1, fieldName);
    }
    if (mirror == null)
      throw H.wrapException(P.NoSuchMethodError$(this, H.setterSymbol(fieldName), [arg], null, null));
    mirror._setField$2(this, arg);
    return H.reflect(arg);
  },
  "+setField:2:0": 0,
  getField$1: function(fieldName) {
    var t1, mirror;
    t1 = this.get$members().__js_mirrors$_source;
    mirror = t1.$index(t1, fieldName);
    if (mirror == null)
      throw H.wrapException(P.NoSuchMethodError$(this, fieldName, [], null, null));
    return H.reflect(mirror._getField$1(this));
  },
  "+getField:1:0": 0,
  invoke$3: function(memberName, positionalArguments, namedArguments) {
    var t1, mirror;
    t1 = this.get$members().__js_mirrors$_source;
    mirror = t1.$index(t1, memberName);
    if (mirror == null)
      throw H.wrapException(P.NoSuchMethodError$(this, memberName, positionalArguments, namedArguments, null));
    t1 = J.getInterceptor(mirror);
    if (typeof mirror === "object" && mirror !== null && !!t1.$isJsMethodMirror)
      if (!("$reflectable" in mirror._jsFunction))
        H.throwInvalidReflectionError(J.get$_name$x(memberName));
    return H.reflect(mirror._invoke$2(positionalArguments, namedArguments));
  },
  "+invoke:3:0": 0,
  "*invoke": [11],
  invoke$2: function(memberName, positionalArguments) {
    return this.invoke$3(memberName, positionalArguments, null);
  },
  "+invoke:2:0": 0,
  _loadField$1: function($name) {
    return $[$name];
  },
  _storeField$2: function($name, arg) {
    $[$name] = arg;
  },
  get$_functionMirrors: function() {
    var t1, result, t2, t3, i, t4, $name, jsFunction, unmangledName, isConstructor, mirror;
    t1 = this._cachedFunctionMirrors;
    if (t1 != null)
      return t1;
    result = P.List_List(null, H.JsMethodMirror);
    H.setRuntimeTypeInfo(result, [H.JsMethodMirror]);
    t1 = this._functions;
    t2 = J.getInterceptor$asx(t1);
    t3 = this._globalObject;
    i = 0;
    while (true) {
      t4 = t2.get$length(t1);
      if (typeof t4 !== "number")
        throw H.iae(t4);
      if (!(i < t4))
        break;
      c$0: {
        $name = t2.$index(t1, i);
        jsFunction = t3[$name];
        t4 = $.get$mangledGlobalNames();
        unmangledName = t4.$index(t4, $name);
        if (unmangledName == null)
          break c$0;
        t4 = J.getInterceptor$s(unmangledName);
        isConstructor = t4.startsWith$1(unmangledName, "new ");
        if (isConstructor) {
          t4 = t4.substring$1(unmangledName, 4);
          unmangledName = H.stringReplaceAllUnchecked(t4, "$", ".");
        }
        mirror = H.JsMethodMirror_JsMethodMirror$fromUnmangledName(unmangledName, jsFunction, !isConstructor, isConstructor);
        result.push(mirror);
        mirror._owner = this;
      }
      ++i;
    }
    this._cachedFunctionMirrors = result;
    return result;
  },
  get$_fields: function() {
    var t1, result;
    t1 = this._cachedFields;
    if (t1 != null)
      return t1;
    result = [];
    H.parseCompactFieldSpecification(this, this._compactFieldSpecification, true, result);
    this._cachedFields = result;
    return result;
  },
  get$functions: function() {
    var t1, result, t2, mirror;
    t1 = this._cachedFunctions;
    if (t1 != null)
      return t1;
    result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    for (t1 = this.get$_functionMirrors(), t1.toString, t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();) {
      mirror = t2._current;
      if (!mirror.get$isConstructor())
        result.$indexSet(result, mirror.get$simpleName(), mirror);
    }
    t1 = new H.UnmodifiableMapView(result);
    H.setRuntimeTypeInfo(t1, [P.Symbol, P.MethodMirror]);
    this._cachedFunctions = t1;
    return t1;
  },
  get$getters: function() {
    var t1 = this._cachedGetters;
    if (t1 != null)
      return t1;
    t1 = new H.UnmodifiableMapView(P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    H.setRuntimeTypeInfo(t1, [P.Symbol, P.MethodMirror]);
    this._cachedGetters = t1;
    return t1;
  },
  get$setters: function() {
    var t1 = this._cachedSetters;
    if (t1 != null)
      return t1;
    t1 = new H.UnmodifiableMapView(P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    H.setRuntimeTypeInfo(t1, [P.Symbol, P.MethodMirror]);
    this._cachedSetters = t1;
    return t1;
  },
  get$variables: function() {
    var t1, result, t2, mirror;
    t1 = this._cachedVariables;
    if (t1 != null)
      return t1;
    result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    for (t1 = this.get$_fields(), t1.toString, t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();) {
      mirror = t2._current;
      result.$indexSet(result, mirror.get$simpleName(), mirror);
    }
    t1 = new H.UnmodifiableMapView(result);
    H.setRuntimeTypeInfo(t1, [P.Symbol, P.VariableMirror]);
    this._cachedVariables = t1;
    return t1;
  },
  get$members: function() {
    var t1, result, t2;
    t1 = this._cachedMembers;
    if (t1 != null)
      return t1;
    t1 = this.get$classes(this);
    result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    result.addAll$1(result, t1);
    t1 = new H.JsLibraryMirror_members_addToResult(result);
    t2 = this.get$functions().__js_mirrors$_source;
    t2.forEach$1(t2, t1);
    t2 = this.get$getters().__js_mirrors$_source;
    t2.forEach$1(t2, t1);
    t2 = this.get$setters().__js_mirrors$_source;
    t2.forEach$1(t2, t1);
    t2 = this.get$variables().__js_mirrors$_source;
    t2.forEach$1(t2, t1);
    t1 = new H.UnmodifiableMapView(result);
    H.setRuntimeTypeInfo(t1, [P.Symbol, P.Mirror]);
    this._cachedMembers = t1;
    return t1;
  },
  "+members": 0,
  get$metadata: function() {
    var t1 = this._cachedMetadata;
    if (t1 != null)
      return t1;
    t1 = new P.UnmodifiableListView(J.map$1$ax(this._metadata, H.reflect$closure));
    H.setRuntimeTypeInfo(t1, [P.InstanceMirror]);
    this._cachedMetadata = t1;
    return t1;
  },
  get$owner: function() {
    return;
  },
  $isLibraryMirror: true,
  $isMirror: true
},

JsDeclarationMirror_JsObjectMirror: {"": "JsDeclarationMirror+JsObjectMirror;", $isMirror: true},

JsLibraryMirror_members_addToResult: {"": "Closure;result_0",
  call$2: function(key, value) {
    var t1 = this.result_0;
    t1.$indexSet(t1, key, value);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

JsMixinApplication: {"": "JsTypeMirror_JsObjectMirror;superclass<,mixin,_cachedSimpleName,simpleName",
  get$_prettyName: function() {
    return "ClassMirror";
  },
  get$simpleName: function() {
    var t1, superName;
    t1 = this._cachedSimpleName;
    if (t1 != null)
      return t1;
    superName = J.get$_name$x(this.superclass.get$qualifiedName());
    t1 = this.mixin;
    t1 = J.contains$1$asx(superName, " with ") === true ? H.s(H.S(superName) + ", " + H.S(J.get$_name$x(t1.get$qualifiedName()))) : H.s(H.S(superName) + " with " + H.S(J.get$_name$x(t1.get$qualifiedName())));
    this._cachedSimpleName = t1;
    return t1;
  },
  get$qualifiedName: function() {
    return this.get$simpleName();
  },
  get$members: function() {
    return this.mixin.get$members();
  },
  "+members": 0,
  get$methods: function() {
    return this.mixin.get$methods();
  },
  get$getters: function() {
    return this.mixin.get$getters();
  },
  get$setters: function() {
    return this.mixin.get$setters();
  },
  get$variables: function() {
    return this.mixin.get$variables();
  },
  invoke$3: function(memberName, positionalArguments, namedArguments) {
    throw H.wrapException(P.NoSuchMethodError$(this, memberName, positionalArguments, namedArguments, null));
  },
  "+invoke:3:0": 0,
  "*invoke": [11],
  invoke$2: function(memberName, positionalArguments) {
    return this.invoke$3(memberName, positionalArguments, null);
  },
  "+invoke:2:0": 0,
  getField$1: function(fieldName) {
    throw H.wrapException(P.NoSuchMethodError$(this, fieldName, null, null, null));
  },
  "+getField:1:0": 0,
  setField$2: function(fieldName, arg) {
    throw H.wrapException(P.NoSuchMethodError$(this, H.setterSymbol(fieldName), [arg], null, null));
  },
  "+setField:2:0": 0,
  get$superinterfaces: function() {
    return [this.mixin];
  },
  get$isOriginalDeclaration: function() {
    return true;
  },
  get$originalDeclaration: function() {
    return this;
  },
  get$typeVariables: function() {
    throw H.wrapException(P.UnimplementedError$(null));
  },
  get$typeArguments: function() {
    return P.List_List(null, null);
  },
  $isClassMirror: true,
  $isMirror: true
},

JsTypeMirror_JsObjectMirror: {"": "JsTypeMirror+JsObjectMirror;", $isMirror: true},

JsObjectMirror: {"": "Object;", $isMirror: true},

JsInstanceMirror: {"": "JsObjectMirror;reflectee<",
  get$type: function(_) {
    return H.reflectClassByMangledName(J.get$runtimeType$(this.reflectee)._typeName);
  },
  invoke$3: function(memberName, positionalArguments, namedArguments) {
    var $name, reflectiveName;
    $name = J.get$_name$x(memberName);
    reflectiveName = $name + ":" + positionalArguments.length + ":0";
    return this._invoke$4(memberName, 0, reflectiveName, positionalArguments);
  },
  "+invoke:3:0": 0,
  "*invoke": [11],
  invoke$2: function(memberName, positionalArguments) {
    return this.invoke$3(memberName, positionalArguments, null);
  },
  "+invoke:2:0": 0,
  _invoke$4: function($name, type, reflectiveName, $arguments) {
    var cacheName, t1, cache, cacheEntry, t2, mangledName, argumentNames, invocation;
    cacheName = $.Primitives_mirrorInvokeCacheName;
    t1 = this.reflectee;
    cache = t1.constructor[cacheName];
    if (cache == null) {
      cache = H.JsCache_allocate();
      t1.constructor[cacheName] = cache;
    }
    cacheEntry = cache[reflectiveName];
    if (cacheEntry == null) {
      t2 = $.get$reflectiveNames();
      mangledName = t2.$index(t2, reflectiveName);
      if (type === 0) {
        t2 = H.SubListIterable$(J.split$1$s(reflectiveName, ":"), 3, null, null);
        argumentNames = t2.toList$0(t2);
      } else
        argumentNames = C.List_empty;
      invocation = new H.JSInvocationMirror($name, mangledName, type, $arguments, argumentNames, null);
      cacheEntry = invocation._getCachedInvocation$1(t1);
      cache[reflectiveName] = cacheEntry;
    } else
      invocation = null;
    if (cacheEntry.get$isNoSuchMethod()) {
      if (invocation == null) {
        t2 = $.get$reflectiveNames();
        invocation = new H.JSInvocationMirror($name, t2.$index(t2, reflectiveName), type, $arguments, [], null);
      }
      return H.reflect(cacheEntry.invokeOn$2(t1, invocation));
    } else
      return H.reflect(cacheEntry.invokeOn$2(t1, $arguments));
  },
  setField$2: function(fieldName, arg) {
    var reflectiveName = H.S(J.get$_name$x(fieldName)) + "=";
    this._invoke$4(H.s(reflectiveName), 2, reflectiveName, [arg]);
    return H.reflect(arg);
  },
  "+setField:2:0": 0,
  getField$1: function(fieldName) {
    return this._invoke$4(fieldName, 1, J.get$_name$x(fieldName), []);
  },
  "+getField:1:0": 0,
  $eq: function(_, other) {
    var t1, t2;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    if (typeof other === "object" && other !== null && !!t1.$isJsInstanceMirror) {
      t1 = this.reflectee;
      t2 = other.reflectee;
      t2 = t1 == null ? t2 == null : t1 === t2;
      t1 = t2;
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    return (H.objectHashCode(this.reflectee) ^ 909522486) >>> 0;
  },
  toString$0: function(_) {
    return "InstanceMirror on " + H.S(P.Error_safeToString(this.reflectee));
  },
  $isJsInstanceMirror: true,
  $isInstanceMirror: true,
  $isMirror: true
},

JsInstanceMirror_invoke_closure: {"": "Closure;",
  call$1: function(i) {
    return init.metadata[i];
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

JsInstanceMirror_invoke_closure0: {"": "Closure;defaultArguments_0",
  call$2: function(symbol, value) {
    var parameter, t1;
    parameter = J.get$_name$x(symbol);
    t1 = this.defaultArguments_0;
    if (t1.containsKey$1(parameter))
      t1.$indexSet(t1, parameter, value);
    else
      throw H.wrapException(H.UnimplementedNoSuchMethodError$("Invoking noSuchMethod with named arguments not implemented"));
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

JsTypeBoundClassMirror: {"": "JsDeclarationMirror;_class,_typeArguments,_cachedVariables,_cachedGetters,_cachedSetters,_cachedMethodsMap,_cachedMethods,simpleName",
  get$_prettyName: function() {
    return "ClassMirror";
  },
  get$typeVariables: function() {
    return this._class.get$typeVariables();
  },
  get$typeArguments: function() {
    var t1, result, level, currentTypeArgument, i, t2, character;
    t1 = this._typeArguments;
    if (typeof t1 !== "string")
      return t1;
    result = P.List_List(null, null);
    t1 = new H.JsTypeBoundClassMirror_typeArguments_addTypeArgument(result);
    if (J.indexOf$1$asx(this._typeArguments, "<") === -1)
      H.IterableMixinWorkaround_forEach(J.split$1$s(this._typeArguments, ","), new H.JsTypeBoundClassMirror_typeArguments_closure(t1));
    else {
      level = 0;
      currentTypeArgument = "";
      i = 0;
      while (true) {
        t2 = J.get$length$asx(this._typeArguments);
        if (typeof t2 !== "number")
          throw H.iae(t2);
        if (!(i < t2))
          break;
        c$0: {
          character = J.$index$asx(this._typeArguments, i);
          t2 = J.getInterceptor(character);
          if (t2.$eq(character, " "))
            break c$0;
          else if (t2.$eq(character, "<")) {
            currentTypeArgument = C.JSString_methods.$add(currentTypeArgument, character);
            ++level;
          } else if (t2.$eq(character, ">")) {
            currentTypeArgument = C.JSString_methods.$add(currentTypeArgument, character);
            --level;
          } else if (t2.$eq(character, ","))
            if (level > 0)
              currentTypeArgument = C.JSString_methods.$add(currentTypeArgument, character);
            else {
              t1.call$1(currentTypeArgument);
              currentTypeArgument = "";
            }
          else
            currentTypeArgument = C.JSString_methods.$add(currentTypeArgument, character);
        }
        ++i;
      }
      t1.call$1(currentTypeArgument);
    }
    t1 = new P.UnmodifiableListView(result);
    H.setRuntimeTypeInfo(t1, [null]);
    this._typeArguments = t1;
    return t1;
  },
  get$_methods: function() {
    var t1 = this._cachedMethods;
    if (t1 != null)
      return t1;
    t1 = this._class._getMethodsWithOwner$1(this);
    this._cachedMethods = t1;
    return t1;
  },
  get$methods: function() {
    var t1 = this._cachedMethodsMap;
    if (t1 != null)
      return t1;
    t1 = new H.UnmodifiableMapView(H.filterMethods(this.get$_methods()));
    H.setRuntimeTypeInfo(t1, [P.Symbol, P.MethodMirror]);
    this._cachedMethodsMap = t1;
    return t1;
  },
  get$getters: function() {
    var t1 = this._cachedGetters;
    if (t1 != null)
      return t1;
    t1 = new H.UnmodifiableMapView(H.filterGetters(this.get$_methods(), this.get$variables()));
    H.setRuntimeTypeInfo(t1, [P.Symbol, P.MethodMirror]);
    this._cachedGetters = t1;
    return t1;
  },
  get$setters: function() {
    var t1 = this._cachedSetters;
    if (t1 != null)
      return t1;
    t1 = new H.UnmodifiableMapView(H.filterSetters(this.get$_methods(), this.get$variables()));
    H.setRuntimeTypeInfo(t1, [P.Symbol, P.MethodMirror]);
    this._cachedSetters = t1;
    return t1;
  },
  get$variables: function() {
    var t1, result, t2, mirror;
    t1 = this._cachedVariables;
    if (t1 != null)
      return t1;
    result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    for (t1 = this._class._getFieldsWithOwner$1(this), t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();) {
      mirror = t2._current;
      result.$indexSet(result, mirror.get$simpleName(), mirror);
    }
    t1 = new H.UnmodifiableMapView(result);
    H.setRuntimeTypeInfo(t1, [P.Symbol, P.VariableMirror]);
    this._cachedVariables = t1;
    return t1;
  },
  get$members: function() {
    return this._class.get$members();
  },
  "+members": 0,
  setField$2: function(fieldName, arg) {
    return this._class.setField$2(fieldName, arg);
  },
  "+setField:2:0": 0,
  getField$1: function(fieldName) {
    return this._class.getField$1(fieldName);
  },
  "+getField:1:0": 0,
  get$owner: function() {
    return this._class.get$owner();
  },
  get$metadata: function() {
    return this._class.get$metadata();
  },
  get$superclass: function() {
    return this._class.get$superclass();
  },
  invoke$3: function(memberName, positionalArguments, namedArguments) {
    return this._class.invoke$3(memberName, positionalArguments, namedArguments);
  },
  "+invoke:3:0": 0,
  "*invoke": [11],
  invoke$2: function(memberName, positionalArguments) {
    return this.invoke$3(memberName, positionalArguments, null);
  },
  "+invoke:2:0": 0,
  get$isOriginalDeclaration: function() {
    return false;
  },
  get$originalDeclaration: function() {
    return this._class;
  },
  get$superinterfaces: function() {
    return this._class.get$superinterfaces();
  },
  get$isPrivate: function() {
    return this._class.get$isPrivate();
  },
  get$location: function(_) {
    return J.get$location$x(this._class);
  },
  get$qualifiedName: function() {
    return this._class.get$qualifiedName();
  },
  get$simpleName: function() {
    return this._class.get$simpleName();
  },
  $isClassMirror: true,
  $isMirror: true
},

JsTypeBoundClassMirror_typeArguments_addTypeArgument: {"": "Closure;result_0",
  call$1: function(typeArgument) {
    var parsedIndex, t1, typeVariable;
    parsedIndex = H.Primitives_parseInt(typeArgument, null, new H.JsTypeBoundClassMirror_typeArguments_addTypeArgument_closure());
    t1 = this.result_0;
    if (J.$eq(parsedIndex, -1))
      t1.push(H.reflectClassByMangledName(J.trim$0$s(typeArgument)));
    else {
      typeVariable = init.metadata[parsedIndex];
      t1.push(new H.JsTypeVariableMirror(P.reflectClass(typeVariable.get$owner()), typeVariable, null, H.s(J.get$name$x(typeVariable))));
    }
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

JsTypeBoundClassMirror_typeArguments_addTypeArgument_closure: {"": "Closure;",
  call$1: function(_) {
    return -1;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

JsTypeBoundClassMirror_typeArguments_closure: {"": "Closure;addTypeArgument_1",
  call$1: function(t) {
    return this.addTypeArgument_1.call$1(t);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

JsClassMirror: {"": "JsTypeMirror_JsObjectMirror0;_mangledName<-,_jsConstructorOrInterceptor<-,_fieldsDescriptor<-,_fieldsMetadata<-,_jsConstructorCache<-,_metadata@-,_superclass@-,_cachedMethods@-,_cachedFields@-,_cachedConstructors@-,_cachedMethodsMap@-,_cachedGetters@-,_cachedSetters@-,_cachedVariables@-,_cachedMembers@-,_cachedDeclarations@-,_cachedMetadata@-,_cachedSuperinterfaces@-,_cachedTypeVariables@-,_owner@-,simpleName",
  get$_prettyName: function() {
    return "ClassMirror";
    "7";
  },
  "+_prettyName": 1,
  get$_jsConstructor: function() {
    var t1, t2;
    t1 = this._jsConstructorOrInterceptor;
    t2 = J.getInterceptor(t1);
    if (typeof t1 === "object" && t1 !== null && !!t2.$isInterceptor)
      return t1.constructor;
    else
      return t1;
    "11";
  },
  "+_jsConstructor": 1,
  _getMethodsWithOwner$1: function(methodOwner) {
    var $prototype, result, t1, key, t2, simpleName, mirror, keys, $length, i, mangledName, jsFunction, i0, reflectionName, isConstructor, unmangledName;
    $prototype = this.get$_jsConstructor().prototype;
    result = [];
    for (t1 = J.get$iterator$ax((function(victim, hasOwnProperty) {
  var result = [];
  for (var key in victim) {
    if (hasOwnProperty.call(victim, key)) result.push(key);
  }
  return result;
})($prototype, Object.prototype.hasOwnProperty)); t1.moveNext$0();) {
      key = t1.get$current();
      if (H.isReflectiveDataInPrototype(key))
        continue;
      t2 = $.get$mangledNames();
      simpleName = t2.$index(t2, key);
      if (simpleName == null)
        continue;
      mirror = H.JsMethodMirror_JsMethodMirror$fromUnmangledName(simpleName, $prototype[key], false, false);
      result.push(mirror);
      mirror._owner = methodOwner;
    }
    keys = (function(victim, hasOwnProperty) {
  var result = [];
  for (var key in victim) {
    if (hasOwnProperty.call(victim, key)) result.push(key);
  }
  return result;
})(init.statics[this._mangledName], Object.prototype.hasOwnProperty);
    t1 = J.getInterceptor$asx(keys);
    $length = t1.get$length(keys);
    i = 0;
    while (true) {
      if (typeof $length !== "number")
        throw H.iae($length);
      if (!(i < $length))
        break;
      c$0: {
        mangledName = t1.$index(keys, i);
        if (H.isReflectiveDataInPrototype(mangledName))
          break c$0;
        jsFunction = this.get$owner().get$_globalObject()[mangledName];
        i0 = i + 1;
        if (i0 < $length) {
          reflectionName = t1.$index(keys, i0);
          t2 = J.getInterceptor$s(reflectionName);
          if (t2.startsWith$1(reflectionName, "+")) {
            reflectionName = t2.substring$1(reflectionName, 1);
            isConstructor = C.JSString_methods.startsWith$1(reflectionName, "new ");
            if (isConstructor) {
              t2 = C.JSString_methods.substring$1(reflectionName, 4);
              reflectionName = H.stringReplaceAllUnchecked(t2, "$", ".");
            }
            i = i0;
          } else
            isConstructor = false;
          unmangledName = reflectionName;
        } else {
          unmangledName = mangledName;
          isConstructor = false;
        }
        mirror = H.JsMethodMirror_JsMethodMirror$fromUnmangledName(unmangledName, jsFunction, !isConstructor, isConstructor);
        result.push(mirror);
        mirror._owner = methodOwner;
      }
      ++i;
    }
    return result;
    "25,26,27";
  },
  "+_getMethodsWithOwner:1:0": 1,
  get$_methods: function() {
    var t1 = this._cachedMethods;
    if (t1 != null)
      return t1;
    t1 = this._getMethodsWithOwner$1(this);
    this._cachedMethods = t1;
    return t1;
    "25";
  },
  "+_methods": 1,
  _getFieldsWithOwner$1: function(fieldOwner) {
    var result, t1, instanceFieldSpecfication, staticDescriptor;
    result = [];
    t1 = J.split$1$s(this._fieldsDescriptor, ";");
    if (1 >= t1.length)
      throw H.ioore(t1, 1);
    instanceFieldSpecfication = t1[1];
    t1 = this._fieldsMetadata;
    if (t1 != null) {
      instanceFieldSpecfication = [instanceFieldSpecfication];
      C.JSArray_methods.addAll$1(instanceFieldSpecfication, t1);
    }
    H.parseCompactFieldSpecification(fieldOwner, instanceFieldSpecfication, false, result);
    staticDescriptor = init.statics[this._mangledName];
    if (staticDescriptor != null)
      H.parseCompactFieldSpecification(fieldOwner, staticDescriptor[""], true, result);
    return result;
    "28,29,27";
  },
  "+_getFieldsWithOwner:1:0": 1,
  get$_fields: function() {
    var t1 = this._cachedFields;
    if (t1 != null)
      return t1;
    t1 = this._getFieldsWithOwner$1(this);
    this._cachedFields = t1;
    return t1;
    "28";
  },
  "+_fields": 1,
  get$methods: function() {
    var t1 = this._cachedMethodsMap;
    if (t1 != null)
      return t1;
    t1 = new H.UnmodifiableMapView(H.filterMethods(this.get$_methods()));
    H.setRuntimeTypeInfo(t1, [P.Symbol, P.MethodMirror]);
    this._cachedMethodsMap = t1;
    return t1;
    "30";
  },
  "+methods": 1,
  get$getters: function() {
    var t1 = this._cachedGetters;
    if (t1 != null)
      return t1;
    t1 = new H.UnmodifiableMapView(H.filterGetters(this.get$_methods(), this.get$variables()));
    H.setRuntimeTypeInfo(t1, [P.Symbol, P.MethodMirror]);
    this._cachedGetters = t1;
    return t1;
    "30";
  },
  "+getters": 1,
  get$setters: function() {
    var t1 = this._cachedSetters;
    if (t1 != null)
      return t1;
    t1 = new H.UnmodifiableMapView(H.filterSetters(this.get$_methods(), this.get$variables()));
    H.setRuntimeTypeInfo(t1, [P.Symbol, P.MethodMirror]);
    this._cachedSetters = t1;
    return t1;
    "30";
  },
  "+setters": 1,
  get$variables: function() {
    var t1, result, mirror;
    t1 = this._cachedVariables;
    if (t1 != null)
      return t1;
    result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    for (t1 = J.get$iterator$ax(this.get$_fields()); t1.moveNext$0();) {
      mirror = t1.get$current();
      result.$indexSet(result, mirror.get$simpleName(), mirror);
    }
    t1 = new H.UnmodifiableMapView(result);
    H.setRuntimeTypeInfo(t1, [P.Symbol, P.VariableMirror]);
    this._cachedVariables = t1;
    return t1;
    "31";
  },
  "+variables": 1,
  get$members: function() {
    var t1, result, method, $name, t2, t3;
    t1 = this._cachedMembers;
    if (t1 != null)
      return t1;
    t1 = this.get$variables();
    result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    result.addAll$1(result, t1);
    for (t1 = J.get$iterator$ax(this.get$_methods()); t1.moveNext$0();) {
      method = t1.get$current();
      if (method.get$isSetter()) {
        $name = J.get$_name$x(method.get$simpleName());
        t2 = J.getInterceptor$asx($name);
        t2 = result.$index(result, H.s(t2.substring$2($name, 0, J.$sub$n(t2.get$length($name), 1))));
        t3 = J.getInterceptor(t2);
        if (typeof t2 === "object" && t2 !== null && !!t3.$isVariableMirror)
          continue;
      }
      if (method.get$isConstructor())
        continue;
      result.putIfAbsent$2(method.get$simpleName(), new H.JsClassMirror_members_closure(method));
    }
    t1 = new H.UnmodifiableMapView(result);
    H.setRuntimeTypeInfo(t1, [P.Symbol, P.Mirror]);
    this._cachedMembers = t1;
    return t1;
    "32";
  },
  "+members": 1,
  setField$2: function(fieldName, arg) {
    var mirror, jsName;
    mirror = J.$index$asx(this.get$variables(), fieldName);
    if (mirror != null && mirror.get$isStatic() && J.get$isFinal$x(mirror) !== true) {
      jsName = mirror.get$_jsName();
      if (!(jsName in $))
        throw H.wrapException(H.RuntimeError$("Cannot find \"" + jsName + "\" in current isolate."));
      $[jsName] = arg;
      return H.reflect(arg);
    }
    throw H.wrapException(P.NoSuchMethodError$(this, H.setterSymbol(fieldName), [arg], null, null));
    "33,34,35,36,0";
  },
  "+setField:2:0": 1,
  getField$1: function(fieldName) {
    var mirror, jsName;
    mirror = J.$index$asx(this.get$variables(), fieldName);
    if (mirror != null && mirror.get$isStatic()) {
      jsName = mirror.get$_jsName();
      if (!(jsName in $))
        throw H.wrapException(H.RuntimeError$("Cannot find \"" + jsName + "\" in current isolate."));
      if (jsName in init.lazies)
        return H.reflect($[init.lazies[jsName]]());
      else
        return H.reflect($[jsName]);
    }
    throw H.wrapException(P.NoSuchMethodError$(this, fieldName, null, null, null));
    "33,34,35";
  },
  "+getField:1:0": 1,
  get$owner: function() {
    var t1, t2, unmangledName, unmangledName0, $arguments, t3, t4;
    if (this._owner == null) {
      t1 = this._jsConstructorOrInterceptor;
      t2 = J.getInterceptor(t1);
      if (typeof t1 === "object" && t1 !== null && !!t2.$isInterceptor) {
        unmangledName = C.Type_HqF._typeName;
        t1 = $.get$mangledGlobalNames();
        unmangledName0 = t1.$index(t1, unmangledName);
        this._owner = H.reflectClassByName(H.s(unmangledName0 == null ? unmangledName : unmangledName0), unmangledName).get$owner();
      } else {
        t1 = $.get$JsMirrorSystem_librariesByName();
        t1 = t1.get$values(t1);
        t2 = t1._iterable;
        t2 = t2.get$iterator(t2);
        $arguments = H.substitute(t1.$asMappedIterable, H.getRuntimeTypeInfo(t1));
        t3 = $arguments == null ? null : $arguments[0];
        $arguments = H.substitute(t1.$asMappedIterable, H.getRuntimeTypeInfo(t1));
        t4 = $arguments == null ? null : $arguments[1];
        t1 = new H.MappedIterator(null, t2, t1._f);
        t1.$builtinTypeInfo = [t3, t4];
        for (; t1.moveNext$0();)
          for (t2 = J.get$iterator$ax(t1._current); t2.moveNext$0();)
            J.get$classes$x(t2.get$current());
      }
      if (this._owner == null)
        throw H.wrapException(new P.StateError("Class \"" + H.S(J.get$_name$x(this.simpleName)) + "\" has no owner"));
    }
    return this._owner;
    "37";
  },
  "+owner": 1,
  get$metadata: function() {
    var t1 = this._cachedMetadata;
    if (t1 != null)
      return t1;
    if (this._metadata == null)
      this._metadata = H.extractMetadata(this.get$_jsConstructor().prototype);
    t1 = new P.UnmodifiableListView(J.map$1$ax(this._metadata, H.reflect$closure));
    H.setRuntimeTypeInfo(t1, [P.InstanceMirror]);
    this._cachedMetadata = t1;
    return t1;
    "38";
  },
  "+metadata": 1,
  get$superclass: function() {
    var t1, t2, superclassName, mixins, t3;
    if (this._superclass == null) {
      t1 = this._fieldsDescriptor;
      t2 = J.split$1$s(t1, ";");
      if (0 >= t2.length)
        throw H.ioore(t2, 0);
      superclassName = t2[0];
      t2 = J.getInterceptor$s(superclassName);
      mixins = t2.split$1(superclassName, "+");
      t3 = mixins.length;
      if (t3 > 1) {
        if (t3 !== 2)
          throw H.wrapException(H.RuntimeError$("Strange mixin: " + H.S(t1)));
        this._superclass = H.reflectClassByMangledName(mixins[0]);
      } else
        this._superclass = t2.$eq(superclassName, "") ? this : H.reflectClassByMangledName(superclassName);
    }
    return J.$eq(this._superclass, this) ? null : this._superclass;
    "39";
  },
  "+superclass": 1,
  invoke$3: function(memberName, positionalArguments, namedArguments) {
    var mirror;
    if (namedArguments != null && J.get$isEmpty$asx(namedArguments) !== true)
      throw H.wrapException(P.UnsupportedError$("Named arguments are not implemented."));
    mirror = J.$index$asx(this.get$methods(), memberName);
    if (mirror == null || !mirror.get$isStatic())
      throw H.wrapException(P.NoSuchMethodError$(this, memberName, positionalArguments, namedArguments, null));
    if (!mirror.canInvokeReflectively$0())
      H.throwInvalidReflectionError(J.get$_name$x(memberName));
    return H.reflect(mirror._invoke$2(positionalArguments, namedArguments));
    "33,40,35,41,42,43,44";
  },
  "+invoke:3:0": 1,
  "*invoke": [11],
  invoke$2: function(memberName, positionalArguments) {
    return this.invoke$3(memberName, positionalArguments, null);
  },
  "+invoke:2:0": 1,
  get$isOriginalDeclaration: function() {
    return true;
    "24";
  },
  "+isOriginalDeclaration": 1,
  get$originalDeclaration: function() {
    return this;
    "39";
  },
  "+originalDeclaration": 1,
  get$superinterfaces: function() {
    var t1, interfaces, result;
    t1 = this._cachedSuperinterfaces;
    if (t1 != null)
      return t1;
    interfaces = init.interfaces[this._mangledName];
    if (interfaces != null) {
      t1 = J.map$1$ax(interfaces, new H.JsClassMirror_superinterfaces_lookupType());
      result = t1.toList$0(t1);
    } else
      result = C.List_empty;
    t1 = new P.UnmodifiableListView(result);
    H.setRuntimeTypeInfo(t1, [P.ClassMirror]);
    this._cachedSuperinterfaces = t1;
    return t1;
    "45";
  },
  "+superinterfaces": 1,
  get$typeVariables: function() {
    var t1, result, typeVariables, i, typeVariable;
    t1 = this._cachedTypeVariables;
    if (t1 != null)
      return t1;
    result = P.List_List(null, null);
    typeVariables = this.get$_jsConstructor().prototype["<>"];
    if (typeVariables == null)
      return result;
    for (i = 0; i < typeVariables.length; ++i) {
      typeVariable = init.metadata[typeVariables[i]];
      result.push(new H.JsTypeVariableMirror(this, typeVariable, null, H.s(J.get$name$x(typeVariable))));
    }
    t1 = new P.UnmodifiableListView(result);
    H.setRuntimeTypeInfo(t1, [null]);
    this._cachedTypeVariables = t1;
    return t1;
    "46";
  },
  "+typeVariables": 1,
  get$typeArguments: function() {
    return P.List_List(null, null);
    "47";
  },
  "+typeArguments": 1,
  $isJsClassMirror: true,
  $isClassMirror: true,
  $isMirror: true
},

"+JsClassMirror": [39],

JsTypeMirror_JsObjectMirror0: {"": "JsTypeMirror+JsObjectMirror;", $isMirror: true},

JsClassMirror_members_closure: {"": "Closure;method_0-",
  call$0: function() {
    return this.method_0;
    "11";
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+JsClassMirror_members_closure": [],

JsClassMirror_superinterfaces_lookupType: {"": "Closure;",
  call$1: function(i) {
    return H.typeMirrorFromRuntimeTypeRepresentation(init.metadata[i]);
    "39,48,15";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+JsClassMirror_superinterfaces_lookupType": [],

JsVariableMirror: {"": "JsDeclarationMirror;_jsName<,isFinal>,isStatic<,_metadataFunction,_owner,_metadata,simpleName",
  get$_prettyName: function() {
    return "VariableMirror";
  },
  "+_prettyName": 0,
  get$type: function(_) {
    return $.get$JsMirrorSystem__dynamicType();
  },
  get$owner: function() {
    return this._owner;
  },
  "+owner": 0,
  get$metadata: function() {
    if (this._metadata == null) {
      var t1 = this._metadataFunction;
      this._metadata = t1 == null ? C.List_empty : t1();
    }
    t1 = J.map$1$ax(this._metadata, H.reflect$closure);
    return t1.toList$0(t1);
  },
  "+metadata": 0,
  _getField$1: function(receiver) {
    return receiver._loadField$1(this._jsName);
  },
  _setField$2: function(receiver, arg) {
    if (this.isFinal)
      throw H.wrapException(P.NoSuchMethodError$(this, H.setterSymbol(this.simpleName), [arg], null, null));
    receiver._storeField$2(this._jsName, arg);
  },
  $isVariableMirror: true,
  $isMirror: true,
  static: {
"": "JsVariableMirror_REFLECTION_MARKER",
JsVariableMirror_JsVariableMirror$from: function(descriptor, metadataFunction, owner, isStatic) {
  var t1, $length, t2, code, isFinal, jsName, divider, accessorName, unmangledName, setterName;
  t1 = J.getInterceptor$asx(descriptor);
  $length = t1.get$length(descriptor);
  t2 = J.getInterceptor$n($length);
  if (H.JsVariableMirror_fieldCode(t1.codeUnitAt$1(descriptor, t2.$sub($length, 1))) === 45) {
    $length = t2.$sub($length, 1);
    t2 = J.getInterceptor$n($length);
    code = H.JsVariableMirror_fieldCode(t1.codeUnitAt$1(descriptor, t2.$sub($length, 1)));
  } else
    return;
  if (code === 0)
    return;
  isFinal = C.JSInt_methods.$shr(code, 2) === 0;
  jsName = t1.substring$2(descriptor, 0, t2.$sub($length, 1));
  divider = t1.indexOf$1(descriptor, ":");
  if (divider > 0) {
    accessorName = C.JSString_methods.substring$2(jsName, 0, divider);
    jsName = t1.substring$1(descriptor, divider + 1);
  } else
    accessorName = jsName;
  if (isStatic) {
    t1 = $.get$mangledGlobalNames();
    unmangledName = t1.$index(t1, accessorName);
  } else {
    t1 = $.get$mangledNames();
    unmangledName = t1.$index(t1, "get$" + accessorName);
  }
  if (unmangledName == null)
    unmangledName = accessorName;
  if (isFinal) {
    setterName = H.s(H.S(unmangledName) + "=");
    for (t1 = J.get$iterator$ax(owner.get$_methods()); isFinal = true, t1.moveNext$0();)
      if (J.$eq(t1.get$current().get$simpleName(), setterName)) {
        isFinal = false;
        break;
      }
  }
  return new H.JsVariableMirror(jsName, isFinal, isStatic, metadataFunction, owner, null, H.s(unmangledName));
},

JsVariableMirror_fieldCode: function(code) {
  if (code === 45)
    return code;
  if (code >= 60 && code <= 64)
    return code - 59;
  if (code >= 123 && code <= 126)
    return code - 117;
  if (code >= 37 && code <= 43)
    return code - 27;
  return 0;
}}

},

JsClosureMirror: {"": "JsInstanceMirror;reflectee",
  toString$0: function(_) {
    return "ClosureMirror on '" + H.S(P.Error_safeToString(this.reflectee)) + "'";
  },
  $isInstanceMirror: true,
  $isMirror: true
},

JsMethodMirror: {"": "JsDeclarationMirror;_jsFunction,_parameterCount,isGetter<,isSetter<,isStatic<,isConstructor<,isOperator,_owner,_metadata,_returnType,_parameters,simpleName",
  get$_prettyName: function() {
    return "MethodMirror";
  },
  "+_prettyName": 0,
  get$parameters: function() {
    var t1 = this._parameters;
    if (t1 != null)
      return t1;
    this.get$metadata();
    return this._parameters;
  },
  canInvokeReflectively$0: function() {
    return "$reflectable" in this._jsFunction;
  },
  get$owner: function() {
    return this._owner;
  },
  "+owner": 0,
  get$returnType: function() {
    this.get$metadata();
    return H.computeTypeMirror(this._owner, this._returnType);
  },
  get$metadata: function() {
    var raw, t1, formals, t2, parameterLength, formalsCount, i, $name, type, formalsCount0, t3;
    if (this._metadata == null) {
      raw = H.extractMetadata(this._jsFunction);
      t1 = this._parameterCount;
      formals = P.List_List(t1, null);
      t2 = J.getInterceptor$asx(raw);
      if (t2.get$isEmpty(raw) !== true) {
        this._returnType = t2.$index(raw, 0);
        t1 = J.$mul$n(t1, 2);
        if (typeof t1 !== "number")
          throw H.iae(t1);
        parameterLength = 1 + t1;
        for (t1 = formals.length, formalsCount = 0, i = 1; i < parameterLength; i += 2, formalsCount = formalsCount0) {
          $name = t2.$index(raw, i);
          type = t2.$index(raw, i + 1);
          formalsCount0 = formalsCount + 1;
          t3 = H.s($name);
          if (formalsCount >= t1)
            throw H.ioore(formals, formalsCount);
          formals[formalsCount] = new H.JsParameterMirror(this, type, t3);
        }
        raw = t2.sublist$1(raw, parameterLength);
      } else {
        if (typeof t1 !== "number")
          throw H.iae(t1);
        t2 = formals.length;
        i = 0;
        for (; i < t1; ++i) {
          t3 = H.s("argument" + i);
          if (i >= t2)
            throw H.ioore(formals, i);
          formals[i] = new H.JsParameterMirror(this, null, t3);
        }
      }
      t1 = new P.UnmodifiableListView(formals);
      H.setRuntimeTypeInfo(t1, [P.ParameterMirror]);
      this._parameters = t1;
      t1 = new P.UnmodifiableListView(J.map$1$ax(raw, H.reflect$closure));
      H.setRuntimeTypeInfo(t1, [null]);
      this._metadata = t1;
    }
    return this._metadata;
  },
  "+metadata": 0,
  _invoke$2: function(positionalArguments, namedArguments) {
    if (namedArguments != null && J.get$isEmpty$asx(namedArguments) !== true)
      throw H.wrapException(P.UnsupportedError$("Named arguments are not implemented."));
    if (!this.isStatic && !this.isConstructor)
      throw H.wrapException(H.RuntimeError$("Cannot invoke instance method without receiver."));
    if (!J.$eq(this._parameterCount, J.get$length$asx(positionalArguments)) || this._jsFunction == null)
      throw H.wrapException(P.NoSuchMethodError$(this._owner, this.simpleName, positionalArguments, namedArguments, null));
    return this._jsFunction.apply($, P.List_List$from(positionalArguments, true, null));
  },
  _getField$1: function(receiver) {
    if (this.isGetter)
      return this._invoke$2([], null);
    else
      throw H.wrapException(P.UnimplementedError$("getField on " + H.S(receiver)));
  },
  _setField$2: function(receiver, arg) {
    if (this.isSetter)
      return this._invoke$2([arg], null);
    else
      throw H.wrapException(P.NoSuchMethodError$(this, H.setterSymbol(this.simpleName), [], null, null));
  },
  get$isRegularMethod: function() {
    return !this.isGetter && !this.isSetter && !this.isConstructor;
  },
  $isJsMethodMirror: true,
  $isMethodMirror: true,
  $isMirror: true,
  static: {
JsMethodMirror_JsMethodMirror$fromUnmangledName: function($name, jsFunction, isStatic, isConstructor) {
  var info, isOperator, isSetter, t1, requiredParameterCount, isGetter, optionalParameterCount;
  info = J.split$1$s($name, ":");
  if (0 >= info.length)
    throw H.ioore(info, 0);
  $name = info[0];
  isOperator = H.isOperatorName($name);
  isSetter = !isOperator && J.endsWith$1$s($name, "=");
  t1 = info.length;
  if (t1 === 1) {
    if (isSetter) {
      requiredParameterCount = 1;
      isGetter = false;
    } else {
      requiredParameterCount = 0;
      isGetter = true;
    }
    optionalParameterCount = 0;
  } else {
    if (1 >= t1)
      throw H.ioore(info, 1);
    requiredParameterCount = H.Primitives_parseInt(info[1], null, null);
    if (2 >= info.length)
      throw H.ioore(info, 2);
    optionalParameterCount = H.Primitives_parseInt(info[2], null, null);
    isGetter = false;
  }
  t1 = H.s($name);
  return new H.JsMethodMirror(jsFunction, J.$add$ns(requiredParameterCount, optionalParameterCount), isGetter, isSetter, isStatic, isConstructor, isOperator, null, null, null, null, t1);
}}

},

JsParameterMirror: {"": "JsDeclarationMirror;owner<,__js_mirrors$_type,simpleName",
  get$_prettyName: function() {
    return "ParameterMirror";
  },
  "+_prettyName": 0,
  get$type: function(_) {
    return H.computeTypeMirror(this.owner, this.__js_mirrors$_type);
  },
  get$isStatic: function() {
    return false;
  },
  get$isFinal: function(_) {
    return false;
  },
  get$isOptional: function() {
    return false;
  },
  get$metadata: function() {
    return H.throwExpression(P.UnimplementedError$(null));
  },
  "+metadata": 0,
  $isParameterMirror: true,
  $isVariableMirror: true,
  $isMirror: true
},

JsTypedefMirror: {"": "JsDeclarationMirror;_mangledName,referent,simpleName",
  get$value: function(_) {
    return this.referent;
  },
  "+value": 0,
  get$_prettyName: function() {
    return "TypedefMirror";
  },
  "+_prettyName": 0,
  $isMirror: true
},

JsFunctionTypeMirror: {"": "Object;_typeData,_cachedToString,_cachedReturnType,_cachedParameters,owner<",
  get$returnType: function() {
    var t1 = this._cachedReturnType;
    if (t1 != null)
      return t1;
    t1 = this._typeData;
    if (!!t1.void) {
      t1 = $.get$JsMirrorSystem__voidType();
      this._cachedReturnType = t1;
      return t1;
    }
    if (!("ret" in t1)) {
      t1 = $.get$JsMirrorSystem__dynamicType();
      this._cachedReturnType = t1;
      return t1;
    }
    t1 = H.typeMirrorFromRuntimeTypeRepresentation(t1.ret);
    this._cachedReturnType = t1;
    return t1;
  },
  get$parameters: function() {
    var t1, result, t2, t3, parameterCount, parameterCount0, $name;
    t1 = this._cachedParameters;
    if (t1 != null)
      return t1;
    result = [];
    t1 = this._typeData;
    if ("args" in t1)
      for (t2 = t1.args, t3 = new H.ListIterator(t2, t2.length, 0, null), H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "JSArray", 0)]), parameterCount = 0; t3.moveNext$0(); parameterCount = parameterCount0) {
        parameterCount0 = parameterCount + 1;
        result.push(new H.JsParameterMirror(this, t3._current, H.s("argument" + parameterCount)));
      }
    else
      parameterCount = 0;
    if ("opt" in t1)
      for (t2 = t1.opt, t3 = new H.ListIterator(t2, t2.length, 0, null), H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "JSArray", 0)]); t3.moveNext$0(); parameterCount = parameterCount0) {
        parameterCount0 = parameterCount + 1;
        result.push(new H.JsParameterMirror(this, t3._current, H.s("argument" + parameterCount)));
      }
    if ("named" in t1)
      for (t2 = J.get$iterator$ax((function(victim, hasOwnProperty) {
  var result = [];
  for (var key in victim) {
    if (hasOwnProperty.call(victim, key)) result.push(key);
  }
  return result;
})(t1.named, Object.prototype.hasOwnProperty)); t2.moveNext$0();) {
        $name = t2.get$current();
        result.push(new H.JsParameterMirror(this, t1.named[$name], H.s($name)));
      }
    t1 = new P.UnmodifiableListView(result);
    H.setRuntimeTypeInfo(t1, [P.ParameterMirror]);
    this._cachedParameters = t1;
    return t1;
  },
  toString$0: function(_) {
    var t1, t2, t3, s, sep, argument, $name;
    t1 = this._cachedToString;
    if (t1 != null)
      return t1;
    t1 = this._typeData;
    if ("args" in t1)
      for (t2 = t1.args, t3 = new H.ListIterator(t2, t2.length, 0, null), H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "JSArray", 0)]), s = "FunctionTypeMirror on '(", sep = ""; t3.moveNext$0(); sep = ", ") {
        argument = t3._current;
        s = C.JSString_methods.$add(s + sep, H.runtimeTypeToString(argument));
      }
    else {
      s = "FunctionTypeMirror on '(";
      sep = "";
    }
    if ("opt" in t1) {
      s += sep + "[";
      for (t2 = t1.opt, t3 = new H.ListIterator(t2, t2.length, 0, null), H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "JSArray", 0)]), sep = ""; t3.moveNext$0(); sep = ", ") {
        argument = t3._current;
        s = C.JSString_methods.$add(s + sep, H.runtimeTypeToString(argument));
      }
      s += "]";
    }
    if ("named" in t1) {
      s += sep + "{";
      for (t2 = J.get$iterator$ax((function(victim, hasOwnProperty) {
  var result = [];
  for (var key in victim) {
    if (hasOwnProperty.call(victim, key)) result.push(key);
  }
  return result;
})(t1.named, Object.prototype.hasOwnProperty)), sep = ""; t2.moveNext$0(); sep = ", ") {
        $name = t2.get$current();
        s = C.JSString_methods.$add(s + sep + (H.S($name) + ": "), H.runtimeTypeToString(t1.named[$name]));
      }
      s += "}";
    }
    s += ") -> ";
    if (!!t1.void)
      s += "void";
    else
      s = "ret" in t1 ? C.JSString_methods.$add(s, H.runtimeTypeToString(t1.ret)) : s + "dynamic";
    t1 = s + "'";
    this._cachedToString = t1;
    return t1;
  },
  $isClassMirror: true,
  $isMirror: true
},

extractMetadata_closure: {"": "Closure;",
  call$1: function(i) {
    return init.metadata[i];
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

UnmodifiableMapView: {"": "Object;__js_mirrors$_source",
  get$length: function(_) {
    return this.__js_mirrors$_source._collection$_length;
  },
  "+length": 0,
  get$isEmpty: function(_) {
    return this.__js_mirrors$_source._collection$_length === 0;
  },
  "+isEmpty": 0,
  get$isNotEmpty: function(_) {
    return this.__js_mirrors$_source._collection$_length !== 0;
  },
  "+isNotEmpty": 0,
  $index: function(_, key) {
    var t1 = this.__js_mirrors$_source;
    return t1.$index(t1, key);
  },
  "+[]:1:0": 0,
  containsKey$1: function(key) {
    return this.__js_mirrors$_source.containsKey$1(key);
  },
  "+containsKey:1:0": 0,
  containsValue$1: function(value) {
    return this.__js_mirrors$_source.containsValue$1(value);
  },
  "+containsValue:1:0": 0,
  forEach$1: function(_, f) {
    var t1 = this.__js_mirrors$_source;
    return t1.forEach$1(t1, f);
  },
  get$keys: function() {
    var t1, t2;
    t1 = this.__js_mirrors$_source;
    t2 = new P.LinkedHashMapKeyIterable(t1);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_LinkedHashMap", 0)]);
    return t2;
  },
  "+keys": 0,
  get$values: function(_) {
    var t1 = this.__js_mirrors$_source;
    return t1.get$values(t1);
  },
  "+values": 0,
  $indexSet: function(_, key, value) {
    return H.UnmodifiableMapView__throw();
  },
  "+[]=:2:0": 0,
  putIfAbsent$2: function(key, ifAbsent) {
    H.UnmodifiableMapView__throw();
  },
  addAll$1: function(_, other) {
    return H.UnmodifiableMapView__throw();
  },
  remove$1: function(_, key) {
    H.UnmodifiableMapView__throw();
  },
  $isMap: true,
  static: {
UnmodifiableMapView__throw: function() {
  throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable Map"));
}}

},

UnimplementedNoSuchMethodError: {"": "Error;__js_mirrors$_message",
  toString$0: function(_) {
    return "Unsupported operation: " + this.__js_mirrors$_message;
  },
  $isNoSuchMethodError: true,
  $isError: true,
  static: {
UnimplementedNoSuchMethodError$: function(_message) {
  return new H.UnimplementedNoSuchMethodError(_message);
}}

}}],
["dart._js_names", "dart:_js_names", , H, {
computeMangledNames: function(jsMangledNames, isGlobal) {
  var keys, result, t1, t2, key, value, t3;
  keys = (function(victim, hasOwnProperty) {
  var result = [];
  for (var key in victim) {
    if (hasOwnProperty.call(victim, key)) result.push(key);
  }
  return result;
})(jsMangledNames, Object.prototype.hasOwnProperty);
  result = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
  for (t1 = J.get$iterator$ax(keys), t2 = !isGlobal; t1.moveNext$0();) {
    key = t1.get$current();
    value = jsMangledNames[key];
    result.$indexSet(result, key, value);
    if (t2) {
      t3 = J.getInterceptor$s(key);
      if (t3.startsWith$1(key, "get$"))
        result.$indexSet(result, "set$" + t3.substring$1(key, 4), value + "=");
    }
  }
  return result;
},

computeReflectiveNames: function(map) {
  var result = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
  map.forEach$1(map, new H.computeReflectiveNames_closure(result));
  return result;
},

unmangleGlobalNameIfPreservedAnyways: function($name) {
  return init.mangledGlobalNames[$name];
},

computeReflectiveNames_closure: {"": "Closure;result_0",
  call$2: function(mangledName, reflectiveName) {
    var t1 = this.result_0;
    t1.$indexSet(t1, reflectiveName, mangledName);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
}}],
["dart.async", "dart:async", , P, {
_attachStackTrace: function(o, st) {
  var t1;
  if (o == null || typeof o === "boolean" || typeof o === "number" || typeof o === "string")
    return;
  t1 = $.get$_stackTraceExpando();
  t1.$indexSet(t1, o, st);
},

_invokeErrorHandler: function(errorHandler, error, stackTrace) {
  var t1 = J.getInterceptor(errorHandler);
  if (!!t1.$is_args2)
    return errorHandler.call$2(error, stackTrace);
  else
    return errorHandler.call$1(error);
},

_registerErrorHandler: function(errorHandler, zone) {
  var t1 = J.getInterceptor(errorHandler);
  if (!!t1.$is_args2)
    return zone.registerBinaryCallback$1(errorHandler);
  else
    return zone.registerUnaryCallback$1(errorHandler);
},

getAttachedStackTrace: function(o) {
  var t1;
  if (o == null || typeof o === "boolean" || typeof o === "number" || typeof o === "string")
    return;
  t1 = $.get$_stackTraceExpando();
  return t1.$index(t1, o);
},

Future_Future$delayed: function(duration, computation, $T) {
  var t1, completer, result;
  t1 = null;
  completer = new P._SyncCompleter(P._Future$(t1));
  H.setRuntimeTypeInfo(completer, [t1]);
  result = completer.future;
  result = result.then$1(new P.Future_Future$delayed_closure(computation));
  P.Timer_Timer(duration, new P.Future_Future$delayed_closure0(completer));
  return result;
},

Future_wait: function(futures) {
  var t1, t2, t3, future, pos, t4, t5, result, completer;
  t1 = {};
  t1.completer_0 = null;
  t1.values_1 = null;
  t2 = new P.Future_wait_handleError(t1);
  t1.remaining_2 = 0;
  for (t3 = new H.ListIterator(futures, futures.length, 0, null), H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(futures, "JSArray", 0)]); t3.moveNext$0();) {
    future = t3._current;
    pos = t1.remaining_2;
    t1.remaining_2 = pos + 1;
    t4 = future.catchError$1(t2);
    t5 = $.Zone__current;
    result = new P._Future(0, t5, null, null, t5.registerUnaryCallback$1(new P.Future_wait_closure(t1, pos)), null, P._registerErrorHandler(null, $.Zone__current), null);
    result.$builtinTypeInfo = [null];
    t4._addListener$1(result);
  }
  t2 = t1.remaining_2;
  if (t2 === 0)
    return P._Future$immediate(C.List_empty, null);
  t1.values_1 = P.List_List(t2, null);
  t2 = J.JSArray;
  completer = new P._AsyncCompleter(P._Future$(t2));
  H.setRuntimeTypeInfo(completer, [t2]);
  t1.completer_0 = completer;
  return t1.completer_0.future;
},

_asyncRunCallback: function() {
  var callback, t1, exception, milliseconds;
  for (; t1 = $.get$_asyncCallbacks(), t1._head !== t1._tail;) {
    callback = $.get$_asyncCallbacks().removeFirst$0();
    try {
      callback.call$0();
    } catch (exception) {
      H.unwrapException(exception);
      milliseconds = C.Duration_0.get$inMilliseconds();
      H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, P._asyncRunCallback$closure);
      throw exception;
    }

  }
  $._callbacksAreEnqueued = false;
},

_scheduleAsyncCallback: function(callback) {
  $.get$_asyncCallbacks()._add$1(callback);
  if (!$._callbacksAreEnqueued) {
    P._createTimer(C.Duration_0, P._asyncRunCallback$closure);
    $._callbacksAreEnqueued = true;
  }
},

scheduleMicrotask: function(callback) {
  var t1;
  if (J.$eq($.Zone__current, C.C__RootZone)) {
    $.Zone__current.scheduleMicrotask$1(callback);
    return;
  }
  t1 = $.Zone__current;
  t1.scheduleMicrotask$1(t1.bindCallback$2$runGuarded(callback, true));
},

StreamController_StreamController: function(onCancel, onListen, onPause, onResume, sync, $T) {
  var t1;
  if (sync) {
    t1 = new P._SyncStreamController(onListen, onPause, onResume, onCancel, null, 0, null);
    H.setRuntimeTypeInfo(t1, [$T]);
  } else {
    t1 = new P._AsyncStreamController(onListen, onPause, onResume, onCancel, null, 0, null);
    H.setRuntimeTypeInfo(t1, [$T]);
  }
  return t1;
},

StreamController_StreamController$broadcast: function(onCancel, onListen, sync, $T) {
  var t1;
  if (sync) {
    t1 = new P._SyncBroadcastStreamController(onListen, onCancel, 0, null, null, null, null);
    H.setRuntimeTypeInfo(t1, [$T]);
    t1._async$_previous = t1;
    t1._async$_next = t1;
  } else {
    t1 = new P._AsyncBroadcastStreamController(onListen, onCancel, 0, null, null, null, null);
    H.setRuntimeTypeInfo(t1, [$T]);
    t1._async$_previous = t1;
    t1._async$_next = t1;
  }
  return t1;
},

_runGuarded: function(notificationHandler) {
  var result, e, s, t1, t2, exception;
  if (notificationHandler == null)
    return;
  try {
    result = notificationHandler.call$0();
    t1 = result;
    t2 = J.getInterceptor(t1);
    if (typeof t1 === "object" && t1 !== null && !!t2.$isFuture)
      return result;
    return;
  } catch (exception) {
    t1 = H.unwrapException(exception);
    e = t1;
    s = new H._StackTrace(exception, null);
    $.Zone__current.handleUncaughtError$2(P._asyncError(e, s), s);
  }

},

_nullDataHandler: function(value) {
},

_nullErrorHandler: function(error, stackTrace) {
  $.Zone__current.handleUncaughtError$2(error, stackTrace);
},

_nullDoneHandler: function() {
},

_asyncError: function(error, stackTrace) {
  if (stackTrace == null)
    return error;
  if (P.getAttachedStackTrace(error) != null)
    return error;
  P._attachStackTrace(error, stackTrace);
  return error;
},

_runUserCode: function(userCode, onSuccess, onError) {
  var e, s, exception, t1;
  try {
    onSuccess.call$1(userCode.call$0());
  } catch (exception) {
    t1 = H.unwrapException(exception);
    e = t1;
    s = new H._StackTrace(exception, null);
    onError.call$2(P._asyncError(e, s), s);
  }

},

_cancelAndError: function(subscription, future, error, stackTrace) {
  var cancelFuture, t1;
  cancelFuture = subscription.cancel$0();
  t1 = J.getInterceptor(cancelFuture);
  if (typeof cancelFuture === "object" && cancelFuture !== null && !!t1.$isFuture)
    cancelFuture.whenComplete$1(new P._cancelAndError_closure(future, error, stackTrace));
  else
    future._completeError$2(error, stackTrace);
},

_cancelAndErrorClosure: function(subscription, future) {
  return new P._cancelAndErrorClosure_closure(subscription, future);
},

_cancelAndValue: function(subscription, future, value) {
  var cancelFuture, t1;
  cancelFuture = subscription.cancel$0();
  t1 = J.getInterceptor(cancelFuture);
  if (typeof cancelFuture === "object" && cancelFuture !== null && !!t1.$isFuture)
    cancelFuture.whenComplete$1(new P._cancelAndValue_closure(future, value));
  else
    future._complete$1(value);
},

Timer_Timer: function(duration, callback) {
  var t1;
  if (J.$eq($.Zone__current, C.C__RootZone))
    return $.Zone__current.createTimer$2(duration, callback);
  t1 = $.Zone__current;
  return t1.createTimer$2(duration, t1.bindCallback$2$runGuarded(callback, true));
},

_createTimer: function(duration, callback) {
  var milliseconds = duration.get$inMilliseconds();
  return H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
},

_rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
  $self.run$1(new P._rootHandleUncaughtError_closure(error, stackTrace));
},

_rootRun: function($self, $parent, zone, f) {
  var old, t1;
  if (J.$eq($.Zone__current, zone))
    return f.call$0();
  old = $.Zone__current;
  try {
    $.Zone__current = zone;
    t1 = f.call$0();
    return t1;
  } finally {
    $.Zone__current = old;
  }
},

_rootRunUnary: function($self, $parent, zone, f, arg) {
  var old, t1;
  if (J.$eq($.Zone__current, zone))
    return f.call$1(arg);
  old = $.Zone__current;
  try {
    $.Zone__current = zone;
    t1 = f.call$1(arg);
    return t1;
  } finally {
    $.Zone__current = old;
  }
},

_rootRunBinary: function($self, $parent, zone, f, arg1, arg2) {
  var old, t1;
  if (J.$eq($.Zone__current, zone))
    return f.call$2(arg1, arg2);
  old = $.Zone__current;
  try {
    $.Zone__current = zone;
    t1 = f.call$2(arg1, arg2);
    return t1;
  } finally {
    $.Zone__current = old;
  }
},

_rootRegisterCallback: function($self, $parent, zone, f) {
  return f;
},

_rootRegisterUnaryCallback: function($self, $parent, zone, f) {
  return f;
},

_rootRegisterBinaryCallback: function($self, $parent, zone, f) {
  return f;
},

_rootScheduleMicrotask: function($self, $parent, zone, f) {
  P._scheduleAsyncCallback(f);
},

_rootCreateTimer: function($self, $parent, zone, duration, callback) {
  return P._createTimer(duration, callback);
},

_rootPrint: function($self, $parent, zone, line) {
  H.printToConsole(line);
},

_printToZone: function(line) {
  J.print$1$x($.Zone__current, line);
},

_rootFork: function($self, $parent, zone, specification, zoneValues) {
  var t1, copiedMap;
  $.printToZone = P._printToZone$closure;
  if (specification == null)
    specification = C._ZoneSpecification_ALf;
  else {
    t1 = J.getInterceptor(specification);
    if (typeof specification !== "object" || specification === null || !t1.$is_ZoneSpecification)
      throw H.wrapException(new P.ArgumentError("ZoneSpecifications must be instantiated with the provided constructor."));
  }
  copiedMap = P.HashMap_HashMap(null, null, null, null, null);
  if (zoneValues != null)
    J.forEach$1$ax(zoneValues, new P._rootFork_closure(copiedMap));
  return new P._CustomizedZone(zone, specification, copiedMap);
},

_AsyncError: {"": "Object;error>,stackTrace<", $isError: true},

_BroadcastStream: {"": "_ControllerStream;_controller", $as_ControllerStream: null, $asStream: null},

_BroadcastSubscription: {"": "_ControllerSubscription;_eventState@,_async$_next@,_async$_previous@,_controller,_async$_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
  get$_controller: function() {
    return this._controller;
  },
  _expectsEvent$1: function(eventId) {
    var t1 = this._eventState;
    if (typeof t1 !== "number")
      throw t1.$and();
    return (t1 & 1) === eventId;
  },
  _toggleEventId$0: function() {
    var t1 = this._eventState;
    if (typeof t1 !== "number")
      throw t1.$xor();
    this._eventState = (t1 ^ 1) >>> 0;
  },
  get$_isFiring: function() {
    var t1 = this._eventState;
    if (typeof t1 !== "number")
      throw t1.$and();
    return (t1 & 2) !== 0;
  },
  _setRemoveAfterFiring$0: function() {
    var t1 = this._eventState;
    if (typeof t1 !== "number")
      throw t1.$or();
    this._eventState = (t1 | 4) >>> 0;
  },
  get$_removeAfterFiring: function() {
    var t1 = this._eventState;
    if (typeof t1 !== "number")
      throw t1.$and();
    return (t1 & 4) !== 0;
  },
  _onPause$0: function() {
  },
  get$_onPause: function() {
    return new H.BoundClosure$0(this, P._BroadcastSubscription.prototype._onPause$0, null, "_onPause$0");
  },
  _onResume$0: function() {
  },
  get$_onResume: function() {
    return new H.BoundClosure$0(this, P._BroadcastSubscription.prototype._onResume$0, null, "_onResume$0");
  },
  $as_ControllerSubscription: null,
  $asStreamSubscription: null,
  static: {
"": "_BroadcastSubscription__STATE_EVENT_ID,_BroadcastSubscription__STATE_FIRING,_BroadcastSubscription__STATE_REMOVE_AFTER_FIRING",
}

},

_BroadcastStreamController: {"": "Object;_onListen<,_onCancel<,_async$_next@,_async$_previous@",
  _onCancel$0: function() {
    return this._onCancel.call$0();
  },
  get$_isFiring: function() {
    return (this._state & 2) !== 0;
  },
  _ensureDoneFuture$0: function() {
    var t1 = this._doneFuture;
    if (t1 != null)
      return t1;
    t1 = P._Future$(null);
    this._doneFuture = t1;
    return t1;
  },
  _addListener$1: function(subscription) {
    subscription._async$_previous = this._async$_previous;
    subscription._async$_next = this;
    this._async$_previous.set$_async$_next(subscription);
    this._async$_previous = subscription;
    subscription._eventState = this._state & 1;
  },
  _removeListener$1: function(subscription) {
    var previous, next;
    previous = subscription.get$_async$_previous();
    next = subscription.get$_async$_next();
    previous.set$_async$_next(next);
    next.set$_async$_previous(previous);
    subscription.set$_async$_previous(subscription);
    subscription.set$_async$_next(subscription);
  },
  _subscribe$1: function(cancelOnError) {
    var t1, t2, t3, subscription;
    if ((this._state & 4) !== 0)
      throw H.wrapException(new P.StateError("Subscribing to closed stream"));
    t1 = H.getRuntimeTypeArgument(this, "_BroadcastStreamController", 0);
    t2 = $.Zone__current;
    t3 = cancelOnError ? 1 : 0;
    subscription = new P._BroadcastSubscription(null, null, null, this, null, null, null, t2, t3, null, null);
    H.setRuntimeTypeInfo(subscription, [t1]);
    subscription._async$_previous = subscription;
    subscription._async$_next = subscription;
    this._addListener$1(subscription);
    t1 = this._async$_next;
    t2 = this._async$_previous;
    if (t1 == null ? t2 == null : t1 === t2)
      P._runGuarded(this._onListen);
    return subscription;
  },
  _recordCancel$1: function(subscription) {
    if (subscription.get$_async$_next() === subscription)
      return;
    if (subscription.get$_isFiring())
      subscription._setRemoveAfterFiring$0();
    else {
      this._removeListener$1(subscription);
      if ((this._state & 2) === 0 && this._async$_next === this)
        this._callOnCancel$0();
    }
  },
  _recordPause$1: function(subscription) {
  },
  _recordResume$1: function(subscription) {
  },
  _addEventError$0: function() {
    if ((this._state & 4) !== 0)
      return new P.StateError("Cannot add new events after calling close");
    return new P.StateError("Cannot add new events while doing an addStream");
  },
  add$1: function(_, data) {
    if (this._state >= 4)
      throw H.wrapException(this._addEventError$0());
    this._sendData$1(data);
  },
  get$add: function(_receiver) {
    return new J.BoundClosure$i1(this, P._BroadcastStreamController.prototype.add$1, _receiver, "add$1");
  },
  addError$2: function(error, stackTrace) {
    if (this._state >= 4)
      throw H.wrapException(this._addEventError$0());
    if (stackTrace != null)
      P._attachStackTrace(error, stackTrace);
    this._sendError$2(error, stackTrace);
  },
  get$addError: function() {
    return new P.BoundClosure$2(this, P._BroadcastStreamController.prototype.addError$2, null, "addError$2");
  },
  close$0: function(_) {
    var t1, doneFuture;
    t1 = this._state;
    if ((t1 & 4) !== 0)
      return this._doneFuture;
    if (t1 >= 4)
      throw H.wrapException(this._addEventError$0());
    this._state = (t1 | 4) >>> 0;
    doneFuture = this._ensureDoneFuture$0();
    this._sendDone$0();
    return doneFuture;
  },
  get$close: function(_receiver) {
    return new H.BoundClosure$i0(this, P._BroadcastStreamController.prototype.close$0, _receiver, "close$0");
  },
  _async$_add$1: function(data) {
    this._sendData$1(data);
  },
  _addError$2: function(error, stackTrace) {
    this._sendError$2(error, stackTrace);
  },
  _close$0: function() {
    var addState = this._addStreamState;
    this._addStreamState = null;
    this._state = (this._state & 4294967287) >>> 0;
    C.JSNull_methods.complete$0(addState);
  },
  _forEachListener$1: function(action) {
    var t1, id, link, link0;
    t1 = this._state;
    if ((t1 & 2) !== 0)
      throw H.wrapException(new P.StateError("Cannot fire new event. Controller is already firing an event"));
    if (this._async$_next === this)
      return;
    id = t1 & 1;
    this._state = (t1 ^ 3) >>> 0;
    link = this._async$_next;
    for (; link !== this;)
      if (link._expectsEvent$1(id)) {
        t1 = link.get$_eventState();
        if (typeof t1 !== "number")
          throw t1.$or();
        link.set$_eventState((t1 | 2) >>> 0);
        action.call$1(link);
        link._toggleEventId$0();
        link0 = link.get$_async$_next();
        if (link.get$_removeAfterFiring())
          this._removeListener$1(link);
        t1 = link.get$_eventState();
        if (typeof t1 !== "number")
          throw t1.$and();
        link.set$_eventState((t1 & 4294967293) >>> 0);
        link = link0;
      } else
        link = link.get$_async$_next();
    this._state = (this._state & 4294967293) >>> 0;
    if (this._async$_next === this)
      this._callOnCancel$0();
  },
  _callOnCancel$0: function() {
    if ((this._state & 4) !== 0 && this._doneFuture._state === 0)
      this._doneFuture._asyncComplete$1(null);
    P._runGuarded(this._onCancel);
  }
},

_SyncBroadcastStreamController: {"": "_BroadcastStreamController;_onListen,_onCancel,_state,_async$_next,_async$_previous,_addStreamState,_doneFuture",
  _sendData$1: function(data) {
    if (this._async$_next === this)
      return;
    this._forEachListener$1(new P._SyncBroadcastStreamController__sendData_closure(this, data));
  },
  _sendError$2: function(error, stackTrace) {
    if (this._async$_next === this)
      return;
    this._forEachListener$1(new P._SyncBroadcastStreamController__sendError_closure(this, error, stackTrace));
  },
  _sendDone$0: function() {
    if (this._async$_next !== this)
      this._forEachListener$1(new P._SyncBroadcastStreamController__sendDone_closure(this));
    else
      this._doneFuture._asyncComplete$1(null);
  },
  $as_BroadcastStreamController: null
},

_SyncBroadcastStreamController__sendData_closure: {"": "Closure;this_0,data_1",
  call$1: function(subscription) {
    subscription._async$_add$1(this.data_1);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_SyncBroadcastStreamController__sendError_closure: {"": "Closure;this_0,error_1,stackTrace_2",
  call$1: function(subscription) {
    subscription._addError$2(this.error_1, this.stackTrace_2);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_SyncBroadcastStreamController__sendDone_closure: {"": "Closure;this_0",
  call$1: function(subscription) {
    subscription._close$0();
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_AsyncBroadcastStreamController: {"": "_BroadcastStreamController;_onListen,_onCancel,_state,_async$_next,_async$_previous,_addStreamState,_doneFuture",
  _sendData$1: function(data) {
    var link, t1;
    for (link = this._async$_next; link !== this; link = link.get$_async$_next()) {
      t1 = new P._DelayedData(data, null);
      t1.$builtinTypeInfo = [null];
      link._addPending$1(t1);
    }
  },
  _sendError$2: function(error, stackTrace) {
    var link;
    for (link = this._async$_next; link !== this; link = link.get$_async$_next())
      link._addPending$1(new P._DelayedError(error, stackTrace, null));
  },
  _sendDone$0: function() {
    var link = this._async$_next;
    if (link !== this)
      for (; link !== this; link = link.get$_async$_next())
        link._addPending$1(C.C__DelayedDone);
    else
      this._doneFuture._asyncComplete$1(null);
  },
  $as_BroadcastStreamController: null
},

Future: {"": "Object;", $isFuture: true},

Future_Future$delayed_closure: {"": "Closure;computation_0",
  call$1: function(ignored) {
    return this.computation_0.call$0();
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Future_Future$delayed_closure0: {"": "Closure;completer_1",
  call$0: function() {
    var t1 = this.completer_1.future;
    if (t1._state !== 0)
      H.throwExpression(new P.StateError("Future already completed"));
    t1._complete$1(null);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Future_wait_handleError: {"": "Closure;box_0",
  call$1: function(error) {
    var t1 = this.box_0;
    if (t1.values_1 != null) {
      t1.values_1 = null;
      t1 = t1.completer_0.future;
      if (t1._state !== 0)
        H.throwExpression(new P.StateError("Future already completed"));
      t1._asyncCompleteError$2(error, null);
    }
    return;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Future_wait_closure: {"": "Closure;box_0,pos_1",
  call$1: function(value) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = t1.values_1;
    if (t2 == null)
      return;
    t3 = this.pos_1;
    if (t3 < 0 || t3 >= t2.length)
      throw H.ioore(t2, t3);
    t2[t3] = value;
    t1.remaining_2 = t1.remaining_2 - 1;
    if (t1.remaining_2 === 0) {
      t2 = t1.completer_0;
      t1 = t1.values_1;
      t2 = t2.future;
      if (t2._state !== 0)
        H.throwExpression(new P.StateError("Future already completed"));
      t2._asyncComplete$1(t1);
    }
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_Completer: {"": "Object;",
  get$complete: function(_receiver) {
    return new P.BoundClosure$i10(this, P._Completer.prototype.complete$1, _receiver, "complete$1");
  }
},

_AsyncCompleter: {"": "_Completer;future",
  complete$1: function(_, value) {
    var t1 = this.future;
    if (t1._state !== 0)
      throw H.wrapException(new P.StateError("Future already completed"));
    t1._asyncComplete$1(value);
  },
  complete$0: function($receiver) {
    return this.complete$1($receiver, null);
  },
  get$complete: function(_receiver) {
    return new P.BoundClosure$i10(this, P._AsyncCompleter.prototype.complete$1, _receiver, "complete$1");
  },
  $as_Completer: null
},

_SyncCompleter: {"": "_Completer;future",
  complete$1: function(_, value) {
    var t1 = this.future;
    if (t1._state !== 0)
      throw H.wrapException(new P.StateError("Future already completed"));
    t1._complete$1(value);
  },
  complete$0: function($receiver) {
    return this.complete$1($receiver, null);
  },
  get$complete: function(_receiver) {
    return new P.BoundClosure$i10(this, P._SyncCompleter.prototype.complete$1, _receiver, "complete$1");
  },
  $as_Completer: null
},

_Future: {"": "Object;_state,_zone<,_resultOrListeners,_nextListener@,_onValueCallback,_errorTestCallback,_onErrorCallback,_whenCompleteActionCallback",
  get$_isComplete: function() {
    return this._state >= 4;
  },
  get$_hasError: function() {
    return this._state === 8;
  },
  set$_isChained: function(value) {
    if (value)
      this._state = 2;
    else
      this._state = 0;
  },
  get$_onValue: function() {
    return this._state === 2 ? null : this._onValueCallback;
  },
  _onValue$1: function(arg0) {
    return this.get$_onValue().call$1(arg0);
  },
  get$_errorTest: function() {
    return this._state === 2 ? null : this._errorTestCallback;
  },
  get$_onError: function() {
    return this._state === 2 ? null : this._onErrorCallback;
  },
  get$_whenCompleteAction: function() {
    return this._state === 2 ? null : this._whenCompleteActionCallback;
  },
  _whenCompleteAction$0: function() {
    return this.get$_whenCompleteAction().call$0();
  },
  then$2$onError: function(f, onError) {
    var result = P._Future$_then(f, onError, null);
    this._addListener$1(result);
    return result;
  },
  then$1: function(f) {
    return this.then$2$onError(f, null);
  },
  catchError$2$test: function(onError, test) {
    var result = P._Future$_catchError(onError, test, null);
    this._addListener$1(result);
    return result;
  },
  catchError$1: function(onError) {
    return this.catchError$2$test(onError, null);
  },
  whenComplete$1: function(action) {
    var result = P._Future$_whenComplete(action, H.getRuntimeTypeArgument(this, "_Future", 0));
    this._addListener$1(result);
    return result;
  },
  get$_value: function() {
    return this._resultOrListeners;
  },
  get$_error: function() {
    return this._resultOrListeners;
  },
  _setValue$1: function(value) {
    this._state = 4;
    this._resultOrListeners = value;
  },
  _setError$2: function(error, stackTrace) {
    this._state = 8;
    this._resultOrListeners = new P._AsyncError(error, stackTrace);
  },
  _addListener$1: function(listener) {
    if (this._state >= 4)
      this._zone.scheduleMicrotask$1(new P._Future__addListener_closure(this, listener));
    else {
      listener.set$_nextListener(this._resultOrListeners);
      this._resultOrListeners = listener;
    }
  },
  _removeListeners$0: function() {
    var current, prev, next;
    current = this._resultOrListeners;
    this._resultOrListeners = null;
    for (prev = null; current != null; prev = current, current = next) {
      next = current.get$_nextListener();
      current.set$_nextListener(prev);
    }
    return prev;
  },
  _complete$1: function(value) {
    var t1, listeners;
    t1 = J.getInterceptor(value);
    if (typeof value === "object" && value !== null && !!t1.$isFuture) {
      P._Future__chainFutures(value, this);
      return;
    }
    listeners = this._removeListeners$0();
    this._setValue$1(value);
    P._Future__propagateToListeners(this, listeners);
  },
  _completeError$2: function(error, stackTrace) {
    var listeners;
    if (stackTrace != null)
      P._attachStackTrace(error, stackTrace);
    listeners = this._state === 2 ? null : this._removeListeners$0();
    this._setError$2(error, stackTrace);
    P._Future__propagateToListeners(this, listeners);
  },
  _completeError$1: function(error) {
    return this._completeError$2(error, null);
  },
  get$_completeError: function() {
    return new P.BoundClosure$2(this, P._Future.prototype._completeError$2, null, "_completeError$2");
  },
  _asyncComplete$1: function(value) {
    var t1, t2;
    t1 = J.getInterceptor(value);
    t2 = typeof value === "object" && value !== null && !!t1.$isFuture;
    if (t2)
      ;
    if (t2)
      t1 = !t1.$is_Future || value._state < 4;
    else
      t1 = false;
    if (t1) {
      this._complete$1(value);
      return;
    }
    if (this._state !== 0)
      H.throwExpression(new P.StateError("Future already completed"));
    this._state = 1;
    this._zone.scheduleMicrotask$1(new P._Future__asyncComplete_closure(this, value));
  },
  _asyncCompleteError$2: function(error, stackTrace) {
    if (this._state !== 0)
      H.throwExpression(new P.StateError("Future already completed"));
    this._state = 1;
    this._zone.scheduleMicrotask$1(new P._Future__asyncCompleteError_closure(this, error, stackTrace));
  },
  _async$_Future$immediate$1: function(value, $T) {
    this._asyncComplete$1(value);
  },
  $is_Future: true,
  $isFuture: true,
  static: {
"": "_Future__INCOMPLETE,_Future__PENDING_COMPLETE,_Future__CHAINED,_Future__VALUE,_Future__ERROR",
_Future$: function($T) {
  var t1 = new P._Future(0, $.Zone__current, null, null, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$T]);
  return t1;
},

_Future$immediate: function(value, $T) {
  var t1 = new P._Future(0, $.Zone__current, null, null, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$T]);
  t1._async$_Future$immediate$1(value, $T);
  return t1;
},

_Future$_then: function(onValueCallback, onErrorCallback, $T) {
  var t1 = $.Zone__current;
  t1 = new P._Future(0, t1, null, null, t1.registerUnaryCallback$1(onValueCallback), null, P._registerErrorHandler(onErrorCallback, $.Zone__current), null);
  H.setRuntimeTypeInfo(t1, [$T]);
  return t1;
},

_Future$_catchError: function(onErrorCallback, errorTestCallback, $T) {
  var t1, t2;
  t1 = $.Zone__current;
  t2 = P._registerErrorHandler(onErrorCallback, t1);
  t2 = new P._Future(0, t1, null, null, null, $.Zone__current.registerUnaryCallback$1(errorTestCallback), t2, null);
  H.setRuntimeTypeInfo(t2, [$T]);
  return t2;
},

_Future$_whenComplete: function(whenCompleteActionCallback, $T) {
  var t1 = $.Zone__current;
  t1 = new P._Future(0, t1, null, null, null, null, null, t1.registerCallback$1(whenCompleteActionCallback));
  H.setRuntimeTypeInfo(t1, [$T]);
  return t1;
},

_Future__chainFutures: function(source, target) {
  var t1;
  target.set$_isChained(true);
  t1 = J.getInterceptor(source);
  if (typeof source === "object" && source !== null && !!t1.$is_Future)
    if (source._state >= 4)
      P._Future__propagateToListeners(source, target);
    else
      source._addListener$1(target);
  else
    source.then$2$onError(new P._Future__chainFutures_closure(target), new P._Future__chainFutures_closure0(target));
},

_Future__propagateMultipleListeners: function(source, listeners) {
  var listeners0;
  do {
    listeners0 = listeners.get$_nextListener();
    listeners.set$_nextListener(null);
    P._Future__propagateToListeners(source, listeners);
    if (listeners0 != null) {
      listeners = listeners0;
      continue;
    } else
      break;
  } while (true);
},

_Future__propagateToListeners: function(source, listeners) {
  var t1, t2, hasError, asyncError, t3, t4, t5, chainSource, listeners0;
  t1 = {};
  t1.source_4 = source;
  for (; true;) {
    t2 = {};
    if (!t1.source_4.get$_isComplete())
      return;
    hasError = t1.source_4.get$_hasError();
    if (hasError && listeners == null) {
      asyncError = t1.source_4.get$_error();
      t1.source_4.get$_zone().handleUncaughtError$2(J.get$error$x(asyncError), asyncError.get$stackTrace());
      return;
    }
    if (listeners == null)
      return;
    if (listeners.get$_nextListener() != null) {
      P._Future__propagateMultipleListeners(t1.source_4, listeners);
      return;
    }
    if (hasError && !t1.source_4.get$_zone().inSameErrorZone$1(listeners.get$_zone())) {
      asyncError = t1.source_4.get$_error();
      t1.source_4.get$_zone().handleUncaughtError$2(J.get$error$x(asyncError), asyncError.get$stackTrace());
      return;
    }
    t3 = $.Zone__current;
    t4 = listeners.get$_zone();
    if (t3 == null ? t4 != null : t3 !== t4) {
      listeners.get$_zone().run$1(new P._Future__propagateToListeners_closure(t1, listeners));
      return;
    }
    t2.listenerHasValue_1 = null;
    t2.listenerValueOrError_2 = null;
    t2.isPropagationAborted_3 = false;
    listeners.get$_zone().run$1(new P._Future__propagateToListeners_closure0(t1, t2, hasError, listeners));
    if (t2.isPropagationAborted_3)
      return;
    t3 = t2.listenerHasValue_1 === true;
    if (t3) {
      t4 = t2.listenerValueOrError_2;
      t5 = J.getInterceptor(t4);
      t5 = typeof t4 === "object" && t4 !== null && !!t5.$isFuture;
      t4 = t5;
    } else
      t4 = false;
    if (t4) {
      chainSource = t2.listenerValueOrError_2;
      t2 = J.getInterceptor(chainSource);
      if (typeof chainSource === "object" && chainSource !== null && !!t2.$is_Future && chainSource._state >= 4) {
        listeners.set$_isChained(true);
        t1.source_4 = chainSource;
        continue;
      }
      P._Future__chainFutures(chainSource, listeners);
      return;
    }
    if (t3) {
      listeners0 = listeners._removeListeners$0();
      listeners._setValue$1(t2.listenerValueOrError_2);
    } else {
      listeners0 = listeners._removeListeners$0();
      asyncError = t2.listenerValueOrError_2;
      listeners._setError$2(J.get$error$x(asyncError), asyncError.get$stackTrace());
    }
    t1.source_4 = listeners;
    listeners = listeners0;
  }
}}

},

_Future__addListener_closure: {"": "Closure;this_0,listener_1",
  call$0: function() {
    P._Future__propagateToListeners(this.this_0, this.listener_1);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

_Future__chainFutures_closure: {"": "Closure;target_0",
  call$1: function(value) {
    this.target_0._complete$1(value);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_Future__chainFutures_closure0: {"": "Closure;target_1",
  call$2: function(error, stackTrace) {
    this.target_1._completeError$2(error, stackTrace);
  },
  "+call:2:0": 0,
  "*call": [11],
  call$1: function(error) {
    return this.call$2(error, null);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_args2: true,
  $is_Object__Object: true,
  $is_args1: true
},

_Future__asyncComplete_closure: {"": "Closure;this_0,value_1",
  call$0: function() {
    this.this_0._complete$1(this.value_1);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

_Future__asyncCompleteError_closure: {"": "Closure;this_0,error_1,stackTrace_2",
  call$0: function() {
    this.this_0._completeError$2(this.error_1, this.stackTrace_2);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

_Future__propagateToListeners_closure: {"": "Closure;box_2,listener_3",
  call$0: function() {
    P._Future__propagateToListeners(this.box_2.source_4, this.listener_3);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

_Future__propagateToListeners_closure0: {"": "Closure;box_2,box_1,hasError_4,listener_5",
  call$0: function() {
    var t1, value, asyncError, test, matchesTest, errorCallback, e, s, t2, t3, t4, exception;
    t1 = {};
    try {
      t2 = this.box_2;
      if (!this.hasError_4) {
        value = t2.source_4.get$_value();
        t2 = this.listener_5;
        t3 = this.box_1;
        if (t2.get$_onValue() != null) {
          t3.listenerValueOrError_2 = t2._onValue$1(value);
          t3.listenerHasValue_1 = true;
        } else {
          t3.listenerValueOrError_2 = value;
          t3.listenerHasValue_1 = true;
        }
      } else {
        asyncError = t2.source_4.get$_error();
        t2 = this.listener_5;
        test = t2.get$_errorTest();
        matchesTest = true;
        if (test != null)
          matchesTest = test.call$1(J.get$error$x(asyncError));
        t3 = matchesTest === true && t2.get$_onError() != null;
        t4 = this.box_1;
        if (t3) {
          errorCallback = t2.get$_onError();
          t4.listenerValueOrError_2 = P._invokeErrorHandler(errorCallback, J.get$error$x(asyncError), asyncError.get$stackTrace());
          t4.listenerHasValue_1 = true;
        } else {
          t4.listenerValueOrError_2 = asyncError;
          t4.listenerHasValue_1 = false;
        }
      }
      t2 = this.listener_5;
      if (t2.get$_whenCompleteAction() != null) {
        t1.completeResult_0 = t2._whenCompleteAction$0();
        t3 = t1.completeResult_0;
        t4 = J.getInterceptor(t3);
        if (typeof t3 === "object" && t3 !== null && !!t4.$isFuture) {
          t2.set$_isChained(true);
          t1.completeResult_0.then$2$onError(new P._Future__propagateToListeners__closure(this.box_2, t2), new P._Future__propagateToListeners__closure0(t1, t2));
          this.box_1.isPropagationAborted_3 = true;
        }
      }
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      if (this.hasError_4) {
        t1 = J.get$error$x(this.box_2.source_4.get$_error());
        t2 = e;
        t2 = t1 == null ? t2 == null : t1 === t2;
        t1 = t2;
      } else
        t1 = false;
      t2 = this.box_1;
      if (t1)
        t2.listenerValueOrError_2 = this.box_2.source_4.get$_error();
      else
        t2.listenerValueOrError_2 = new P._AsyncError(P._asyncError(e, s), s);
      this.box_1.listenerHasValue_1 = false;
    }

  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

_Future__propagateToListeners__closure: {"": "Closure;box_2,listener_6",
  call$1: function(ignored) {
    P._Future__propagateToListeners(this.box_2.source_4, this.listener_6);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_Future__propagateToListeners__closure0: {"": "Closure;box_0,listener_7",
  call$2: function(error, stackTrace) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = t1.completeResult_0;
    t3 = J.getInterceptor(t2);
    if (typeof t2 !== "object" || t2 === null || !t3.$is_Future) {
      t1.completeResult_0 = P._Future$(null);
      t1.completeResult_0._setError$2(error, stackTrace);
    }
    P._Future__propagateToListeners(t1.completeResult_0, this.listener_7);
  },
  "+call:2:0": 0,
  "*call": [11],
  call$1: function(error) {
    return this.call$2(error, null);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_args2: true,
  $is_Object__Object: true,
  $is_args1: true
},

Stream: {"": "Object;",
  where$1: function(_, test) {
    var t1 = new P._WhereStream(test, this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "Stream", 0)]);
    return t1;
  },
  map$1: function(_, convert) {
    var t1 = new P._MapStream(convert, this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "Stream", 0), null]);
    return t1;
  },
  join$1: function(_, separator) {
    var t1, result, buffer;
    t1 = {};
    result = P._Future$(J.JSString);
    buffer = P.StringBuffer$("");
    t1.subscription_0 = null;
    t1.first_1 = true;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_join_closure(t1, this, separator, result, buffer), true, new P.Stream_join_closure0(result, buffer), new P.Stream_join_closure1(result));
    return result;
  },
  contains$1: function(_, needle) {
    var t1, future;
    t1 = {};
    future = P._Future$(J.JSBool);
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_contains_closure(t1, this, needle, future), true, new P.Stream_contains_closure0(future), future.get$_completeError());
    return future;
  },
  forEach$1: function(_, action) {
    var t1, future;
    t1 = {};
    future = P._Future$(null);
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_forEach_closure(t1, this, action, future), true, new P.Stream_forEach_closure0(future), future.get$_completeError());
    return future;
  },
  any$1: function(_, test) {
    var t1, future;
    t1 = {};
    future = P._Future$(J.JSBool);
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_any_closure(t1, this, test, future), true, new P.Stream_any_closure0(future), future.get$_completeError());
    return future;
  },
  get$length: function(_) {
    var t1, future;
    t1 = {};
    future = P._Future$(J.JSInt);
    t1.count_0 = 0;
    this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
    return future;
  },
  "+length": 0,
  get$isEmpty: function(_) {
    var t1, future;
    t1 = {};
    future = P._Future$(J.JSBool);
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_isEmpty_closure(t1, future), true, new P.Stream_isEmpty_closure0(future), future.get$_completeError());
    return future;
  },
  "+isEmpty": 0,
  toList$0: function(_) {
    var result, future;
    result = [];
    future = P._Future$([J.JSArray, H.getRuntimeTypeArgument(this, "Stream", 0)]);
    this.listen$4$cancelOnError$onDone$onError(new P.Stream_toList_closure(this, result), true, new P.Stream_toList_closure0(result, future), future.get$_completeError());
    return future;
  },
  get$first: function(_) {
    var t1, future;
    t1 = {};
    future = P._Future$(H.getRuntimeTypeArgument(this, "Stream", 0));
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_first_closure(t1, this, future), true, new P.Stream_first_closure0(future), future.get$_completeError());
    return future;
  },
  get$last: function(_) {
    var t1, future;
    t1 = {};
    future = P._Future$(H.getRuntimeTypeArgument(this, "Stream", 0));
    t1.result_0 = null;
    t1.foundResult_1 = false;
    this.listen$4$cancelOnError$onDone$onError(new P.Stream_last_closure(t1, this), true, new P.Stream_last_closure0(t1, future), future.get$_completeError());
    return future;
  },
  get$single: function(_) {
    var t1, future;
    t1 = {};
    future = P._Future$(H.getRuntimeTypeArgument(this, "Stream", 0));
    t1.result_0 = null;
    t1.foundResult_1 = false;
    t1.subscription_2 = null;
    t1.subscription_2 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_single_closure(t1, this, future), true, new P.Stream_single_closure0(t1, future), future.get$_completeError());
    return future;
  },
  firstWhere$2$defaultValue: function(_, test, defaultValue) {
    var t1, future;
    t1 = {};
    future = P._Future$(null);
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_firstWhere_closure(t1, this, test, future), true, new P.Stream_firstWhere_closure0(defaultValue, future), future.get$_completeError());
    return future;
  },
  firstWhere$1: function($receiver, test) {
    return this.firstWhere$2$defaultValue($receiver, test, null);
  },
  elementAt$1: function(_, index) {
    var t1, t2, future;
    t1 = {};
    t1.index_0 = index;
    t2 = t1.index_0;
    if (typeof t2 !== "number" || Math.floor(t2) !== t2 || J.$lt$n(t2, 0))
      throw H.wrapException(new P.ArgumentError(t1.index_0));
    future = P._Future$(H.getRuntimeTypeArgument(this, "Stream", 0));
    t1.subscription_1 = null;
    t1.subscription_1 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_elementAt_closure(t1, this, future), true, new P.Stream_elementAt_closure0(t1, future), future.get$_completeError());
    return future;
  },
  $isStream: true
},

Stream_join_closure: {"": "Closure;box_0,this_1,separator_2,result_3,buffer_4",
  call$1: function(element) {
    var e, s, t1, exception, t2;
    t1 = this.box_0;
    if (!t1.first_1)
      this.buffer_4.write$1(this.separator_2);
    t1.first_1 = false;
    try {
      this.buffer_4.write$1(element);
    } catch (exception) {
      t2 = H.unwrapException(exception);
      e = t2;
      s = new H._StackTrace(exception, null);
      P._cancelAndError(t1.subscription_0, this.result_3, P._asyncError(e, s), s);
    }

  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Stream_join_closure1: {"": "Closure;result_5",
  call$1: function(e) {
    this.result_5._completeError$1(e);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Stream_join_closure0: {"": "Closure;result_6,buffer_7",
  call$0: function() {
    this.result_6._complete$1(this.buffer_7._contents);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Stream_contains_closure: {"": "Closure;box_0,this_1,needle_2,future_3",
  call$1: function(element) {
    var t1, t2;
    t1 = this.box_0;
    t2 = this.future_3;
    P._runUserCode(new P.Stream_contains__closure(this.needle_2, element), new P.Stream_contains__closure0(t1, t2), P._cancelAndErrorClosure(t1.subscription_0, t2));
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Stream_contains__closure: {"": "Closure;needle_4,element_5",
  call$0: function() {
    return J.$eq(this.element_5, this.needle_4);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Stream_contains__closure0: {"": "Closure;box_0,future_6",
  call$1: function(isMatch) {
    if (isMatch === true)
      P._cancelAndValue(this.box_0.subscription_0, this.future_6, true);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Stream_contains_closure0: {"": "Closure;future_7",
  call$0: function() {
    this.future_7._complete$1(false);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Stream_forEach_closure: {"": "Closure;box_0,this_1,action_2,future_3",
  call$1: function(element) {
    P._runUserCode(new P.Stream_forEach__closure(this.action_2, element), new P.Stream_forEach__closure0(), P._cancelAndErrorClosure(this.box_0.subscription_0, this.future_3));
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Stream_forEach__closure: {"": "Closure;action_4,element_5",
  call$0: function() {
    return this.action_4.call$1(this.element_5);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Stream_forEach__closure0: {"": "Closure;",
  call$1: function(_) {
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Stream_forEach_closure0: {"": "Closure;future_6",
  call$0: function() {
    this.future_6._complete$1(null);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Stream_any_closure: {"": "Closure;box_0,this_1,test_2,future_3",
  call$1: function(element) {
    var t1, t2;
    t1 = this.box_0;
    t2 = this.future_3;
    P._runUserCode(new P.Stream_any__closure(this.test_2, element), new P.Stream_any__closure0(t1, t2), P._cancelAndErrorClosure(t1.subscription_0, t2));
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Stream_any__closure: {"": "Closure;test_4,element_5",
  call$0: function() {
    return this.test_4.call$1(this.element_5);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Stream_any__closure0: {"": "Closure;box_0,future_6",
  call$1: function(isMatch) {
    if (isMatch === true)
      P._cancelAndValue(this.box_0.subscription_0, this.future_6, true);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Stream_any_closure0: {"": "Closure;future_7",
  call$0: function() {
    this.future_7._complete$1(false);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Stream_length_closure: {"": "Closure;box_0",
  call$1: function(_) {
    var t1 = this.box_0;
    t1.count_0 = t1.count_0 + 1;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Stream_length_closure0: {"": "Closure;box_0,future_1",
  call$0: function() {
    this.future_1._complete$1(this.box_0.count_0);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Stream_isEmpty_closure: {"": "Closure;box_0,future_1",
  call$1: function(_) {
    P._cancelAndValue(this.box_0.subscription_0, this.future_1, false);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Stream_isEmpty_closure0: {"": "Closure;future_2",
  call$0: function() {
    this.future_2._complete$1(true);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Stream_toList_closure: {"": "Closure;this_0,result_1",
  call$1: function(data) {
    this.result_1.push(data);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Stream_toList_closure0: {"": "Closure;result_2,future_3",
  call$0: function() {
    this.future_3._complete$1(this.result_2);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Stream_first_closure: {"": "Closure;box_0,this_1,future_2",
  call$1: function(value) {
    P._cancelAndValue(this.box_0.subscription_0, this.future_2, value);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Stream_first_closure0: {"": "Closure;future_3",
  call$0: function() {
    this.future_3._completeError$1(new P.StateError("No elements"));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Stream_last_closure: {"": "Closure;box_0,this_1",
  call$1: function(value) {
    var t1 = this.box_0;
    t1.foundResult_1 = true;
    t1.result_0 = value;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Stream_last_closure0: {"": "Closure;box_0,future_2",
  call$0: function() {
    var t1 = this.box_0;
    if (t1.foundResult_1) {
      this.future_2._complete$1(t1.result_0);
      return;
    }
    this.future_2._completeError$1(new P.StateError("No elements"));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Stream_single_closure: {"": "Closure;box_0,this_1,future_2",
  call$1: function(value) {
    var t1 = this.box_0;
    if (t1.foundResult_1) {
      P._cancelAndError(t1.subscription_2, this.future_2, new P.StateError("More than one element"), null);
      return;
    }
    t1.foundResult_1 = true;
    t1.result_0 = value;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Stream_single_closure0: {"": "Closure;box_0,future_3",
  call$0: function() {
    var t1 = this.box_0;
    if (t1.foundResult_1) {
      this.future_3._complete$1(t1.result_0);
      return;
    }
    this.future_3._completeError$1(new P.StateError("No elements"));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Stream_firstWhere_closure: {"": "Closure;box_0,this_1,test_2,future_3",
  call$1: function(value) {
    var t1, t2;
    t1 = this.box_0;
    t2 = this.future_3;
    P._runUserCode(new P.Stream_firstWhere__closure(this.test_2, value), new P.Stream_firstWhere__closure0(t1, t2, value), P._cancelAndErrorClosure(t1.subscription_0, t2));
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Stream_firstWhere__closure: {"": "Closure;test_4,value_5",
  call$0: function() {
    return this.test_4.call$1(this.value_5);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Stream_firstWhere__closure0: {"": "Closure;box_0,future_6,value_7",
  call$1: function(isMatch) {
    if (isMatch === true)
      P._cancelAndValue(this.box_0.subscription_0, this.future_6, this.value_7);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Stream_firstWhere_closure0: {"": "Closure;defaultValue_8,future_9",
  call$0: function() {
    this.future_9._completeError$1(new P.StateError("firstMatch ended without match"));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Stream_elementAt_closure: {"": "Closure;box_0,this_1,future_2",
  call$1: function(value) {
    var t1 = this.box_0;
    if (J.$eq(t1.index_0, 0)) {
      P._cancelAndValue(t1.subscription_1, this.future_2, value);
      return;
    }
    t1.index_0 = J.$sub$n(t1.index_0, 1);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Stream_elementAt_closure0: {"": "Closure;box_0,future_3",
  call$0: function() {
    this.future_3._completeError$1(new P.RangeError("value " + H.S(this.box_0.index_0)));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

StreamSubscription: {"": "Object;", $isStreamSubscription: true},

_StreamController: {"": "Object;",
  _onPause$0: function() {
    return this.get$_onPause().call$0();
  },
  _onResume$0: function() {
    return this.get$_onResume().call$0();
  },
  _onCancel$0: function() {
    return this.get$_onCancel().call$0();
  },
  get$_pendingEvents: function() {
    if ((this._state & 8) === 0)
      return this._varData;
    return this._varData.get$varData();
  },
  _ensurePendingEvents$0: function() {
    if ((this._state & 8) === 0) {
      if (this._varData == null)
        this._varData = new P._StreamImplEvents(null, null, 0);
      return this._varData;
    }
    var t1 = this._varData.get$varData();
    return t1;
  },
  get$_subscription: function() {
    if ((this._state & 8) !== 0)
      return this._varData.get$varData();
    return this._varData;
  },
  _badEventState$0: function() {
    if ((this._state & 4) !== 0)
      return new P.StateError("Cannot add event after closing");
    return new P.StateError("Cannot add event while adding a stream");
  },
  _ensureDoneFuture$0: function() {
    if (this._doneFuture == null) {
      this._doneFuture = P._Future$(null);
      if ((this._state & 2) !== 0)
        this._doneFuture._complete$1(null);
    }
    return this._doneFuture;
  },
  add$1: function(_, value) {
    if (this._state >= 4)
      throw H.wrapException(this._badEventState$0());
    this._async$_add$1(value);
  },
  get$add: function(_receiver) {
    return new J.BoundClosure$i1(this, P._StreamController.prototype.add$1, _receiver, "add$1");
  },
  addError$2: function(error, stackTrace) {
    if (this._state >= 4)
      throw H.wrapException(this._badEventState$0());
    this._addError$2(error, stackTrace);
  },
  get$addError: function() {
    return new P.BoundClosure$2(this, P._StreamController.prototype.addError$2, null, "addError$2");
  },
  close$0: function(_) {
    var t1 = this._state;
    if ((t1 & 4) !== 0)
      return this._doneFuture;
    if (t1 >= 4)
      throw H.wrapException(this._badEventState$0());
    this._state = (t1 | 4) >>> 0;
    this._ensureDoneFuture$0();
    t1 = this._state;
    if ((t1 & 1) !== 0)
      this._sendDone$0();
    else if ((t1 & 3) === 0) {
      t1 = this._ensurePendingEvents$0();
      t1.add$1(t1, C.C__DelayedDone);
    }
    return this._doneFuture;
  },
  get$close: function(_receiver) {
    return new H.BoundClosure$i0(this, P._StreamController.prototype.close$0, _receiver, "close$0");
  },
  _async$_add$1: function(value) {
    var t1, t2;
    t1 = this._state;
    if ((t1 & 1) !== 0)
      this._sendData$1(value);
    else if ((t1 & 3) === 0) {
      t1 = this._ensurePendingEvents$0();
      t2 = new P._DelayedData(value, null);
      H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(this, "_StreamController", 0)]);
      t1.add$1(t1, t2);
    }
  },
  _addError$2: function(error, stackTrace) {
    var t1 = this._state;
    if ((t1 & 1) !== 0)
      this._sendError$2(error, stackTrace);
    else if ((t1 & 3) === 0) {
      t1 = this._ensurePendingEvents$0();
      t1.add$1(t1, new P._DelayedError(error, stackTrace, null));
    }
  },
  _close$0: function() {
    var addState = this._varData;
    this._varData = addState.get$varData();
    this._state = (this._state & 4294967287) >>> 0;
    addState.complete$0(addState);
  },
  _subscribe$1: function(cancelOnError) {
    var t1, t2, subscription, pendingEvents;
    if ((this._state & 3) !== 0)
      throw H.wrapException(new P.StateError("Stream has already been listened to."));
    t1 = $.Zone__current;
    t2 = cancelOnError ? 1 : 0;
    subscription = new P._ControllerSubscription(this, null, null, null, t1, t2, null, null);
    H.setRuntimeTypeInfo(subscription, [null]);
    pendingEvents = this.get$_pendingEvents();
    this._state = (this._state | 1) >>> 0;
    if ((this._state & 8) !== 0)
      this._varData.set$varData(subscription);
    else
      this._varData = subscription;
    subscription._setPendingEvents$1(pendingEvents);
    subscription._guardCallback$1(new P._StreamController__subscribe_closure(this));
    return subscription;
  },
  _recordCancel$1: function(subscription) {
    var t1, future;
    if ((this._state & 8) !== 0)
      this._varData.cancel$0();
    this._varData = null;
    this._state = (this._state & 4294967286 | 2) >>> 0;
    t1 = new P._StreamController__recordCancel_complete(this);
    future = P._runGuarded(this.get$_onCancel());
    if (future != null)
      future = future.whenComplete$1(t1);
    else
      t1.call$0();
    return future;
  },
  _recordPause$1: function(subscription) {
    var addState;
    if ((this._state & 8) !== 0) {
      addState = this._varData;
      addState.pause$0(addState);
    }
    P._runGuarded(this.get$_onPause());
  },
  _recordResume$1: function(subscription) {
    if ((this._state & 8) !== 0)
      this._varData.resume$0();
    P._runGuarded(this.get$_onResume());
  }
},

_StreamController__subscribe_closure: {"": "Closure;this_0",
  call$0: function() {
    P._runGuarded(this.this_0.get$_onListen());
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

_StreamController__recordCancel_complete: {"": "Closure;this_0",
  call$0: function() {
    var t1 = this.this_0._doneFuture;
    if (t1 != null && t1._state === 0)
      t1._asyncComplete$1(null);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

_SyncStreamControllerDispatch: {"": "Object;",
  _sendData$1: function(data) {
    this.get$_subscription()._async$_add$1(data);
  },
  _sendError$2: function(error, stackTrace) {
    this.get$_subscription()._addError$2(error, stackTrace);
  },
  _sendDone$0: function() {
    this.get$_subscription()._close$0();
  }
},

_AsyncStreamControllerDispatch: {"": "Object;",
  _sendData$1: function(data) {
    var t1, t2;
    t1 = this.get$_subscription();
    t2 = new P._DelayedData(data, null);
    H.setRuntimeTypeInfo(t2, [null]);
    t1._addPending$1(t2);
  },
  _sendError$2: function(error, stackTrace) {
    this.get$_subscription()._addPending$1(new P._DelayedError(error, stackTrace, null));
  },
  _sendDone$0: function() {
    this.get$_subscription()._addPending$1(C.C__DelayedDone);
  }
},

_AsyncStreamController: {"": "_StreamController__AsyncStreamControllerDispatch;_onListen<,_onPause<,_onResume<,_onCancel<,_varData,_state,_doneFuture",
  _onPause$0: function() {
    return this._onPause.call$0();
  },
  _onResume$0: function() {
    return this._onResume.call$0();
  },
  _onCancel$0: function() {
    return this._onCancel.call$0();
  }
},

_StreamController__AsyncStreamControllerDispatch: {"": "_StreamController+_AsyncStreamControllerDispatch;", $as_StreamController: null},

_SyncStreamController: {"": "_StreamController__SyncStreamControllerDispatch;_onListen<,_onPause<,_onResume<,_onCancel<,_varData,_state,_doneFuture",
  _onPause$0: function() {
    return this._onPause.call$0();
  },
  _onResume$0: function() {
    return this._onResume.call$0();
  },
  _onCancel$0: function() {
    return this._onCancel.call$0();
  }
},

_StreamController__SyncStreamControllerDispatch: {"": "_StreamController+_SyncStreamControllerDispatch;", $as_StreamController: null},

_ControllerStream: {"": "_StreamImpl;_controller<",
  _createSubscription$1: function(cancelOnError) {
    return this._controller._subscribe$1(cancelOnError);
  },
  get$hashCode: function(_) {
    return (H.Primitives_objectHashCode(this._controller) ^ 892482866) >>> 0;
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (this === other)
      return true;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$is_ControllerStream)
      return false;
    return other._controller === this._controller;
  },
  $is_ControllerStream: true,
  $as_StreamImpl: null,
  $asStream: null
},

_ControllerSubscription: {"": "_BufferingStreamSubscription;_controller<,_async$_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
  _onCancel$0: function() {
    return this.get$_controller()._recordCancel$1(this);
  },
  get$_onCancel: function() {
    return new H.BoundClosure$0(this, P._ControllerSubscription.prototype._onCancel$0, null, "_onCancel$0");
  },
  _onPause$0: function() {
    this.get$_controller()._recordPause$1(this);
  },
  get$_onPause: function() {
    return new H.BoundClosure$0(this, P._ControllerSubscription.prototype._onPause$0, null, "_onPause$0");
  },
  _onResume$0: function() {
    this.get$_controller()._recordResume$1(this);
  },
  get$_onResume: function() {
    return new H.BoundClosure$0(this, P._ControllerSubscription.prototype._onResume$0, null, "_onResume$0");
  },
  $as_BufferingStreamSubscription: null,
  $asStreamSubscription: null
},

_EventSink: {"": "Object;"},

_BufferingStreamSubscription: {"": "Object;_async$_onData,_onError<,_onDone,_zone<,_state,_cancelFuture,_pending",
  _setPendingEvents$1: function(pendingEvents) {
    if (pendingEvents == null)
      return;
    this._pending = pendingEvents;
    if (!pendingEvents.get$isEmpty(pendingEvents)) {
      this._state = (this._state | 64) >>> 0;
      this._pending.schedule$1(this);
    }
  },
  onData$1: function(handleData) {
    this._async$_onData = $.Zone__current.registerUnaryCallback$1(handleData);
  },
  onError$1: function(_, handleError) {
    if (handleError == null)
      handleError = P._nullErrorHandler$closure;
    this._onError = P._registerErrorHandler(handleError, $.Zone__current);
  },
  onDone$1: function(handleDone) {
    if (handleDone == null)
      handleDone = P._nullDoneHandler$closure;
    this._onDone = $.Zone__current.registerCallback$1(handleDone);
  },
  pause$1: function(_, resumeSignal) {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    this._state = (t1 + 128 | 4) >>> 0;
    if (t1 < 128 && this._pending != null)
      this._pending.cancelSchedule$0();
    if ((t1 & 4) === 0 && (this._state & 32) === 0)
      this._guardCallback$1(this.get$_onPause());
  },
  pause$0: function($receiver) {
    return this.pause$1($receiver, null);
  },
  resume$0: function() {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    if (t1 >= 128) {
      this._state = t1 - 128;
      t1 = this._state;
      if (t1 < 128) {
        if ((t1 & 64) !== 0) {
          t1 = this._pending;
          t1 = !t1.get$isEmpty(t1);
        } else
          t1 = false;
        if (t1)
          this._pending.schedule$1(this);
        else {
          this._state = (this._state & 4294967291) >>> 0;
          if ((this._state & 32) === 0)
            this._guardCallback$1(this.get$_onResume());
        }
      }
    }
  },
  cancel$0: function() {
    this._state = (this._state & 4294967279) >>> 0;
    if ((this._state & 8) !== 0)
      return this._cancelFuture;
    this._cancel$0();
    return this._cancelFuture;
  },
  get$_mayResumeInput: function() {
    if (this._state < 128) {
      var t1 = this._pending;
      t1 = t1 == null || t1.get$isEmpty(t1);
    } else
      t1 = false;
    return t1;
  },
  _cancel$0: function() {
    this._state = (this._state | 8) >>> 0;
    if ((this._state & 64) !== 0)
      this._pending.cancelSchedule$0();
    if ((this._state & 32) === 0)
      this._pending = null;
    this._cancelFuture = this._onCancel$0();
  },
  _async$_add$1: function(data) {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    if (t1 < 32)
      this._sendData$1(data);
    else {
      t1 = new P._DelayedData(data, null);
      H.setRuntimeTypeInfo(t1, [null]);
      this._addPending$1(t1);
    }
  },
  _addError$2: function(error, stackTrace) {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    if (t1 < 32)
      this._sendError$2(error, stackTrace);
    else
      this._addPending$1(new P._DelayedError(error, stackTrace, null));
  },
  _close$0: function() {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    this._state = (t1 | 2) >>> 0;
    if (this._state < 32)
      this._sendDone$0();
    else
      this._addPending$1(C.C__DelayedDone);
  },
  _onPause$0: function() {
  },
  get$_onPause: function() {
    return new H.BoundClosure$0(this, P._BufferingStreamSubscription.prototype._onPause$0, null, "_onPause$0");
  },
  _onResume$0: function() {
  },
  get$_onResume: function() {
    return new H.BoundClosure$0(this, P._BufferingStreamSubscription.prototype._onResume$0, null, "_onResume$0");
  },
  _onCancel$0: function() {
  },
  get$_onCancel: function() {
    return new H.BoundClosure$0(this, P._BufferingStreamSubscription.prototype._onCancel$0, null, "_onCancel$0");
  },
  _addPending$1: function($event) {
    var pending, t1;
    pending = this._pending;
    if (pending == null) {
      pending = new P._StreamImplEvents(null, null, 0);
      this._pending = pending;
    }
    pending.add$1(pending, $event);
    t1 = this._state;
    if ((t1 & 64) === 0) {
      this._state = (t1 | 64) >>> 0;
      if (this._state < 128)
        this._pending.schedule$1(this);
    }
  },
  _sendData$1: function(data) {
    var t1 = this._state;
    this._state = (t1 | 32) >>> 0;
    this._zone.runUnaryGuarded$2(this._async$_onData, data);
    this._state = (this._state & 4294967263) >>> 0;
    this._checkState$1((t1 & 4) !== 0);
  },
  _sendError$2: function(error, stackTrace) {
    var t1, t2, t3;
    t1 = this._state;
    t2 = new P._BufferingStreamSubscription__sendError_sendError(this, error, stackTrace);
    if ((t1 & 1) !== 0) {
      this._state = (t1 | 16) >>> 0;
      this._cancel$0();
      t1 = this._cancelFuture;
      t3 = J.getInterceptor(t1);
      if (typeof t1 === "object" && t1 !== null && !!t3.$isFuture)
        t1.whenComplete$1(t2);
      else
        t2.call$0();
    } else {
      t2.call$0();
      this._checkState$1((t1 & 4) !== 0);
    }
  },
  _sendDone$0: function() {
    var t1, t2, t3;
    t1 = new P._BufferingStreamSubscription__sendDone_sendDone(this);
    this._cancel$0();
    this._state = (this._state | 16) >>> 0;
    t2 = this._cancelFuture;
    t3 = J.getInterceptor(t2);
    if (typeof t2 === "object" && t2 !== null && !!t3.$isFuture)
      t2.whenComplete$1(t1);
    else
      t1.call$0();
  },
  _guardCallback$1: function(callback) {
    var t1 = this._state;
    this._state = (t1 | 32) >>> 0;
    callback.call$0();
    this._state = (this._state & 4294967263) >>> 0;
    this._checkState$1((t1 & 4) !== 0);
  },
  _checkState$1: function(wasInputPaused) {
    var t1, isInputPaused;
    if ((this._state & 64) !== 0) {
      t1 = this._pending;
      t1 = t1.get$isEmpty(t1);
    } else
      t1 = false;
    if (t1) {
      this._state = (this._state & 4294967231) >>> 0;
      if ((this._state & 4) !== 0 && this.get$_mayResumeInput())
        this._state = (this._state & 4294967291) >>> 0;
    }
    for (; true; wasInputPaused = isInputPaused) {
      t1 = this._state;
      if ((t1 & 8) !== 0) {
        this._pending = null;
        return;
      }
      isInputPaused = (t1 & 4) !== 0;
      if (wasInputPaused === isInputPaused)
        break;
      this._state = (t1 ^ 32) >>> 0;
      if (isInputPaused)
        this._onPause$0();
      else
        this._onResume$0();
      this._state = (this._state & 4294967263) >>> 0;
    }
    t1 = this._state;
    if ((t1 & 64) !== 0 && t1 < 128)
      this._pending.schedule$1(this);
  },
  $isStreamSubscription: true,
  static: {
"": "_BufferingStreamSubscription__STATE_CANCEL_ON_ERROR,_BufferingStreamSubscription__STATE_CLOSED,_BufferingStreamSubscription__STATE_INPUT_PAUSED,_BufferingStreamSubscription__STATE_CANCELED,_BufferingStreamSubscription__STATE_WAIT_FOR_CANCEL,_BufferingStreamSubscription__STATE_IN_CALLBACK,_BufferingStreamSubscription__STATE_HAS_PENDING,_BufferingStreamSubscription__STATE_PAUSE_COUNT,_BufferingStreamSubscription__STATE_PAUSE_COUNT_SHIFT",
}

},

_BufferingStreamSubscription__sendError_sendError: {"": "Closure;this_0,error_1,stackTrace_2",
  call$0: function() {
    var t1, t2, t3, t4, t5;
    t1 = this.this_0;
    t2 = t1._state;
    if ((t2 & 8) !== 0 && (t2 & 16) === 0)
      return;
    t1._state = (t2 | 32) >>> 0;
    t2 = t1._zone;
    if (!t2.inSameErrorZone$1($.Zone__current))
      $.Zone__current.handleUncaughtError$2(this.error_1, this.stackTrace_2);
    else {
      t3 = t1._onError;
      t4 = J.getInterceptor(t3);
      t5 = this.error_1;
      if (!!t4.$is_args2)
        t2.runBinaryGuarded$3(t3, t5, this.stackTrace_2);
      else
        t2.runUnaryGuarded$2(t3, t5);
    }
    t1._state = (t1._state & 4294967263) >>> 0;
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

_BufferingStreamSubscription__sendDone_sendDone: {"": "Closure;this_0",
  call$0: function() {
    var t1, t2;
    t1 = this.this_0;
    t2 = t1._state;
    if ((t2 & 16) === 0)
      return;
    t1._state = (t2 | 42) >>> 0;
    t1._zone.runGuarded$1(t1._onDone);
    t1._state = (t1._state & 4294967263) >>> 0;
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

_StreamImpl: {"": "Stream;",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var subscription = this._createSubscription$1(true === cancelOnError);
    subscription.onData$1(onData);
    subscription.onError$1(subscription, onError);
    subscription.onDone$1(onDone);
    return subscription;
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  listen$1: function(onData) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
  },
  _createSubscription$1: function(cancelOnError) {
    var t1, t2, t3;
    t1 = H.getRuntimeTypeArgument(this, "_StreamImpl", 0);
    t2 = $.Zone__current;
    t3 = cancelOnError ? 1 : 0;
    t3 = new P._BufferingStreamSubscription(null, null, null, t2, t3, null, null);
    H.setRuntimeTypeInfo(t3, [t1]);
    return t3;
  },
  _onListen$1: function(subscription) {
  },
  get$_onListen: function() {
    return new H.BoundClosure$1(this, P._StreamImpl.prototype._onListen$1, null, "_onListen$1");
  },
  $asStream: null
},

_DelayedEvent: {"": "Object;next@"},

_DelayedData: {"": "_DelayedEvent;value>,next",
  perform$1: function(dispatch) {
    dispatch._sendData$1(this.value);
  }
},

_DelayedError: {"": "_DelayedEvent;error>,stackTrace<,next",
  perform$1: function(dispatch) {
    dispatch._sendError$2(this.error, this.stackTrace);
  }
},

_DelayedDone: {"": "Object;",
  perform$1: function(dispatch) {
    dispatch._sendDone$0();
  },
  get$next: function() {
    return;
  },
  set$next: function(_) {
    throw H.wrapException(new P.StateError("No events after a done."));
  }
},

_PendingEvents: {"": "Object;",
  schedule$1: function(dispatch) {
    var t1 = this._state;
    if (t1 === 1)
      return;
    if (t1 >= 1) {
      this._state = 1;
      return;
    }
    P.scheduleMicrotask(new P._PendingEvents_schedule_closure(this, dispatch));
    this._state = 1;
  },
  cancelSchedule$0: function() {
    if (this._state === 1)
      this._state = 3;
  }
},

_PendingEvents_schedule_closure: {"": "Closure;this_0,dispatch_1",
  call$0: function() {
    var t1, oldState;
    t1 = this.this_0;
    oldState = t1._state;
    t1._state = 0;
    if (oldState === 3)
      return;
    t1.handleNext$1(this.dispatch_1);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

_StreamImplEvents: {"": "_PendingEvents;firstPendingEvent,lastPendingEvent,_state",
  get$isEmpty: function(_) {
    return this.lastPendingEvent == null;
  },
  "+isEmpty": 0,
  add$1: function(_, $event) {
    var t1 = this.lastPendingEvent;
    if (t1 == null) {
      this.lastPendingEvent = $event;
      this.firstPendingEvent = $event;
    } else {
      t1.set$next($event);
      this.lastPendingEvent = $event;
    }
  },
  get$add: function(_receiver) {
    return new J.BoundClosure$i1(this, P._StreamImplEvents.prototype.add$1, _receiver, "add$1");
  },
  handleNext$1: function(dispatch) {
    var $event = this.firstPendingEvent;
    this.firstPendingEvent = $event.get$next();
    if (this.firstPendingEvent == null)
      this.lastPendingEvent = null;
    $event.perform$1(dispatch);
  }
},

_cancelAndError_closure: {"": "Closure;future_0,error_1,stackTrace_2",
  call$0: function() {
    return this.future_0._completeError$2(this.error_1, this.stackTrace_2);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

_cancelAndErrorClosure_closure: {"": "Closure;subscription_0,future_1",
  call$2: function(error, stackTrace) {
    return P._cancelAndError(this.subscription_0, this.future_1, error, stackTrace);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

_cancelAndValue_closure: {"": "Closure;future_0,value_1",
  call$0: function() {
    return this.future_0._complete$1(this.value_1);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

_ForwardingStream: {"": "Stream;",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var result = P._ForwardingStreamSubscription$(this, true === cancelOnError, H.getRuntimeTypeArgument(this, "_ForwardingStream", 0), H.getRuntimeTypeArgument(this, "_ForwardingStream", 1));
    result.onData$1(onData);
    result.onError$1(result, onError);
    result.onDone$1(onDone);
    return result;
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  listen$1: function(onData) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
  },
  _createSubscription$1: function(cancelOnError) {
    return P._ForwardingStreamSubscription$(this, cancelOnError, H.getRuntimeTypeArgument(this, "_ForwardingStream", 0), H.getRuntimeTypeArgument(this, "_ForwardingStream", 1));
  },
  _handleData$2: function(data, sink) {
    sink._async$_add$1(data);
  },
  get$_handleData: function() {
    return new P.BoundClosure$20(this, P._ForwardingStream.prototype._handleData$2, null, "_handleData$2");
  },
  _handleError$3: function(error, stackTrace, sink) {
    sink._addError$2(error, stackTrace);
  },
  get$_handleError: function() {
    return new P.BoundClosure$3(this, P._ForwardingStream.prototype._handleError$3, null, "_handleError$3");
  },
  _handleDone$1: function(sink) {
    sink._close$0();
  },
  get$_handleDone: function() {
    return new H.BoundClosure$1(this, P._ForwardingStream.prototype._handleDone$1, null, "_handleDone$1");
  },
  $asStream: function($S, $T) {
    return [$T];
  }
},

_ForwardingStreamSubscription: {"": "_BufferingStreamSubscription;_stream,_subscription<,_async$_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
  _async$_add$1: function(data) {
    if ((this._state & 2) !== 0)
      return;
    P._BufferingStreamSubscription.prototype._async$_add$1.call(this, data);
  },
  _addError$2: function(error, stackTrace) {
    if ((this._state & 2) !== 0)
      return;
    P._BufferingStreamSubscription.prototype._addError$2.call(this, error, stackTrace);
  },
  _onPause$0: function() {
    var t1 = this._subscription;
    if (t1 == null)
      return;
    t1.pause$0(t1);
  },
  get$_onPause: function() {
    return new H.BoundClosure$0(this, P._ForwardingStreamSubscription.prototype._onPause$0, null, "_onPause$0");
  },
  _onResume$0: function() {
    var t1 = this._subscription;
    if (t1 == null)
      return;
    t1.resume$0();
  },
  get$_onResume: function() {
    return new H.BoundClosure$0(this, P._ForwardingStreamSubscription.prototype._onResume$0, null, "_onResume$0");
  },
  _onCancel$0: function() {
    var t1 = this._subscription;
    if (t1 != null) {
      this._subscription = null;
      t1.cancel$0();
    }
  },
  get$_onCancel: function() {
    return new H.BoundClosure$0(this, P._ForwardingStreamSubscription.prototype._onCancel$0, null, "_onCancel$0");
  },
  _handleData$1: function(data) {
    this._stream._handleData$2(data, this);
  },
  get$_handleData: function() {
    return new H.BoundClosure$1(this, P._ForwardingStreamSubscription.prototype._handleData$1, null, "_handleData$1");
  },
  _handleError$2: function(error, stackTrace) {
    this._addError$2(error, stackTrace);
  },
  get$_handleError: function() {
    return new P.BoundClosure$20(this, P._ForwardingStreamSubscription.prototype._handleError$2, null, "_handleError$2");
  },
  _handleDone$0: function() {
    this._close$0();
  },
  get$_handleDone: function() {
    return new H.BoundClosure$0(this, P._ForwardingStreamSubscription.prototype._handleDone$0, null, "_handleDone$0");
  },
  _ForwardingStreamSubscription$2: function(_stream, cancelOnError, $S, $T) {
    var t1, t2;
    t1 = this.get$_handleData();
    t2 = this.get$_handleError();
    this._subscription = this._stream._async$_source.listen$3$onDone$onError(t1, this.get$_handleDone(), t2);
  },
  $as_BufferingStreamSubscription: function($S, $T) {
    return [$T];
  },
  $asStreamSubscription: function($S, $T) {
    return [$T];
  },
  static: {
_ForwardingStreamSubscription$: function(_stream, cancelOnError, $S, $T) {
  var t1, t2;
  t1 = $.Zone__current;
  t2 = cancelOnError ? 1 : 0;
  t2 = new P._ForwardingStreamSubscription(_stream, null, null, null, null, t1, t2, null, null);
  H.setRuntimeTypeInfo(t2, [$S, $T]);
  t2._ForwardingStreamSubscription$2(_stream, cancelOnError, $S, $T);
  return t2;
}}

},

_WhereStream: {"": "_ForwardingStream;_test,_async$_source",
  _test$1: function(arg0) {
    return this._test.call$1(arg0);
  },
  _handleData$2: function(inputEvent, sink) {
    var satisfies, e, s, exception, t1;
    satisfies = null;
    try {
      satisfies = this._test$1(inputEvent);
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      sink._addError$2(P._asyncError(e, s), s);
      return;
    }

    if (satisfies === true)
      sink._async$_add$1(inputEvent);
  },
  get$_handleData: function() {
    return new P.BoundClosure$20(this, P._WhereStream.prototype._handleData$2, null, "_handleData$2");
  },
  $as_ForwardingStream: function($T) {
    return [$T, $T];
  },
  $asStream: null
},

_MapStream: {"": "_ForwardingStream;_transform,_async$_source",
  _transform$1: function(arg0) {
    return this._transform.call$1(arg0);
  },
  _handleData$2: function(inputEvent, sink) {
    var outputEvent, e, s, exception, t1;
    outputEvent = null;
    try {
      outputEvent = this._transform$1(inputEvent);
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      sink._addError$2(P._asyncError(e, s), s);
      return;
    }

    sink._async$_add$1(outputEvent);
  },
  get$_handleData: function() {
    return new P.BoundClosure$20(this, P._MapStream.prototype._handleData$2, null, "_handleData$2");
  },
  $as_ForwardingStream: null,
  $asStream: function($S, $T) {
    return [$T];
  }
},

Timer: {"": "Object;"},

ZoneSpecification: {"": "Object;"},

_ZoneSpecification: {"": "Object;handleUncaughtError<,run<,runUnary<,runBinary<,registerCallback<,registerUnaryCallback<,registerBinaryCallback<,scheduleMicrotask<,runAsync<,createTimer<,createPeriodicTimer,print>,fork<",
  handleUncaughtError$2: function(arg0, arg1) {
    return this.handleUncaughtError.call$2(arg0, arg1);
  },
  run$1: function(arg0) {
    return this.run.call$1(arg0);
  },
  runUnary$2: function(arg0, arg1) {
    return this.runUnary.call$2(arg0, arg1);
  },
  runBinary$3: function(arg0, arg1, arg2) {
    return this.runBinary.call$3(arg0, arg1, arg2);
  },
  registerCallback$1: function(arg0) {
    return this.registerCallback.call$1(arg0);
  },
  registerUnaryCallback$1: function(arg0) {
    return this.registerUnaryCallback.call$1(arg0);
  },
  registerBinaryCallback$1: function(arg0) {
    return this.registerBinaryCallback.call$1(arg0);
  },
  scheduleMicrotask$1: function(arg0) {
    return this.scheduleMicrotask.call$1(arg0);
  },
  scheduleMicrotask$2: function(arg0, arg1) {
    return this.scheduleMicrotask.call$2(arg0, arg1);
  },
  createTimer$2: function(arg0, arg1) {
    return this.createTimer.call$2(arg0, arg1);
  },
  print$1: function($receiver, arg0) {
    return this.print.call$1(arg0);
  },
  fork$1$specification: function(arg0) {
    return this.fork.call$1$specification(arg0);
  },
  $is_ZoneSpecification: true
},

ZoneDelegate: {"": "Object;"},

Zone: {"": "Object;"},

_ZoneDelegate: {"": "Object;_degelationTarget",
  get$_zone: function() {
    return this._degelationTarget;
  },
  handleUncaughtError$3: function(zone, error, stackTrace) {
    var $parent, t1;
    $parent = this._degelationTarget;
    for (; t1 = J.getInterceptor$x($parent), $parent.get$_specification().get$handleUncaughtError() == null;)
      $parent = t1.get$parent($parent);
    return $parent.get$_specification().get$handleUncaughtError().call$5($parent, new P._ZoneDelegate(t1.get$parent($parent)), zone, error, stackTrace);
  },
  get$handleUncaughtError: function() {
    return new P.BoundClosure$3(this, P._ZoneDelegate.prototype.handleUncaughtError$3, null, "handleUncaughtError$3");
  },
  run$2: function(zone, f) {
    var $parent, t1;
    $parent = this._degelationTarget;
    for (; t1 = J.getInterceptor$x($parent), $parent.get$_specification().get$run() == null;)
      $parent = t1.get$parent($parent);
    return $parent.get$_specification().get$run().call$4($parent, new P._ZoneDelegate(t1.get$parent($parent)), zone, f);
  },
  get$run: function() {
    return new P.BoundClosure$20(this, P._ZoneDelegate.prototype.run$2, null, "run$2");
  },
  runUnary$3: function(zone, f, arg) {
    var $parent, t1;
    $parent = this._degelationTarget;
    for (; t1 = J.getInterceptor$x($parent), $parent.get$_specification().get$runUnary() == null;)
      $parent = t1.get$parent($parent);
    return $parent.get$_specification().get$runUnary().call$5($parent, new P._ZoneDelegate(t1.get$parent($parent)), zone, f, arg);
  },
  get$runUnary: function() {
    return new P.BoundClosure$3(this, P._ZoneDelegate.prototype.runUnary$3, null, "runUnary$3");
  },
  runBinary$4: function(zone, f, arg1, arg2) {
    var $parent, t1;
    $parent = this._degelationTarget;
    for (; t1 = J.getInterceptor$x($parent), $parent.get$_specification().get$runBinary() == null;)
      $parent = t1.get$parent($parent);
    return $parent.get$_specification().get$runBinary().call$6($parent, new P._ZoneDelegate(t1.get$parent($parent)), zone, f, arg1, arg2);
  },
  get$runBinary: function() {
    return new P.BoundClosure$4(this, P._ZoneDelegate.prototype.runBinary$4, null, "runBinary$4");
  },
  registerCallback$2: function(zone, f) {
    var $parent, t1;
    $parent = this._degelationTarget;
    for (; t1 = J.getInterceptor$x($parent), $parent.get$_specification().get$registerCallback() == null;)
      $parent = t1.get$parent($parent);
    return $parent.get$_specification().get$registerCallback().call$4($parent, new P._ZoneDelegate(t1.get$parent($parent)), zone, f);
  },
  "+registerCallback:2:0": 0,
  get$registerCallback: function() {
    return new P.BoundClosure$20(this, P._ZoneDelegate.prototype.registerCallback$2, null, "registerCallback$2");
  },
  registerUnaryCallback$2: function(zone, f) {
    var $parent, t1;
    $parent = this._degelationTarget;
    for (; t1 = J.getInterceptor$x($parent), $parent.get$_specification().get$registerUnaryCallback() == null;)
      $parent = t1.get$parent($parent);
    return $parent.get$_specification().get$registerUnaryCallback().call$4($parent, new P._ZoneDelegate(t1.get$parent($parent)), zone, f);
  },
  get$registerUnaryCallback: function() {
    return new P.BoundClosure$20(this, P._ZoneDelegate.prototype.registerUnaryCallback$2, null, "registerUnaryCallback$2");
  },
  registerBinaryCallback$2: function(zone, f) {
    var $parent, t1;
    $parent = this._degelationTarget;
    for (; t1 = J.getInterceptor$x($parent), $parent.get$_specification().get$registerBinaryCallback() == null;)
      $parent = t1.get$parent($parent);
    return $parent.get$_specification().get$registerBinaryCallback().call$4($parent, new P._ZoneDelegate(t1.get$parent($parent)), zone, f);
  },
  get$registerBinaryCallback: function() {
    return new P.BoundClosure$20(this, P._ZoneDelegate.prototype.registerBinaryCallback$2, null, "registerBinaryCallback$2");
  },
  scheduleMicrotask$2: function(zone, f) {
    var $parent, t1, t2, scheduleMicrotask;
    $parent = this._degelationTarget;
    while (true) {
      if ($parent.get$_specification().get$scheduleMicrotask() == null) {
        $parent.get$_specification().get$runAsync();
        t1 = true;
      } else
        t1 = false;
      t2 = J.getInterceptor$x($parent);
      if (!t1)
        break;
      $parent = t2.get$parent($parent);
    }
    t1 = t2.get$parent($parent);
    scheduleMicrotask = $parent.get$_specification().get$scheduleMicrotask();
    if (scheduleMicrotask == null)
      scheduleMicrotask = $parent.get$_specification().get$runAsync();
    scheduleMicrotask.call$4($parent, new P._ZoneDelegate(t1), zone, f);
  },
  get$scheduleMicrotask: function() {
    return new P.BoundClosure$20(this, P._ZoneDelegate.prototype.scheduleMicrotask$2, null, "scheduleMicrotask$2");
  },
  runAsync$2: function(zone, f) {
    this.scheduleMicrotask$2(zone, f.call$0());
  },
  get$runAsync: function() {
    return new P.BoundClosure$20(this, P._ZoneDelegate.prototype.runAsync$2, null, "runAsync$2");
  },
  createTimer$3: function(zone, duration, f) {
    var $parent, t1;
    $parent = this._degelationTarget;
    for (; t1 = J.getInterceptor$x($parent), $parent.get$_specification().get$createTimer() == null;)
      $parent = t1.get$parent($parent);
    return $parent.get$_specification().get$createTimer().call$5($parent, new P._ZoneDelegate(t1.get$parent($parent)), zone, duration, f);
  },
  get$createTimer: function() {
    return new P.BoundClosure$3(this, P._ZoneDelegate.prototype.createTimer$3, null, "createTimer$3");
  },
  print$2: function(_, zone, line) {
    var $parent, t1, t2;
    $parent = this._degelationTarget;
    for (; t1 = $parent.get$_specification(), t2 = J.getInterceptor$x($parent), t1.get$print(t1) == null;)
      $parent = t2.get$parent($parent);
    t1 = $parent.get$_specification();
    t1.get$print(t1).call$4($parent, new P._ZoneDelegate(t2.get$parent($parent)), zone, line);
  },
  get$print: function(_receiver) {
    return new P.BoundClosure$i2(this, P._ZoneDelegate.prototype.print$2, _receiver, "print$2");
  },
  fork$3: function(zone, specification, zoneValues) {
    var $parent, t1;
    $parent = this._degelationTarget;
    for (; t1 = J.getInterceptor$x($parent), $parent.get$_specification().get$fork() == null;)
      $parent = t1.get$parent($parent);
    t1 = t1.get$parent($parent);
    return $parent.get$_specification().get$fork().call$5($parent, new P._ZoneDelegate(t1), zone, specification, zoneValues);
  },
  get$fork: function() {
    return new P.BoundClosure$3(this, P._ZoneDelegate.prototype.fork$3, null, "fork$3");
  }
},

_BaseZone: {"": "Object;",
  inSameErrorZone$1: function(otherZone) {
    return this.get$_errorZone() === otherZone.get$_errorZone();
  },
  runGuarded$1: function(f) {
    var e, s, t1, exception;
    try {
      t1 = this.run$1(f);
      return t1;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      return this.handleUncaughtError$2(e, s);
    }

  },
  runUnaryGuarded$2: function(f, arg) {
    var e, s, t1, exception;
    try {
      t1 = this.runUnary$2(f, arg);
      return t1;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      return this.handleUncaughtError$2(e, s);
    }

  },
  runBinaryGuarded$3: function(f, arg1, arg2) {
    var e, s, t1, exception;
    try {
      t1 = this.runBinary$3(f, arg1, arg2);
      return t1;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      return this.handleUncaughtError$2(e, s);
    }

  },
  bindCallback$2$runGuarded: function(f, runGuarded) {
    var registered = this.registerCallback$1(f);
    if (runGuarded)
      return new P._BaseZone_bindCallback_closure(this, registered);
    else
      return new P._BaseZone_bindCallback_closure0(this, registered);
  },
  bindUnaryCallback$2$runGuarded: function(f, runGuarded) {
    var registered = this.registerUnaryCallback$1(f);
    if (runGuarded)
      return new P._BaseZone_bindUnaryCallback_closure(this, registered);
    else
      return new P._BaseZone_bindUnaryCallback_closure0(this, registered);
  }
},

_BaseZone_bindCallback_closure: {"": "Closure;this_0,registered_1",
  call$0: function() {
    return this.this_0.runGuarded$1(this.registered_1);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

_BaseZone_bindCallback_closure0: {"": "Closure;this_2,registered_3",
  call$0: function() {
    return this.this_2.run$1(this.registered_3);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

_BaseZone_bindUnaryCallback_closure: {"": "Closure;this_0,registered_1",
  call$1: function(arg) {
    return this.this_0.runUnaryGuarded$2(this.registered_1, arg);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_BaseZone_bindUnaryCallback_closure0: {"": "Closure;this_2,registered_3",
  call$1: function(arg) {
    return this.this_2.runUnary$2(this.registered_3, arg);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_CustomizedZone: {"": "_BaseZone;parent>,_specification<,_map",
  get$_errorZone: function() {
    return this.parent.get$_errorZone();
  },
  $index: function(_, key) {
    var t1, result;
    t1 = this._map;
    result = t1.$index(t1, key);
    if (result != null || t1.containsKey$1(key))
      return result;
    t1 = this.parent;
    if (t1 != null)
      return J.$index$asx(t1, key);
    return;
  },
  "+[]:1:0": 0,
  handleUncaughtError$2: function(error, stackTrace) {
    return new P._ZoneDelegate(this).handleUncaughtError$3(this, error, stackTrace);
  },
  get$handleUncaughtError: function() {
    return new P.BoundClosure$20(this, P._CustomizedZone.prototype.handleUncaughtError$2, null, "handleUncaughtError$2");
  },
  fork$2$specification$zoneValues: function(specification, zoneValues) {
    return new P._ZoneDelegate(this).fork$3(this, specification, zoneValues);
  },
  fork$1$specification: function(specification) {
    return this.fork$2$specification$zoneValues(specification, null);
  },
  get$fork: function() {
    return new P.BoundClosure$21(this, P._CustomizedZone.prototype.fork$2$specification$zoneValues, null, "fork$2$specification$zoneValues");
  },
  run$1: function(f) {
    return new P._ZoneDelegate(this).run$2(this, f);
  },
  get$run: function() {
    return new H.BoundClosure$1(this, P._CustomizedZone.prototype.run$1, null, "run$1");
  },
  runUnary$2: function(f, arg) {
    return new P._ZoneDelegate(this).runUnary$3(this, f, arg);
  },
  get$runUnary: function() {
    return new P.BoundClosure$20(this, P._CustomizedZone.prototype.runUnary$2, null, "runUnary$2");
  },
  runBinary$3: function(f, arg1, arg2) {
    return new P._ZoneDelegate(this).runBinary$4(this, f, arg1, arg2);
  },
  get$runBinary: function() {
    return new P.BoundClosure$3(this, P._CustomizedZone.prototype.runBinary$3, null, "runBinary$3");
  },
  registerCallback$1: function(f) {
    return new P._ZoneDelegate(this).registerCallback$2(this, f);
  },
  "+registerCallback:1:0": 0,
  get$registerCallback: function() {
    return new H.BoundClosure$1(this, P._CustomizedZone.prototype.registerCallback$1, null, "registerCallback$1");
  },
  registerUnaryCallback$1: function(f) {
    return new P._ZoneDelegate(this).registerUnaryCallback$2(this, f);
  },
  get$registerUnaryCallback: function() {
    return new H.BoundClosure$1(this, P._CustomizedZone.prototype.registerUnaryCallback$1, null, "registerUnaryCallback$1");
  },
  registerBinaryCallback$1: function(f) {
    return new P._ZoneDelegate(this).registerBinaryCallback$2(this, f);
  },
  get$registerBinaryCallback: function() {
    return new H.BoundClosure$1(this, P._CustomizedZone.prototype.registerBinaryCallback$1, null, "registerBinaryCallback$1");
  },
  scheduleMicrotask$1: function(f) {
    new P._ZoneDelegate(this).scheduleMicrotask$2(this, f);
  },
  get$scheduleMicrotask: function() {
    return new H.BoundClosure$1(this, P._CustomizedZone.prototype.scheduleMicrotask$1, null, "scheduleMicrotask$1");
  },
  runAsync$1: function(f) {
    new P._ZoneDelegate(this).scheduleMicrotask$2(this, f);
  },
  get$runAsync: function() {
    return new H.BoundClosure$1(this, P._CustomizedZone.prototype.runAsync$1, null, "runAsync$1");
  },
  createTimer$2: function(duration, f) {
    return new P._ZoneDelegate(this).createTimer$3(this, duration, f);
  },
  get$createTimer: function() {
    return new P.BoundClosure$20(this, P._CustomizedZone.prototype.createTimer$2, null, "createTimer$2");
  },
  print$1: function(_, line) {
    var t1 = new P._ZoneDelegate(this);
    t1.print$2(t1, this, line);
  },
  get$print: function(_receiver) {
    return new J.BoundClosure$i1(this, P._CustomizedZone.prototype.print$1, _receiver, "print$1");
  }
},

_rootHandleUncaughtError_closure: {"": "Closure;error_0,stackTrace_1",
  call$0: function() {
    P._scheduleAsyncCallback(new P._rootHandleUncaughtError__closure(this.error_0, this.stackTrace_1));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

_rootHandleUncaughtError__closure: {"": "Closure;error_2,stackTrace_3",
  call$0: function() {
    var t1, trace;
    t1 = this.error_2;
    P.print("Uncaught Error: " + H.S(t1));
    trace = this.stackTrace_3;
    if (trace == null)
      trace = P.getAttachedStackTrace(t1);
    P._attachStackTrace(t1, null);
    if (trace != null)
      P.print("Stack Trace: \n" + H.S(trace) + "\n");
    throw H.wrapException(t1);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

_rootFork_closure: {"": "Closure;copiedMap_0",
  call$2: function(key, value) {
    var t1;
    if (key == null)
      throw H.wrapException(new P.ArgumentError("ZoneValue key must not be null"));
    t1 = this.copiedMap_0;
    t1.$indexSet(t1, key, value);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

_RootZoneSpecification: {"": "Object;",
  get$handleUncaughtError: function() {
    return P._rootHandleUncaughtError$closure;
  },
  handleUncaughtError$2: function(arg0, arg1) {
    return this.get$handleUncaughtError().call$2(arg0, arg1);
  },
  get$run: function() {
    return P._rootRun$closure;
  },
  run$1: function(arg0) {
    return this.get$run().call$1(arg0);
  },
  get$runUnary: function() {
    return P._rootRunUnary$closure;
  },
  runUnary$2: function(arg0, arg1) {
    return this.get$runUnary().call$2(arg0, arg1);
  },
  get$runBinary: function() {
    return P._rootRunBinary$closure;
  },
  runBinary$3: function(arg0, arg1, arg2) {
    return this.get$runBinary().call$3(arg0, arg1, arg2);
  },
  get$registerCallback: function() {
    return P._rootRegisterCallback$closure;
  },
  "+registerCallback": 0,
  registerCallback$1: function(arg0) {
    return this.get$registerCallback().call$1(arg0);
  },
  get$registerUnaryCallback: function() {
    return P._rootRegisterUnaryCallback$closure;
  },
  registerUnaryCallback$1: function(arg0) {
    return this.get$registerUnaryCallback().call$1(arg0);
  },
  get$registerBinaryCallback: function() {
    return P._rootRegisterBinaryCallback$closure;
  },
  registerBinaryCallback$1: function(arg0) {
    return this.get$registerBinaryCallback().call$1(arg0);
  },
  get$scheduleMicrotask: function() {
    return P._rootScheduleMicrotask$closure;
  },
  scheduleMicrotask$1: function(arg0) {
    return this.get$scheduleMicrotask().call$1(arg0);
  },
  scheduleMicrotask$2: function(arg0, arg1) {
    return this.get$scheduleMicrotask().call$2(arg0, arg1);
  },
  get$runAsync: function() {
    return;
  },
  get$createTimer: function() {
    return P._rootCreateTimer$closure;
  },
  createTimer$2: function(arg0, arg1) {
    return this.get$createTimer().call$2(arg0, arg1);
  },
  get$print: function(_) {
    return P._rootPrint$closure;
  },
  print$1: function($receiver, arg0) {
    return this.get$print($receiver).call$1(arg0);
  },
  get$fork: function() {
    return P._rootFork$closure;
  },
  fork$1$specification: function(arg0) {
    return this.get$fork().call$1$specification(arg0);
  }
},

_RootZone: {"": "_BaseZone;",
  get$parent: function(_) {
    return;
  },
  get$_specification: function() {
    return C.C__RootZoneSpecification;
  },
  get$_errorZone: function() {
    return this;
  },
  inSameErrorZone$1: function(otherZone) {
    return otherZone.get$_errorZone() === this;
  },
  $index: function(_, key) {
    return;
  },
  "+[]:1:0": 0,
  handleUncaughtError$2: function(error, stackTrace) {
    return P._rootHandleUncaughtError(this, null, this, error, stackTrace);
  },
  get$handleUncaughtError: function() {
    return new P.BoundClosure$20(this, P._RootZone.prototype.handleUncaughtError$2, null, "handleUncaughtError$2");
  },
  fork$2$specification$zoneValues: function(specification, zoneValues) {
    return P._rootFork(this, null, this, specification, zoneValues);
  },
  fork$1$specification: function(specification) {
    return this.fork$2$specification$zoneValues(specification, null);
  },
  get$fork: function() {
    return new P.BoundClosure$21(this, P._RootZone.prototype.fork$2$specification$zoneValues, null, "fork$2$specification$zoneValues");
  },
  run$1: function(f) {
    return P._rootRun(this, null, this, f);
  },
  get$run: function() {
    return new H.BoundClosure$1(this, P._RootZone.prototype.run$1, null, "run$1");
  },
  runUnary$2: function(f, arg) {
    return P._rootRunUnary(this, null, this, f, arg);
  },
  get$runUnary: function() {
    return new P.BoundClosure$20(this, P._RootZone.prototype.runUnary$2, null, "runUnary$2");
  },
  runBinary$3: function(f, arg1, arg2) {
    return P._rootRunBinary(this, null, this, f, arg1, arg2);
  },
  get$runBinary: function() {
    return new P.BoundClosure$3(this, P._RootZone.prototype.runBinary$3, null, "runBinary$3");
  },
  registerCallback$1: function(f) {
    return f;
  },
  "+registerCallback:1:0": 0,
  get$registerCallback: function() {
    return new H.BoundClosure$1(this, P._RootZone.prototype.registerCallback$1, null, "registerCallback$1");
  },
  registerUnaryCallback$1: function(f) {
    return f;
  },
  get$registerUnaryCallback: function() {
    return new H.BoundClosure$1(this, P._RootZone.prototype.registerUnaryCallback$1, null, "registerUnaryCallback$1");
  },
  registerBinaryCallback$1: function(f) {
    return f;
  },
  get$registerBinaryCallback: function() {
    return new H.BoundClosure$1(this, P._RootZone.prototype.registerBinaryCallback$1, null, "registerBinaryCallback$1");
  },
  scheduleMicrotask$1: function(f) {
    P._scheduleAsyncCallback(f);
  },
  get$scheduleMicrotask: function() {
    return new H.BoundClosure$1(this, P._RootZone.prototype.scheduleMicrotask$1, null, "scheduleMicrotask$1");
  },
  runAsync$1: function(f) {
    P._scheduleAsyncCallback(f);
  },
  get$runAsync: function() {
    return new H.BoundClosure$1(this, P._RootZone.prototype.runAsync$1, null, "runAsync$1");
  },
  createTimer$2: function(duration, f) {
    return P._createTimer(duration, f);
  },
  get$createTimer: function() {
    return new P.BoundClosure$20(this, P._RootZone.prototype.createTimer$2, null, "createTimer$2");
  },
  print$1: function(_, line) {
    H.printToConsole(line);
    return;
  },
  get$print: function(_receiver) {
    return new J.BoundClosure$i1(this, P._RootZone.prototype.print$1, _receiver, "print$1");
  }
}}],
["dart.collection", "dart:collection", , P, {
_defaultEquals: function(a, b) {
  return J.$eq(a, b);
},

_defaultHashCode: function(a) {
  return J.get$hashCode$(a);
},

HashMap_HashMap: function(equals, hashCode, isValidKey, $K, $V) {
  var t1;
  if (equals == null) {
    t1 = new P._HashMap(0, null, null, null, null);
    H.setRuntimeTypeInfo(t1, [$K, $V]);
    return t1;
  }
  hashCode = P._defaultHashCode$closure;
  return P._CustomHashMap$(equals, hashCode, isValidKey, $K, $V);
},

_iterableToString: function(iterable) {
  var parts, t1;
  t1 = $.get$_toStringVisiting();
  if (t1.contains$1(t1, iterable))
    return "(...)";
  t1 = $.get$_toStringVisiting();
  t1.add$1(t1, iterable);
  parts = [];
  try {
    P._iterablePartsToStrings(iterable, parts);
  } finally {
    t1 = $.get$_toStringVisiting();
    t1.remove$1(t1, iterable);
  }
  t1 = P.StringBuffer$("(");
  t1.writeAll$2(parts, ", ");
  t1.write$1(")");
  return t1._contents;
},

_iterablePartsToStrings: function(iterable, parts) {
  var it, $length, count, next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision;
  it = iterable.get$iterator(iterable);
  $length = 0;
  count = 0;
  while (true) {
    if (!($length < 80 || count < 3))
      break;
    if (!it.moveNext$0())
      return;
    next = H.S(it.get$current());
    parts.push(next);
    $length += next.length + 2;
    ++count;
  }
  if (!it.moveNext$0()) {
    if (count <= 5)
      return;
    if (0 >= parts.length)
      throw H.ioore(parts, 0);
    ultimateString = parts.pop();
    if (0 >= parts.length)
      throw H.ioore(parts, 0);
    penultimateString = parts.pop();
  } else {
    penultimate = it.get$current();
    ++count;
    if (!it.moveNext$0()) {
      if (count <= 4) {
        parts.push(H.S(penultimate));
        return;
      }
      ultimateString = H.S(penultimate);
      if (0 >= parts.length)
        throw H.ioore(parts, 0);
      penultimateString = parts.pop();
      $length += ultimateString.length + 2;
    } else {
      ultimate = it.get$current();
      ++count;
      for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
        ultimate0 = it.get$current();
        ++count;
        if (count > 100) {
          while (true) {
            if (!($length > 75 && count > 3))
              break;
            if (0 >= parts.length)
              throw H.ioore(parts, 0);
            $length -= parts.pop().length + 2;
            --count;
          }
          parts.push("...");
          return;
        }
      }
      penultimateString = H.S(penultimate);
      ultimateString = H.S(ultimate);
      $length += ultimateString.length + penultimateString.length + 4;
    }
  }
  if (count > parts.length + 2) {
    $length += 5;
    elision = "...";
  } else
    elision = null;
  while (true) {
    if (!($length > 80 && parts.length > 3))
      break;
    if (0 >= parts.length)
      throw H.ioore(parts, 0);
    $length -= parts.pop().length + 2;
    if (elision == null) {
      $length += 5;
      elision = "...";
    }
  }
  if (elision != null)
    parts.push(elision);
  parts.push(penultimateString);
  parts.push(ultimateString);
},

LinkedHashMap_LinkedHashMap: function(equals, hashCode, isValidKey, $K, $V) {
  var t1;
  if (hashCode == null) {
    if (equals == null) {
      t1 = new P._LinkedHashMap(0, null, null, null, null, null, 0);
      H.setRuntimeTypeInfo(t1, [$K, $V]);
      return t1;
    }
    hashCode = P._defaultHashCode$closure;
  } else {
    if ((P.identityHashCode$closure == null ? hashCode == null : P.identityHashCode$closure === hashCode) && (P.identical$closure == null ? equals == null : P.identical$closure === equals)) {
      t1 = new P._LinkedIdentityHashMap(0, null, null, null, null, null, 0);
      H.setRuntimeTypeInfo(t1, [$K, $V]);
      return t1;
    }
    if (equals == null)
      equals = P._defaultEquals$closure;
  }
  return P._LinkedCustomHashMap$(equals, hashCode, isValidKey, $K, $V);
},

Maps_mapToString: function(m) {
  var t1, result, i, t2;
  t1 = {};
  for (i = 0; i < $.get$Maps__toStringList().length; ++i) {
    t2 = $.get$Maps__toStringList();
    if (i >= t2.length)
      throw H.ioore(t2, i);
    if (t2[i] === m)
      return "{...}";
  }
  result = P.StringBuffer$("");
  try {
    $.get$Maps__toStringList().push(m);
    result.write$1("{");
    t1.first_0 = true;
    J.forEach$1$ax(m, new P.Maps_mapToString_closure(t1, result));
    result.write$1("}");
  } finally {
    t1 = $.get$Maps__toStringList();
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    t1.pop();
  }
  return result.get$_contents();
},

_HashMap: {"": "Object;_collection$_length,_strings,_nums,_rest,_keys",
  get$length: function(_) {
    return this._collection$_length;
  },
  "+length": 0,
  get$isEmpty: function(_) {
    return this._collection$_length === 0;
  },
  "+isEmpty": 0,
  get$isNotEmpty: function(_) {
    return this._collection$_length !== 0;
  },
  "+isNotEmpty": 0,
  get$keys: function() {
    var t1 = new P.HashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_HashMap", 0)]);
    return t1;
  },
  "+keys": 0,
  get$values: function(_) {
    var t1 = new P.HashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_HashMap", 0)]);
    return H.MappedIterable_MappedIterable(t1, new P._HashMap_values_closure(this), H.getRuntimeTypeArgument(t1, "IterableBase", 0), null);
  },
  "+values": 0,
  containsKey$1: function(key) {
    var strings, nums, rest;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      return strings == null ? false : strings[key] != null;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      return nums == null ? false : nums[key] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
    }
  },
  "+containsKey:1:0": 0,
  containsValue$1: function(value) {
    var t1 = this._computeKeys$0();
    t1.toString;
    return H.IterableMixinWorkaround_any(t1, new P._HashMap_containsValue_closure(this, value));
  },
  "+containsValue:1:0": 0,
  addAll$1: function(_, other) {
    J.forEach$1$ax(other, new P._HashMap_addAll_closure(this));
  },
  $index: function(_, key) {
    var strings, t1, entry, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        t1 = null;
      else {
        entry = strings[key];
        t1 = entry === strings ? null : entry;
      }
      return t1;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        t1 = null;
      else {
        entry = nums[key];
        t1 = entry === nums ? null : entry;
      }
      return t1;
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    }
  },
  "+[]:1:0": 0,
  $indexSet: function(_, key, value) {
    var strings, nums, rest, hash, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        strings = P._HashMap__newHashTable();
        this._strings = strings;
      }
      this._addHashTableEntry$3(strings, key, value);
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        nums = P._HashMap__newHashTable();
        this._nums = nums;
      }
      this._addHashTableEntry$3(nums, key, value);
    } else {
      rest = this._rest;
      if (rest == null) {
        rest = P._HashMap__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null) {
        P._HashMap__setTableEntry(rest, hash, [key, value]);
        this._collection$_length = this._collection$_length + 1;
        this._keys = null;
      } else {
        index = this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          this._collection$_length = this._collection$_length + 1;
          this._keys = null;
        }
      }
    }
  },
  "+[]=:2:0": 0,
  putIfAbsent$2: function(key, ifAbsent) {
    var value;
    if (this.containsKey$1(key))
      return this.$index(this, key);
    value = ifAbsent.call$0();
    this.$indexSet(this, key, value);
    return value;
  },
  remove$1: function(_, key) {
    var rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, key);
    else if (typeof key === "number" && (key & 0x3ffffff) === key)
      return this._removeHashTableEntry$2(this._nums, key);
    else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      this._collection$_length = this._collection$_length - 1;
      this._keys = null;
      return bucket.splice(index, 2)[1];
    }
  },
  forEach$1: function(_, action) {
    var keys, $length, i, key;
    keys = this._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      key = keys[i];
      action.call$2(key, this.$index(this, key));
      if (keys !== this._keys)
        throw H.wrapException(P.ConcurrentModificationError$(this));
    }
  },
  _computeKeys$0: function() {
    var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
    t1 = this._keys;
    if (t1 != null)
      return t1;
    result = P.List_List(this._collection$_length, null);
    strings = this._strings;
    if (strings != null) {
      names = Object.getOwnPropertyNames(strings);
      entries = names.length;
      for (index = 0, i = 0; i < entries; ++i) {
        result[index] = names[i];
        ++index;
      }
    } else
      index = 0;
    nums = this._nums;
    if (nums != null) {
      names = Object.getOwnPropertyNames(nums);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        result[index] = +names[i];
        ++index;
      }
    }
    rest = this._rest;
    if (rest != null) {
      names = Object.getOwnPropertyNames(rest);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        bucket = rest[names[i]];
        $length = bucket.length;
        for (i0 = 0; i0 < $length; i0 += 2) {
          result[index] = bucket[i0];
          ++index;
        }
      }
    }
    this._keys = result;
    return result;
  },
  _addHashTableEntry$3: function(table, key, value) {
    if (table[key] == null) {
      this._collection$_length = this._collection$_length + 1;
      this._keys = null;
    }
    P._HashMap__setTableEntry(table, key, value);
  },
  _removeHashTableEntry$2: function(table, key) {
    var value;
    if (table != null && table[key] != null) {
      value = P._HashMap__getTableEntry(table, key);
      delete table[key];
      this._collection$_length = this._collection$_length - 1;
      this._keys = null;
      return value;
    } else
      return;
  },
  _computeHashCode$1: function(key) {
    return J.get$hashCode$(key) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, key) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; i += 2)
      if (J.$eq(bucket[i], key))
        return i;
    return -1;
  },
  $isMap: true,
  static: {
_HashMap__getTableEntry: function(table, key) {
  var entry = table[key];
  return entry === table ? null : entry;
},

_HashMap__setTableEntry: function(table, key, value) {
  if (value == null)
    table[key] = table;
  else
    table[key] = value;
},

_HashMap__newHashTable: function() {
  var table = Object.create(null);
  P._HashMap__setTableEntry(table, "<non-identifier-key>", table);
  delete table["<non-identifier-key>"];
  return table;
}}

},

_HashMap_values_closure: {"": "Closure;this_0",
  call$1: function(each) {
    var t1 = this.this_0;
    return t1.$index(t1, each);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_HashMap_containsValue_closure: {"": "Closure;this_0,value_1",
  call$1: function(each) {
    var t1 = this.this_0;
    return J.$eq(t1.$index(t1, each), this.value_1);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_HashMap_addAll_closure: {"": "Closure;this_0",
  call$2: function(key, value) {
    var t1 = this.this_0;
    t1.$indexSet(t1, key, value);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

_CustomHashMap: {"": "_HashMap;_equals,_hashCode,_validKey,_collection$_length,_strings,_nums,_rest,_keys",
  _equals$2: function(arg0, arg1) {
    return this._equals.call$2(arg0, arg1);
  },
  _hashCode$1: function(arg0) {
    return this._hashCode.call$1(arg0);
  },
  _validKey$1: function(arg0) {
    return this._validKey.call$1(arg0);
  },
  $index: function(_, key) {
    if (this._validKey$1(key) !== true)
      return;
    return P._HashMap.prototype.$index.call(this, this, key);
  },
  "+[]:1:0": 0,
  containsKey$1: function(key) {
    if (this._validKey$1(key) !== true)
      return false;
    return P._HashMap.prototype.containsKey$1.call(this, key);
  },
  "+containsKey:1:0": 0,
  remove$1: function(_, key) {
    if (this._validKey$1(key) !== true)
      return;
    return P._HashMap.prototype.remove$1.call(this, this, key);
  },
  _computeHashCode$1: function(key) {
    return this._hashCode$1(key) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, key) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; i += 2)
      if (this._equals$2(bucket[i], key) === true)
        return i;
    return -1;
  },
  toString$0: function(_) {
    return P.Maps_mapToString(this);
  },
  $as_HashMap: null,
  $asMap: null,
  static: {
_CustomHashMap$: function(_equals, _hashCode, validKey, $K, $V) {
  var t1 = new P._CustomHashMap_closure($K);
  t1 = new P._CustomHashMap(_equals, _hashCode, t1, 0, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$K, $V]);
  return t1;
}}

},

_CustomHashMap_closure: {"": "Closure;K_0",
  call$1: function(v) {
    var t1 = H.checkSubtypeOfRuntimeType(v, this.K_0);
    return t1;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

HashMapKeyIterable: {"": "IterableBase;_collection$_map",
  get$length: function(_) {
    return this._collection$_map._collection$_length;
  },
  "+length": 0,
  get$isEmpty: function(_) {
    return this._collection$_map._collection$_length === 0;
  },
  "+isEmpty": 0,
  get$iterator: function(_) {
    var t1, t2;
    t1 = this._collection$_map;
    t2 = t1._computeKeys$0();
    t2 = new P.HashMapKeyIterator(t1, t2, 0, null);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(this, "HashMapKeyIterable", 0)]);
    return t2;
  },
  contains$1: function(_, element) {
    return this._collection$_map.containsKey$1(element);
  },
  forEach$1: function(_, f) {
    var t1, keys, $length, i;
    t1 = this._collection$_map;
    keys = t1._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      f.call$1(keys[i]);
      if (keys !== t1._keys)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
    }
  },
  $asIterableBase: null,
  $asIterable: null,
  $isEfficientLength: true
},

HashMapKeyIterator: {"": "Object;_collection$_map,_keys,_offset,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  "+current": 0,
  moveNext$0: function() {
    var keys, offset, t1;
    keys = this._keys;
    offset = this._offset;
    t1 = this._collection$_map;
    if (keys !== t1._keys)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    else if (offset >= keys.length) {
      this._collection$_current = null;
      return false;
    } else {
      this._collection$_current = keys[offset];
      this._offset = offset + 1;
      return true;
    }
  }
},

_LinkedHashMap: {"": "Object;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
  get$length: function(_) {
    return this._collection$_length;
  },
  "+length": 0,
  get$isEmpty: function(_) {
    return this._collection$_length === 0;
  },
  "+isEmpty": 0,
  get$isNotEmpty: function(_) {
    return this._collection$_length !== 0;
  },
  "+isNotEmpty": 0,
  get$keys: function() {
    var t1 = new P.LinkedHashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_LinkedHashMap", 0)]);
    return t1;
  },
  "+keys": 0,
  get$values: function(_) {
    var t1 = new P.LinkedHashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_LinkedHashMap", 0)]);
    return H.MappedIterable_MappedIterable(t1, new P._LinkedHashMap_values_closure(this), H.getRuntimeTypeArgument(t1, "IterableBase", 0), null);
  },
  "+values": 0,
  containsKey$1: function(key) {
    var strings, nums, rest;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return false;
      return strings[key] != null;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        return false;
      return nums[key] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
    }
  },
  "+containsKey:1:0": 0,
  containsValue$1: function(value) {
    var t1 = new P.LinkedHashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_LinkedHashMap", 0)]);
    return t1.any$1(t1, new P._LinkedHashMap_containsValue_closure(this, value));
  },
  "+containsValue:1:0": 0,
  addAll$1: function(_, other) {
    J.forEach$1$ax(other, new P._LinkedHashMap_addAll_closure(this));
  },
  $index: function(_, key) {
    var strings, cell, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return;
      cell = strings[key];
      return cell == null ? null : cell.get$_collection$_value();
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        return;
      cell = nums[key];
      return cell == null ? null : cell.get$_collection$_value();
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      return bucket[index].get$_collection$_value();
    }
  },
  "+[]:1:0": 0,
  $indexSet: function(_, key, value) {
    var strings, nums, rest, hash, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        strings = P._LinkedHashMap__newHashTable();
        this._strings = strings;
      }
      this._addHashTableEntry$3(strings, key, value);
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        nums = P._LinkedHashMap__newHashTable();
        this._nums = nums;
      }
      this._addHashTableEntry$3(nums, key, value);
    } else {
      rest = this._rest;
      if (rest == null) {
        rest = P._LinkedHashMap__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$2(key, value)];
      else {
        index = this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].set$_collection$_value(value);
        else
          bucket.push(this._newLinkedCell$2(key, value));
      }
    }
  },
  "+[]=:2:0": 0,
  putIfAbsent$2: function(key, ifAbsent) {
    var value;
    if (this.containsKey$1(key))
      return this.$index(this, key);
    value = ifAbsent.call$0();
    this.$indexSet(this, key, value);
    return value;
  },
  remove$1: function(_, key) {
    var rest, bucket, index, cell;
    if (typeof key === "string" && key !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, key);
    else if (typeof key === "number" && (key & 0x3ffffff) === key)
      return this._removeHashTableEntry$2(this._nums, key);
    else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      cell = bucket.splice(index, 1)[0];
      this._unlinkCell$1(cell);
      return cell.get$_collection$_value();
    }
  },
  clear$0: function(_) {
    if (this._collection$_length > 0) {
      this._last = null;
      this._first = null;
      this._rest = null;
      this._nums = null;
      this._strings = null;
      this._collection$_length = 0;
      this._modifications = this._modifications + 1 & 67108863;
    }
  },
  forEach$1: function(_, action) {
    var cell, modifications;
    cell = this._first;
    modifications = this._modifications;
    for (; cell != null;) {
      action.call$2(cell.get$_key(), cell.get$_collection$_value());
      if (modifications !== this._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(this));
      cell = cell.get$_next();
    }
  },
  _addHashTableEntry$3: function(table, key, value) {
    var cell = table[key];
    if (cell == null)
      table[key] = this._newLinkedCell$2(key, value);
    else
      cell.set$_collection$_value(value);
  },
  _removeHashTableEntry$2: function(table, key) {
    var cell;
    if (table == null)
      return;
    cell = table[key];
    if (cell == null)
      return;
    this._unlinkCell$1(cell);
    delete table[key];
    return cell.get$_collection$_value();
  },
  _newLinkedCell$2: function(key, value) {
    var cell, last;
    cell = new P.LinkedHashMapCell(key, value, null, null);
    if (this._first == null) {
      this._last = cell;
      this._first = cell;
    } else {
      last = this._last;
      cell._previous = last;
      last.set$_next(cell);
      this._last = cell;
    }
    this._collection$_length = this._collection$_length + 1;
    this._modifications = this._modifications + 1 & 67108863;
    return cell;
  },
  _unlinkCell$1: function(cell) {
    var previous, next;
    previous = cell.get$_previous();
    next = cell.get$_next();
    if (previous == null)
      this._first = next;
    else
      previous.set$_next(next);
    if (next == null)
      this._last = previous;
    else
      next.set$_previous(previous);
    this._collection$_length = this._collection$_length - 1;
    this._modifications = this._modifications + 1 & 67108863;
  },
  _computeHashCode$1: function(key) {
    return J.get$hashCode$(key) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, key) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i)
      if (J.$eq(bucket[i].get$_key(), key))
        return i;
    return -1;
  },
  toString$0: function(_) {
    return P.Maps_mapToString(this);
  },
  $isLinkedHashMap: true,
  $isMap: true,
  static: {
_LinkedHashMap__newHashTable: function() {
  var table = Object.create(null);
  table["<non-identifier-key>"] = table;
  delete table["<non-identifier-key>"];
  return table;
}}

},

_LinkedHashMap_values_closure: {"": "Closure;this_0",
  call$1: function(each) {
    var t1 = this.this_0;
    return t1.$index(t1, each);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_LinkedHashMap_containsValue_closure: {"": "Closure;this_0,value_1",
  call$1: function(each) {
    var t1 = this.this_0;
    return J.$eq(t1.$index(t1, each), this.value_1);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_LinkedHashMap_addAll_closure: {"": "Closure;this_0",
  call$2: function(key, value) {
    var t1 = this.this_0;
    t1.$indexSet(t1, key, value);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

_LinkedIdentityHashMap: {"": "_LinkedHashMap;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
  _computeHashCode$1: function(key) {
    return H.objectHashCode(key) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, key) {
    var $length, i, t1;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i) {
      t1 = bucket[i].get$_key();
      if (t1 == null ? key == null : t1 === key)
        return i;
    }
    return -1;
  },
  $as_LinkedHashMap: null,
  $asLinkedHashMap: null,
  $asMap: null
},

_LinkedCustomHashMap: {"": "_LinkedHashMap;_equals,_hashCode,_validKey,_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
  _equals$2: function(arg0, arg1) {
    return this._equals.call$2(arg0, arg1);
  },
  _hashCode$1: function(arg0) {
    return this._hashCode.call$1(arg0);
  },
  _validKey$1: function(arg0) {
    return this._validKey.call$1(arg0);
  },
  $index: function(_, key) {
    if (this._validKey$1(key) !== true)
      return;
    return P._LinkedHashMap.prototype.$index.call(this, this, key);
  },
  "+[]:1:0": 0,
  containsKey$1: function(key) {
    if (this._validKey$1(key) !== true)
      return false;
    return P._LinkedHashMap.prototype.containsKey$1.call(this, key);
  },
  "+containsKey:1:0": 0,
  remove$1: function(_, key) {
    if (this._validKey$1(key) !== true)
      return;
    return P._LinkedHashMap.prototype.remove$1.call(this, this, key);
  },
  _computeHashCode$1: function(key) {
    return this._hashCode$1(key) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, key) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i)
      if (this._equals$2(bucket[i].get$_key(), key) === true)
        return i;
    return -1;
  },
  $as_LinkedHashMap: null,
  $asLinkedHashMap: null,
  $asMap: null,
  static: {
_LinkedCustomHashMap$: function(_equals, _hashCode, validKey, $K, $V) {
  var t1 = new P._LinkedCustomHashMap_closure($K);
  t1 = new P._LinkedCustomHashMap(_equals, _hashCode, t1, 0, null, null, null, null, null, 0);
  H.setRuntimeTypeInfo(t1, [$K, $V]);
  return t1;
}}

},

_LinkedCustomHashMap_closure: {"": "Closure;K_0",
  call$1: function(v) {
    var t1 = H.checkSubtypeOfRuntimeType(v, this.K_0);
    return t1;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

LinkedHashMapCell: {"": "Object;_key<,_collection$_value@,_next@,_previous@"},

LinkedHashMapKeyIterable: {"": "IterableBase;_collection$_map",
  get$length: function(_) {
    return this._collection$_map._collection$_length;
  },
  "+length": 0,
  get$isEmpty: function(_) {
    return this._collection$_map._collection$_length === 0;
  },
  "+isEmpty": 0,
  get$iterator: function(_) {
    var t1, t2;
    t1 = this._collection$_map;
    t2 = t1._modifications;
    t2 = new P.LinkedHashMapKeyIterator(t1, t2, null, null);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(this, "LinkedHashMapKeyIterable", 0)]);
    t2._cell = t2._collection$_map._first;
    return t2;
  },
  contains$1: function(_, element) {
    return this._collection$_map.containsKey$1(element);
  },
  forEach$1: function(_, f) {
    var t1, cell, modifications;
    t1 = this._collection$_map;
    cell = t1._first;
    modifications = t1._modifications;
    for (; cell != null;) {
      f.call$1(cell.get$_key());
      if (modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      cell = cell.get$_next();
    }
  },
  $asIterableBase: null,
  $asIterable: null,
  $isEfficientLength: true
},

LinkedHashMapKeyIterator: {"": "Object;_collection$_map,_modifications,_cell,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  "+current": 0,
  moveNext$0: function() {
    var t1 = this._collection$_map;
    if (this._modifications !== t1._modifications)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    else {
      t1 = this._cell;
      if (t1 == null) {
        this._collection$_current = null;
        return false;
      } else {
        this._collection$_current = t1.get$_key();
        this._cell = this._cell.get$_next();
        return true;
      }
    }
  }
},

_HashSet: {"": "_HashSetBase;",
  get$iterator: function(_) {
    var t1 = this._computeElements$0();
    t1 = new P.HashSetIterator(this, t1, 0, null);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_HashSet", 0)]);
    return t1;
  },
  get$length: function(_) {
    return this._collection$_length;
  },
  "+length": 0,
  get$isEmpty: function(_) {
    return this._collection$_length === 0;
  },
  "+isEmpty": 0,
  get$isNotEmpty: function(_) {
    return this._collection$_length !== 0;
  },
  "+isNotEmpty": 0,
  contains$1: function(_, object) {
    var strings, nums, rest;
    if (typeof object === "string" && object !== "__proto__") {
      strings = this._strings;
      return strings == null ? false : strings[object] != null;
    } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
      nums = this._nums;
      return nums == null ? false : nums[object] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    }
  },
  lookup$1: function(object) {
    var t1, rest, bucket, index;
    if (!(typeof object === "string" && object !== "__proto__"))
      t1 = typeof object === "number" && (object & 0x3ffffff) === object;
    else
      t1 = true;
    if (t1)
      return this.contains$1(this, object) ? object : null;
    rest = this._rest;
    if (rest == null)
      return;
    bucket = rest[this._computeHashCode$1(object)];
    index = this._findBucketIndex$2(bucket, object);
    if (index < 0)
      return;
    return J.$index$asx(bucket, index);
  },
  add$1: function(_, element) {
    var strings, table, nums, rest, hash, bucket;
    if (typeof element === "string" && element !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      return this._addHashTableEntry$2(strings, element);
    } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      return this._addHashTableEntry$2(nums, element);
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [element];
      else {
        if (this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(element);
      }
      this._collection$_length = this._collection$_length + 1;
      this._elements = null;
      return true;
    }
  },
  get$add: function(_receiver) {
    return new J.BoundClosure$i1(this, P._HashSet.prototype.add$1, _receiver, "add$1");
  },
  addAll$1: function(_, objects) {
    var t1;
    for (t1 = J.get$iterator$ax(objects); t1.moveNext$0(), false;)
      this.add$1(this, t1.get$current());
  },
  remove$1: function(_, object) {
    var rest, bucket, index;
    if (typeof object === "string" && object !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, object);
    else if (typeof object === "number" && (object & 0x3ffffff) === object)
      return this._removeHashTableEntry$2(this._nums, object);
    else {
      rest = this._rest;
      if (rest == null)
        return false;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      this._collection$_length = this._collection$_length - 1;
      this._elements = null;
      bucket.splice(index, 1);
      return true;
    }
  },
  _computeElements$0: function() {
    var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
    t1 = this._elements;
    if (t1 != null)
      return t1;
    result = P.List_List(this._collection$_length, null);
    strings = this._strings;
    if (strings != null) {
      names = Object.getOwnPropertyNames(strings);
      entries = names.length;
      for (index = 0, i = 0; i < entries; ++i) {
        result[index] = names[i];
        ++index;
      }
    } else
      index = 0;
    nums = this._nums;
    if (nums != null) {
      names = Object.getOwnPropertyNames(nums);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        result[index] = +names[i];
        ++index;
      }
    }
    rest = this._rest;
    if (rest != null) {
      names = Object.getOwnPropertyNames(rest);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        bucket = rest[names[i]];
        $length = bucket.length;
        for (i0 = 0; i0 < $length; ++i0) {
          result[index] = bucket[i0];
          ++index;
        }
      }
    }
    this._elements = result;
    return result;
  },
  _addHashTableEntry$2: function(table, element) {
    if (table[element] != null)
      return false;
    table[element] = 0;
    this._collection$_length = this._collection$_length + 1;
    this._elements = null;
    return true;
  },
  _removeHashTableEntry$2: function(table, element) {
    if (table != null && table[element] != null) {
      delete table[element];
      this._collection$_length = this._collection$_length - 1;
      this._elements = null;
      return true;
    } else
      return false;
  },
  _computeHashCode$1: function(element) {
    return J.get$hashCode$(element) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, element) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i)
      if (J.$eq(bucket[i], element))
        return i;
    return -1;
  },
  $as_HashSetBase: null,
  $asIterable: null,
  $isEfficientLength: true,
  $isIterable: true
},

_IdentityHashSet: {"": "_HashSet;_collection$_length,_strings,_nums,_rest,_elements",
  _computeHashCode$1: function(key) {
    return H.objectHashCode(key) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, element) {
    var $length, i, t1;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i) {
      t1 = bucket[i];
      if (t1 == null ? element == null : t1 === element)
        return i;
    }
    return -1;
  },
  $as_HashSet: null,
  $asIterable: null
},

HashSetIterator: {"": "Object;_set,_elements,_offset,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  "+current": 0,
  moveNext$0: function() {
    var elements, offset, t1;
    elements = this._elements;
    offset = this._offset;
    t1 = this._set;
    if (elements !== t1._elements)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    else if (offset >= elements.length) {
      this._collection$_current = null;
      return false;
    } else {
      this._collection$_current = elements[offset];
      this._offset = offset + 1;
      return true;
    }
  }
},

_LinkedHashSet: {"": "_HashSetBase;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
  get$iterator: function(_) {
    var t1 = new P.LinkedHashSetIterator(this, this._modifications, null, null);
    H.setRuntimeTypeInfo(t1, [null]);
    t1._cell = t1._set._first;
    return t1;
  },
  get$length: function(_) {
    return this._collection$_length;
  },
  "+length": 0,
  get$isEmpty: function(_) {
    return this._collection$_length === 0;
  },
  "+isEmpty": 0,
  get$isNotEmpty: function(_) {
    return this._collection$_length !== 0;
  },
  "+isNotEmpty": 0,
  contains$1: function(_, object) {
    var strings, nums, rest;
    if (typeof object === "string" && object !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return false;
      return strings[object] != null;
    } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
      nums = this._nums;
      if (nums == null)
        return false;
      return nums[object] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    }
  },
  lookup$1: function(object) {
    var t1, rest, bucket, index;
    if (!(typeof object === "string" && object !== "__proto__"))
      t1 = typeof object === "number" && (object & 0x3ffffff) === object;
    else
      t1 = true;
    if (t1)
      return this.contains$1(this, object) ? object : null;
    else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return;
      return J.$index$asx(bucket, index).get$_collection$_element();
    }
  },
  forEach$1: function(_, action) {
    var cell, modifications;
    cell = this._first;
    modifications = this._modifications;
    for (; cell != null;) {
      action.call$1(cell.get$_collection$_element());
      if (modifications !== this._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(this));
      cell = cell.get$_next();
    }
  },
  get$first: function(_) {
    var t1 = this._first;
    if (t1 == null)
      throw H.wrapException(new P.StateError("No elements"));
    return t1.get$_collection$_element();
  },
  get$last: function(_) {
    var t1 = this._last;
    if (t1 == null)
      throw H.wrapException(new P.StateError("No elements"));
    return t1.get$_collection$_element();
  },
  add$1: function(_, element) {
    var strings, table, nums, rest, hash, bucket;
    if (typeof element === "string" && element !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      return this._addHashTableEntry$2(strings, element);
    } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      return this._addHashTableEntry$2(nums, element);
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$1(element)];
      else {
        if (this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(this._newLinkedCell$1(element));
      }
      return true;
    }
  },
  get$add: function(_receiver) {
    return new J.BoundClosure$i1(this, P._LinkedHashSet.prototype.add$1, _receiver, "add$1");
  },
  addAll$1: function(_, objects) {
    var t1;
    for (t1 = J.get$iterator$ax(objects); t1.moveNext$0();)
      this.add$1(this, t1.get$current());
  },
  remove$1: function(_, object) {
    var rest, bucket, index;
    if (object !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, object);
    else {
      rest = this._rest;
      if (rest == null)
        return false;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      this._unlinkCell$1(bucket.splice(index, 1)[0]);
      return true;
    }
  },
  _addHashTableEntry$2: function(table, element) {
    if (table[element] != null)
      return false;
    table[element] = this._newLinkedCell$1(element);
    return true;
  },
  _removeHashTableEntry$2: function(table, element) {
    var cell;
    if (table == null)
      return false;
    cell = table[element];
    if (cell == null)
      return false;
    this._unlinkCell$1(cell);
    delete table[element];
    return true;
  },
  _newLinkedCell$1: function(element) {
    var cell, last;
    cell = new P.LinkedHashSetCell(element, null, null);
    if (this._first == null) {
      this._last = cell;
      this._first = cell;
    } else {
      last = this._last;
      cell._previous = last;
      last.set$_next(cell);
      this._last = cell;
    }
    this._collection$_length = this._collection$_length + 1;
    this._modifications = this._modifications + 1 & 67108863;
    return cell;
  },
  _unlinkCell$1: function(cell) {
    var previous, next;
    previous = cell.get$_previous();
    next = cell.get$_next();
    if (previous == null)
      this._first = next;
    else
      previous.set$_next(next);
    if (next == null)
      this._last = previous;
    else
      next.set$_previous(previous);
    this._collection$_length = this._collection$_length - 1;
    this._modifications = this._modifications + 1 & 67108863;
  },
  _computeHashCode$1: function(element) {
    return J.get$hashCode$(element) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, element) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i)
      if (J.$eq(bucket[i].get$_collection$_element(), element))
        return i;
    return -1;
  },
  $as_HashSetBase: null,
  $asIterable: null,
  $isEfficientLength: true,
  $isIterable: true
},

LinkedHashSetCell: {"": "Object;_collection$_element<,_next@,_previous@"},

LinkedHashSetIterator: {"": "Object;_set,_modifications,_cell,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  "+current": 0,
  moveNext$0: function() {
    var t1 = this._set;
    if (this._modifications !== t1._modifications)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    else {
      t1 = this._cell;
      if (t1 == null) {
        this._collection$_current = null;
        return false;
      } else {
        this._collection$_current = t1.get$_collection$_element();
        this._cell = this._cell.get$_next();
        return true;
      }
    }
  }
},

UnmodifiableListView: {"": "UnmodifiableListBase;_collection$_source",
  get$length: function(_) {
    return J.get$length$asx(this._collection$_source);
  },
  "+length": 0,
  $index: function(_, index) {
    return J.elementAt$1$ax(this._collection$_source, index);
  },
  "+[]:1:0": 0,
  $asUnmodifiableListBase: null,
  $asList: null,
  $asIterable: null
},

_HashSetBase: {"": "IterableBase;",
  toList$1$growable: function(_, growable) {
    var result, t1, i, element, i0;
    if (growable) {
      result = P.List_List(null, H.getRuntimeTypeArgument(this, "_HashSetBase", 0));
      H.setRuntimeTypeInfo(result, [H.getRuntimeTypeArgument(this, "_HashSetBase", 0)]);
      C.JSArray_methods.set$length(result, this.get$length(this));
    } else {
      result = P.List_List(this.get$length(this), H.getRuntimeTypeArgument(this, "_HashSetBase", 0));
      H.setRuntimeTypeInfo(result, [H.getRuntimeTypeArgument(this, "_HashSetBase", 0)]);
    }
    for (t1 = this.get$iterator(this), i = 0; t1.moveNext$0(); i = i0) {
      element = t1.get$current();
      i0 = i + 1;
      if (i >= result.length)
        throw H.ioore(result, i);
      result[i] = element;
    }
    return result;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  toString$0: function(_) {
    return H.IterableMixinWorkaround_toStringIterable(this, "{", "}");
  },
  $asIterableBase: null,
  $asIterable: null,
  $isEfficientLength: true,
  $isIterable: true
},

HashSet: {"": "Object;", $isEfficientLength: true, $isIterable: true, $asIterable: null, static: {
HashSet_HashSet$identity: function($E) {
  var t1 = new P._IdentityHashSet(0, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$E]);
  return t1;
}}
},

IterableBase: {"": "Object;",
  map$1: function(_, f) {
    return H.MappedIterable_MappedIterable(this, f, H.getRuntimeTypeArgument(this, "IterableBase", 0), null);
  },
  where$1: function(_, f) {
    var t1 = new H.WhereIterable(this, f);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "IterableBase", 0)]);
    return t1;
  },
  contains$1: function(_, element) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      if (J.$eq(t1.get$current(), element))
        return true;
    return false;
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
  },
  join$1: function(_, separator) {
    var iterator, buffer, t1;
    iterator = this.get$iterator(this);
    if (!iterator.moveNext$0())
      return "";
    buffer = P.StringBuffer$("");
    if (separator === "")
      do {
        t1 = H.S(iterator.get$current());
        buffer._contents = buffer._contents + t1;
      } while (iterator.moveNext$0());
    else {
      buffer.write$1(H.S(iterator.get$current()));
      for (; iterator.moveNext$0();) {
        buffer._contents = buffer._contents + separator;
        t1 = H.S(iterator.get$current());
        buffer._contents = buffer._contents + t1;
      }
    }
    return buffer._contents;
  },
  any$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      if (f.call$1(t1.get$current()) === true)
        return true;
    return false;
  },
  toList$1$growable: function(_, growable) {
    return P.List_List$from(this, growable, H.getRuntimeTypeArgument(this, "IterableBase", 0));
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$length: function(_) {
    var it, count;
    it = this.get$iterator(this);
    for (count = 0; it.moveNext$0();)
      ++count;
    return count;
  },
  "+length": 0,
  get$isEmpty: function(_) {
    return !this.get$iterator(this).moveNext$0();
  },
  "+isEmpty": 0,
  get$isNotEmpty: function(_) {
    return this.get$isEmpty(this) !== true;
  },
  "+isNotEmpty": 0,
  get$first: function(_) {
    var it = this.get$iterator(this);
    if (!it.moveNext$0())
      throw H.wrapException(P.StateError$("No elements"));
    return it.get$current();
  },
  get$last: function(_) {
    var it, result;
    it = this.get$iterator(this);
    if (!it.moveNext$0())
      throw H.wrapException(new P.StateError("No elements"));
    do
      result = it.get$current();
    while (it.moveNext$0());
    return result;
  },
  get$single: function(_) {
    var it, result;
    it = this.get$iterator(this);
    if (!it.moveNext$0())
      throw H.wrapException(new P.StateError("No elements"));
    result = it.get$current();
    if (it.moveNext$0())
      throw H.wrapException(new P.StateError("More than one element"));
    return result;
  },
  firstWhere$2$orElse: function(_, test, orElse) {
    var t1, element;
    for (t1 = this.get$iterator(this); t1.moveNext$0();) {
      element = t1.get$current();
      if (test.call$1(element) === true)
        return element;
    }
    throw H.wrapException(new P.StateError("No matching element"));
  },
  firstWhere$1: function($receiver, test) {
    return this.firstWhere$2$orElse($receiver, test, null);
  },
  elementAt$1: function(_, index) {
    var t1, remaining, element, t2;
    if (typeof index !== "number" || Math.floor(index) !== index || index < 0)
      throw H.wrapException(new P.RangeError("value " + H.S(index)));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0();) {
      element = t1.get$current();
      t2 = J.getInterceptor(remaining);
      if (t2.$eq(remaining, 0))
        return element;
      remaining = t2.$sub(remaining, 1);
    }
    throw H.wrapException(new P.RangeError("value " + H.S(index)));
  },
  toString$0: function(_) {
    return P._iterableToString(this);
  },
  $isIterable: true,
  $asIterable: null
},

LinkedHashSet: {"": "Object;", $isEfficientLength: true, $isIterable: true, $asIterable: null, static: {
LinkedHashSet_LinkedHashSet: function(equals, hashCode, isValidKey, $E) {
  var t1 = new P._LinkedHashSet(0, null, null, null, null, null, 0);
  H.setRuntimeTypeInfo(t1, [$E]);
  return t1;
}}
},

ListBase: {"": "Object+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true, $isIterable: true, $asIterable: null},

ListMixin: {"": "Object;",
  get$iterator: function(receiver) {
    var t1 = new H.ListIterator(receiver, this.get$length(receiver), 0, null);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
    return t1;
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  forEach$1: function(receiver, action) {
    var $length, i;
    $length = this.get$length(receiver);
    if (typeof $length !== "number")
      throw H.iae($length);
    i = 0;
    for (; i < $length; ++i) {
      action.call$1(this.$index(receiver, i));
      if ($length !== this.get$length(receiver))
        throw H.wrapException(P.ConcurrentModificationError$(receiver));
    }
  },
  get$isEmpty: function(receiver) {
    return J.$eq(this.get$length(receiver), 0);
  },
  "+isEmpty": 0,
  get$isNotEmpty: function(receiver) {
    return !this.get$isEmpty(receiver);
  },
  "+isNotEmpty": 0,
  get$first: function(receiver) {
    if (J.$eq(this.get$length(receiver), 0))
      throw H.wrapException(P.StateError$("No elements"));
    return this.$index(receiver, 0);
  },
  get$last: function(receiver) {
    if (J.$eq(this.get$length(receiver), 0))
      throw H.wrapException(new P.StateError("No elements"));
    return this.$index(receiver, J.$sub$n(this.get$length(receiver), 1));
  },
  get$single: function(receiver) {
    if (J.$eq(this.get$length(receiver), 0))
      throw H.wrapException(new P.StateError("No elements"));
    if (J.$gt$n(this.get$length(receiver), 1))
      throw H.wrapException(new P.StateError("Too many elements"));
    return this.$index(receiver, 0);
  },
  contains$1: function(receiver, element) {
    var $length, i;
    $length = this.get$length(receiver);
    if (typeof $length !== "number")
      throw H.iae($length);
    i = 0;
    for (; i < $length; ++i) {
      if (J.$eq(this.$index(receiver, i), element))
        return true;
      if ($length !== this.get$length(receiver))
        throw H.wrapException(P.ConcurrentModificationError$(receiver));
    }
    return false;
  },
  any$1: function(receiver, test) {
    var $length, i;
    $length = this.get$length(receiver);
    if (typeof $length !== "number")
      throw H.iae($length);
    i = 0;
    for (; i < $length; ++i) {
      if (test.call$1(this.$index(receiver, i)) === true)
        return true;
      if ($length !== this.get$length(receiver))
        throw H.wrapException(P.ConcurrentModificationError$(receiver));
    }
    return false;
  },
  firstWhere$2$orElse: function(receiver, test, orElse) {
    var $length, i, element;
    $length = this.get$length(receiver);
    if (typeof $length !== "number")
      throw H.iae($length);
    i = 0;
    for (; i < $length; ++i) {
      element = this.$index(receiver, i);
      if (test.call$1(element) === true)
        return element;
      if ($length !== this.get$length(receiver))
        throw H.wrapException(P.ConcurrentModificationError$(receiver));
    }
    return orElse.call$0();
  },
  firstWhere$1: function($receiver, test) {
    return this.firstWhere$2$orElse($receiver, test, null);
  },
  join$1: function(receiver, separator) {
    var $length, t1, first, buffer, i, str;
    $length = this.get$length(receiver);
    if (separator.length !== 0) {
      t1 = J.getInterceptor($length);
      if (t1.$eq($length, 0))
        return "";
      first = H.S(this.$index(receiver, 0));
      if (!t1.$eq($length, this.get$length(receiver)))
        throw H.wrapException(P.ConcurrentModificationError$(receiver));
      buffer = P.StringBuffer$(first);
      if (typeof $length !== "number")
        throw H.iae($length);
      i = 1;
      for (; i < $length; ++i) {
        buffer._contents = buffer._contents + separator;
        str = this.$index(receiver, i);
        str = typeof str === "string" ? str : H.S(str);
        buffer._contents = buffer._contents + str;
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return buffer._contents;
    } else {
      buffer = P.StringBuffer$("");
      if (typeof $length !== "number")
        throw H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        str = this.$index(receiver, i);
        str = typeof str === "string" ? str : H.S(str);
        buffer._contents = buffer._contents + str;
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return buffer._contents;
    }
  },
  where$1: function(receiver, test) {
    var t1 = new H.WhereIterable(receiver, test);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
    return t1;
  },
  map$1: function(receiver, f) {
    var t1 = new H.MappedListIterable(receiver, f);
    H.setRuntimeTypeInfo(t1, [null, null]);
    return t1;
  },
  toList$1$growable: function(receiver, growable) {
    var result, i, t1;
    if (growable) {
      result = P.List_List(null, H.getRuntimeTypeArgument(receiver, "ListMixin", 0));
      H.setRuntimeTypeInfo(result, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
      C.JSArray_methods.set$length(result, this.get$length(receiver));
    } else {
      result = P.List_List(this.get$length(receiver), H.getRuntimeTypeArgument(receiver, "ListMixin", 0));
      H.setRuntimeTypeInfo(result, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
    }
    i = 0;
    while (true) {
      t1 = this.get$length(receiver);
      if (typeof t1 !== "number")
        throw H.iae(t1);
      if (!(i < t1))
        break;
      t1 = this.$index(receiver, i);
      if (i >= result.length)
        throw H.ioore(result, i);
      result[i] = t1;
      ++i;
    }
    return result;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, element) {
    var t1 = this.get$length(receiver);
    this.set$length(receiver, J.$add$ns(t1, 1));
    this.$indexSet(receiver, t1, element);
  },
  get$add: function(_receiver) {
    return new J.BoundClosure$i1(this, P.ListMixin.prototype.add$1, _receiver, "add$1");
  },
  addAll$1: function(receiver, iterable) {
    var t1, element, t2;
    for (t1 = J.get$iterator$ax(iterable); t1.moveNext$0();) {
      element = t1.get$current();
      t2 = this.get$length(receiver);
      this.set$length(receiver, J.$add$ns(t2, 1));
      this.$indexSet(receiver, t2, element);
    }
  },
  remove$1: function(receiver, element) {
    var i, t1;
    i = 0;
    while (true) {
      t1 = this.get$length(receiver);
      if (typeof t1 !== "number")
        throw H.iae(t1);
      if (!(i < t1))
        break;
      if (J.$eq(this.$index(receiver, i), element)) {
        this.setRange$4(receiver, i, J.$sub$n(this.get$length(receiver), 1), receiver, i + 1);
        this.set$length(receiver, J.$sub$n(this.get$length(receiver), 1));
        return true;
      }
      ++i;
    }
    return false;
  },
  _rangeCheck$2: function(receiver, start, end) {
    var t1;
    if (!(start < 0)) {
      t1 = this.get$length(receiver);
      if (typeof t1 !== "number")
        throw H.iae(t1);
      t1 = start > t1;
    } else
      t1 = true;
    if (t1)
      throw H.wrapException(P.RangeError$range(start, 0, this.get$length(receiver)));
    t1 = J.getInterceptor$n(end);
    if (t1.$lt(end, start) || t1.$gt(end, this.get$length(receiver)))
      throw H.wrapException(P.RangeError$range(end, start, this.get$length(receiver)));
  },
  sublist$2: function(receiver, start, end) {
    var $length, result, i, t1;
    end = this.get$length(receiver);
    this._rangeCheck$2(receiver, start, end);
    $length = J.$sub$n(end, start);
    result = P.List_List(null, H.getRuntimeTypeArgument(receiver, "ListMixin", 0));
    H.setRuntimeTypeInfo(result, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
    C.JSArray_methods.set$length(result, $length);
    if (typeof $length !== "number")
      throw H.iae($length);
    i = 0;
    for (; i < $length; ++i) {
      t1 = this.$index(receiver, start + i);
      if (i >= result.length)
        throw H.ioore(result, i);
      result[i] = t1;
    }
    return result;
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  getRange$2: function(receiver, start, end) {
    this._rangeCheck$2(receiver, start, end);
    return H.SubListIterable$(receiver, start, end, null);
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    var t1, $length, t2, i;
    if (start >= 0) {
      t1 = this.get$length(receiver);
      if (typeof t1 !== "number")
        throw H.iae(t1);
      t1 = start > t1;
    } else
      t1 = true;
    if (t1)
      H.throwExpression(P.RangeError$range(start, 0, this.get$length(receiver)));
    t1 = J.getInterceptor$n(end);
    if (t1.$lt(end, start) || t1.$gt(end, this.get$length(receiver)))
      H.throwExpression(P.RangeError$range(end, start, this.get$length(receiver)));
    $length = t1.$sub(end, start);
    if (J.$eq($length, 0))
      return;
    if (skipCount < 0)
      throw H.wrapException(new P.ArgumentError(skipCount));
    if (typeof $length !== "number")
      throw H.iae($length);
    t1 = J.getInterceptor$asx(iterable);
    t2 = t1.get$length(iterable);
    if (typeof t2 !== "number")
      throw H.iae(t2);
    if (skipCount + $length > t2)
      throw H.wrapException(new P.StateError("Not enough elements"));
    if (skipCount < start)
      for (i = $length - 1; i >= 0; --i)
        this.$indexSet(receiver, start + i, t1.$index(iterable, skipCount + i));
    else
      for (i = 0; i < $length; ++i)
        this.$indexSet(receiver, start + i, t1.$index(iterable, skipCount + i));
  },
  indexOf$2: function(receiver, element, startIndex) {
    var t1, i;
    t1 = this.get$length(receiver);
    if (typeof t1 !== "number")
      throw H.iae(t1);
    if (startIndex >= t1)
      return -1;
    if (startIndex < 0)
      startIndex = 0;
    i = startIndex;
    while (true) {
      t1 = this.get$length(receiver);
      if (typeof t1 !== "number")
        throw H.iae(t1);
      if (!(i < t1))
        break;
      if (J.$eq(this.$index(receiver, i), element))
        return i;
      ++i;
    }
    return -1;
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  lastIndexOf$2: function(receiver, element, startIndex) {
    var i, t1;
    startIndex = J.$sub$n(this.get$length(receiver), 1);
    for (i = startIndex; t1 = J.getInterceptor$n(i), t1.$ge(i, 0); i = t1.$sub(i, 1))
      if (J.$eq(this.$index(receiver, i), element))
        return i;
    return -1;
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  toString$0: function(receiver) {
    var result, t1;
    t1 = $.get$_toStringVisiting();
    if (t1.contains$1(t1, receiver))
      return "[...]";
    result = P.StringBuffer$("");
    try {
      t1 = $.get$_toStringVisiting();
      t1.add$1(t1, receiver);
      result.write$1("[");
      result.writeAll$2(receiver, ", ");
      result.write$1("]");
    } finally {
      t1 = $.get$_toStringVisiting();
      t1.remove$1(t1, receiver);
    }
    return result.get$_contents();
  },
  $isList: true,
  $asList: null,
  $isEfficientLength: true,
  $isIterable: true,
  $asIterable: null
},

Maps_mapToString_closure: {"": "Closure;box_0,result_1",
  call$2: function(k, v) {
    var t1 = this.box_0;
    if (!t1.first_0)
      this.result_1.write$1(", ");
    t1.first_0 = false;
    t1 = this.result_1;
    t1.write$1(k);
    t1.write$1(": ");
    t1.write$1(v);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

ListQueue: {"": "IterableBase;_table,_head,_tail,_modificationCount",
  get$iterator: function(_) {
    return P._ListQueueIterator$(this, H.getRuntimeTypeArgument(this, "ListQueue", 0));
  },
  forEach$1: function(_, action) {
    var modificationCount, i, t1;
    modificationCount = this._modificationCount;
    for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw H.ioore(t1, i);
      action.call$1(t1[i]);
      if (modificationCount !== this._modificationCount)
        H.throwExpression(P.ConcurrentModificationError$(this));
    }
  },
  get$isEmpty: function(_) {
    return this._head === this._tail;
  },
  "+isEmpty": 0,
  get$length: function(_) {
    return (this._tail - this._head & this._table.length - 1) >>> 0;
  },
  "+length": 0,
  get$first: function(_) {
    var t1, t2;
    t1 = this._head;
    if (t1 === this._tail)
      throw H.wrapException(P.StateError$("No elements"));
    t2 = this._table;
    if (t1 < 0 || t1 >= t2.length)
      throw H.ioore(t2, t1);
    return t2[t1];
  },
  get$last: function(_) {
    var t1, t2, t3;
    t1 = this._head;
    t2 = this._tail;
    if (t1 === t2)
      throw H.wrapException(new P.StateError("No elements"));
    t1 = this._table;
    t3 = t1.length;
    t2 = (t2 - 1 & t3 - 1) >>> 0;
    if (t2 < 0 || t2 >= t3)
      throw H.ioore(t1, t2);
    return t1[t2];
  },
  get$single: function(_) {
    var t1, t2;
    if (this._head === this._tail)
      throw H.wrapException(new P.StateError("No elements"));
    if (this.get$length(this) > 1)
      throw H.wrapException(new P.StateError("Too many elements"));
    t1 = this._table;
    t2 = this._head;
    if (t2 < 0 || t2 >= t1.length)
      throw H.ioore(t1, t2);
    return t1[t2];
  },
  elementAt$1: function(_, index) {
    var t1, t2, t3;
    t1 = J.getInterceptor$n(index);
    if (t1.$lt(index, 0) || t1.$gt(index, this.get$length(this)))
      throw H.wrapException(P.RangeError$range(index, 0, this.get$length(this)));
    t1 = this._table;
    t2 = this._head;
    if (typeof index !== "number")
      throw H.iae(index);
    t3 = t1.length;
    t2 = (t2 + index & t3 - 1) >>> 0;
    if (t2 < 0 || t2 >= t3)
      throw H.ioore(t1, t2);
    return t1[t2];
  },
  toList$1$growable: function(_, growable) {
    var list;
    if (growable) {
      list = P.List_List(null, H.getRuntimeTypeArgument(this, "ListQueue", 0));
      H.setRuntimeTypeInfo(list, [H.getRuntimeTypeArgument(this, "ListQueue", 0)]);
      C.JSArray_methods.set$length(list, this.get$length(this));
    } else {
      list = P.List_List(this.get$length(this), H.getRuntimeTypeArgument(this, "ListQueue", 0));
      H.setRuntimeTypeInfo(list, [H.getRuntimeTypeArgument(this, "ListQueue", 0)]);
    }
    this._writeToList$1(list);
    return list;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(_, element) {
    this._add$1(element);
  },
  get$add: function(_receiver) {
    return new J.BoundClosure$i1(this, P.ListQueue.prototype.add$1, _receiver, "add$1");
  },
  addAll$1: function(_, elements) {
    var addCount, $length, t1, t2, t3, endSpace, preSpace;
    addCount = elements.length;
    $length = this.get$length(this);
    t1 = $length + addCount;
    t2 = this._table;
    t3 = t2.length;
    if (t1 >= t3) {
      this._preGrow$1(t1);
      t2 = this._table;
      H.IterableMixinWorkaround_setRangeList(t2, $length, t1, elements, 0);
      this._tail = this._tail + addCount;
    } else {
      t1 = this._tail;
      endSpace = t3 - t1;
      if (addCount < endSpace) {
        H.IterableMixinWorkaround_setRangeList(t2, t1, t1 + addCount, elements, 0);
        this._tail = this._tail + addCount;
      } else {
        preSpace = addCount - endSpace;
        H.IterableMixinWorkaround_setRangeList(t2, t1, t1 + endSpace, elements, 0);
        t1 = this._table;
        H.IterableMixinWorkaround_setRangeList(t1, 0, preSpace, elements, endSpace);
        this._tail = preSpace;
      }
    }
    this._modificationCount = this._modificationCount + 1;
  },
  remove$1: function(_, object) {
    var i, t1;
    for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw H.ioore(t1, i);
      if (J.$eq(t1[i], object)) {
        this._remove$1(i);
        this._modificationCount = this._modificationCount + 1;
        return true;
      }
    }
    return false;
  },
  toString$0: function(_) {
    return H.IterableMixinWorkaround_toStringIterable(this, "{", "}");
  },
  removeFirst$0: function() {
    var t1, t2, t3, result;
    if (this._head === this._tail)
      throw H.wrapException(P.StateError$("No elements"));
    this._modificationCount = this._modificationCount + 1;
    t1 = this._table;
    t2 = this._head;
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw H.ioore(t1, t2);
    result = t1[t2];
    this._head = (t2 + 1 & t3 - 1) >>> 0;
    return result;
  },
  _add$1: function(element) {
    var t1, t2, t3;
    t1 = this._table;
    t2 = this._tail;
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw H.ioore(t1, t2);
    t1[t2] = element;
    this._tail = (t2 + 1 & t3 - 1) >>> 0;
    if (this._head === this._tail)
      this._grow$0();
    this._modificationCount = this._modificationCount + 1;
  },
  _remove$1: function(offset) {
    var t1, t2, mask, t3, t4, i, prevOffset, nextOffset;
    t1 = this._table;
    t2 = t1.length;
    mask = t2 - 1;
    t3 = this._head;
    t4 = this._tail;
    if ((offset - t3 & mask) >>> 0 < (t4 - offset & mask) >>> 0) {
      for (i = offset; i !== t3; i = prevOffset) {
        prevOffset = (i - 1 & mask) >>> 0;
        if (prevOffset < 0 || prevOffset >= t2)
          throw H.ioore(t1, prevOffset);
        t4 = t1[prevOffset];
        if (i < 0 || i >= t2)
          throw H.ioore(t1, i);
        t1[i] = t4;
      }
      if (t3 < 0 || t3 >= t2)
        throw H.ioore(t1, t3);
      t1[t3] = null;
      this._head = (t3 + 1 & mask) >>> 0;
      return (offset + 1 & mask) >>> 0;
    } else {
      this._tail = (t4 - 1 & mask) >>> 0;
      for (t1 = this._tail, t2 = this._table, t3 = t2.length, i = offset; i !== t1; i = nextOffset) {
        nextOffset = (i + 1 & mask) >>> 0;
        if (nextOffset < 0 || nextOffset >= t3)
          throw H.ioore(t2, nextOffset);
        t4 = t2[nextOffset];
        if (i < 0 || i >= t3)
          throw H.ioore(t2, i);
        t2[i] = t4;
      }
      if (t1 < 0 || t1 >= t3)
        throw H.ioore(t2, t1);
      t2[t1] = null;
      return offset;
    }
  },
  _grow$0: function() {
    var newTable, t1, t2, split;
    newTable = P.List_List(this._table.length * 2, H.getRuntimeTypeArgument(this, "ListQueue", 0));
    H.setRuntimeTypeInfo(newTable, [H.getRuntimeTypeArgument(this, "ListQueue", 0)]);
    t1 = this._table;
    t2 = this._head;
    split = t1.length - t2;
    H.IterableMixinWorkaround_setRangeList(newTable, 0, split, t1, t2);
    t1 = this._head;
    t2 = this._table;
    H.IterableMixinWorkaround_setRangeList(newTable, split, split + t1, t2, 0);
    this._head = 0;
    this._tail = this._table.length;
    this._table = newTable;
  },
  _writeToList$1: function(target) {
    var t1, t2, t3, $length, firstPartSize;
    t1 = this._head;
    t2 = this._tail;
    t3 = this._table;
    if (t1 <= t2) {
      $length = t2 - t1;
      H.IterableMixinWorkaround_setRangeList(target, 0, $length, t3, t1);
      return $length;
    } else {
      firstPartSize = t3.length - t1;
      H.IterableMixinWorkaround_setRangeList(target, 0, firstPartSize, t3, t1);
      t1 = this._tail;
      t2 = this._table;
      H.IterableMixinWorkaround_setRangeList(target, firstPartSize, firstPartSize + t1, t2, 0);
      return this._tail + firstPartSize;
    }
  },
  _preGrow$1: function(newElementCount) {
    var newTable = P.List_List(P.ListQueue__nextPowerOf2(newElementCount), H.getRuntimeTypeArgument(this, "ListQueue", 0));
    H.setRuntimeTypeInfo(newTable, [H.getRuntimeTypeArgument(this, "ListQueue", 0)]);
    this._tail = this._writeToList$1(newTable);
    this._table = newTable;
    this._head = 0;
  },
  ListQueue$1: function(initialCapacity, $E) {
    var t1 = P.List_List(8, $E);
    H.setRuntimeTypeInfo(t1, [$E]);
    this._table = t1;
  },
  $asIterableBase: null,
  $asIterable: null,
  $isEfficientLength: true,
  $isIterable: true,
  static: {
"": "ListQueue__INITIAL_CAPACITY",
ListQueue$: function(initialCapacity, $E) {
  var t1 = new P.ListQueue(null, 0, 0, 0);
  H.setRuntimeTypeInfo(t1, [$E]);
  t1.ListQueue$1(initialCapacity, $E);
  return t1;
},

ListQueue__nextPowerOf2: function(number) {
  var nextNumber;
  number = C.JSNull_methods.$shl(number, 2) - 1;
  for (; true; number = nextNumber) {
    nextNumber = (number & number - 1) >>> 0;
    if (nextNumber === 0)
      return number;
  }
}}

},

_ListQueueIterator: {"": "Object;_queue,_end,_modificationCount,_collection$_position,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  "+current": 0,
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._queue;
    if (this._modificationCount !== t1._modificationCount)
      H.throwExpression(P.ConcurrentModificationError$(t1));
    t2 = this._collection$_position;
    if (t2 === this._end) {
      this._collection$_current = null;
      return false;
    }
    t3 = t1._table;
    if (t2 < 0 || t2 >= t3.length)
      throw H.ioore(t3, t2);
    this._collection$_current = t3[t2];
    this._collection$_position = (this._collection$_position + 1 & t1._table.length - 1) >>> 0;
    return true;
  },
  static: {
_ListQueueIterator$: function(queue, $E) {
  var t1 = new P._ListQueueIterator(queue, queue._tail, queue._modificationCount, queue._head, null);
  H.setRuntimeTypeInfo(t1, [$E]);
  return t1;
}}

}}],
["dart.convert", "dart:convert", , P, {
_convertJsonToDart: function(json, reviver) {
  var revive = new P._convertJsonToDart_closure();
  return revive.call$2(null, new P._convertJsonToDart_walk(revive).call$1(json));
},

_parseJson: function(source, reviver) {
  var parsed, e, t1, exception;
  t1 = source;
  if (typeof t1 !== "string")
    throw H.wrapException(new P.ArgumentError(source));
  parsed = null;
  try {
    parsed = JSON.parse(source);
  } catch (exception) {
    t1 = H.unwrapException(exception);
    e = t1;
    throw H.wrapException(P.FormatException$(String(e)));
  }

  return P._convertJsonToDart(parsed, reviver);
},

_defaultToEncodable: function(object) {
  return object.toJson$0();
},

_convertJsonToDart_closure: {"": "Closure;",
  call$2: function(key, value) {
    return value;
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

_convertJsonToDart_walk: {"": "Closure;revive_0",
  call$1: function(e) {
    var list, t1, i, keys, map, key, proto;
    if (e == null || typeof e != "object")
      return e;
    if (Object.getPrototypeOf(e) === Array.prototype) {
      list = e;
      for (t1 = this.revive_0, i = 0; i < list.length; ++i)
        list[i] = t1.call$2(i, this.call$1(list[i]));
      return list;
    }
    keys = Object.keys(e);
    map = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    for (t1 = this.revive_0, i = 0; i < keys.length; ++i) {
      key = keys[i];
      map.$indexSet(map, key, t1.call$2(key, this.call$1(e[key])));
    }
    proto = e.__proto__;
    if (typeof proto !== "undefined" && proto !== Object.prototype)
      map.$indexSet(map, "__proto__", t1.call$2("__proto__", this.call$1(proto)));
    return map;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Codec: {"": "Object;",
  decode$1: function(encoded) {
    return this.get$decoder().convert$1(encoded);
  }
},

Converter: {"": "Object;"},

Encoding: {"": "Codec;",
  $asCodec: function() {
    return [J.JSString, [J.JSArray, J.JSInt]];
  }
},

JsonUnsupportedObjectError: {"": "Error;unsupportedObject,cause",
  toString$0: function(_) {
    if (this.cause != null)
      return "Converting object to an encodable object failed.";
    else
      return "Converting object did not return an encodable object.";
  },
  static: {
JsonUnsupportedObjectError$: function(unsupportedObject, cause) {
  return new P.JsonUnsupportedObjectError(unsupportedObject, cause);
}}

},

JsonCyclicError: {"": "JsonUnsupportedObjectError;unsupportedObject,cause",
  toString$0: function(_) {
    return "Cyclic error in JSON stringify";
  },
  static: {
JsonCyclicError$: function(object) {
  return new P.JsonCyclicError(object, null);
}}

},

JsonCodec: {"": "Codec;",
  decode$2$reviver: function(source, reviver) {
    return P._parseJson(source, C.JsonDecoder_null._reviver);
  },
  decode$1: function(source) {
    return this.decode$2$reviver(source, null);
  },
  get$encoder: function() {
    return C.JsonEncoder_null;
  },
  get$decoder: function() {
    return C.JsonDecoder_null;
  },
  $asCodec: function() {
    return [P.Object, J.JSString];
  }
},

JsonEncoder: {"": "Converter;_toEncodableFunction",
  convert$1: function(o) {
    return P._JsonStringifier_stringify(o, this._toEncodableFunction);
  },
  $asConverter: function() {
    return [P.Object, J.JSString];
  }
},

JsonDecoder: {"": "Converter;_reviver",
  convert$1: function(input) {
    return P._parseJson(input, this._reviver);
  },
  $asConverter: function() {
    return [J.JSString, P.Object];
  }
},

_JsonStringifier: {"": "Object;toEncodable,sink,seen",
  toEncodable$1: function(arg0) {
    return this.toEncodable.call$1(arg0);
  },
  checkCycle$1: function(object) {
    var t1 = this.seen;
    if (t1.contains$1(t1, object))
      throw H.wrapException(P.JsonCyclicError$(object));
    t1.add$1(t1, object);
  },
  stringifyValue$1: function(object) {
    var customJson, e, t1, t2, exception;
    if (!this.stringifyJsonValue$1(object)) {
      t1 = object;
      t2 = this.seen;
      if (t2.contains$1(t2, t1))
        H.throwExpression(P.JsonCyclicError$(t1));
      t2.add$1(t2, t1);
      try {
        customJson = this.toEncodable$1(object);
        if (!this.stringifyJsonValue$1(customJson)) {
          t1 = P.JsonUnsupportedObjectError$(object, null);
          throw H.wrapException(t1);
        }
        t2.remove$1(t2, object);
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        throw H.wrapException(P.JsonUnsupportedObjectError$(object, e));
      }

    }
  },
  stringifyJsonValue$1: function(object) {
    var t1, t2, i, t3;
    t1 = {};
    if (typeof object === "number") {
      this.sink.write$1(C.JSNumber_methods.toString$0(object));
      return true;
    } else if (object === true) {
      this.sink.write$1("true");
      return true;
    } else if (object === false) {
      this.sink.write$1("false");
      return true;
    } else if (object == null) {
      this.sink.write$1("null");
      return true;
    } else if (typeof object === "string") {
      t1 = this.sink;
      t1.write$1("\"");
      P._JsonStringifier_escape(t1, object);
      t1.write$1("\"");
      return true;
    } else {
      t2 = J.getInterceptor(object);
      if (typeof object === "object" && object !== null && (object.constructor === Array || !!t2.$isList)) {
        this.checkCycle$1(object);
        t1 = this.sink;
        t1.write$1("[");
        if (J.$gt$n(t2.get$length(object), 0)) {
          this.stringifyValue$1(t2.$index(object, 0));
          i = 1;
          while (true) {
            t3 = t2.get$length(object);
            if (typeof t3 !== "number")
              throw H.iae(t3);
            if (!(i < t3))
              break;
            t1._contents = t1._contents + ",";
            this.stringifyValue$1(t2.$index(object, i));
            ++i;
          }
        }
        t1.write$1("]");
        t1 = this.seen;
        t1.remove$1(t1, object);
        return true;
      } else if (typeof object === "object" && object !== null && !!t2.$isMap) {
        this.checkCycle$1(object);
        t3 = this.sink;
        t3.write$1("{");
        t1.first_0 = true;
        t2.forEach$1(object, new P._JsonStringifier_stringifyJsonValue_closure(t1, this));
        t3.write$1("}");
        t3 = this.seen;
        t3.remove$1(t3, object);
        return true;
      } else
        return false;
    }
  },
  static: {
"": "_JsonStringifier_BACKSPACE,_JsonStringifier_TAB,_JsonStringifier_NEWLINE,_JsonStringifier_CARRIAGE_RETURN,_JsonStringifier_FORM_FEED,_JsonStringifier_QUOTE,_JsonStringifier_BACKSLASH,_JsonStringifier_CHAR_b,_JsonStringifier_CHAR_f,_JsonStringifier_CHAR_n,_JsonStringifier_CHAR_r,_JsonStringifier_CHAR_t,_JsonStringifier_CHAR_u",
_JsonStringifier_stringify: function(object, toEncodable) {
  var output;
  toEncodable = P._defaultToEncodable$closure;
  output = P.StringBuffer$("");
  new P._JsonStringifier(toEncodable, output, P.HashSet_HashSet$identity(null)).stringifyValue$1(object);
  return output._contents;
},

_JsonStringifier_escape: function(sb, s) {
  var t1, $length, charCodes, needsEscape, i, charCode, t2;
  t1 = J.getInterceptor$asx(s);
  $length = t1.get$length(s);
  charCodes = P.List_List(null, J.JSInt);
  H.setRuntimeTypeInfo(charCodes, [J.JSInt]);
  needsEscape = false;
  i = 0;
  while (true) {
    if (typeof $length !== "number")
      throw H.iae($length);
    if (!(i < $length))
      break;
    charCode = t1.codeUnitAt$1(s, i);
    if (charCode < 32) {
      charCodes.push(92);
      switch (charCode) {
        case 8:
          charCodes.push(98);
          break;
        case 9:
          charCodes.push(116);
          break;
        case 10:
          charCodes.push(110);
          break;
        case 12:
          charCodes.push(102);
          break;
        case 13:
          charCodes.push(114);
          break;
        default:
          charCodes.push(117);
          t2 = C.JSInt_methods.$shr(charCode, 12) & 15;
          charCodes.push(t2 < 10 ? 48 + t2 : 87 + t2);
          t2 = C.JSInt_methods.$shr(charCode, 8) & 15;
          charCodes.push(t2 < 10 ? 48 + t2 : 87 + t2);
          t2 = C.JSInt_methods.$shr(charCode, 4) & 15;
          charCodes.push(t2 < 10 ? 48 + t2 : 87 + t2);
          t2 = charCode & 15;
          charCodes.push(t2 < 10 ? 48 + t2 : 87 + t2);
          break;
      }
      needsEscape = true;
    } else if (charCode === 34 || charCode === 92) {
      charCodes.push(92);
      charCodes.push(charCode);
      needsEscape = true;
    } else
      charCodes.push(charCode);
    ++i;
  }
  sb.write$1(needsEscape ? P.String_String$fromCharCodes(charCodes) : s);
}}

},

_JsonStringifier_stringifyJsonValue_closure: {"": "Closure;box_0,this_1",
  call$2: function(key, value) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = this.this_1;
    if (!t1.first_0)
      t2.sink.write$1(",\"");
    else
      t2.sink.write$1("\"");
    t2 = this.this_1;
    t3 = t2.sink;
    P._JsonStringifier_escape(t3, key);
    t3.write$1("\":");
    t2.stringifyValue$1(value);
    t1.first_0 = false;
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

Utf8Codec: {"": "Encoding;_allowMalformed",
  get$name: function(_) {
    return "utf-8";
  },
  decode$2$allowMalformed: function(codeUnits, allowMalformed) {
    return new P.Utf8Decoder(allowMalformed).convert$1(codeUnits);
  },
  decode$1: function(codeUnits) {
    return this.decode$2$allowMalformed(codeUnits, null);
  },
  get$encoder: function() {
    return new P.Utf8Encoder();
  },
  get$decoder: function() {
    return new P.Utf8Decoder(this._allowMalformed);
  }
},

Utf8Encoder: {"": "Converter;",
  convert$1: function(string) {
    var t1, t2, encoder;
    t1 = string.length;
    t2 = P.List_List(t1 * 3, J.JSInt);
    H.setRuntimeTypeInfo(t2, [J.JSInt]);
    encoder = new P._Utf8Encoder(0, 0, t2);
    if (encoder._fillBuffer$3(string, 0, t1) !== t1)
      encoder._writeSurrogate$2(C.JSString_methods.codeUnitAt$1(string, t1 - 1), 0);
    return C.JSArray_methods.sublist$2(encoder._buffer, 0, encoder._bufferIndex);
  },
  $asConverter: function() {
    return [J.JSString, [J.JSArray, J.JSInt]];
  }
},

_Utf8Encoder: {"": "Object;_carry,_bufferIndex,_buffer",
  _writeSurrogate$2: function(leadingSurrogate, nextCodeUnit) {
    var t1, t2, rune, t3, t4;
    t1 = this._buffer;
    t2 = this._bufferIndex;
    if ((nextCodeUnit & 64512) === 56320) {
      rune = (65536 + ((leadingSurrogate & 1023) << 10 >>> 0) | nextCodeUnit & 1023) >>> 0;
      this._bufferIndex = t2 + 1;
      t3 = C.JSInt_methods.$shr(rune, 18);
      t4 = t1.length;
      if (t2 < 0 || t2 >= t4)
        throw H.ioore(t1, t2);
      t1[t2] = (240 | t3) >>> 0;
      t3 = this._bufferIndex;
      this._bufferIndex = t3 + 1;
      t2 = C.JSInt_methods.$shr(rune, 12);
      if (t3 < 0 || t3 >= t4)
        throw H.ioore(t1, t3);
      t1[t3] = (128 | t2 & 63) >>> 0;
      t2 = this._bufferIndex;
      this._bufferIndex = t2 + 1;
      t3 = C.JSInt_methods.$shr(rune, 6);
      if (t2 < 0 || t2 >= t4)
        throw H.ioore(t1, t2);
      t1[t2] = (128 | t3 & 63) >>> 0;
      t3 = this._bufferIndex;
      this._bufferIndex = t3 + 1;
      if (t3 < 0 || t3 >= t4)
        throw H.ioore(t1, t3);
      t1[t3] = (128 | rune & 63) >>> 0;
      return true;
    } else {
      this._bufferIndex = t2 + 1;
      t3 = C.JSInt_methods.$shr(leadingSurrogate, 12);
      t4 = t1.length;
      if (t2 < 0 || t2 >= t4)
        throw H.ioore(t1, t2);
      t1[t2] = (224 | t3) >>> 0;
      t3 = this._bufferIndex;
      this._bufferIndex = t3 + 1;
      t2 = C.JSInt_methods.$shr(leadingSurrogate, 6);
      if (t3 < 0 || t3 >= t4)
        throw H.ioore(t1, t3);
      t1[t3] = (128 | t2 & 63) >>> 0;
      t2 = this._bufferIndex;
      this._bufferIndex = t2 + 1;
      if (t2 < 0 || t2 >= t4)
        throw H.ioore(t1, t2);
      t1[t2] = (128 | leadingSurrogate & 63) >>> 0;
      return false;
    }
  },
  _fillBuffer$3: function(str, start, end) {
    var t1, t2, t3, stringIndex, codeUnit, t4, stringIndex0, t5;
    if (start !== end && (C.JSString_methods.codeUnitAt$1(str, end - 1) & 64512) === 55296)
      --end;
    for (t1 = this._buffer, t2 = t1.length, t3 = str.length, stringIndex = start; stringIndex < end; ++stringIndex) {
      if (stringIndex < 0)
        H.throwExpression(new P.RangeError("value " + stringIndex));
      if (stringIndex >= t3)
        H.throwExpression(new P.RangeError("value " + stringIndex));
      codeUnit = str.charCodeAt(stringIndex);
      if (codeUnit <= 127) {
        t4 = this._bufferIndex;
        if (t4 >= t2)
          break;
        this._bufferIndex = t4 + 1;
        if (t4 < 0)
          throw H.ioore(t1, t4);
        t1[t4] = codeUnit;
      } else if ((codeUnit & 64512) === 55296) {
        if (this._bufferIndex + 3 >= t2)
          break;
        stringIndex0 = stringIndex + 1;
        if (stringIndex0 < 0)
          H.throwExpression(new P.RangeError("value " + stringIndex0));
        if (stringIndex0 >= t3)
          H.throwExpression(new P.RangeError("value " + stringIndex0));
        if (this._writeSurrogate$2(codeUnit, str.charCodeAt(stringIndex0)))
          stringIndex = stringIndex0;
      } else if (codeUnit <= 2047) {
        t4 = this._bufferIndex;
        t5 = t4 + 1;
        if (t5 >= t2)
          break;
        this._bufferIndex = t5;
        t5 = C.JSInt_methods.$shr(codeUnit, 6);
        if (t4 < 0 || t4 >= t2)
          throw H.ioore(t1, t4);
        t1[t4] = (192 | t5) >>> 0;
        t5 = this._bufferIndex;
        this._bufferIndex = t5 + 1;
        if (t5 < 0 || t5 >= t2)
          throw H.ioore(t1, t5);
        t1[t5] = (128 | codeUnit & 63) >>> 0;
      } else {
        t4 = this._bufferIndex;
        if (t4 + 2 >= t2)
          break;
        this._bufferIndex = t4 + 1;
        t5 = C.JSInt_methods.$shr(codeUnit, 12);
        if (t4 < 0 || t4 >= t2)
          throw H.ioore(t1, t4);
        t1[t4] = (224 | t5) >>> 0;
        t5 = this._bufferIndex;
        this._bufferIndex = t5 + 1;
        t4 = C.JSInt_methods.$shr(codeUnit, 6);
        if (t5 < 0 || t5 >= t2)
          throw H.ioore(t1, t5);
        t1[t5] = (128 | t4 & 63) >>> 0;
        t4 = this._bufferIndex;
        this._bufferIndex = t4 + 1;
        if (t4 < 0 || t4 >= t2)
          throw H.ioore(t1, t4);
        t1[t4] = (128 | codeUnit & 63) >>> 0;
      }
    }
    return stringIndex;
  },
  static: {
"": "_Utf8Encoder__DEFAULT_BYTE_BUFFER_SIZE",
}

},

Utf8Decoder: {"": "Converter;_allowMalformed",
  convert$1: function(codeUnits) {
    var buffer, decoder;
    buffer = P.StringBuffer$("");
    decoder = new P._Utf8Decoder(this._allowMalformed, buffer, true, 0, 0, 0);
    decoder.convert$3(codeUnits, 0, codeUnits.length);
    decoder.flush$0();
    return buffer._contents;
  },
  $asConverter: function() {
    return [[J.JSArray, J.JSInt], J.JSString];
  }
},

_Utf8Decoder: {"": "Object;_allowMalformed,_stringSink,_isFirstCharacter,_convert$_value,_expectedUnits,_extraUnits",
  close$0: function(_) {
    this.flush$0();
  },
  get$close: function(_receiver) {
    return new H.BoundClosure$i0(this, P._Utf8Decoder.prototype.close$0, _receiver, "close$0");
  },
  flush$0: function() {
    if (this._expectedUnits > 0) {
      if (!this._allowMalformed)
        throw H.wrapException(P.FormatException$("Unfinished UTF-8 octet sequence"));
      this._stringSink.write$1(P.String_String$fromCharCode(65533));
      this._convert$_value = 0;
      this._expectedUnits = 0;
      this._extraUnits = 0;
    }
  },
  convert$3: function(codeUnits, startIndex, endIndex) {
    var value, expectedUnits, extraUnits, t1, t2, i, t3, unit, t4, charCodes, i0;
    value = this._convert$_value;
    expectedUnits = this._expectedUnits;
    extraUnits = this._extraUnits;
    this._convert$_value = 0;
    this._expectedUnits = 0;
    this._extraUnits = 0;
    $loop$0:
      for (t1 = this._stringSink, t2 = !this._allowMalformed, i = startIndex; true; i = i0, expectedUnits = 3, extraUnits = 3) {
        $multibyte$2: {
          if (expectedUnits > 0) {
            t3 = codeUnits.length;
            while (true) {
              if (i === endIndex)
                break $loop$0;
              if (i < 0 || i >= t3)
                throw H.ioore(codeUnits, i);
              unit = codeUnits[i];
              t4 = J.getInterceptor$n(unit);
              t4.$and(unit, 192);
              if (t2)
                throw H.wrapException(P.FormatException$("Bad UTF-8 encoding 0x" + t4.toRadixString$1(unit, 16)));
              this._isFirstCharacter = false;
              charCodes = P.List_List$filled(1, 65533, J.JSInt);
              charCodes.$builtinTypeInfo = [J.JSInt];
              t3 = H.Primitives_stringFromCharCodes(charCodes);
              t1._contents = t1._contents + t3;
              expectedUnits = 0;
              break $multibyte$2;
            }
          }
        }
        if (typeof endIndex !== "number")
          throw H.iae(endIndex);
        for (; i < endIndex; i = i0) {
          i0 = i + 1;
          if (i < 0 || i >= codeUnits.length)
            throw H.ioore(codeUnits, i);
          unit = codeUnits[i];
          t3 = J.getInterceptor$n(unit);
          if (t3.$lt(unit, 0)) {
            if (t2)
              throw H.wrapException(P.FormatException$("Negative UTF-8 code unit: -0x" + J.toRadixString$1$n(t3.$negate(unit), 16)));
            charCodes = P.List_List$filled(1, 65533, J.JSInt);
            charCodes.$builtinTypeInfo = [J.JSInt];
            t3 = H.Primitives_stringFromCharCodes(charCodes);
            t1._contents = t1._contents + t3;
          } else if (t3.$le(unit, 127)) {
            this._isFirstCharacter = false;
            charCodes = P.List_List$filled(1, unit, J.JSInt);
            charCodes.$builtinTypeInfo = [J.JSInt];
            t3 = H.Primitives_stringFromCharCodes(charCodes);
            t1._contents = t1._contents + t3;
          } else {
            t3.$and(unit, 224);
            t3.$and(unit, 240);
            t3.$and(unit, 248);
            if (t2)
              throw H.wrapException(P.FormatException$("Bad UTF-8 encoding 0x" + t3.toRadixString$1(unit, 16)));
            this._isFirstCharacter = false;
            charCodes = P.List_List$filled(1, 65533, J.JSInt);
            charCodes.$builtinTypeInfo = [J.JSInt];
            t3 = H.Primitives_stringFromCharCodes(charCodes);
            t1._contents = t1._contents + t3;
            value = 65533;
            expectedUnits = 0;
            extraUnits = 0;
          }
        }
        break $loop$0;
      }
    if (expectedUnits > 0) {
      this._convert$_value = value;
      this._expectedUnits = expectedUnits;
      this._extraUnits = extraUnits;
    }
  },
  static: {
"": "_Utf8Decoder__LIMITS",
}

}}],
["dart.core", "dart:core", , P, {
Function__toMangledNames: function(namedArguments) {
  return;
},

Comparable_compare: function(a, b) {
  return J.compareTo$1$ns(a, b);
},

Error_safeToString: function(object) {
  var buffer, t1, i, codeUnit, t2, charCodes;
  if (typeof object === "number" && Math.floor(object) === object || typeof object === "number" || typeof object === "boolean" || null == object)
    return J.toString$0(object);
  if (typeof object === "string") {
    buffer = new P.StringBuffer("");
    buffer._contents = "\"";
    for (t1 = object.length, i = 0; i < t1; ++i) {
      codeUnit = C.JSString_methods.codeUnitAt$1(object, i);
      if (codeUnit <= 31)
        if (codeUnit === 10)
          buffer._contents = buffer._contents + "\\n";
        else if (codeUnit === 13)
          buffer._contents = buffer._contents + "\\r";
        else if (codeUnit === 9)
          buffer._contents = buffer._contents + "\\t";
        else {
          buffer._contents = buffer._contents + "\\x";
          if (codeUnit < 16)
            buffer._contents = buffer._contents + "0";
          else {
            buffer._contents = buffer._contents + "1";
            codeUnit -= 16;
          }
          t2 = codeUnit < 10 ? 48 + codeUnit : 87 + codeUnit;
          charCodes = P.List_List$filled(1, t2, J.JSInt);
          charCodes.$builtinTypeInfo = [J.JSInt];
          t2 = H.Primitives_stringFromCharCodes(charCodes);
          buffer._contents = buffer._contents + t2;
        }
      else if (codeUnit === 92)
        buffer._contents = buffer._contents + "\\\\";
      else if (codeUnit === 34)
        buffer._contents = buffer._contents + "\\\"";
      else {
        charCodes = P.List_List$filled(1, codeUnit, J.JSInt);
        charCodes.$builtinTypeInfo = [J.JSInt];
        t2 = H.Primitives_stringFromCharCodes(charCodes);
        buffer._contents = buffer._contents + t2;
      }
    }
    buffer._contents = buffer._contents + "\"";
    return buffer._contents;
  }
  return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
},

Exception_Exception: function(message) {
  return new P._ExceptionImplementation(message);
},

identical: function(a, b) {
  return a == null ? b == null : a === b;
},

identityHashCode: function(object) {
  return H.objectHashCode(object);
},

int_parse: function(source, onError, radix) {
  return H.Primitives_parseInt(source, radix, onError);
},

List_List: function($length, $E) {
  var result;
  if ($length == null)
    return new Array(0);
  if (typeof $length !== "number" || Math.floor($length) !== $length || $length < 0)
    throw H.wrapException(new P.ArgumentError("Length must be a positive integer: " + H.S($length) + "."));
  result = new Array($length);
  result.fixed$length = true;
  return result;
},

List_List$filled: function($length, fill, $E) {
  var result, t1, i;
  if ($length < 0)
    throw H.wrapException(new P.ArgumentError("Length must be a positive integer: " + $length + "."));
  result = H.Primitives_newFixedList($length);
  if ($length !== 0 && fill != null)
    for (t1 = result.length, i = 0; i < t1; ++i)
      result[i] = fill;
  return result;
},

List_List$from: function(other, growable, $E) {
  var list, t1, $length, fixedList, t2, i, t3;
  list = P.List_List(null, $E);
  H.setRuntimeTypeInfo(list, [$E]);
  for (t1 = J.get$iterator$ax(other); t1.moveNext$0();)
    list.push(t1.get$current());
  if (growable)
    return list;
  $length = list.length;
  fixedList = P.List_List($length, $E);
  H.setRuntimeTypeInfo(fixedList, [$E]);
  for (t1 = list.length, t2 = fixedList.length, i = 0; i < $length; ++i) {
    if (i >= t1)
      throw H.ioore(list, i);
    t3 = list[i];
    if (i >= t2)
      throw H.ioore(fixedList, i);
    fixedList[i] = t3;
  }
  return fixedList;
},

print: function(object) {
  var line, t1;
  line = J.toString$0(object);
  t1 = $.printToZone;
  if (t1 == null)
    H.printToConsole(line);
  else
    t1.call$1(line);
},

String_String$fromCharCodes: function(charCodes) {
  return H.Primitives_stringFromCharCodes(charCodes);
},

String_String$fromCharCode: function(charCode) {
  var charCodes = P.List_List$filled(1, charCode, J.JSInt);
  charCodes.$builtinTypeInfo = [J.JSInt];
  return H.Primitives_stringFromCharCodes(charCodes);
},

_combineSurrogatePair: function(start, end) {
  return 65536 + ((start & 1023) << 10 >>> 0) + (end & 1023);
},

Function__toMangledNames_closure: {"": "Closure;result_0",
  call$2: function(symbol, value) {
    var t1 = this.result_0;
    t1.$indexSet(t1, J.get$_name$x(symbol), value);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

NoSuchMethodError_toString_closure: {"": "Closure;box_0",
  call$2: function(key, value) {
    var t1 = this.box_0;
    if (t1.i_1 > 0)
      t1.sb_0.write$1(", ");
    t1.sb_0.write$1(J.get$_name$x(key));
    t1.sb_0.write$1(": ");
    t1.sb_0.write$1(P.Error_safeToString(value));
    t1.i_1 = t1.i_1 + 1;
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

Deprecated: {"": "Object;expires",
  toString$0: function(_) {
    return "Deprecated feature. Will be removed " + this.expires;
  }
},

bool: {"": "Object;",
  toString$0: function(_) {
    return this ? "true" : "false";
  },
  $isbool: true
},

Comparable: {"": "Object;"},

DateTime: {"": "Object;millisecondsSinceEpoch<,isUtc",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isDateTime)
      return false;
    return this.millisecondsSinceEpoch === other.millisecondsSinceEpoch && this.isUtc === other.isUtc;
  },
  compareTo$1: function(_, other) {
    return C.JSNumber_methods.compareTo$1(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
  },
  get$hashCode: function(_) {
    return this.millisecondsSinceEpoch;
  },
  toString$0: function(_) {
    var t1, y, m, d, h, min, sec, ms;
    t1 = new P.DateTime_toString_twoDigits();
    y = new P.DateTime_toString_fourDigits().call$1(H.Primitives_getYear(this));
    m = t1.call$1(H.Primitives_getMonth(this));
    d = t1.call$1(H.Primitives_getDay(this));
    h = t1.call$1(H.Primitives_getHours(this));
    min = t1.call$1(H.Primitives_getMinutes(this));
    sec = t1.call$1(H.Primitives_getSeconds(this));
    ms = new P.DateTime_toString_threeDigits().call$1(H.Primitives_getMilliseconds(this));
    if (this.isUtc)
      return H.S(y) + "-" + H.S(m) + "-" + H.S(d) + " " + H.S(h) + ":" + H.S(min) + ":" + H.S(sec) + "." + H.S(ms) + "Z";
    else
      return H.S(y) + "-" + H.S(m) + "-" + H.S(d) + " " + H.S(h) + ":" + H.S(min) + ":" + H.S(sec) + "." + H.S(ms);
  },
  add$1: function(_, duration) {
    return P.DateTime$fromMillisecondsSinceEpoch(C.JSNumber_methods.$add(this.millisecondsSinceEpoch, duration.get$inMilliseconds()), this.isUtc);
  },
  get$add: function(_receiver) {
    return new J.BoundClosure$i1(this, P.DateTime.prototype.add$1, _receiver, "add$1");
  },
  DateTime$_now$0: function() {
    H.Primitives_lazyAsJsDate(this);
  },
  DateTime$fromMillisecondsSinceEpoch$2$isUtc: function(millisecondsSinceEpoch, isUtc) {
    if (Math.abs(millisecondsSinceEpoch) > 8640000000000000)
      throw H.wrapException(new P.ArgumentError(millisecondsSinceEpoch));
  },
  $isDateTime: true,
  static: {
"": "DateTime_MONDAY,DateTime_TUESDAY,DateTime_WEDNESDAY,DateTime_THURSDAY,DateTime_FRIDAY,DateTime_SATURDAY,DateTime_SUNDAY,DateTime_DAYS_PER_WEEK,DateTime_JANUARY,DateTime_FEBRUARY,DateTime_MARCH,DateTime_APRIL,DateTime_MAY,DateTime_JUNE,DateTime_JULY,DateTime_AUGUST,DateTime_SEPTEMBER,DateTime_OCTOBER,DateTime_NOVEMBER,DateTime_DECEMBER,DateTime_MONTHS_PER_YEAR,DateTime__MAX_MILLISECONDS_SINCE_EPOCH",
DateTime_parse: function(formattedString) {
  var match, t1, t2, years, month, day, hour, minute, second, millisecond, addOneMillisecond, isUtc, millisecondsSinceEpoch;
  match = new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^([+-]?\\d?\\d\\d\\d\\d)-?(\\d\\d)-?(\\d\\d)(?:[ T](\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(.\\d{1,6})?)?)? ?([zZ])?)?$", false, true, false), null, null).firstMatch$1(formattedString);
  if (match != null) {
    t1 = new P.DateTime_parse_parseIntOrZero();
    t2 = match._match;
    if (1 >= t2.length)
      throw H.ioore(t2, 1);
    years = H.Primitives_parseInt(t2[1], null, null);
    if (2 >= t2.length)
      throw H.ioore(t2, 2);
    month = H.Primitives_parseInt(t2[2], null, null);
    if (3 >= t2.length)
      throw H.ioore(t2, 3);
    day = H.Primitives_parseInt(t2[3], null, null);
    if (4 >= t2.length)
      throw H.ioore(t2, 4);
    hour = t1.call$1(t2[4]);
    if (5 >= t2.length)
      throw H.ioore(t2, 5);
    minute = t1.call$1(t2[5]);
    if (6 >= t2.length)
      throw H.ioore(t2, 6);
    second = t1.call$1(t2[6]);
    if (7 >= t2.length)
      throw H.ioore(t2, 7);
    millisecond = J.round$0$n(J.$mul$n(new P.DateTime_parse_parseDoubleOrZero().call$1(t2[7]), 1000));
    if (millisecond === 1000) {
      addOneMillisecond = true;
      millisecond = 999;
    } else
      addOneMillisecond = false;
    if (8 >= t2.length)
      throw H.ioore(t2, 8);
    t1 = t2[8];
    isUtc = t1 != null && !J.$eq(t1, "");
    millisecondsSinceEpoch = H.Primitives_valueFromDecomposedDate(years, month, day, hour, minute, second, millisecond, isUtc);
    return P.DateTime$fromMillisecondsSinceEpoch(addOneMillisecond ? millisecondsSinceEpoch + 1 : millisecondsSinceEpoch, isUtc);
  } else
    throw H.wrapException(new P.ArgumentError(formattedString));
},

DateTime$fromMillisecondsSinceEpoch: function(millisecondsSinceEpoch, isUtc) {
  var t1 = new P.DateTime(millisecondsSinceEpoch, isUtc);
  t1.DateTime$fromMillisecondsSinceEpoch$2$isUtc(millisecondsSinceEpoch, isUtc);
  return t1;
},

DateTime$_now: function() {
  var t1 = new P.DateTime(Date.now(), false);
  t1.DateTime$_now$0();
  return t1;
}}

},

DateTime_parse_parseIntOrZero: {"": "Closure;",
  call$1: function(matched) {
    if (matched == null)
      return 0;
    return H.Primitives_parseInt(matched, null, null);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

DateTime_parse_parseDoubleOrZero: {"": "Closure;",
  call$1: function(matched) {
    if (matched == null)
      return 0;
    return H.Primitives_parseDouble(matched, null);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

DateTime_toString_fourDigits: {"": "Closure;",
  call$1: function(n) {
    var t1, absN, sign;
    t1 = J.getInterceptor$n(n);
    absN = t1.abs$0(n);
    sign = t1.$lt(n, 0) ? "-" : "";
    if (absN >= 1000)
      return H.S(n);
    if (absN >= 100)
      return sign + "0" + H.S(absN);
    if (absN >= 10)
      return sign + "00" + H.S(absN);
    return sign + "000" + H.S(absN);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

DateTime_toString_threeDigits: {"": "Closure;",
  call$1: function(n) {
    var t1 = J.getInterceptor$n(n);
    if (t1.$ge(n, 100))
      return H.S(n);
    if (t1.$ge(n, 10))
      return "0" + H.S(n);
    return "00" + H.S(n);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

DateTime_toString_twoDigits: {"": "Closure;",
  call$1: function(n) {
    if (J.$ge$n(n, 10))
      return H.S(n);
    return "0" + H.S(n);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Duration: {"": "Object;_duration<",
  $add: function(_, other) {
    return P.Duration$(0, 0, this._duration + other.get$_duration(), 0, 0, 0);
  },
  $sub: function(_, other) {
    return P.Duration$(0, 0, this._duration - other.get$_duration(), 0, 0, 0);
  },
  $mul: function(_, factor) {
    if (typeof factor !== "number")
      throw H.iae(factor);
    return P.Duration$(0, 0, C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(this._duration * factor)), 0, 0, 0);
  },
  $tdiv: function(_, quotient) {
    if (quotient === 0)
      throw H.wrapException(P.IntegerDivisionByZeroException$());
    return P.Duration$(0, 0, C.JSNumber_methods.$tdiv(this._duration, quotient), 0, 0, 0);
  },
  $lt: function(_, other) {
    return this._duration < other.get$_duration();
  },
  $gt: function(_, other) {
    return this._duration > other.get$_duration();
  },
  $le: function(_, other) {
    return this._duration <= other.get$_duration();
  },
  $ge: function(_, other) {
    return this._duration >= other.get$_duration();
  },
  get$inMilliseconds: function() {
    return C.JSNumber_methods.$tdiv(this._duration, 1000);
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isDuration)
      return false;
    return this._duration === other._duration;
  },
  get$hashCode: function(_) {
    return this._duration & 0x1FFFFFFF;
  },
  compareTo$1: function(_, other) {
    return C.JSNumber_methods.compareTo$1(this._duration, other.get$_duration());
  },
  toString$0: function(_) {
    var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
    t1 = new P.Duration_toString_twoDigits();
    t2 = this._duration;
    if (t2 < 0)
      return "-" + H.S(P.Duration$(0, 0, -t2, 0, 0, 0));
    twoDigitMinutes = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods.$tdiv(t2, 60000000), 60));
    twoDigitSeconds = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods.$tdiv(t2, 1000000), 60));
    sixDigitUs = new P.Duration_toString_sixDigits().call$1(C.JSNumber_methods.remainder$1(t2, 1000000));
    return H.S(C.JSNumber_methods.$tdiv(t2, 3600000000)) + ":" + H.S(twoDigitMinutes) + ":" + H.S(twoDigitSeconds) + "." + H.S(sixDigitUs);
  },
  $isDuration: true,
  static: {
"": "Duration_MICROSECONDS_PER_MILLISECOND,Duration_MILLISECONDS_PER_SECOND,Duration_SECONDS_PER_MINUTE,Duration_MINUTES_PER_HOUR,Duration_HOURS_PER_DAY,Duration_MICROSECONDS_PER_SECOND,Duration_MICROSECONDS_PER_MINUTE,Duration_MICROSECONDS_PER_HOUR,Duration_MICROSECONDS_PER_DAY,Duration_MILLISECONDS_PER_MINUTE,Duration_MILLISECONDS_PER_HOUR,Duration_MILLISECONDS_PER_DAY,Duration_SECONDS_PER_HOUR,Duration_SECONDS_PER_DAY,Duration_MINUTES_PER_DAY,Duration_ZERO",
Duration$: function(days, hours, microseconds, milliseconds, minutes, seconds) {
  return new P.Duration(days * 86400000000 + hours * 3600000000 + minutes * 60000000 + seconds * 1000000 + milliseconds * 1000 + microseconds);
}}

},

Duration_toString_sixDigits: {"": "Closure;",
  call$1: function(n) {
    var t1 = J.getInterceptor$n(n);
    if (t1.$ge(n, 100000))
      return H.S(n);
    if (t1.$ge(n, 10000))
      return "0" + H.S(n);
    if (t1.$ge(n, 1000))
      return "00" + H.S(n);
    if (t1.$ge(n, 100))
      return "000" + H.S(n);
    if (t1.$gt(n, 10))
      return "0000" + H.S(n);
    return "00000" + H.S(n);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Duration_toString_twoDigits: {"": "Closure;",
  call$1: function(n) {
    if (J.$ge$n(n, 10))
      return H.S(n);
    return "0" + H.S(n);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Error: {"": "Object;",
  get$stackTrace: function() {
    return new H._StackTrace(this.$thrownJsError, null);
  },
  $isError: true
},

NullThrownError: {"": "Error;",
  toString$0: function(_) {
    return "Throw of null.";
  }
},

ArgumentError: {"": "Error;message>",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 != null)
      return "Illegal argument(s): " + H.S(t1);
    return "Illegal argument(s)";
  },
  static: {
ArgumentError$: function(message) {
  return new P.ArgumentError(message);
}}

},

RangeError: {"": "ArgumentError;message",
  toString$0: function(_) {
    return "RangeError: " + H.S(this.message);
  },
  static: {
RangeError$: function(message) {
  return new P.RangeError(message);
},

RangeError$value: function(value) {
  return new P.RangeError("value " + H.S(value));
},

"+new RangeError$value:1:0": 0,

RangeError$range: function(value, start, end) {
  return new P.RangeError("value " + H.S(value) + " not in range " + H.S(start) + ".." + H.S(end));
}}

},

NoSuchMethodError: {"": "Error;_core$_receiver,_memberName,_core$_arguments,_namedArguments,_existingArgumentNames",
  toString$0: function(_) {
    var t1, t2, t3, t4, t5, str;
    t1 = {};
    t1.sb_0 = P.StringBuffer$("");
    t1.i_1 = 0;
    t2 = this._core$_arguments;
    if (t2 != null) {
      t3 = J.getInterceptor$asx(t2);
      while (true) {
        t4 = t1.i_1;
        t5 = t3.get$length(t2);
        if (typeof t5 !== "number")
          throw H.iae(t5);
        if (!(t4 < t5))
          break;
        if (t1.i_1 > 0) {
          t4 = t1.sb_0;
          t4._contents = t4._contents + ", ";
        }
        t4 = t1.sb_0;
        str = P.Error_safeToString(t3.$index(t2, t1.i_1));
        str = typeof str === "string" ? str : H.S(str);
        t4._contents = t4._contents + str;
        t1.i_1 = t1.i_1 + 1;
      }
    }
    t2 = this._namedArguments;
    if (t2 != null)
      J.forEach$1$ax(t2, new P.NoSuchMethodError_toString_closure(t1));
    return "NoSuchMethodError : method not found: '" + H.S(this._memberName) + "'\nReceiver: " + H.S(P.Error_safeToString(this._core$_receiver)) + "\nArguments: [" + H.S(t1.sb_0) + "]";
  },
  $isNoSuchMethodError: true,
  static: {
NoSuchMethodError$: function(receiver, memberName, positionalArguments, namedArguments, existingArgumentNames) {
  return new P.NoSuchMethodError(receiver, memberName, positionalArguments, namedArguments, existingArgumentNames);
}}

},

UnsupportedError: {"": "Error;message>",
  toString$0: function(_) {
    return "Unsupported operation: " + this.message;
  },
  $isUnsupportedError: true,
  static: {
UnsupportedError$: function(message) {
  return new P.UnsupportedError(message);
}}

},

UnimplementedError: {"": "Error;message>",
  toString$0: function(_) {
    var t1 = this.message;
    return t1 != null ? "UnimplementedError: " + t1 : "UnimplementedError";
  },
  $isUnsupportedError: true,
  $isError: true,
  static: {
UnimplementedError$: function(message) {
  return new P.UnimplementedError(message);
}}

},

StateError: {"": "Error;message>",
  toString$0: function(_) {
    return "Bad state: " + this.message;
  },
  static: {
StateError$: function(message) {
  return new P.StateError(message);
}}

},

ConcurrentModificationError: {"": "Error;modifiedObject",
  toString$0: function(_) {
    var t1 = this.modifiedObject;
    if (t1 == null)
      return "Concurrent modification during iteration.";
    return "Concurrent modification during iteration: " + H.S(P.Error_safeToString(t1)) + ".";
  },
  static: {
ConcurrentModificationError$: function(modifiedObject) {
  return new P.ConcurrentModificationError(modifiedObject);
}}

},

StackOverflowError: {"": "Object;",
  toString$0: function(_) {
    return "Stack Overflow";
  },
  get$stackTrace: function() {
    return;
  },
  $isError: true
},

CyclicInitializationError: {"": "Error;variableName",
  toString$0: function(_) {
    return "Reading static variable '" + this.variableName + "' during its initialization";
  },
  static: {
CyclicInitializationError$: function(variableName) {
  return new P.CyclicInitializationError(variableName);
}}

},

_ExceptionImplementation: {"": "Object;message>",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + H.S(t1);
  }
},

FormatException: {"": "Object;message>",
  toString$0: function(_) {
    return "FormatException: " + H.S(this.message);
  },
  static: {
FormatException$: function(message) {
  return new P.FormatException(message);
}}

},

IntegerDivisionByZeroException: {"": "Object;",
  toString$0: function(_) {
    return "IntegerDivisionByZeroException";
  },
  static: {
IntegerDivisionByZeroException$: function() {
  return new P.IntegerDivisionByZeroException();
}}

},

Expando: {"": "Object;name>",
  toString$0: function(_) {
    return "Expando:" + this.name;
  },
  $index: function(_, object) {
    var values = H.Primitives_getProperty(object, "expando$values");
    return values == null ? null : H.Primitives_getProperty(values, this._getKey$0());
  },
  "+[]:1:0": 0,
  $indexSet: function(_, object, value) {
    var values = H.Primitives_getProperty(object, "expando$values");
    if (values == null) {
      values = new P.Object();
      H.Primitives_setProperty(object, "expando$values", values);
    }
    H.Primitives_setProperty(values, this._getKey$0(), value);
  },
  "+[]=:2:0": 0,
  _getKey$0: function() {
    var key, t1;
    key = H.Primitives_getProperty(this, "expando$key");
    if (key == null) {
      t1 = $.Expando__keyCount;
      $.Expando__keyCount = t1 + 1;
      key = "expando$key$" + t1;
      H.Primitives_setProperty(this, "expando$key", key);
    }
    return key;
  },
  static: {
"": "Expando__KEY_PROPERTY_NAME,Expando__EXPANDO_PROPERTY_NAME,Expando__keyCount",
}

},

Function: {"": "Object;", $isFunction: true},

Iterable: {"": "Object;", $isIterable: true, $asIterable: null},

Iterator: {"": "Object;"},

Map: {"": "Object;", $isMap: true},

Null: {"": "Object;",
  toString$0: function(_) {
    return "null";
  }
},

Object: {"": ";",
  $eq: function(_, other) {
    return this === other;
  },
  get$hashCode: function(_) {
    return H.Primitives_objectHashCode(this);
  },
  toString$0: function(_) {
    return H.Primitives_objectToString(this);
  },
  noSuchMethod$1: function(_, invocation) {
    throw H.wrapException(P.NoSuchMethodError$(this, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
  },
  get$runtimeType: function(_) {
    return new H.TypeImpl(H.getRuntimeTypeString(this), null);
  },
  $isObject: true
},

Match: {"": "Object;", $isMatch: true},

StackTrace: {"": "Object;"},

RuneIterator: {"": "Object;string,_core$_position,_nextPosition,_currentCodePoint",
  _checkSplitSurrogate$1: function(index) {
    J.$gt$n(index, 0);
  },
  reset$1: function(_, rawIndex) {
    var t1 = J.getInterceptor$n(rawIndex);
    t1.$lt(rawIndex, 0);
    t1.$gt(rawIndex, J.get$length$asx(this.string));
    this._checkSplitSurrogate$1(rawIndex);
    this._nextPosition = rawIndex;
    this._core$_position = rawIndex;
    this._currentCodePoint = null;
  },
  reset$0: function($receiver) {
    return this.reset$1($receiver, 0);
  },
  get$current: function() {
    return this._currentCodePoint;
  },
  "+current": 0,
  moveNext$0: function() {
    var t1, t2, codeUnit, nextPosition, t3, nextCodeUnit;
    this._core$_position = this._nextPosition;
    t1 = this.string;
    t2 = J.getInterceptor$asx(t1);
    if (this._core$_position === t2.get$length(t1)) {
      this._currentCodePoint = null;
      return false;
    }
    codeUnit = t2.codeUnitAt$1(t1, this._core$_position);
    nextPosition = this._core$_position + 1;
    if ((codeUnit & 64512) === 55296) {
      t3 = t2.get$length(t1);
      if (typeof t3 !== "number")
        throw H.iae(t3);
      t3 = nextPosition < t3;
    } else
      t3 = false;
    if (t3) {
      nextCodeUnit = t2.codeUnitAt$1(t1, nextPosition);
      if ((nextCodeUnit & 64512) === 56320) {
        this._nextPosition = nextPosition + 1;
        this._currentCodePoint = P._combineSurrogatePair(codeUnit, nextCodeUnit);
        return true;
      }
    }
    this._nextPosition = nextPosition;
    this._currentCodePoint = codeUnit;
    return true;
  }
},

StringBuffer: {"": "Object;_contents<",
  get$length: function(_) {
    return this._contents.length;
  },
  "+length": 0,
  get$isEmpty: function(_) {
    return this._contents.length === 0;
  },
  "+isEmpty": 0,
  get$isNotEmpty: function(_) {
    return this._contents.length !== 0;
  },
  "+isNotEmpty": 0,
  write$1: function(obj) {
    var str = typeof obj === "string" ? obj : H.S(obj);
    this._contents = this._contents + str;
  },
  writeAll$2: function(objects, separator) {
    var iterator, str;
    iterator = J.get$iterator$ax(objects);
    if (!iterator.moveNext$0())
      return;
    if (separator.length === 0)
      do {
        str = iterator.get$current();
        str = typeof str === "string" ? str : H.S(str);
        this._contents = this._contents + str;
      } while (iterator.moveNext$0());
    else {
      this.write$1(iterator.get$current());
      for (; iterator.moveNext$0();) {
        this._contents = this._contents + separator;
        str = iterator.get$current();
        str = typeof str === "string" ? str : H.S(str);
        this._contents = this._contents + str;
      }
    }
  },
  toString$0: function(_) {
    return this._contents;
  },
  StringBuffer$1: function($content) {
    this._contents = $content;
  },
  static: {
StringBuffer$: function($content) {
  var t1 = new P.StringBuffer("");
  t1.StringBuffer$1($content);
  return t1;
}}

},

Symbol: {"": "Object;", $isSymbol: true},

Type: {"": "Object;", $isType: true},

Uri: {"": "Object;_host,_port,_path,scheme,userInfo,query,fragment,_pathSegments,_queryParameters",
  get$host: function(_) {
    var t1, t2;
    t1 = this._host;
    if (t1 != null && J.startsWith$1$s(t1, "[")) {
      t2 = J.getInterceptor$asx(t1);
      return t2.substring$2(t1, 1, J.$sub$n(t2.get$length(t1), 1));
    }
    return t1;
  },
  get$port: function(_) {
    var t1, t2;
    if (J.$eq(this._port, 0)) {
      t1 = this.scheme;
      t2 = J.getInterceptor(t1);
      if (t2.$eq(t1, "http"))
        return 80;
      if (t2.$eq(t1, "https"))
        return 443;
    }
    return this._port;
  },
  get$path: function(_) {
    return this._path;
  },
  query$1: function($receiver, arg0) {
    return this.query.call$1(arg0);
  },
  _makePath$2: function(path, pathSegments) {
    var t1, result;
    t1 = path == null;
    if (t1 && true)
      return "";
    t1 = !t1;
    if (t1)
      ;
    result = t1 ? P.Uri__normalize(path) : J.join$1$ax(C.JSNull_methods.map$1(pathSegments, new P.Uri__makePath_closure()), "/");
    if (!J.$eq(this.get$host(this), "") || J.$eq(this.scheme, "file")) {
      t1 = J.getInterceptor$asx(result);
      t1 = t1.get$isNotEmpty(result) && !t1.startsWith$1(result, "/");
    } else
      t1 = false;
    if (t1)
      return "/" + H.S(result);
    return result;
  },
  _merge$2: function(base, reference) {
    var t1 = J.getInterceptor(base);
    if (t1.$eq(base, ""))
      return "/" + H.S(reference);
    return t1.substring$2(base, 0, J.$add$ns(t1.lastIndexOf$1(base, "/"), 1)) + H.S(reference);
  },
  _hasDotSegments$1: function(path) {
    var t1 = J.getInterceptor$asx(path);
    if (J.$gt$n(t1.get$length(path), 0) && t1.codeUnitAt$1(path, 0) === 58)
      return true;
    return t1.indexOf$1(path, "/.") !== -1;
  },
  _removeDotSegments$1: function(path) {
    var output, t1, t2, appendSlash, segment;
    if (!this._hasDotSegments$1(path))
      return path;
    output = [];
    for (t1 = J.split$1$s(path, "/"), t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]), appendSlash = false; t2.moveNext$0();) {
      segment = t2._current;
      if (J.$eq(segment, "..")) {
        t1 = output.length;
        if (t1 !== 0)
          if (t1 === 1) {
            if (0 >= t1)
              throw H.ioore(output, 0);
            t1 = !J.$eq(output[0], "");
          } else
            t1 = true;
        else
          t1 = false;
        if (t1) {
          if (0 >= output.length)
            throw H.ioore(output, 0);
          output.pop();
        }
        appendSlash = true;
      } else if ("." === segment)
        appendSlash = true;
      else {
        output.push(segment);
        appendSlash = false;
      }
    }
    if (appendSlash)
      output.push("");
    return C.JSArray_methods.join$1(output, "/");
  },
  resolve$1: function(reference) {
    return this.resolveUri$1(P.Uri$_fromMatch($.get$Uri__splitRe().firstMatch$1(reference)));
  },
  get$resolve: function() {
    return new H.BoundClosure$1(this, P.Uri.prototype.resolve$1, null, "resolve$1");
  },
  resolveUri$1: function(reference) {
    var targetScheme, targetUserInfo, targetHost, targetPort, targetPath, targetQuery, t1, t2;
    targetScheme = reference.scheme;
    if (!J.$eq(targetScheme, "")) {
      targetUserInfo = reference.userInfo;
      targetHost = reference.get$host(reference);
      targetPort = reference.get$port(reference);
      targetPath = this._removeDotSegments$1(reference._path);
      targetQuery = reference.query;
    } else {
      if (!J.$eq(reference.get$host(reference), "")) {
        targetUserInfo = reference.userInfo;
        targetHost = reference.get$host(reference);
        targetPort = reference.get$port(reference);
        targetPath = this._removeDotSegments$1(reference._path);
        targetQuery = reference.query;
      } else {
        if (J.$eq(reference._path, "")) {
          targetPath = this._path;
          targetQuery = reference.query;
          targetQuery = !J.$eq(targetQuery, "") ? targetQuery : this.query;
        } else {
          t1 = J.startsWith$1$s(reference._path, "/");
          t2 = reference._path;
          targetPath = t1 ? this._removeDotSegments$1(t2) : this._removeDotSegments$1(this._merge$2(this._path, t2));
          targetQuery = reference.query;
        }
        targetUserInfo = this.userInfo;
        targetHost = this.get$host(this);
        targetPort = this.get$port(this);
      }
      targetScheme = this.scheme;
    }
    return P.Uri$(reference.fragment, targetHost, targetPath, null, targetPort, targetQuery, null, targetScheme, targetUserInfo);
  },
  _writeAuthority$1: function(ss) {
    var t1 = this.userInfo;
    if ("" !== t1) {
      ss.write$1(t1);
      ss.write$1("@");
    }
    t1 = this._host;
    ss.write$1(t1 == null ? "null" : t1);
    if (!J.$eq(this._port, 0)) {
      ss.write$1(":");
      ss.write$1(J.toString$0(this._port));
    }
  },
  toString$0: function(_) {
    var sb, t1;
    sb = P.StringBuffer$("");
    t1 = this.scheme;
    if ("" !== t1) {
      sb.write$1(t1);
      sb.write$1(":");
    }
    if (!J.$eq(this.get$host(this), "") || J.$eq(t1, "file")) {
      sb.write$1("//");
      this._writeAuthority$1(sb);
    }
    sb.write$1(this._path);
    t1 = this.query;
    if ("" !== t1) {
      sb.write$1("?");
      sb.write$1(t1);
    }
    t1 = this.fragment;
    if ("" !== t1) {
      sb.write$1("#");
      sb.write$1(t1);
    }
    return sb._contents;
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor$x(other);
    if (typeof other !== "object" || other === null || !t1.$isUri)
      return false;
    return J.$eq(this.scheme, other.scheme) && J.$eq(this.userInfo, other.userInfo) && J.$eq(this.get$host(this), t1.get$host(other)) && J.$eq(this.get$port(this), t1.get$port(other)) && J.$eq(this._path, other._path) && J.$eq(this.query, other.query) && J.$eq(this.fragment, other.fragment);
  },
  get$hashCode: function(_) {
    var t1 = new P.Uri_hashCode_combine();
    return t1.call$2(this.scheme, t1.call$2(this.userInfo, t1.call$2(this.get$host(this), t1.call$2(this.get$port(this), t1.call$2(this._path, t1.call$2(this.query, t1.call$2(this.fragment, 1)))))));
  },
  Uri$9$fragment$host$path$pathSegments$port$query$queryParameters$scheme$userInfo: function(fragment, host, path, pathSegments, port, query, queryParameters, scheme, userInfo) {
    var t1 = J.getInterceptor(scheme);
    if (t1.$eq(scheme, "http") && J.$eq(port, 80))
      this._port = 0;
    else if (t1.$eq(scheme, "https") && J.$eq(port, 443))
      this._port = 0;
    else
      this._port = port;
    this._path = this._makePath$2(path, pathSegments);
  },
  $isUri: true,
  static: {
"": "Uri__splitRe,Uri__COMPONENT_SCHEME,Uri__COMPONENT_USER_INFO,Uri__COMPONENT_HOST,Uri__COMPONENT_HOST_IPV6,Uri__COMPONENT_PORT,Uri__COMPONENT_PATH,Uri__COMPONENT_QUERY_DATA,Uri__COMPONENT_FRAGMENT,Uri__DOUBLE_QUOTE,Uri__PERCENT,Uri__ASTERISK,Uri__PLUS,Uri__SLASH,Uri__ZERO,Uri__NINE,Uri__COLON,Uri__LESS,Uri__GREATER,Uri__QUESTION,Uri__AT_SIGN,Uri__UPPER_CASE_A,Uri__UPPER_CASE_F,Uri__UPPER_CASE_Z,Uri__LEFT_BRACKET,Uri__BACKSLASH,Uri__RIGHT_BRACKET,Uri__LOWER_CASE_A,Uri__LOWER_CASE_F,Uri__LOWER_CASE_Z,Uri__BAR,Uri__unreservedTable,Uri__unreserved2396Table,Uri__encodeFullTable,Uri__schemeTable,Uri__schemeLowerTable,Uri__subDelimitersTable,Uri__pathCharTable,Uri__queryCharTable",
Uri$_fromMatch: function(m) {
  var t1, t2, t3, t4, t5, t6, t7, t8;
  t1 = m._match;
  if (1 >= t1.length)
    throw H.ioore(t1, 1);
  t2 = t1[1];
  t2 = P.Uri__makeScheme(t2 != null ? t2 : "");
  t3 = t1.length;
  if (2 >= t3)
    throw H.ioore(t1, 2);
  t4 = t1[2];
  t4 = t4 != null ? t4 : "";
  if (3 >= t3)
    throw H.ioore(t1, 3);
  t5 = t1[3];
  if (4 >= t3)
    throw H.ioore(t1, 4);
  t5 = P.Uri__eitherOf(t5, t1[4]);
  if (5 >= t3)
    throw H.ioore(t1, 5);
  t3 = P.Uri__parseIntOrZero(t1[5]);
  t6 = t1.length;
  if (6 >= t6)
    throw H.ioore(t1, 6);
  t7 = t1[6];
  t7 = t7 != null ? t7 : "";
  if (7 >= t6)
    throw H.ioore(t1, 7);
  t8 = t1[7];
  t8 = t8 != null ? t8 : "";
  if (8 >= t6)
    throw H.ioore(t1, 8);
  t1 = t1[8];
  t1 = t1 != null ? t1 : "";
  t6 = P.Uri__makeScheme(t2);
  t6 = new P.Uri(P.Uri__makeHost(t5), null, null, t6, t4, P.Uri__makeQuery(t8, null), P.Uri__makeFragment(t1), null, null);
  t6.Uri$9$fragment$host$path$pathSegments$port$query$queryParameters$scheme$userInfo(t1, t5, t7, null, t3, t8, null, t2, t4);
  return t6;
},

Uri$: function(fragment, host, path, pathSegments, port, query, queryParameters, scheme, userInfo) {
  var t1 = P.Uri__makeScheme(scheme);
  t1 = new P.Uri(P.Uri__makeHost(host), null, null, t1, userInfo, P.Uri__makeQuery(query, queryParameters), P.Uri__makeFragment(fragment), null, null);
  t1.Uri$9$fragment$host$path$pathSegments$port$query$queryParameters$scheme$userInfo(fragment, host, path, pathSegments, port, query, queryParameters, scheme, userInfo);
  return t1;
},

Uri__makeHost: function(host) {
  var t1, i, t2;
  if (host == null || J.get$isEmpty$asx(host) === true)
    return host;
  t1 = J.getInterceptor$s(host);
  if (t1.codeUnitAt$1(host, 0) === 91) {
    if (t1.codeUnitAt$1(host, J.$sub$n(t1.get$length(host), 1)) !== 93)
      throw H.wrapException(P.FormatException$("Missing end `]` to match `[` in host"));
    P.Uri_parseIPv6Address(t1.substring$2(host, 1, J.$sub$n(t1.get$length(host), 1)));
    return host;
  }
  i = 0;
  while (true) {
    t2 = t1.get$length(host);
    if (typeof t2 !== "number")
      throw H.iae(t2);
    if (!(i < t2))
      break;
    if (t1.codeUnitAt$1(host, i) === 58) {
      P.Uri_parseIPv6Address(host);
      return "[" + H.S(host) + "]";
    }
    ++i;
  }
  return host;
},

Uri__makeScheme: function(scheme) {
  var t1, t2, t3, $length, allLowercase, i, codeUnit, t4;
  t1 = new P.Uri__makeScheme_isSchemeLowerCharacter();
  t2 = new P.Uri__makeScheme_isSchemeCharacter();
  if (scheme == null)
    return "";
  t3 = J.getInterceptor$asx(scheme);
  $length = t3.get$length(scheme);
  if (typeof $length !== "number")
    throw H.iae($length);
  allLowercase = true;
  i = 0;
  for (; i < $length; ++i) {
    codeUnit = t3.codeUnitAt$1(scheme, i);
    if (i === 0) {
      if (!(codeUnit >= 97 && codeUnit <= 122))
        t4 = codeUnit >= 65 && codeUnit <= 90;
      else
        t4 = true;
      t4 = !t4;
    } else
      t4 = false;
    if (t4)
      throw H.wrapException(new P.ArgumentError("Illegal scheme: " + H.S(scheme)));
    if (t1.call$1(codeUnit) !== true) {
      if (t2.call$1(codeUnit) === true)
        ;
      else
        throw H.wrapException(new P.ArgumentError("Illegal scheme: " + H.S(scheme)));
      allLowercase = false;
    }
  }
  return allLowercase ? scheme : t3.toLowerCase$0(scheme);
},

Uri__makeQuery: function(query, queryParameters) {
  var t1, t2, result;
  t1 = {};
  t2 = query == null;
  if (t2 && true)
    return "";
  t2 = !t2;
  if (t2)
    ;
  if (t2)
    return P.Uri__normalize(query);
  result = P.StringBuffer$("");
  t1.first_0 = true;
  C.JSNull_methods.forEach$1(queryParameters, new P.Uri__makeQuery_closure(t1, result));
  return result._contents;
},

Uri__makeFragment: function(fragment) {
  if (fragment == null)
    return "";
  return P.Uri__normalize(fragment);
},

Uri__normalize: function(component) {
  var t1, t2, t3, t4, t5, t6, $length, t7, t8, codeUnit1, codeUnit2, decodedCodeUnit, t9, charCodes;
  t1 = {};
  t2 = new P.Uri__normalize_isNormalizedHexDigit();
  t3 = new P.Uri__normalize_isUnreserved();
  t4 = new P.Uri__normalize_normalizeHexDigit(component, t2, new P.Uri__normalize_isLowerCaseHexDigit());
  t5 = new P.Uri__normalize_decodeHexDigitPair(component);
  t1.result_0 = null;
  t6 = J.getInterceptor$asx(component);
  $length = t6.get$length(component);
  t1.index_1 = 0;
  t1.prevIndex_2 = 0;
  t7 = new P.Uri__normalize_fillResult(t1, component);
  if (typeof $length !== "number")
    throw H.iae($length);
  for (; t8 = t1.index_1, t8 < $length;)
    if (t6.codeUnitAt$1(component, t8) === 37) {
      t8 = t1.index_1;
      if ($length < t8 + 2)
        throw H.wrapException(new P.ArgumentError("Invalid percent-encoding in URI component: " + H.S(component)));
      codeUnit1 = t6.codeUnitAt$1(component, t8 + 1);
      codeUnit2 = t6.codeUnitAt$1(component, t1.index_1 + 2);
      decodedCodeUnit = t5.call$1(t1.index_1 + 1);
      if (t2.call$1(codeUnit1) === true && t2.call$1(codeUnit2) === true && t3.call$1(decodedCodeUnit) !== true)
        t1.index_1 = t1.index_1 + 3;
      else {
        t7.call$0();
        t8 = t3.call$1(decodedCodeUnit);
        t9 = t1.result_0;
        if (t8 === true) {
          t9.toString;
          charCodes = P.List_List$filled(1, decodedCodeUnit, J.JSInt);
          charCodes.$builtinTypeInfo = [J.JSInt];
          t8 = H.Primitives_stringFromCharCodes(charCodes);
          t9._contents = t9._contents + t8;
        } else {
          t9.toString;
          t9._contents = t9._contents + "%";
          t8 = t1.result_0;
          t9 = t4.call$1(t1.index_1 + 1);
          t8.toString;
          charCodes = P.List_List$filled(1, t9, J.JSInt);
          charCodes.$builtinTypeInfo = [J.JSInt];
          t9 = H.Primitives_stringFromCharCodes(charCodes);
          t8._contents = t8._contents + t9;
          t8 = t1.result_0;
          t9 = t4.call$1(t1.index_1 + 2);
          t8.toString;
          charCodes = P.List_List$filled(1, t9, J.JSInt);
          charCodes.$builtinTypeInfo = [J.JSInt];
          t9 = H.Primitives_stringFromCharCodes(charCodes);
          t8._contents = t8._contents + t9;
        }
        t1.index_1 = t1.index_1 + 3;
        t1.prevIndex_2 = t1.index_1;
      }
    } else
      t1.index_1 = t1.index_1 + 1;
  if (t1.result_0 != null && t1.prevIndex_2 !== t8)
    t7.call$0();
  t1 = t1.result_0;
  if (t1 == null)
    return component;
  return J.toString$0(t1);
},

Uri__parseIntOrZero: function(val) {
  if (val != null && !J.$eq(val, ""))
    return H.Primitives_parseInt(val, null, null);
  else
    return 0;
},

Uri__eitherOf: function(val1, val2) {
  if (val1 != null)
    return val1;
  if (val2 != null)
    return val2;
  return "";
},

Uri_parseIPv4Address: function(host) {
  var t1, bytes;
  t1 = new P.Uri_parseIPv4Address_error();
  bytes = host.split(".");
  if (bytes.length !== 4)
    t1.call$1("IPv4 address should contain exactly 4 parts");
  t1 = new H.MappedListIterable(bytes, new P.Uri_parseIPv4Address_closure(t1));
  H.setRuntimeTypeInfo(t1, [null, null]);
  return t1.toList$0(t1);
},

Uri_parseIPv6Address: function(host) {
  var error, parseHex, parts, partStart, last, wildcardSeen, i, t1, atEnd, isLastWildcard, exception, t2, $arguments;
  error = new P.Uri_parseIPv6Address_error();
  parseHex = new P.Uri_parseIPv6Address_parseHex(host, error);
  if (J.$lt$n(J.get$length$asx(host), 2))
    error.call$1("address is too short");
  parts = [];
  partStart = 0;
  wildcardSeen = false;
  i = 0;
  while (true) {
    t1 = J.get$length$asx(host);
    if (typeof t1 !== "number")
      throw H.iae(t1);
    if (!(i < t1))
      break;
    if (J.codeUnitAt$1$s(host, i) === 58) {
      if (i === 0) {
        ++i;
        if (J.codeUnitAt$1$s(host, i) !== 58)
          error.call$1("invalid start colon.");
        partStart = i;
      }
      if (i === partStart) {
        if (wildcardSeen)
          error.call$1("only one wildcard `::` is allowed");
        J.add$1$ax(parts, -1);
        wildcardSeen = true;
      } else
        J.add$1$ax(parts, parseHex.call$2(partStart, i));
      partStart = i + 1;
    }
    ++i;
  }
  if (J.$eq(J.get$length$asx(parts), 0))
    error.call$1("too few parts");
  atEnd = J.$eq(partStart, J.get$length$asx(host));
  isLastWildcard = J.$eq(J.get$last$ax(parts), -1);
  if (atEnd && !isLastWildcard)
    error.call$1("expected a part after last `:`");
  if (!atEnd)
    try {
      J.add$1$ax(parts, parseHex.call$2(partStart, J.get$length$asx(host)));
    } catch (exception) {
      H.unwrapException(exception);
      try {
        last = P.Uri_parseIPv4Address(J.substring$1$s(host, partStart));
        t1 = J.$shl$n(J.$index$asx(last, 0), 8);
        t2 = J.$index$asx(last, 1);
        if (typeof t2 !== "number")
          throw H.iae(t2);
        J.add$1$ax(parts, (t1 | t2) >>> 0);
        t2 = J.$shl$n(J.$index$asx(last, 2), 8);
        t1 = J.$index$asx(last, 3);
        if (typeof t1 !== "number")
          throw H.iae(t1);
        J.add$1$ax(parts, (t2 | t1) >>> 0);
      } catch (exception) {
        H.unwrapException(exception);
        error.call$1("invalid end of IPv6 address.");
      }

    }

  if (wildcardSeen) {
    t1 = J.get$length$asx(parts);
    if (typeof t1 !== "number")
      throw t1.$gt();
    if (t1 > 7)
      error.call$1("an address with a wildcard must have less than 7 parts");
  } else if (!J.$eq(J.get$length$asx(parts), 8))
    error.call$1("an address without a wildcard must contain exactly 8 parts");
  t1 = new H.ExpandIterable(parts, new P.Uri_parseIPv6Address_closure(parts));
  t1.$builtinTypeInfo = [null, null];
  $arguments = H.substitute(t1.$asIterableBase, H.getRuntimeTypeInfo(t1));
  t2 = $arguments == null ? null : $arguments[0];
  return P.List_List$from(t1, true, t2);
},

Uri__uriEncode: function(canonicalTable, text, spaceToPlus) {
  var t1, result, t2, i, t3, ch, str, nextCh, charCodes;
  t1 = new P.Uri__uriEncode_byteToHex();
  result = P.StringBuffer$("");
  t2 = J.getInterceptor$asx(text);
  i = 0;
  while (true) {
    t3 = t2.get$length(text);
    if (typeof t3 !== "number")
      throw H.iae(t3);
    if (!(i < t3))
      break;
    ch = t2.codeUnitAt$1(text, i);
    if (ch < 128) {
      t3 = C.JSInt_methods.$shr(ch, 4);
      if (t3 < 0 || t3 >= 8)
        throw H.ioore(canonicalTable, t3);
      t3 = (canonicalTable[t3] & C.JSInt_methods.$shl(1, ch & 15)) >>> 0 !== 0;
    } else
      t3 = false;
    if (t3) {
      str = t2.$index(text, i);
      str = typeof str === "string" ? str : H.S(str);
      result._contents = result._contents + str;
    } else if (spaceToPlus && J.$eq(t2.$index(text, i), " "))
      result._contents = result._contents + "+";
    else {
      if (ch >= 55296 && ch < 56320) {
        ++i;
        nextCh = J.$eq(t2.get$length(text), i) ? 0 : t2.codeUnitAt$1(text, i);
        if (nextCh >= 56320 && nextCh < 57344)
          ch = 65536 + (ch - 55296 << 10 >>> 0) + (nextCh - 56320);
        else
          throw H.wrapException(new P.ArgumentError("Malformed URI"));
      }
      charCodes = P.List_List$filled(1, ch, J.JSInt);
      charCodes.$builtinTypeInfo = [J.JSInt];
      t3 = H.Primitives_stringFromCharCodes(charCodes);
      t3 = C.JSArray_methods.get$iterator(C.Utf8Codec_false.get$encoder().convert$1(t3));
      for (; t3.moveNext$0();) {
        str = t1.call$1(t3._current);
        str = typeof str === "string" ? str : H.S(str);
        result._contents = result._contents + str;
      }
    }
    ++i;
  }
  return result._contents;
}}

},

Uri__makeScheme_isSchemeLowerCharacter: {"": "Closure;",
  call$1: function(ch) {
    var t1, t2;
    t1 = J.getInterceptor$n(ch);
    if (t1.$lt(ch, 128)) {
      t2 = t1.$shr(ch, 4);
      if (t2 < 0 || t2 >= 8)
        throw H.ioore(C.List_6Pr, t2);
      t1 = (C.List_6Pr[t2] & C.JSInt_methods.$shl(1, t1.$and(ch, 15))) >>> 0 !== 0;
    } else
      t1 = false;
    return t1;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Uri__makeScheme_isSchemeCharacter: {"": "Closure;",
  call$1: function(ch) {
    var t1, t2;
    t1 = J.getInterceptor$n(ch);
    if (t1.$lt(ch, 128)) {
      t2 = t1.$shr(ch, 4);
      if (t2 < 0 || t2 >= 8)
        throw H.ioore(C.List_JYB, t2);
      t1 = (C.List_JYB[t2] & C.JSInt_methods.$shl(1, t1.$and(ch, 15))) >>> 0 !== 0;
    } else
      t1 = false;
    return t1;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Uri__makePath_closure: {"": "Closure;",
  call$1: function(s) {
    return P.Uri__uriEncode(C.List_qg4, s, false);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Uri__makeQuery_closure: {"": "Closure;box_0,result_1",
  call$2: function(key, value) {
    var t1 = this.box_0;
    if (!t1.first_0)
      this.result_1.write$1("&");
    t1.first_0 = false;
    t1 = this.result_1;
    t1.write$1(P.Uri__uriEncode(C.List_nxB, key, true));
    if (value != null && J.get$isEmpty$asx(value) !== true) {
      t1.write$1("=");
      t1.write$1(P.Uri__uriEncode(C.List_nxB, value, true));
    }
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

Uri__normalize_isNormalizedHexDigit: {"": "Closure;",
  call$1: function(digit) {
    var t1;
    if (typeof digit !== "number")
      throw H.iae(digit);
    if (!(48 <= digit && digit <= 57))
      t1 = 65 <= digit && digit <= 70;
    else
      t1 = true;
    return t1;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Uri__normalize_isLowerCaseHexDigit: {"": "Closure;",
  call$1: function(digit) {
    if (typeof digit !== "number")
      throw H.iae(digit);
    return 97 <= digit && digit <= 102;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Uri__normalize_isUnreserved: {"": "Closure;",
  call$1: function(ch) {
    var t1, t2;
    t1 = J.getInterceptor$n(ch);
    if (t1.$lt(ch, 128)) {
      t2 = t1.$shr(ch, 4);
      if (t2 < 0 || t2 >= 8)
        throw H.ioore(C.List_nxB, t2);
      t1 = (C.List_nxB[t2] & C.JSInt_methods.$shl(1, t1.$and(ch, 15))) >>> 0 !== 0;
    } else
      t1 = false;
    return t1;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Uri__normalize_normalizeHexDigit: {"": "Closure;component_1,isNormalizedHexDigit_2,isLowerCaseHexDigit_3",
  call$1: function(index) {
    var t1, codeUnit;
    t1 = this.component_1;
    codeUnit = J.codeUnitAt$1$s(t1, index);
    if (this.isLowerCaseHexDigit_3.call$1(codeUnit) === true)
      return codeUnit - 32;
    else if (this.isNormalizedHexDigit_2.call$1(codeUnit) !== true)
      throw H.wrapException(new P.ArgumentError("Invalid URI component: " + H.S(t1)));
    else
      return codeUnit;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Uri__normalize_decodeHexDigitPair: {"": "Closure;component_4",
  call$1: function(index) {
    var t1, t2, t3, $byte, i, codeUnit;
    for (t1 = this.component_4, t2 = J.getInterceptor$ns(index), t3 = J.getInterceptor$s(t1), $byte = 0, i = 0; i < 2; ++i) {
      codeUnit = t3.codeUnitAt$1(t1, t2.$add(index, i));
      if (48 <= codeUnit && codeUnit <= 57)
        $byte = $byte * 16 + codeUnit - 48;
      else {
        codeUnit = (codeUnit | 32) >>> 0;
        if (97 <= codeUnit && codeUnit <= 102)
          $byte = $byte * 16 + codeUnit - 97 + 10;
        else
          throw H.wrapException(new P.ArgumentError("Invalid percent-encoding in URI component: " + H.S(t1)));
      }
    }
    return $byte;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Uri__normalize_fillResult: {"": "Closure;box_0,component_5",
  call$0: function() {
    var t1, t2, t3, t4, t5;
    t1 = this.box_0;
    t2 = t1.result_0;
    t3 = t1.prevIndex_2;
    t4 = this.component_5;
    t5 = t1.index_1;
    if (t2 == null)
      t1.result_0 = P.StringBuffer$(J.substring$2$s(t4, t3, t5));
    else
      t2.write$1(J.substring$2$s(t4, t3, t5));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Uri_hashCode_combine: {"": "Closure;",
  call$2: function(part, current) {
    return J.$and$n(J.$add$ns(J.$mul$n(current, 31), J.get$hashCode$(part)), 1073741823);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

Uri_parseIPv4Address_error: {"": "Closure;",
  call$1: function(msg) {
    throw H.wrapException(P.FormatException$("Illegal IPv4 address, " + H.S(msg)));
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Uri_parseIPv4Address_closure: {"": "Closure;error_0",
  call$1: function(byteString) {
    var $byte, t1;
    $byte = H.Primitives_parseInt(byteString, null, null);
    t1 = J.getInterceptor$n($byte);
    if (t1.$lt($byte, 0) || t1.$gt($byte, 255))
      this.error_0.call$1("each part must be in the range of `0..255`");
    return $byte;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Uri_parseIPv6Address_error: {"": "Closure;",
  call$1: function(msg) {
    throw H.wrapException(P.FormatException$("Illegal IPv6 address, " + H.S(msg)));
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Uri_parseIPv6Address_parseHex: {"": "Closure;host_0,error_1",
  call$2: function(start, end) {
    var value, t1;
    if (J.$gt$n(J.$sub$n(end, start), 4))
      this.error_1.call$1("an IPv6 part can only contain a maximum of 4 hex digits");
    value = H.Primitives_parseInt(J.substring$2$s(this.host_0, start, end), 16, null);
    t1 = J.getInterceptor$n(value);
    if (t1.$lt(value, 0) || t1.$gt(value, 65535))
      this.error_1.call$1("each part must be in the range of `0x0..0xFFFF`");
    return value;
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

Uri_parseIPv6Address_closure: {"": "Closure;parts_2",
  call$1: function(value) {
    var t1 = J.getInterceptor(value);
    if (t1.$eq(value, -1))
      return P.List_List$filled((9 - this.parts_2.length) * 2, 0, null);
    else
      return [t1.$shr(value, 8) & 255, t1.$and(value, 255)];
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Uri__uriEncode_byteToHex: {"": "Closure;",
  call$1: function(v) {
    var t1, t2;
    t1 = J.getInterceptor$n(v);
    t2 = t1.$shr(v, 4);
    if (t2 < 0 || t2 >= 16)
      throw H.ioore("0123456789ABCDEF", t2);
    t2 = "%" + "0123456789ABCDEF"[t2];
    t1 = t1.$and(v, 15);
    if (t1 < 0 || t1 >= 16)
      throw H.ioore("0123456789ABCDEF", t1);
    return t2 + "0123456789ABCDEF"[t1];
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
}}],
["dart.dom.html", "dart:html", , W, {
window: function() {
  return window;
  "9";
},

"+window": 1,

AnchorElement_AnchorElement: function(href) {
  var e = document.createElement("a", null);
  return e;
},

Element_Element$html: function(html, treeSanitizer, validator) {
  var fragment, t1;
  fragment = J.createFragment$3$treeSanitizer$validator$x(document.body, html, treeSanitizer, validator);
  fragment.toString;
  t1 = new W._ChildNodeListLazy(fragment);
  t1 = t1.where$1(t1, new W.Element_Element$html_closure());
  return t1.get$single(t1);
},

Element__determineTransitionEventType: function(e) {
  if (P.Device_isWebKit() === true)
    return "webkitTransitionEnd";
  else if (P.Device_isOpera() === true)
    return "oTransitionEnd";
  return "transitionend";
},

_ElementFactoryProvider_createElement_tag: function(tag, typeExtension) {
  return document.createElement(tag);
},

InputElement_InputElement: function(type) {
  var e, exception;
  e = document.createElement("input", null);
  if (type != null)
    try {
      J.set$type$x(e, type);
    } catch (exception) {
      H.unwrapException(exception);
    }

  return e;
},

MouseEvent_MouseEvent: function(type, altKey, button, canBubble, cancelable, clientX, clientY, ctrlKey, detail, metaKey, relatedTarget, screenX, screenY, shiftKey, view) {
  var $event = document.createEvent("MouseEvent");
  J._initMouseEvent$15$x($event, type, canBubble, cancelable, view, detail, screenX, screenY, clientX, clientY, ctrlKey, altKey, shiftKey, metaKey, button, relatedTarget);
  return $event;
},

Window__isDartLocation: function(thing) {
  var t1, t2, exception;
  try {
    t1 = thing;
    t2 = J.getInterceptor(t1);
    return typeof t1 === "object" && t1 !== null && !!t2.$isLocation;
  } catch (exception) {
    H.unwrapException(exception);
    return false;
  }

},

_JenkinsSmiHash_combine: function(hash, value) {
  hash = 536870911 & hash + value;
  hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
  return (hash ^ C.JSInt_methods.$shr(hash, 6)) >>> 0;
},

_JenkinsSmiHash_finish: function(hash) {
  hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
  hash = (hash ^ C.JSInt_methods.$shr(hash, 11)) >>> 0;
  return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
},

_convertNativeToDart_Window: function(win) {
  if (win == null)
    return;
  return W._DOMWindowCrossFrame__createSafe(win);
},

_convertNativeToDart_EventTarget: function(e) {
  var $window, t1;
  if (e == null)
    return;
  if ("setInterval" in e) {
    $window = W._DOMWindowCrossFrame__createSafe(e);
    t1 = J.getInterceptor($window);
    if (typeof $window === "object" && $window !== null && !!t1.$isEventTarget)
      return $window;
    return;
  } else
    return e;
},

_convertDartToNative_EventTarget: function(e) {
  return e;
},

_callConstructor: function($constructor, interceptor) {
  return new W._callConstructor_closure($constructor, interceptor);
},

_callEnteredView: function(receiver) {
  return J.enteredView$0$x(receiver);
},

_callLeftView: function(receiver) {
  return J.leftView$0$x(receiver);
},

_callAttributeChanged: function(receiver, $name, oldValue, newValue) {
  return J.attributeChanged$3$x(receiver, $name, oldValue, newValue);
},

_registerCustomElement: function(context, $document, tag, type, extendsTagName) {
  var interceptorClass, interceptor, $constructor, baseClassName, t1, baseConstructor, properties, proto, t2, options;
  interceptorClass = J.findInterceptorConstructorForType(type);
  if (interceptorClass == null)
    throw H.wrapException(new P.ArgumentError(type));
  interceptor = interceptorClass.prototype;
  $constructor = J.findConstructorForNativeSubclassType(type, "created");
  if ($constructor == null)
    throw H.wrapException(new P.ArgumentError(H.S(type) + " has no constructor called 'created'"));
  J.getNativeInterceptor(W._ElementFactoryProvider_createElement_tag("article", null));
  baseClassName = interceptorClass.$nativeSuperclassTag;
  if (baseClassName == null)
    throw H.wrapException(new P.ArgumentError(type));
  t1 = extendsTagName == null;
  if (t1) {
    if (!J.$eq(baseClassName, "HTMLElement"))
      throw H.wrapException(P.UnsupportedError$("Class must provide extendsTag if base native class is not HTMLElement"));
  } else if (!($document.createElement(extendsTagName) instanceof window[baseClassName]))
    throw H.wrapException(P.UnsupportedError$("extendsTag does not match base native class"));
  baseConstructor = context[baseClassName];
  properties = {};
  properties.createdCallback = {value: ((function(invokeCallback) {
             return function() {
               return invokeCallback(this);
             };
          })(H.convertDartClosureToJS(W._callConstructor($constructor, interceptor), 1)))};
  properties.enteredViewCallback = {value: ((function(invokeCallback) {
             return function() {
               return invokeCallback(this);
             };
          })(H.convertDartClosureToJS(W._callEnteredView$closure, 1)))};
  properties.leftViewCallback = {value: ((function(invokeCallback) {
             return function() {
               return invokeCallback(this);
             };
          })(H.convertDartClosureToJS(W._callLeftView$closure, 1)))};
  properties.attributeChangedCallback = {value: ((function(invokeCallback) {
             return function(arg1, arg2, arg3) {
               return invokeCallback(this, arg1, arg2, arg3);
             };
          })(H.convertDartClosureToJS(W._callAttributeChanged$closure, 4)))};
  proto = Object.create(baseConstructor.prototype, properties);
  t2 = H.makeLeafDispatchRecord(interceptor);
  Object.defineProperty(proto, init.dispatchPropertyName, {value: t2, enumerable: false, writable: true, configurable: true});
  options = {prototype: proto};
  if (!J.$eq(baseClassName, "HTMLElement"))
    if (!t1)
      options.extends = extendsTagName;
  $document.register(tag, options);
},

_wrapZone: function(callback) {
  if (J.$eq($.Zone__current, C.C__RootZone))
    return callback;
  return $.Zone__current.bindUnaryCallback$2$runGuarded(callback, true);
},

Console: {"": "Object;",
  error$1: function(_, arg) {
    return typeof console != "undefined" ? console.error(arg) : null;
  },
  get$error: function(_receiver) {
    return new J.BoundClosure$i1(this, W.Console.prototype.error$1, _receiver, "error$1");
  },
  info$1: function(arg) {
    return typeof console != "undefined" ? console.info(arg) : null;
  },
  static: {
"": "Console__safeConsole",
}

},

Interceptor_CssStyleDeclarationBase: {"": "Interceptor+CssStyleDeclarationBase;"},

_CssStyleDeclarationSet: {"": "Object_CssStyleDeclarationBase;_elementIterable,_elementCssStyleDeclarationSetIterable",
  getPropertyValue$1: function(_, propertyName) {
    var t1 = this._elementCssStyleDeclarationSetIterable;
    if (J.$eq(t1.get$length(t1), 0))
      H.throwExpression(new P.StateError("No elements"));
    return J.getPropertyValue$1$x(t1.elementAt$1(t1, 0), propertyName);
  },
  setProperty$3: function(_, propertyName, value, priority) {
    var t1 = this._elementCssStyleDeclarationSetIterable;
    t1.forEach$1(t1, new W._CssStyleDeclarationSet_setProperty_closure(propertyName, value, priority));
  },
  _CssStyleDeclarationSet$1: function(_elementIterable) {
    var t1 = new H.MappedListIterable(P.List_List$from(this._elementIterable, true, null), new W._CssStyleDeclarationSet_closure());
    H.setRuntimeTypeInfo(t1, [null, null]);
    this._elementCssStyleDeclarationSetIterable = t1;
  },
  static: {
_CssStyleDeclarationSet$: function(_elementIterable) {
  var t1 = new W._CssStyleDeclarationSet(_elementIterable, null);
  t1._CssStyleDeclarationSet$1(_elementIterable);
  return t1;
}}

},

Object_CssStyleDeclarationBase: {"": "Object+CssStyleDeclarationBase;"},

_CssStyleDeclarationSet_closure: {"": "Closure;",
  call$1: function(e) {
    return J.get$style$x(e);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_CssStyleDeclarationSet_setProperty_closure: {"": "Closure;propertyName_0,value_1,priority_2",
  call$1: function(e) {
    return J.setProperty$3$x(e, this.propertyName_0, this.value_1, this.priority_2);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

CssStyleDeclarationBase: {"": "Object;",
  get$content: function(receiver) {
    return this.getPropertyValue$1(receiver, "content");
  },
  get$height: function(receiver) {
    return this.getPropertyValue$1(receiver, "height");
  },
  get$left: function(receiver) {
    return this.getPropertyValue$1(receiver, "left");
  },
  set$left: function(receiver, value) {
    this.setProperty$3(receiver, "left", value, "");
  },
  get$marginLeft: function(receiver) {
    return this.getPropertyValue$1(receiver, "margin-left");
  },
  get$marginRight: function(receiver) {
    return this.getPropertyValue$1(receiver, "margin-right");
  },
  get$right: function(receiver) {
    return this.getPropertyValue$1(receiver, "right");
  },
  get$src: function(receiver) {
    return this.getPropertyValue$1(receiver, "src");
  },
  get$top: function(receiver) {
    return this.getPropertyValue$1(receiver, "top");
  },
  set$top: function(receiver, value) {
    this.setProperty$3(receiver, "top", value, "");
  },
  get$width: function(receiver) {
    return this.getPropertyValue$1(receiver, "width");
  },
  set$width: function(receiver, value) {
    this.setProperty$3(receiver, "width", value, "");
  }
},

Interceptor_ListMixin: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true, $isIterable: true, $asIterable: null},

Interceptor_ListMixin_ImmutableListMixin: {"": "Interceptor_ListMixin+ImmutableListMixin;", $asList: null, $asIterable: null, $isList: true, $isEfficientLength: true, $isIterable: true},

_ChildrenElementList: {"": "ListBase;_element,_childElements",
  contains$1: function(_, element) {
    return J.contains$1$asx(this._childElements, element);
  },
  get$isEmpty: function(_) {
    return this._element.firstElementChild == null;
  },
  "+isEmpty": 0,
  get$length: function(_) {
    return this._childElements.length;
  },
  "+length": 0,
  $index: function(_, index) {
    var t1 = this._childElements;
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    return t1[index];
  },
  "+[]:1:0": 0,
  $indexSet: function(_, index, value) {
    var t1 = this._childElements;
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    this._element.replaceChild(value, t1[index]);
  },
  "+[]=:2:0": 0,
  set$length: function(_, newLength) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize element lists"));
  },
  "+length=": 0,
  add$1: function(_, value) {
    this._element.appendChild(value);
    return value;
  },
  get$add: function(_receiver) {
    return new J.BoundClosure$i1(this, W._ChildrenElementList.prototype.add$1, _receiver, "add$1");
  },
  get$iterator: function(_) {
    var t1, t2;
    t1 = this.toList$0(this);
    t2 = new H.ListIterator(t1, t1.length, 0, null);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]);
    return t2;
  },
  addAll$1: function(_, iterable) {
    var t1, t2;
    t1 = J.getInterceptor(iterable);
    for (t1 = J.get$iterator$ax(typeof iterable === "object" && iterable !== null && !!t1.$is_ChildNodeListLazy ? P.List_List$from(iterable, true, null) : iterable), t2 = this._element; t1.moveNext$0();)
      t2.appendChild(t1.get$current());
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    throw H.wrapException(P.UnimplementedError$(null));
  },
  remove$1: function(_, object) {
    return false;
  },
  get$first: function(_) {
    var result = this._element.firstElementChild;
    if (result == null)
      throw H.wrapException(new P.StateError("No elements"));
    return result;
  },
  get$last: function(_) {
    var result = this._element.lastElementChild;
    if (result == null)
      throw H.wrapException(new P.StateError("No elements"));
    return result;
  },
  get$single: function(_) {
    if (this._childElements.length > 1)
      throw H.wrapException(new P.StateError("More than one element"));
    return this.get$first(this);
  },
  $asListBase: function() {
    return [W.Element];
  },
  $asList: function() {
    return [W.Element];
  },
  $asIterable: function() {
    return [W.Element];
  }
},

_FrozenElementList: {"": "ListBase;_nodeList,_elementList",
  get$length: function(_) {
    return this._nodeList.length;
  },
  "+length": 0,
  $index: function(_, index) {
    var t1 = this._nodeList;
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    return t1[index];
  },
  "+[]:1:0": 0,
  $indexSet: function(_, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot modify list"));
  },
  "+[]=:2:0": 0,
  set$length: function(_, newLength) {
    throw H.wrapException(P.UnsupportedError$("Cannot modify list"));
  },
  "+length=": 0,
  get$first: function(_) {
    return C.NodeList_methods.get$first(this._nodeList);
  },
  get$last: function(_) {
    return C.NodeList_methods.get$last(this._nodeList);
  },
  get$single: function(_) {
    return C.NodeList_methods.get$single(this._nodeList);
  },
  get$classes: function(_) {
    return W._MultiElementCssClassSet$(this._elementList);
  },
  get$style: function(_) {
    return W._CssStyleDeclarationSet$(this._elementList);
  },
  get$onBlur: function(_) {
    return C.EventStreamProvider_blur._forElementList$1(this);
  },
  get$onChange: function(_) {
    return C.EventStreamProvider_change._forElementList$1(this);
  },
  get$onClick: function(_) {
    return C.EventStreamProvider_click._forElementList$1(this);
  },
  get$onFocus: function(_) {
    return C.EventStreamProvider_focus._forElementList$1(this);
  },
  get$onInput: function(_) {
    return C.EventStreamProvider_input._forElementList$1(this);
  },
  _html$_FrozenElementList$_wrap$1: function(_nodeList, $T) {
    var t1 = C.NodeList_methods.where$1(this._nodeList, new W._FrozenElementList$_wrap_closure());
    this._elementList = P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0));
  },
  $asListBase: null,
  $asList: null,
  $asIterable: null,
  $isList: true,
  $isEfficientLength: true,
  $isIterable: true,
  static: {
_FrozenElementList$_wrap: function(_nodeList, $T) {
  var t1 = new W._FrozenElementList(_nodeList, null);
  H.setRuntimeTypeInfo(t1, [$T]);
  t1._html$_FrozenElementList$_wrap$1(_nodeList, $T);
  return t1;
}}

},

_FrozenElementList$_wrap_closure: {"": "Closure;",
  call$1: function(e) {
    var t1 = J.getInterceptor(e);
    return typeof e === "object" && e !== null && !!t1.$isElement;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Element_Element$html_closure: {"": "Closure;",
  call$1: function(e) {
    var t1 = J.getInterceptor(e);
    return typeof e === "object" && e !== null && !!t1.$isElement;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Entry: {"": "Interceptor;"},

Events: {"": "Object;_ptr<",
  $index: function(_, type) {
    var t1 = new W._EventStream(this.get$_ptr(), type, false);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  "+[]:1:0": 0
},

ElementEvents: {"": "Events;_ptr<,html$Events$_ptr",
  $index: function(_, type) {
    var t1, t2;
    t1 = J.getInterceptor$s(type);
    if ($.get$ElementEvents_webkitEvents().get$keys()._collection$_map.containsKey$1(t1.toLowerCase$0(type)))
      if (P.Device_isWebKit() === true) {
        t2 = $.get$ElementEvents_webkitEvents();
        t1 = new W._ElementEventStreamImpl(this._ptr, t2.$index(t2, t1.toLowerCase$0(type)), false);
        H.setRuntimeTypeInfo(t1, [null]);
        return t1;
      }
    t1 = new W._ElementEventStreamImpl(this._ptr, type, false);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  "+[]:1:0": 0,
  static: {
"": "ElementEvents_webkitEvents",
}

},

Interceptor_ListMixin0: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true, $isIterable: true, $asIterable: null},

Interceptor_ListMixin_ImmutableListMixin0: {"": "Interceptor_ListMixin0+ImmutableListMixin;", $asList: null, $asIterable: null, $isList: true, $isEfficientLength: true, $isIterable: true},

Interceptor_ListMixin1: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true, $isIterable: true, $asIterable: null},

Interceptor_ListMixin_ImmutableListMixin1: {"": "Interceptor_ListMixin1+ImmutableListMixin;", $asList: null, $asIterable: null, $isList: true, $isEfficientLength: true, $isIterable: true},

Interceptor_ListMixin2: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true, $isIterable: true, $asIterable: null},

Interceptor_ListMixin_ImmutableListMixin2: {"": "Interceptor_ListMixin2+ImmutableListMixin;", $asList: null, $asIterable: null, $isList: true, $isEfficientLength: true, $isIterable: true},

_ChildNodeListLazy: {"": "ListBase;_this",
  get$first: function(_) {
    var result = this._this.firstChild;
    if (result == null)
      throw H.wrapException(new P.StateError("No elements"));
    return result;
  },
  get$last: function(_) {
    var result = this._this.lastChild;
    if (result == null)
      throw H.wrapException(new P.StateError("No elements"));
    return result;
  },
  get$single: function(_) {
    var t1, l;
    t1 = this._this;
    l = t1.childNodes.length;
    if (l === 0)
      throw H.wrapException(new P.StateError("No elements"));
    if (l > 1)
      throw H.wrapException(new P.StateError("More than one element"));
    return t1.firstChild;
  },
  add$1: function(_, value) {
    this._this.appendChild(value);
  },
  get$add: function(_receiver) {
    return new J.BoundClosure$i1(this, W._ChildNodeListLazy.prototype.add$1, _receiver, "add$1");
  },
  addAll$1: function(_, iterable) {
    var t1, t2, len, i;
    t1 = J.getInterceptor$ax(iterable);
    if (typeof iterable === "object" && iterable !== null && !!t1.$is_ChildNodeListLazy) {
      t1 = iterable._this;
      t2 = this._this;
      if (t1 !== t2)
        for (len = t1.childNodes.length, i = 0; i < len; ++i)
          t2.appendChild(t1.firstChild);
      return;
    }
    for (t1 = t1.get$iterator(iterable), t2 = this._this; t1.moveNext$0();)
      t2.appendChild(t1.get$current());
  },
  remove$1: function(_, object) {
    return false;
  },
  $indexSet: function(_, index, value) {
    var t1, t2;
    t1 = this._this;
    t2 = t1.childNodes;
    if (index >>> 0 !== index || index >= t2.length)
      throw H.ioore(t2, index);
    t1.replaceChild(value, t2[index]);
  },
  "+[]=:2:0": 0,
  get$iterator: function(_) {
    return C.NodeList_methods.get$iterator(this._this.childNodes);
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    throw H.wrapException(P.UnsupportedError$("Cannot setRange on Node list"));
  },
  get$length: function(_) {
    return this._this.childNodes.length;
  },
  "+length": 0,
  set$length: function(_, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot set length on immutable List."));
  },
  "+length=": 0,
  $index: function(_, index) {
    var t1 = this._this.childNodes;
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    return t1[index];
  },
  "+[]:1:0": 0,
  $is_ChildNodeListLazy: true,
  $asListBase: function() {
    return [W.Node];
  },
  $asList: function() {
    return [W.Node];
  },
  $asIterable: function() {
    return [W.Node];
  }
},

Interceptor_ListMixin3: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true, $isIterable: true, $asIterable: null},

Interceptor_ListMixin_ImmutableListMixin3: {"": "Interceptor_ListMixin3+ImmutableListMixin;", $asList: null, $asIterable: null, $isList: true, $isEfficientLength: true, $isIterable: true},

Interceptor_ListMixin4: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true, $isIterable: true, $asIterable: null},

Interceptor_ListMixin_ImmutableListMixin4: {"": "Interceptor_ListMixin4+ImmutableListMixin;", $asList: null, $asIterable: null, $isList: true, $isEfficientLength: true, $isIterable: true},

EventTarget_ListMixin: {"": "EventTarget+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true, $isIterable: true, $asIterable: null},

EventTarget_ListMixin_ImmutableListMixin: {"": "EventTarget_ListMixin+ImmutableListMixin;", $asList: null, $asIterable: null, $isList: true, $isEfficientLength: true, $isIterable: true},

Interceptor_ListMixin5: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true, $isIterable: true, $asIterable: null},

Interceptor_ListMixin_ImmutableListMixin5: {"": "Interceptor_ListMixin5+ImmutableListMixin;", $asList: null, $asIterable: null, $isList: true, $isEfficientLength: true, $isIterable: true},

Interceptor_ListMixin6: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true, $isIterable: true, $asIterable: null},

Interceptor_ListMixin_ImmutableListMixin6: {"": "Interceptor_ListMixin6+ImmutableListMixin;", $asList: null, $asIterable: null, $isList: true, $isEfficientLength: true, $isIterable: true},

EventTarget_ListMixin0: {"": "EventTarget+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true, $isIterable: true, $asIterable: null},

EventTarget_ListMixin_ImmutableListMixin0: {"": "EventTarget_ListMixin0+ImmutableListMixin;", $asList: null, $asIterable: null, $isList: true, $isEfficientLength: true, $isIterable: true},

Interceptor_ListMixin7: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true, $isIterable: true, $asIterable: null},

Interceptor_ListMixin_ImmutableListMixin7: {"": "Interceptor_ListMixin7+ImmutableListMixin;", $asList: null, $asIterable: null, $isList: true, $isEfficientLength: true, $isIterable: true},

Interceptor_ListMixin8: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true, $isIterable: true, $asIterable: null},

Interceptor_ListMixin_ImmutableListMixin8: {"": "Interceptor_ListMixin8+ImmutableListMixin;", $asList: null, $asIterable: null, $isList: true, $isEfficientLength: true, $isIterable: true},

Interceptor_ListMixin9: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true, $isIterable: true, $asIterable: null},

Interceptor_ListMixin_ImmutableListMixin9: {"": "Interceptor_ListMixin9+ImmutableListMixin;", $asList: null, $asIterable: null, $isList: true, $isEfficientLength: true, $isIterable: true},

_CSSValue_ListMixin: {"": "_CSSValue+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true, $isIterable: true, $asIterable: null},

_CSSValue_ListMixin_ImmutableListMixin: {"": "_CSSValue_ListMixin+ImmutableListMixin;", $asList: null, $asIterable: null, $isList: true, $isEfficientLength: true, $isIterable: true},

Interceptor_ListMixin10: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true, $isIterable: true, $asIterable: null},

Interceptor_ListMixin_ImmutableListMixin10: {"": "Interceptor_ListMixin10+ImmutableListMixin;", $asList: null, $asIterable: null, $isList: true, $isEfficientLength: true, $isIterable: true},

Interceptor_ListMixin11: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true, $isIterable: true, $asIterable: null},

Interceptor_ListMixin_ImmutableListMixin11: {"": "Interceptor_ListMixin11+ImmutableListMixin;", $asList: null, $asIterable: null, $isList: true, $isEfficientLength: true, $isIterable: true},

Interceptor_ListMixin12: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true, $isIterable: true, $asIterable: null},

Interceptor_ListMixin_ImmutableListMixin12: {"": "Interceptor_ListMixin12+ImmutableListMixin;", $asList: null, $asIterable: null, $isList: true, $isEfficientLength: true, $isIterable: true},

Interceptor_ListMixin13: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true, $isIterable: true, $asIterable: null},

Interceptor_ListMixin_ImmutableListMixin13: {"": "Interceptor_ListMixin13+ImmutableListMixin;", $asList: null, $asIterable: null, $isList: true, $isEfficientLength: true, $isIterable: true},

Interceptor_ListMixin14: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true, $isIterable: true, $asIterable: null},

Interceptor_ListMixin_ImmutableListMixin14: {"": "Interceptor_ListMixin14+ImmutableListMixin;", $asList: null, $asIterable: null, $isList: true, $isEfficientLength: true, $isIterable: true},

_AttributeMap: {"": "Object;",
  containsValue$1: function(value) {
    var t1, t2;
    for (t1 = this.get$values(this), t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();)
      ;
    return false;
  },
  "+containsValue:1:0": 0,
  putIfAbsent$2: function(key, ifAbsent) {
    if (this.containsKey$1(key) !== true)
      this.$indexSet(this, key, ifAbsent.call$0());
    return this.$index(this, key);
  },
  forEach$1: function(_, f) {
    var t1, t2, key;
    for (t1 = this.get$keys(), t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();) {
      key = t2._current;
      f.call$2(key, this.$index(this, key));
    }
  },
  get$keys: function() {
    var attributes, keys, len, i;
    attributes = this._element.attributes;
    keys = P.List_List(null, J.JSString);
    H.setRuntimeTypeInfo(keys, [J.JSString]);
    for (len = attributes.length, i = 0; i < len; ++i) {
      if (i >= attributes.length)
        throw H.ioore(attributes, i);
      if (this._matches$1(attributes[i])) {
        if (i >= attributes.length)
          throw H.ioore(attributes, i);
        keys.push(J.get$name$x(attributes[i]));
      }
    }
    return keys;
  },
  "+keys": 0,
  get$values: function(_) {
    var attributes, values, len, i;
    attributes = this._element.attributes;
    values = P.List_List(null, J.JSString);
    H.setRuntimeTypeInfo(values, [J.JSString]);
    for (len = attributes.length, i = 0; i < len; ++i) {
      if (i >= attributes.length)
        throw H.ioore(attributes, i);
      if (this._matches$1(attributes[i])) {
        if (i >= attributes.length)
          throw H.ioore(attributes, i);
        values.push(J.get$value$x(attributes[i]));
      }
    }
    return values;
  },
  "+values": 0,
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  "+isEmpty": 0,
  get$isNotEmpty: function(_) {
    return this.get$length(this) !== 0;
  },
  "+isNotEmpty": 0,
  $isMap: true,
  $asMap: function() {
    return [J.JSString, J.JSString];
  }
},

_ElementAttributeMap: {"": "_AttributeMap;_element",
  containsKey$1: function(key) {
    return this._element.hasAttribute(key);
  },
  "+containsKey:1:0": 0,
  $index: function(_, key) {
    return this._element.getAttribute(key);
  },
  "+[]:1:0": 0,
  $indexSet: function(_, key, value) {
    this._element.setAttribute(key, value);
  },
  "+[]=:2:0": 0,
  remove$1: function(_, key) {
    var t1, value;
    t1 = this._element;
    value = t1.getAttribute(key);
    t1.removeAttribute(key);
    return value;
  },
  get$length: function(_) {
    return this.get$keys().length;
  },
  "+length": 0,
  _matches$1: function(node) {
    return node.namespaceURI == null;
  }
},

_MultiElementCssClassSet: {"": "CssClassSetImpl;_elementIterable,_elementCssClassSetIterable",
  readClasses$0: function() {
    var s, t1;
    s = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSString);
    t1 = this._elementCssClassSetIterable;
    t1.forEach$1(t1, new W._MultiElementCssClassSet_readClasses_closure(s));
    return s;
  },
  writeClasses$1: function(s) {
    var classes, t1, t2;
    classes = C.JSArray_methods.join$1(P.List_List$from(s, true, null), " ");
    for (t1 = this._elementIterable, t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();)
      J.set$className$x(t2._current, classes);
  },
  modify$1: function(f) {
    var t1 = this._elementCssClassSetIterable;
    t1.forEach$1(t1, new W._MultiElementCssClassSet_modify_closure(f));
  },
  remove$1: function(_, value) {
    return this._modifyWithReturnValue$1(new W._MultiElementCssClassSet_remove_closure(value));
  },
  _modifyWithReturnValue$1: function(f) {
    var t1 = this._elementCssClassSetIterable;
    return t1.fold$2(t1, false, new W._MultiElementCssClassSet__modifyWithReturnValue_closure(f));
  },
  _MultiElementCssClassSet$1: function(_elementIterable) {
    var t1 = new H.MappedListIterable(P.List_List$from(this._elementIterable, true, null), new W._MultiElementCssClassSet_closure());
    H.setRuntimeTypeInfo(t1, [null, null]);
    this._elementCssClassSetIterable = t1;
  },
  static: {
_MultiElementCssClassSet$: function(_elementIterable) {
  var t1 = new W._MultiElementCssClassSet(_elementIterable, null);
  t1._MultiElementCssClassSet$1(_elementIterable);
  return t1;
}}

},

_MultiElementCssClassSet_closure: {"": "Closure;",
  call$1: function(e) {
    return new W._ElementCssClassSet(e);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_MultiElementCssClassSet_readClasses_closure: {"": "Closure;s_0",
  call$1: function(e) {
    var t1 = this.s_0;
    return t1.addAll$1(t1, e.readClasses$0());
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_MultiElementCssClassSet_modify_closure: {"": "Closure;f_0",
  call$1: function(e) {
    return e.modify$1(this.f_0);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_MultiElementCssClassSet_remove_closure: {"": "Closure;value_0",
  call$1: function(e) {
    return J.remove$1$ax(e, this.value_0);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_MultiElementCssClassSet__modifyWithReturnValue_closure: {"": "Closure;f_0",
  call$2: function(prevValue, element) {
    return this.f_0.call$1(element) === true || prevValue === true;
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

_ElementCssClassSet: {"": "CssClassSetImpl;_element",
  readClasses$0: function() {
    var s, t1, t2, trimmed;
    s = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSString);
    for (t1 = J.get$className$x(this._element).split(" "), t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();) {
      trimmed = J.trim$0$s(t2._current);
      if (trimmed.length !== 0)
        s.add$1(s, trimmed);
    }
    return s;
  },
  writeClasses$1: function(s) {
    P.List_List$from(s, true, null);
    J.set$className$x(this._element, s.join$1(s, " "));
  }
},

_EventStream: {"": "Stream;_target,_eventType,_useCapture",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var t1 = new W._EventStreamSubscription(0, this._target, this._eventType, W._wrapZone(onData), this._useCapture);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_EventStream", 0)]);
    t1._tryResume$0();
    return t1;
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  listen$1: function(onData) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
  },
  $asStream: null
},

_ElementEventStreamImpl: {"": "_EventStream;_target,_eventType,_useCapture",
  matches$1: function(_, selector) {
    var t1, t2;
    t1 = new P._WhereStream(new W._ElementEventStreamImpl_matches_closure(selector), this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "Stream", 0)]);
    t2 = new P._MapStream(new W._ElementEventStreamImpl_matches_closure0(selector), t1);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "Stream", 0), null]);
    return t2;
  },
  $as_EventStream: null,
  $asStream: null,
  $isStream: true
},

_ElementEventStreamImpl_matches_closure: {"": "Closure;selector_0",
  call$1: function($event) {
    return J.matchesWithAncestors$1$x(J.get$target$x($event), this.selector_0);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_ElementEventStreamImpl_matches_closure0: {"": "Closure;selector_1",
  call$1: function(e) {
    J.set$_selector$x(e, this.selector_1);
    return e;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_ElementListEventStreamImpl: {"": "Stream;_targetList,_useCapture,_eventType",
  matches$1: function(_, selector) {
    var t1, t2;
    t1 = new P._WhereStream(new W._ElementListEventStreamImpl_matches_closure(selector), this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "Stream", 0)]);
    t2 = new P._MapStream(new W._ElementListEventStreamImpl_matches_closure0(selector), t1);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "Stream", 0), null]);
    return t2;
  },
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var pool, t1, t2, t3, t4;
    pool = W._StreamPool$broadcast(null);
    for (t1 = this._targetList, t1 = t1.get$iterator(t1), t2 = this._eventType, t3 = this._useCapture; t1.moveNext$0();) {
      t4 = new W._EventStream(t1._current, t2, t3);
      t4.$builtinTypeInfo = [null];
      pool.add$1(pool, t4);
    }
    t1 = pool._html$_controller;
    t1.toString;
    t2 = new P._BroadcastStream(t1);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_BroadcastStreamController", 0)]);
    return t2.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  listen$1: function(onData) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
  },
  $asStream: null,
  $isStream: true
},

_ElementListEventStreamImpl_matches_closure: {"": "Closure;selector_0",
  call$1: function($event) {
    return J.matchesWithAncestors$1$x(J.get$target$x($event), this.selector_0);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_ElementListEventStreamImpl_matches_closure0: {"": "Closure;selector_1",
  call$1: function(e) {
    J.set$_selector$x(e, this.selector_1);
    return e;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_StreamPool: {"": "Object;_html$_controller,_subscriptions",
  add$1: function(_, stream) {
    var t1, t2;
    t1 = this._subscriptions;
    if (t1.containsKey$1(stream))
      return;
    t2 = this._html$_controller;
    t1.$indexSet(t1, stream, stream.listen$3$onDone$onError(t2.get$add(t2), new W._StreamPool_add_closure(this, stream), t2.get$addError()));
  },
  get$add: function(_receiver) {
    return new J.BoundClosure$i1(this, W._StreamPool.prototype.add$1, _receiver, "add$1");
  },
  remove$1: function(_, stream) {
    var t1, subscription;
    t1 = this._subscriptions;
    subscription = t1.remove$1(t1, stream);
    if (subscription != null)
      subscription.cancel$0();
  },
  close$0: function(_) {
    var t1, t2, t3;
    for (t1 = this._subscriptions, t2 = t1.get$values(t1), t3 = t2._iterable, t3 = t3.get$iterator(t3), t3 = new H.MappedIterator(null, t3, t2._f), H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "MappedIterable", 0), H.getRuntimeTypeArgument(t2, "MappedIterable", 1)]); t3.moveNext$0();)
      t3._current.cancel$0();
    t1.clear$0(t1);
    t1 = this._html$_controller;
    t1.close$0(t1);
  },
  get$close: function(_receiver) {
    return new H.BoundClosure$i0(this, W._StreamPool.prototype.close$0, _receiver, "close$0");
  },
  _html$_StreamPool$broadcast$0: function($T) {
    this._html$_controller = P.StreamController_StreamController$broadcast(this.get$close(this), null, true, $T);
  },
  static: {
_StreamPool$broadcast: function($T) {
  var t1 = new W._StreamPool(null, P.LinkedHashMap_LinkedHashMap(null, null, null, [P.Stream, $T], [P.StreamSubscription, $T]));
  H.setRuntimeTypeInfo(t1, [$T]);
  t1._html$_StreamPool$broadcast$0($T);
  return t1;
}}

},

_StreamPool_add_closure: {"": "Closure;this_0,stream_1",
  call$0: function() {
    var t1 = this.this_0;
    return t1.remove$1(t1, this.stream_1);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

_EventStreamSubscription: {"": "StreamSubscription;_pauseCount,_target,_eventType,_onData,_useCapture",
  cancel$0: function() {
    if (this._target == null)
      return;
    this._unlisten$0();
    this._target = null;
    this._onData = null;
  },
  pause$1: function(_, resumeSignal) {
    if (this._target == null)
      return;
    this._pauseCount = this._pauseCount + 1;
    this._unlisten$0();
  },
  pause$0: function($receiver) {
    return this.pause$1($receiver, null);
  },
  resume$0: function() {
    if (this._target == null || this._pauseCount <= 0)
      return;
    this._pauseCount = this._pauseCount - 1;
    this._tryResume$0();
  },
  _tryResume$0: function() {
    var t1 = this._onData;
    if (t1 != null && this._pauseCount <= 0)
      J.addEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
  },
  _unlisten$0: function() {
    var t1 = this._onData;
    if (t1 != null)
      J.removeEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
  },
  $asStreamSubscription: null
},

EventStreamProvider: {"": "Object;_eventType",
  forTarget$2$useCapture: function(e, useCapture) {
    var t1 = new W._EventStream(e, this._eventType, useCapture);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  forTarget$1: function(e) {
    return this.forTarget$2$useCapture(e, false);
  },
  forElement$2$useCapture: function(e, useCapture) {
    var t1 = new W._ElementEventStreamImpl(e, this._eventType, useCapture);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  forElement$1: function(e) {
    return this.forElement$2$useCapture(e, false);
  },
  _forElementList$2$useCapture: function(e, useCapture) {
    var t1 = new W._ElementListEventStreamImpl(e, useCapture, this._eventType);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  _forElementList$1: function(e) {
    return this._forElementList$2$useCapture(e, false);
  }
},

_CustomEventStreamProvider: {"": "Object;_eventTypeGetter",
  _eventTypeGetter$1: function(arg0) {
    return this._eventTypeGetter.call$1(arg0);
  },
  forTarget$2$useCapture: function(e, useCapture) {
    var t1 = new W._EventStream(e, this._eventTypeGetter$1(e), useCapture);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  forTarget$1: function(e) {
    return this.forTarget$2$useCapture(e, false);
  },
  forElement$2$useCapture: function(e, useCapture) {
    var t1 = new W._ElementEventStreamImpl(e, this._eventTypeGetter$1(e), useCapture);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  forElement$1: function(e) {
    return this.forElement$2$useCapture(e, false);
  },
  _forElementList$2$useCapture: function(e, useCapture) {
    var t1 = new W._ElementListEventStreamImpl(e, useCapture, this._eventTypeGetter$1(e));
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  _forElementList$1: function(e) {
    return this._forElementList$2$useCapture(e, false);
  }
},

_Html5NodeValidator: {"": "Object;uriPolicy<",
  allowsElement$1: function(element) {
    var t1 = $.get$_Html5NodeValidator__allowedElements();
    return t1.contains$1(t1, J.get$tagName$x(element));
  },
  allowsAttribute$3: function(element, attributeName, value) {
    var tagName, t1, validator;
    tagName = J.get$tagName$x(element);
    t1 = $.get$_Html5NodeValidator__attributeValidators();
    validator = t1.$index(t1, tagName + "::" + attributeName);
    if (validator == null) {
      t1 = $.get$_Html5NodeValidator__attributeValidators();
      validator = t1.$index(t1, "*::" + attributeName);
    }
    if (validator == null)
      return false;
    return validator.call$4(element, attributeName, value, this);
  },
  _Html5NodeValidator$1$uriPolicy: function(uriPolicy) {
    var t1, attr, t2;
    t1 = $.get$_Html5NodeValidator__attributeValidators();
    if (t1.get$isEmpty(t1)) {
      for (t1 = new H.ListIterator(C.List_1GN, 261, 0, null), H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(C.List_1GN, "JSArray", 0)]); t1.moveNext$0();) {
        attr = t1._current;
        t2 = $.get$_Html5NodeValidator__attributeValidators();
        t2.$indexSet(t2, attr, W._Html5NodeValidator__standardAttributeValidator$closure);
      }
      for (t1 = new H.ListIterator(C.List_yrN, 12, 0, null), H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(C.List_yrN, "JSArray", 0)]); t1.moveNext$0();) {
        attr = t1._current;
        t2 = $.get$_Html5NodeValidator__attributeValidators();
        t2.$indexSet(t2, attr, W._Html5NodeValidator__uriAttributeValidator$closure);
      }
    }
  },
  static: {
"": "_Html5NodeValidator__allowedElements,_Html5NodeValidator__standardAttributes,_Html5NodeValidator__uriAttributes,_Html5NodeValidator__attributeValidators",
_Html5NodeValidator$: function(uriPolicy) {
  var t1 = new W._SameOriginUriPolicy(W.AnchorElement_AnchorElement(null), C.Window_methods.get$location(window));
  t1 = new W._Html5NodeValidator(t1);
  t1._Html5NodeValidator$1$uriPolicy(uriPolicy);
  return t1;
},

_Html5NodeValidator__standardAttributeValidator: function(element, attributeName, value, context) {
  return true;
},

_Html5NodeValidator__uriAttributeValidator: function(element, attributeName, value, context) {
  return context.get$uriPolicy().allowsUri$1(value);
}}

},

ImmutableListMixin: {"": "Object;",
  get$iterator: function(receiver) {
    return W.FixedSizeListIterator$(receiver, H.getRuntimeTypeArgument(receiver, "ImmutableListMixin", 0));
  },
  add$1: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot add to immutable List."));
  },
  get$add: function(_receiver) {
    return new J.BoundClosure$i1(this, W.ImmutableListMixin.prototype.add$1, _receiver, "add$1");
  },
  addAll$1: function(receiver, iterable) {
    throw H.wrapException(P.UnsupportedError$("Cannot add to immutable List."));
  },
  remove$1: function(receiver, object) {
    throw H.wrapException(P.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    throw H.wrapException(P.UnsupportedError$("Cannot setRange on immutable List."));
  },
  $isList: true,
  $asList: null,
  $isEfficientLength: true,
  $isIterable: true,
  $asIterable: null
},

NodeValidatorBuilder: {"": "Object;_validators",
  add$1: function(_, validator) {
    this._validators.push(validator);
  },
  get$add: function(_receiver) {
    return new J.BoundClosure$i1(this, W.NodeValidatorBuilder.prototype.add$1, _receiver, "add$1");
  },
  allowsElement$1: function(element) {
    return H.IterableMixinWorkaround_any(this._validators, new W.NodeValidatorBuilder_allowsElement_closure(element));
  },
  allowsAttribute$3: function(element, attributeName, value) {
    return H.IterableMixinWorkaround_any(this._validators, new W.NodeValidatorBuilder_allowsAttribute_closure(element, attributeName, value));
  }
},

NodeValidatorBuilder_allowsElement_closure: {"": "Closure;element_0",
  call$1: function(v) {
    return v.allowsElement$1(this.element_0);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

NodeValidatorBuilder_allowsAttribute_closure: {"": "Closure;element_0,attributeName_1,value_2",
  call$1: function(v) {
    return v.allowsAttribute$3(this.element_0, this.attributeName_1, this.value_2);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_SimpleNodeValidator: {"": "Object;uriPolicy<",
  allowsElement$1: function(element) {
    var t1 = this.allowedElements;
    return t1.contains$1(t1, J.get$tagName$x(element));
  },
  allowsAttribute$3: function(element, attributeName, value) {
    var tagName, t1;
    tagName = J.get$tagName$x(element);
    t1 = this.allowedUriAttributes;
    if (t1.contains$1(t1, tagName + "::" + attributeName))
      return this.uriPolicy.allowsUri$1(value);
    else if (t1.contains$1(t1, "*::" + attributeName))
      return this.uriPolicy.allowsUri$1(value);
    else {
      t1 = this.allowedAttributes;
      if (t1.contains$1(t1, tagName + "::" + attributeName))
        return true;
      else if (t1.contains$1(t1, "*::" + attributeName))
        return true;
      else if (t1.contains$1(t1, tagName + "::*"))
        return true;
      else if (t1.contains$1(t1, "*::*"))
        return true;
    }
    return false;
  }
},

_TemplatingNodeValidator: {"": "_SimpleNodeValidator;_templateAttrs,allowedElements,allowedAttributes,allowedUriAttributes,uriPolicy",
  allowsAttribute$3: function(element, attributeName, value) {
    var t1;
    if (W._SimpleNodeValidator.prototype.allowsAttribute$3.call(this, element, attributeName, value))
      return true;
    if (attributeName === "template" && value === "")
      return true;
    if (J.get$attributes$x(element)._element.getAttribute("template") === "") {
      t1 = this._templateAttrs;
      return t1.contains$1(t1, attributeName);
    }
    return false;
  },
  static: {
"": "_TemplatingNodeValidator__TEMPLATE_ATTRS",
_TemplatingNodeValidator$: function() {
  var t1, t2, t3, t4;
  t1 = new H.MappedListIterable(C.List_wSV, new W._TemplatingNodeValidator_closure());
  H.setRuntimeTypeInfo(t1, [null, null]);
  t2 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
  t2.addAll$1(t2, ["TEMPLATE"]);
  t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
  t3.addAll$1(t3, t1);
  t1 = t3;
  t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
  t4 = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSString);
  t4.addAll$1(t4, C.List_wSV);
  return new W._TemplatingNodeValidator(t4, t2, t1, t3, null);
}}

},

_TemplatingNodeValidator_closure: {"": "Closure;",
  call$1: function(attr) {
    return "TEMPLATE::" + H.S(attr);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_SvgNodeValidator: {"": "Object;",
  allowsElement$1: function(element) {
    var t1 = J.getInterceptor(element);
    if (typeof element === "object" && element !== null && !!t1.$isScriptElement)
      return false;
    if (typeof element === "object" && element !== null && !!t1.$isSvgElement)
      return true;
    return false;
  },
  allowsAttribute$3: function(element, attributeName, value) {
    if (attributeName === "is" || C.JSString_methods.startsWith$1(attributeName, "on"))
      return false;
    return this.allowsElement$1(element);
  }
},

FixedSizeListIterator: {"": "Object;_array,_html$_length,_position,_html$_current",
  moveNext$0: function() {
    var t1, nextPosition;
    t1 = this._position;
    if (typeof t1 !== "number")
      throw t1.$add();
    nextPosition = t1 + 1;
    t1 = this._html$_length;
    if (typeof t1 !== "number")
      throw H.iae(t1);
    if (nextPosition < t1) {
      this._html$_current = J.$index$asx(this._array, nextPosition);
      this._position = nextPosition;
      return true;
    }
    this._html$_current = null;
    this._position = t1;
    return false;
  },
  get$current: function() {
    return this._html$_current;
  },
  "+current": 0,
  static: {
FixedSizeListIterator$: function(array, $T) {
  var t1 = new W.FixedSizeListIterator(array, J.get$length$asx(array), -1, null);
  H.setRuntimeTypeInfo(t1, [$T]);
  return t1;
}}

},

_callConstructor_closure: {"": "Closure;constructor_0,interceptor_1",
  call$1: function(receiver) {
    var t1 = H.makeLeafDispatchRecord(this.interceptor_1);
    Object.defineProperty(receiver, init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
    return this.constructor_0(receiver);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_DOMWindowCrossFrame: {"": "Object;_window",
  get$location: function(_) {
    return W._LocationCrossFrame__createSafe(this._window.location);
  },
  get$parent: function(_) {
    return W._DOMWindowCrossFrame__createSafe(this._window.parent);
  },
  get$top: function(_) {
    return W._DOMWindowCrossFrame__createSafe(this._window.top);
  },
  close$0: function(_) {
    return this._window.close();
  },
  get$close: function(_receiver) {
    return new H.BoundClosure$i0(this, W._DOMWindowCrossFrame.prototype.close$0, _receiver, "close$0");
  },
  $isEventTarget: true,
  $isInterceptor: true,
  static: {
_DOMWindowCrossFrame__createSafe: function(w) {
  if (w === window)
    return w;
  else
    return new W._DOMWindowCrossFrame(w);
}}

},

_LocationCrossFrame: {"": "Object;_location",
  set$href: function(_, val) {
    this._location.href = val;
    return;
  },
  static: {
_LocationCrossFrame__createSafe: function($location) {
  if ($location === C.Window_methods.get$location(window))
    return $location;
  else
    return new W._LocationCrossFrame($location);
}}

},

_LocationWrapper: {"": "Object;_ptr<",
  get$hash: function(_) {
    return this._ptr.hash;
  },
  "+hash": 0,
  set$hash: function(_, value) {
    this._ptr.hash = value;
  },
  "+hash=": 0,
  get$host: function(_) {
    return this._ptr.host;
  },
  get$hostname: function(_) {
    return this._ptr.hostname;
  },
  get$href: function(_) {
    return this._ptr.href;
  },
  set$href: function(_, value) {
    this._ptr.href = value;
  },
  get$port: function(_) {
    return this._ptr.port;
  },
  get$protocol: function(_) {
    return this._ptr.protocol;
  },
  toString$0: function(_) {
    return this._ptr.toString();
  },
  $isLocation: true,
  $isInterceptor: true
},

NodeValidator: {"": "Object;"},

_SameOriginUriPolicy: {"": "Object;_hiddenAnchor,_loc",
  allowsUri$1: function(uri) {
    var t1, t2, t3, t4, t5, t6;
    t1 = this._hiddenAnchor;
    t2 = J.getInterceptor$x(t1);
    t2.set$href(t1, uri);
    t3 = t2.get$hostname(t1);
    t4 = this._loc;
    t5 = J.getInterceptor$x(t4);
    t6 = t5.get$hostname(t4);
    if (t3 == null ? t6 == null : t3 === t6) {
      t3 = t2.get$port(t1);
      t6 = t5.get$port(t4);
      if (t3 == null ? t6 == null : t3 === t6) {
        t3 = t2.get$protocol(t1);
        t4 = t5.get$protocol(t4);
        t4 = t3 == null ? t4 == null : t3 === t4;
        t3 = t4;
      } else
        t3 = false;
    } else
      t3 = false;
    if (!t3)
      t1 = t2.get$hostname(t1) === "" && t2.get$port(t1) === "" && t2.get$protocol(t1) === ":";
    else
      t1 = true;
    return t1;
  }
},

_ValidatingTreeSanitizer: {"": "Object;validator",
  sanitizeTree$1: function(node) {
    new W._ValidatingTreeSanitizer_sanitizeTree_walk(this).call$1(node);
  },
  sanitizeNode$1: function(node) {
    var t1, attrs, t2, t3, isAttr, keys, i, $name, t4;
    t1 = J.getInterceptor$x(node);
    switch (t1.get$nodeType(node)) {
      case 1:
        attrs = t1.get$attributes(node);
        if (!this.validator.allowsElement$1(node)) {
          window;
          t2 = $.get$Console__safeConsole();
          t3 = "Removing disallowed element <" + t1.get$tagName(node) + ">";
          t2.toString;
          if (typeof console != "undefined")
            console.warn(t3);
          t1.remove$0(node);
          break;
        }
        t2 = attrs._element;
        isAttr = t2.getAttribute("is");
        if (isAttr != null)
          if (!this.validator.allowsAttribute$3(node, "is", isAttr)) {
            window;
            t2 = $.get$Console__safeConsole();
            t3 = "Removing disallowed type extension <" + t1.get$tagName(node) + " is=\"" + isAttr + "\">";
            t2.toString;
            if (typeof console != "undefined")
              console.warn(t3);
            t1.remove$0(node);
            break;
          }
        t3 = attrs.get$keys();
        keys = P.List_List$from(t3, true, H.getRuntimeTypeArgument(t3, "JSArray", 0));
        for (i = attrs.get$keys().length - 1; i >= 0; --i) {
          if (i >= keys.length)
            throw H.ioore(keys, i);
          $name = keys[i];
          if (!this.validator.allowsAttribute$3(node, J.toLowerCase$0$s($name), t2.getAttribute($name))) {
            window;
            t3 = $.get$Console__safeConsole();
            t4 = "Removing disallowed attribute <" + t1.get$tagName(node) + " " + H.S($name) + "=\"" + t2.getAttribute($name) + "\">";
            t3.toString;
            if (typeof console != "undefined")
              console.warn(t4);
            t2.getAttribute($name);
            t2.removeAttribute($name);
          }
        }
        if (typeof node === "object" && node !== null && !!t1.$isTemplateElement)
          this.sanitizeTree$1(node.content);
        break;
      case 8:
      case 11:
      case 3:
      case 4:
        break;
      default:
        t1.remove$0(node);
    }
  }
},

_ValidatingTreeSanitizer_sanitizeTree_walk: {"": "Closure;this_0",
  call$1: function(node) {
    var child, nextChild;
    this.this_0.sanitizeNode$1(node);
    child = J.get$lastChild$x(node);
    for (; child != null; child = nextChild) {
      nextChild = J.get$previousNode$x(child);
      this.call$1(child);
    }
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

HtmlElement: {"": "Element;", "%": "HTMLAppletElement|HTMLBRElement|HTMLBaseFontElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDirectoryElement|HTMLDivElement|HTMLFontElement|HTMLFrameElement|HTMLFrameSetElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLMarqueeElement|HTMLMenuElement|HTMLModElement|HTMLOptGroupElement|HTMLParagraphElement|HTMLPreElement|HTMLQuoteElement|HTMLShadowElement|HTMLSpanElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableHeaderCellElement|HTMLTitleElement|HTMLUListElement|HTMLUnknownElement;HTMLElement;HtmlElement_Polymer|HtmlElement_Polymer_ChangeNotifier|PolymerElement|PolymerElement_ChangeNotifier|AutocompleteResult|PolymerElement_ChangeNotifier0|InputAutocompleteComponent|PolymerDeclaration|PolymerElement_ChangeNotifier1|SimpleAutocompleteExample"},

_EntryArray: {"": "Interceptor;", $isList: true,
  $asList: function() {
    return [W.Entry];
  },
  $isEfficientLength: true,
  $isIterable: true,
  $asIterable: function() {
    return [W.Entry];
  },
  "%": "EntryArray"
},

AnchorElement: {"": "HtmlElement;hash%,host=,hostname=,href%,port=,protocol=,target=,type%",
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "%": "HTMLAnchorElement"
},

AreaElement: {"": "HtmlElement;hash=,host=,hostname=,href%,port=,protocol=,target=", "%": "HTMLAreaElement"},

BaseElement: {"": "HtmlElement;href%,target=", "%": "HTMLBaseElement"},

Blob: {"": "Interceptor;type=", $isBlob: true, "%": ";Blob"},

BodyElement: {"": "HtmlElement;",
  get$onBlur: function(receiver) {
    return C.EventStreamProvider_blur.forElement$1(receiver);
  },
  get$onFocus: function(receiver) {
    return C.EventStreamProvider_focus.forElement$1(receiver);
  },
  $isBodyElement: true,
  "%": "HTMLBodyElement"
},

ButtonElement: {"": "HtmlElement;form=,name=,type%,value%", "%": "HTMLButtonElement"},

CanvasElement: {"": "HtmlElement;height=,width%", "%": "HTMLCanvasElement"},

CharacterData: {"": "Node;length=", $isInterceptor: true, "%": "Comment;CharacterData"},

CssFilterRule: {"": "CssRule;style=", "%": "WebKitCSSFilterRule"},

CssFontFaceRule: {"": "CssRule;style=", "%": "CSSFontFaceRule"},

CssImportRule: {"": "CssRule;href=", "%": "CSSImportRule"},

CssKeyframeRule: {"": "CssRule;style=", "%": "CSSKeyframeRule|MozCSSKeyframeRule|WebKitCSSKeyframeRule"},

CssKeyframesRule: {"": "CssRule;name=", "%": "CSSKeyframesRule|MozCSSKeyframesRule|WebKitCSSKeyframesRule"},

CssPageRule: {"": "CssRule;style=", "%": "CSSPageRule"},

CssRule: {"": "Interceptor;type=", "%": "CSSCharsetRule|CSSHostRule|CSSMediaRule|CSSSupportsRule|CSSUnknownRule|WebKitCSSRegionRule;CSSRule"},

CssStyleDeclaration: {"": "Interceptor_CssStyleDeclarationBase;length=",
  getPropertyValue$1: function(receiver, propertyName) {
    var propValue = receiver.getPropertyValue(propertyName);
    return propValue != null ? propValue : "";
  },
  setProperty$3: function(receiver, propertyName, value, priority) {
    var exception;
    try {
      if (priority == null)
        priority = "";
      receiver.setProperty(propertyName, value, priority);
      if (!!receiver.setAttribute)
        receiver.setAttribute(propertyName, value);
    } catch (exception) {
      H.unwrapException(exception);
    }

  },
  "%": "CSS2Properties|CSSStyleDeclaration|MSStyleCSSProperties"
},

CssStyleRule: {"": "CssRule;style=", "%": "CSSStyleRule"},

CssViewportRule: {"": "CssRule;style=", "%": "CSSViewportRule"},

CustomEvent: {"": "Event;",
  get$detail: function(receiver) {
    var t1 = receiver._dartDetail;
    if (t1 != null)
      return t1;
    return P.convertNativeToDart_AcceptStructuredClone(receiver.detail, true);
  },
  $isCustomEvent: true,
  "%": "CustomEvent"
},

DialogElement: {"": "HtmlElement;",
  close$1: function(receiver, $returnValue) {
    return receiver.close($returnValue);
  },
  get$close: function(_receiver) {
    return new J.BoundClosure$i1(this, W.DialogElement.prototype.close$1, _receiver, "close$1");
  },
  "%": "HTMLDialogElement"
},

Document: {"": "Node;",
  createDocumentFragment$0: function(receiver) {
    return receiver.createDocumentFragment();
  },
  getElementById$1: function(receiver, elementId) {
    return receiver.getElementById(elementId);
  },
  get$onBlur: function(receiver) {
    return C.EventStreamProvider_blur.forTarget$1(receiver);
  },
  get$onChange: function(receiver) {
    return C.EventStreamProvider_change.forTarget$1(receiver);
  },
  get$onClick: function(receiver) {
    return C.EventStreamProvider_click.forTarget$1(receiver);
  },
  get$onFocus: function(receiver) {
    return C.EventStreamProvider_focus.forTarget$1(receiver);
  },
  get$onInput: function(receiver) {
    return C.EventStreamProvider_input.forTarget$1(receiver);
  },
  querySelectorAll$1: function(receiver, selectors) {
    return W._FrozenElementList$_wrap(receiver.querySelectorAll(selectors), null);
  },
  query$1: function(receiver, relativeSelectors) {
    return receiver.querySelector(relativeSelectors);
  },
  queryAll$1: function(receiver, relativeSelectors) {
    return W._FrozenElementList$_wrap(receiver.querySelectorAll(relativeSelectors), null);
  },
  $isDocument: true,
  "%": "Document|HTMLDocument|SVGDocument"
},

DocumentFragment: {"": "Node;",
  get$children: function(receiver) {
    var t1;
    if (receiver._children == null) {
      t1 = new P.FilteredElementList(receiver, new W._ChildNodeListLazy(receiver));
      H.setRuntimeTypeInfo(t1, [null]);
      receiver._children = t1;
    }
    return receiver._children;
  },
  querySelectorAll$1: function(receiver, selectors) {
    return W._FrozenElementList$_wrap(receiver.querySelectorAll(selectors), null);
  },
  get$innerHtml: function(receiver) {
    var e, t1;
    e = W._ElementFactoryProvider_createElement_tag("div", null);
    t1 = J.getInterceptor$x(e);
    t1.append$1(e, this.clone$1(receiver, true));
    return t1.get$innerHtml(e);
  },
  set$innerHtml: function(receiver, value) {
    this.setInnerHtml$1(receiver, value);
  },
  setInnerHtml$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
    new W._ChildNodeListLazy(receiver)._this.textContent = "";
    receiver.appendChild(J.createFragment$3$treeSanitizer$validator$x(document.body, html, treeSanitizer, validator));
  },
  setInnerHtml$1: function($receiver, html) {
    return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, null, null);
  },
  query$1: function(receiver, relativeSelectors) {
    return receiver.querySelector(relativeSelectors);
  },
  queryAll$1: function(receiver, relativeSelectors) {
    return W._FrozenElementList$_wrap(receiver.querySelectorAll(relativeSelectors), null);
  },
  $isInterceptor: true,
  "%": ";DocumentFragment"
},

DocumentType: {"": "Node;", $isInterceptor: true, "%": "DocumentType"},

DomError: {"": "Interceptor;message=,name=", "%": "DOMError|FileError"},

DomException: {"": "Interceptor;message=",
  get$name: function(receiver) {
    var errorName = receiver.name;
    if (P.Device_isWebKit() === true && errorName === "SECURITY_ERR")
      return "SecurityError";
    if (P.Device_isWebKit() === true && errorName === "SYNTAX_ERR")
      return "SyntaxError";
    return errorName;
  },
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "%": "DOMException"
},

DomStringList: {"": "Interceptor_ListMixin_ImmutableListMixin;",
  get$length: function(receiver) {
    return receiver.length;
  },
  "+length": 0,
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  "+[]:1:0": 0,
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  "+[]=:2:0": 0,
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  "+length=": 0,
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw H.wrapException(P.StateError$("No elements"));
  },
  get$last: function(receiver) {
    var len = receiver.length;
    if (len > 0)
      return receiver[len - 1];
    throw H.wrapException(new P.StateError("No elements"));
  },
  get$single: function(receiver) {
    var len = receiver.length;
    if (len === 1)
      return receiver[0];
    if (len === 0)
      throw H.wrapException(new P.StateError("No elements"));
    throw H.wrapException(new P.StateError("More than one element"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  contains$1: function(receiver, string) {
    return receiver.contains(string);
  },
  $asList: function() {
    return [null];
  },
  $asIterable: function() {
    return [J.JSString];
  },
  $isList: true,
  $isEfficientLength: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "DOMStringList"
},

Element: {"": "Node;outerHtml:outerHTML=,className%,clientWidth=,id=,style=,tagName=",
  get$attributes: function(receiver) {
    return new W._ElementAttributeMap(receiver);
  },
  get$children: function(receiver) {
    return new W._ChildrenElementList(receiver, receiver.children);
  },
  querySelectorAll$1: function(receiver, selectors) {
    return W._FrozenElementList$_wrap(receiver.querySelectorAll(selectors), null);
  },
  query$1: function(receiver, relativeSelectors) {
    return receiver.querySelector(relativeSelectors);
  },
  queryAll$1: function(receiver, relativeSelectors) {
    return W._FrozenElementList$_wrap(receiver.querySelectorAll(relativeSelectors), null);
  },
  get$classes: function(receiver) {
    return new W._ElementCssClassSet(receiver);
  },
  getComputedStyle$1: function(receiver, pseudoElement) {
    return window.getComputedStyle(receiver, "");
  },
  getComputedStyle$0: function($receiver) {
    return this.getComputedStyle$1($receiver, null);
  },
  enteredView$0: function(receiver) {
  },
  "+enteredView:0:0": 0,
  leftView$0: function(receiver) {
  },
  attributeChanged$3: function(receiver, $name, oldValue, newValue) {
  },
  get$localName: function(receiver) {
    return receiver.localName;
  },
  toString$0: function(receiver) {
    return receiver.localName;
  },
  matches$1: function(receiver, selectors) {
    if (!!receiver.matches)
      return receiver.matches(selectors);
    else if (!!receiver.webkitMatchesSelector)
      return receiver.webkitMatchesSelector(selectors);
    else if (!!receiver.mozMatchesSelector)
      return receiver.mozMatchesSelector(selectors);
    else if (!!receiver.msMatchesSelector)
      return receiver.msMatchesSelector(selectors);
    else if (!!receiver.oMatchesSelector)
      return receiver.oMatchesSelector(selectors);
    else
      throw H.wrapException(P.UnsupportedError$("Not supported on this platform"));
  },
  matchesWithAncestors$1: function(receiver, selectors) {
    var elem = receiver;
    do {
      if (J.matches$1$x(elem, selectors))
        return true;
      elem = elem.parentElement;
    } while (elem != null);
    return false;
  },
  createShadowRoot$0: function(receiver) {
    return (receiver.createShadowRoot || receiver.webkitCreateShadowRoot).call(receiver);
  },
  get$shadowRoot: function(receiver) {
    return receiver.shadowRoot || receiver.webkitShadowRoot;
  },
  createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
    var t1, t2, base, contextElement, fragment;
    if (treeSanitizer == null) {
      if ($.Element__defaultValidator == null) {
        t1 = new W.NodeValidatorBuilder([]);
        t2 = t1._validators;
        t2.push(W._Html5NodeValidator$(null));
        t2.push(W._TemplatingNodeValidator$());
        $.Element__defaultValidator = t1;
      }
      validator = $.Element__defaultValidator;
      t1 = $.Element__defaultSanitizer;
      if (t1 == null)
        $.Element__defaultSanitizer = new W._ValidatingTreeSanitizer(validator);
      else
        t1.validator = validator;
      treeSanitizer = $.Element__defaultSanitizer;
    }
    if ($.Element__parseDocument == null) {
      $.Element__parseDocument = document.implementation.createHTMLDocument("");
      $.Element__parseRange = $.Element__parseDocument.createRange();
      base = $.Element__parseDocument.createElement("base", null);
      J.set$href$x(base, document.baseURI);
      $.Element__parseDocument.head.appendChild(base);
    }
    t1 = $.Element__parseDocument;
    if (!!this.$isBodyElement)
      contextElement = t1.body;
    else {
      contextElement = t1.createElement(receiver.tagName, null);
      $.Element__parseDocument.body.appendChild(contextElement);
    }
    if ("createContextualFragment" in window.Range.prototype) {
      $.Element__parseRange.selectNodeContents(contextElement);
      fragment = $.Element__parseRange.createContextualFragment(html);
    } else {
      contextElement.innerHTML = html;
      fragment = $.Element__parseDocument.createDocumentFragment();
      for (; t1 = contextElement.firstChild, t1 != null;)
        fragment.appendChild(t1);
    }
    t1 = $.Element__parseDocument.body;
    if (contextElement == null ? t1 != null : contextElement !== t1)
      J.remove$0$ax(contextElement);
    treeSanitizer.sanitizeTree$1(fragment);
    document.adoptNode(fragment);
    return fragment;
  },
  createFragment$2$treeSanitizer: function($receiver, html, treeSanitizer) {
    return this.createFragment$3$treeSanitizer$validator($receiver, html, treeSanitizer, null);
  },
  set$innerHtml: function(receiver, html) {
    this.setInnerHtml$1(receiver, html);
  },
  setInnerHtml$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
    receiver.textContent = null;
    receiver.appendChild(this.createFragment$3$treeSanitizer$validator(receiver, html, treeSanitizer, validator));
  },
  setInnerHtml$1: function($receiver, html) {
    return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, null, null);
  },
  get$innerHtml: function(receiver) {
    return receiver.innerHTML;
  },
  get$on: function(receiver) {
    return new W.ElementEvents(receiver, receiver);
  },
  blur$0: function(receiver) {
    return receiver.blur();
  },
  getBoundingClientRect$0: function(receiver) {
    return receiver.getBoundingClientRect();
  },
  get$onBlur: function(receiver) {
    return C.EventStreamProvider_blur.forElement$1(receiver);
  },
  get$onChange: function(receiver) {
    return C.EventStreamProvider_change.forElement$1(receiver);
  },
  get$onClick: function(receiver) {
    return C.EventStreamProvider_click.forElement$1(receiver);
  },
  get$onFocus: function(receiver) {
    return C.EventStreamProvider_focus.forElement$1(receiver);
  },
  get$onInput: function(receiver) {
    return C.EventStreamProvider_input.forElement$1(receiver);
  },
  Element$created$0: function(receiver) {
  },
  $isElement: true,
  $isInterceptor: true,
  "%": ";Element"
},

EmbedElement: {"": "HtmlElement;height=,name=,src=,type%,width%", "%": "HTMLEmbedElement"},

ErrorEvent: {"": "Event;error=,message=", "%": "ErrorEvent"},

Event: {"": "Interceptor;_selector},bubbles=,path=,type=",
  get$target: function(receiver) {
    return W._convertNativeToDart_EventTarget(receiver.target);
  },
  preventDefault$0: function(receiver) {
    return receiver.preventDefault();
  },
  $isEvent: true,
  "%": "AudioProcessingEvent|AutocompleteErrorEvent|BeforeLoadEvent|BeforeUnloadEvent|CSSFontFaceLoadEvent|CloseEvent|DeviceMotionEvent|DeviceOrientationEvent|HashChangeEvent|IDBVersionChangeEvent|MIDIMessageEvent|MediaKeyNeededEvent|MediaStreamEvent|MediaStreamTrackEvent|MessageEvent|MutationEvent|OfflineAudioCompletionEvent|OverflowEvent|PageTransitionEvent|PopStateEvent|ProgressEvent|RTCDTMFToneChangeEvent|RTCDataChannelEvent|RTCIceCandidateEvent|ResourceProgressEvent|SecurityPolicyViolationEvent|SpeechInputEvent|SpeechRecognitionEvent|TrackEvent|WebGLContextEvent|WebKitAnimationEvent|XMLHttpRequestProgressEvent;Event"
},

EventTarget: {"": "Interceptor;",
  get$on: function(receiver) {
    return new W.Events(receiver);
  },
  addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
  },
  removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
  },
  $isEventTarget: true,
  "%": ";EventTarget;EventTarget_ListMixin|EventTarget_ListMixin_ImmutableListMixin|EventTarget_ListMixin0|EventTarget_ListMixin_ImmutableListMixin0"
},

FieldSetElement: {"": "HtmlElement;form=,name=,type=", "%": "HTMLFieldSetElement"},

File: {"": "Blob;name=", "%": "File"},

FileList: {"": "Interceptor_ListMixin_ImmutableListMixin0;",
  get$length: function(receiver) {
    return receiver.length;
  },
  "+length": 0,
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  "+[]:1:0": 0,
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  "+[]=:2:0": 0,
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  "+length=": 0,
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw H.wrapException(P.StateError$("No elements"));
  },
  get$last: function(receiver) {
    var len = receiver.length;
    if (len > 0)
      return receiver[len - 1];
    throw H.wrapException(new P.StateError("No elements"));
  },
  get$single: function(receiver) {
    var len = receiver.length;
    if (len === 1)
      return receiver[0];
    if (len === 0)
      throw H.wrapException(new P.StateError("No elements"));
    throw H.wrapException(new P.StateError("More than one element"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [null];
  },
  $asIterable: function() {
    return [W.File];
  },
  $isList: true,
  $isEfficientLength: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "FileList"
},

FormElement: {"": "HtmlElement;length=,method=,name=,target=",
  reset$0: function(receiver) {
    return receiver.reset();
  },
  "%": "HTMLFormElement"
},

Gamepad: {"": "Interceptor;id=,index=", "%": "Gamepad"},

HtmlCollection: {"": "Interceptor_ListMixin_ImmutableListMixin1;",
  get$length: function(receiver) {
    return receiver.length;
  },
  "+length": 0,
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  "+[]:1:0": 0,
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  "+[]=:2:0": 0,
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  "+length=": 0,
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw H.wrapException(P.StateError$("No elements"));
  },
  get$last: function(receiver) {
    var len = receiver.length;
    if (len > 0)
      return receiver[len - 1];
    throw H.wrapException(new P.StateError("No elements"));
  },
  get$single: function(receiver) {
    var len = receiver.length;
    if (len === 1)
      return receiver[0];
    if (len === 0)
      throw H.wrapException(new P.StateError("No elements"));
    throw H.wrapException(new P.StateError("More than one element"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [null];
  },
  $asIterable: function() {
    return [W.Node];
  },
  $isList: true,
  $isEfficientLength: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection"
},

IFrameElement: {"": "HtmlElement;height=,name=,src=,width%", "%": "HTMLIFrameElement"},

ImageData: {"": "Interceptor;height=,width=", $isImageData: true, "%": "ImageData"},

ImageElement: {"": "HtmlElement;complete=,height=,src=,width%",
  complete$0: function($receiver) {
    return this.complete.call$0();
  },
  "%": "HTMLImageElement"
},

InputElement: {"": "HtmlElement;checked%,form=,height=,name=,src=,type%,value%,entries:webkitEntries=,width%",
  accept$1: function($receiver, arg0) {
    return this.accept.call$1(arg0);
  },
  $isInputElement: true,
  $isElement: true,
  $isInterceptor: true,
  $isNode: true,
  $isEventTarget: true,
  "%": "HTMLInputElement"
},

KeyboardEvent: {"": "UIEvent;location=",
  get$keyCode: function(receiver) {
    return receiver.keyCode;
  },
  "%": "KeyboardEvent"
},

KeygenElement: {"": "HtmlElement;form=,name=,type=", "%": "HTMLKeygenElement"},

LIElement: {"": "HtmlElement;value%", "%": "HTMLLIElement"},

LabelElement: {"": "HtmlElement;form=", "%": "HTMLLabelElement"},

LegendElement: {"": "HtmlElement;form=", "%": "HTMLLegendElement"},

LinkElement: {"": "HtmlElement;href%,type%", $isLinkElement: true, "%": "HTMLLinkElement"},

Location: {"": "Interceptor;hash%,host=,hostname=,href%,port=,protocol=",
  toString$0: function(receiver) {
    return receiver.toString();
  },
  $isLocation: true,
  "%": "Location"
},

MapElement: {"": "HtmlElement;name=", "%": "HTMLMapElement"},

MediaElement: {"": "HtmlElement;error=,src=",
  pause$0: function(receiver) {
    return receiver.pause();
  },
  "%": "HTMLAudioElement;HTMLMediaElement"
},

MediaKeyEvent: {"": "Event;message=", "%": "MediaKeyEvent"},

MediaKeyMessageEvent: {"": "Event;message=", "%": "MediaKeyMessageEvent"},

MediaStream: {"": "EventTarget;id=", "%": "MediaStream"},

MetaElement: {"": "HtmlElement;content=,name=", "%": "HTMLMetaElement"},

MeterElement: {"": "HtmlElement;value%", "%": "HTMLMeterElement"},

MidiConnectionEvent: {"": "Event;port=", "%": "MIDIConnectionEvent"},

MidiOutput: {"": "MidiPort;",
  send$2: function(receiver, data, timestamp) {
    return receiver.send(data, timestamp);
  },
  send$1: function($receiver, data) {
    return $receiver.send(data);
  },
  "%": "MIDIOutput"
},

MidiPort: {"": "EventTarget;id=,name=,type=", "%": "MIDIInput;MIDIPort"},

MimeType: {"": "Interceptor;type=", "%": "MimeType"},

MimeTypeArray: {"": "Interceptor_ListMixin_ImmutableListMixin2;",
  get$length: function(receiver) {
    return receiver.length;
  },
  "+length": 0,
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  "+[]:1:0": 0,
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  "+[]=:2:0": 0,
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  "+length=": 0,
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw H.wrapException(P.StateError$("No elements"));
  },
  get$last: function(receiver) {
    var len = receiver.length;
    if (len > 0)
      return receiver[len - 1];
    throw H.wrapException(new P.StateError("No elements"));
  },
  get$single: function(receiver) {
    var len = receiver.length;
    if (len === 1)
      return receiver[0];
    if (len === 0)
      throw H.wrapException(new P.StateError("No elements"));
    throw H.wrapException(new P.StateError("More than one element"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [null];
  },
  $asIterable: function() {
    return [W.MimeType];
  },
  $isList: true,
  $isEfficientLength: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "MimeTypeArray"
},

MouseEvent: {"": "UIEvent;",
  _initMouseEvent$15: function(receiver, type, canBubble, cancelable, view, detail, screenX, screenY, clientX, clientY, ctrlKey, altKey, shiftKey, metaKey, button, relatedTarget) {
    receiver.initMouseEvent(type, canBubble, cancelable, view, detail, screenX, screenY, clientX, clientY, ctrlKey, altKey, shiftKey, metaKey, button, W._convertDartToNative_EventTarget(relatedTarget));
    return;
  },
  $isMouseEvent: true,
  "%": "DragEvent|MSPointerEvent|MouseEvent|MouseScrollEvent|MouseWheelEvent|PointerEvent|WheelEvent"
},

Navigator: {"": "Interceptor;", $isInterceptor: true, "%": "Navigator"},

NavigatorUserMediaError: {"": "Interceptor;message=,name=", "%": "NavigatorUserMediaError"},

Node: {"": "EventTarget;firstChild=,lastChild=,nextNode:nextSibling=,nodeType=,ownerDocument=,parent:parentElement=,parentNode=,previousNode:previousSibling=,text:textContent}",
  get$nodes: function(receiver) {
    return new W._ChildNodeListLazy(receiver);
  },
  remove$0: function(receiver) {
    var t1 = receiver.parentNode;
    if (t1 != null)
      t1.removeChild(receiver);
  },
  replaceWith$1: function(receiver, otherNode) {
    var $parent, exception;
    try {
      $parent = receiver.parentNode;
      J._replaceChild$2$x($parent, otherNode, receiver);
    } catch (exception) {
      H.unwrapException(exception);
    }

    return receiver;
  },
  toString$0: function(receiver) {
    var t1 = receiver.nodeValue;
    return t1 == null ? J.Interceptor.prototype.toString$0.call(this, receiver) : t1;
  },
  append$1: function(receiver, newChild) {
    return receiver.appendChild(newChild);
  },
  clone$1: function(receiver, deep) {
    return receiver.cloneNode(deep);
  },
  contains$1: function(receiver, other) {
    return receiver.contains(other);
  },
  insertBefore$2: function(receiver, newChild, refChild) {
    return receiver.insertBefore(newChild, refChild);
  },
  _replaceChild$2: function(receiver, newChild, oldChild) {
    return receiver.replaceChild(newChild, oldChild);
  },
  $isNode: true,
  "%": "Entity|Notation;Node"
},

NodeList: {"": "Interceptor_ListMixin_ImmutableListMixin3;",
  get$length: function(receiver) {
    return receiver.length;
  },
  "+length": 0,
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  "+[]:1:0": 0,
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  "+[]=:2:0": 0,
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  "+length=": 0,
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw H.wrapException(P.StateError$("No elements"));
  },
  get$last: function(receiver) {
    var len = receiver.length;
    if (len > 0)
      return receiver[len - 1];
    throw H.wrapException(new P.StateError("No elements"));
  },
  get$single: function(receiver) {
    var len = receiver.length;
    if (len === 1)
      return receiver[0];
    if (len === 0)
      throw H.wrapException(new P.StateError("No elements"));
    throw H.wrapException(new P.StateError("More than one element"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [null];
  },
  $asIterable: function() {
    return [W.Node];
  },
  $isList: true,
  $isEfficientLength: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "NodeList|RadioNodeList"
},

OListElement: {"": "HtmlElement;type%", "%": "HTMLOListElement"},

ObjectElement: {"": "HtmlElement;form=,height=,name=,type%,width%", "%": "HTMLObjectElement"},

OptionElement: {"": "HtmlElement;form=,index=,value%", $isOptionElement: true, "%": "HTMLOptionElement"},

OutputElement: {"": "HtmlElement;form=,name=,type=,value%", "%": "HTMLOutputElement"},

ParamElement: {"": "HtmlElement;name=,value%", "%": "HTMLParamElement"},

Plugin: {"": "Interceptor;length=,name=", "%": "Plugin"},

PluginArray: {"": "Interceptor_ListMixin_ImmutableListMixin4;",
  get$length: function(receiver) {
    return receiver.length;
  },
  "+length": 0,
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  "+[]:1:0": 0,
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  "+[]=:2:0": 0,
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  "+length=": 0,
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw H.wrapException(P.StateError$("No elements"));
  },
  get$last: function(receiver) {
    var len = receiver.length;
    if (len > 0)
      return receiver[len - 1];
    throw H.wrapException(new P.StateError("No elements"));
  },
  get$single: function(receiver) {
    var len = receiver.length;
    if (len === 1)
      return receiver[0];
    if (len === 0)
      throw H.wrapException(new P.StateError("No elements"));
    throw H.wrapException(new P.StateError("More than one element"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [null];
  },
  $asIterable: function() {
    return [W.Plugin];
  },
  $isList: true,
  $isEfficientLength: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "PluginArray"
},

PositionError: {"": "Interceptor;message=", "%": "PositionError"},

ProcessingInstruction: {"": "CharacterData;target=", "%": "ProcessingInstruction"},

ProgressElement: {"": "HtmlElement;value%", "%": "HTMLProgressElement"},

Range: {"": "Interceptor;",
  getBoundingClientRect$0: function(receiver) {
    return receiver.getBoundingClientRect();
  },
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "%": "Range"
},

ScriptElement0: {"": "HtmlElement;src=,type%", $isScriptElement0: true, "%": "HTMLScriptElement"},

SelectElement: {"": "HtmlElement;form=,length%,name=,selectedIndex%,type=,value%", $isSelectElement: true, "%": "HTMLSelectElement"},

ShadowRoot: {"": "DocumentFragment;applyAuthorStyles=,innerHtml:innerHTML%",
  clone$1: function(receiver, deep) {
    return receiver.cloneNode(deep);
  },
  getElementById$1: function(receiver, elementId) {
    return receiver.getElementById(elementId);
  },
  $isShadowRoot: true,
  "%": "ShadowRoot"
},

SourceBuffer: {"": "EventTarget;", "%": "SourceBuffer"},

SourceBufferList: {"": "EventTarget_ListMixin_ImmutableListMixin;",
  get$length: function(receiver) {
    return receiver.length;
  },
  "+length": 0,
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  "+[]:1:0": 0,
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  "+[]=:2:0": 0,
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  "+length=": 0,
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw H.wrapException(P.StateError$("No elements"));
  },
  get$last: function(receiver) {
    var len = receiver.length;
    if (len > 0)
      return receiver[len - 1];
    throw H.wrapException(new P.StateError("No elements"));
  },
  get$single: function(receiver) {
    var len = receiver.length;
    if (len === 1)
      return receiver[0];
    if (len === 0)
      throw H.wrapException(new P.StateError("No elements"));
    throw H.wrapException(new P.StateError("More than one element"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [null];
  },
  $asIterable: function() {
    return [W.SourceBuffer];
  },
  $isList: true,
  $isEfficientLength: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "SourceBufferList"
},

SourceElement: {"": "HtmlElement;src=,type%", "%": "HTMLSourceElement"},

SpeechGrammar: {"": "Interceptor;src=", "%": "SpeechGrammar"},

SpeechGrammarList: {"": "Interceptor_ListMixin_ImmutableListMixin5;",
  get$length: function(receiver) {
    return receiver.length;
  },
  "+length": 0,
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  "+[]:1:0": 0,
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  "+[]=:2:0": 0,
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  "+length=": 0,
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw H.wrapException(P.StateError$("No elements"));
  },
  get$last: function(receiver) {
    var len = receiver.length;
    if (len > 0)
      return receiver[len - 1];
    throw H.wrapException(new P.StateError("No elements"));
  },
  get$single: function(receiver) {
    var len = receiver.length;
    if (len === 1)
      return receiver[0];
    if (len === 0)
      throw H.wrapException(new P.StateError("No elements"));
    throw H.wrapException(new P.StateError("More than one element"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [null];
  },
  $asIterable: function() {
    return [W.SpeechGrammar];
  },
  $isList: true,
  $isEfficientLength: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "SpeechGrammarList"
},

SpeechInputResult: {"": "Interceptor;", "%": "SpeechInputResult"},

SpeechRecognitionError: {"": "Event;error=,message=", "%": "SpeechRecognitionError"},

SpeechRecognitionResult: {"": "Interceptor;isFinal=,length=", "%": "SpeechRecognitionResult"},

SpeechSynthesisEvent: {"": "Event;name=", "%": "SpeechSynthesisEvent"},

StorageEvent: {"": "Event;key=,newValue=,oldValue=", "%": "StorageEvent"},

StyleElement: {"": "HtmlElement;type%", "%": "HTMLStyleElement"},

StyleSheet: {"": "Interceptor;href=,type=", "%": "CSSStyleSheet|StyleSheet"},

TableElement: {"": "HtmlElement;",
  createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
    var table, fragment, t1;
    if ("createContextualFragment" in window.Range.prototype)
      return W.Element.prototype.createFragment$3$treeSanitizer$validator.call(this, receiver, html, treeSanitizer, validator);
    table = W.Element_Element$html("<table>" + html + "</table>", treeSanitizer, validator);
    fragment = document.createDocumentFragment();
    fragment.toString;
    t1 = new W._ChildNodeListLazy(fragment);
    t1.addAll$1(t1, J.get$nodes$x(table));
    return fragment;
  },
  createFragment$2$treeSanitizer: function($receiver, html, treeSanitizer) {
    return this.createFragment$3$treeSanitizer$validator($receiver, html, treeSanitizer, null);
  },
  "%": "HTMLTableElement"
},

TableRowElement: {"": "HtmlElement;",
  createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
    var fragment, t1, section, row;
    if ("createContextualFragment" in window.Range.prototype)
      return W.Element.prototype.createFragment$3$treeSanitizer$validator.call(this, receiver, html, treeSanitizer, validator);
    fragment = document.createDocumentFragment();
    t1 = J.createFragment$3$treeSanitizer$validator$x(document.createElement("table", null), html, treeSanitizer, validator);
    t1.toString;
    t1 = new W._ChildNodeListLazy(t1);
    section = t1.get$single(t1);
    section.toString;
    t1 = new W._ChildNodeListLazy(section);
    row = t1.get$single(t1);
    fragment.toString;
    t1 = new W._ChildNodeListLazy(fragment);
    row.toString;
    t1.addAll$1(t1, new W._ChildNodeListLazy(row));
    return fragment;
  },
  createFragment$2$treeSanitizer: function($receiver, html, treeSanitizer) {
    return this.createFragment$3$treeSanitizer$validator($receiver, html, treeSanitizer, null);
  },
  "%": "HTMLTableRowElement"
},

TableSectionElement: {"": "HtmlElement;",
  createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
    var fragment, t1, section;
    if ("createContextualFragment" in window.Range.prototype)
      return W.Element.prototype.createFragment$3$treeSanitizer$validator.call(this, receiver, html, treeSanitizer, validator);
    fragment = document.createDocumentFragment();
    t1 = J.createFragment$3$treeSanitizer$validator$x(document.createElement("table", null), html, treeSanitizer, validator);
    t1.toString;
    t1 = new W._ChildNodeListLazy(t1);
    section = t1.get$single(t1);
    fragment.toString;
    t1 = new W._ChildNodeListLazy(fragment);
    section.toString;
    t1.addAll$1(t1, new W._ChildNodeListLazy(section));
    return fragment;
  },
  createFragment$2$treeSanitizer: function($receiver, html, treeSanitizer) {
    return this.createFragment$3$treeSanitizer$validator($receiver, html, treeSanitizer, null);
  },
  "%": "HTMLTableSectionElement"
},

TemplateElement: {"": "HtmlElement;content=",
  setInnerHtml$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
    var fragment;
    receiver.textContent = null;
    fragment = this.createFragment$3$treeSanitizer$validator(receiver, html, treeSanitizer, validator);
    receiver.content.appendChild(fragment);
  },
  setInnerHtml$1: function($receiver, html) {
    return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, null, null);
  },
  $isTemplateElement: true,
  "%": "HTMLTemplateElement"
},

Text: {"": "CharacterData;", $isText: true, "%": "CDATASection|Text"},

TextAreaElement: {"": "HtmlElement;form=,name=,type=,value%", $isTextAreaElement: true, "%": "HTMLTextAreaElement"},

TextTrack: {"": "EventTarget;kind=", "%": "TextTrack"},

TextTrackCue: {"": "EventTarget;id=,text}", "%": "TextTrackCue"},

TextTrackCueList: {"": "Interceptor_ListMixin_ImmutableListMixin6;",
  get$length: function(receiver) {
    return receiver.length;
  },
  "+length": 0,
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  "+[]:1:0": 0,
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  "+[]=:2:0": 0,
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  "+length=": 0,
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw H.wrapException(P.StateError$("No elements"));
  },
  get$last: function(receiver) {
    var len = receiver.length;
    if (len > 0)
      return receiver[len - 1];
    throw H.wrapException(new P.StateError("No elements"));
  },
  get$single: function(receiver) {
    var len = receiver.length;
    if (len === 1)
      return receiver[0];
    if (len === 0)
      throw H.wrapException(new P.StateError("No elements"));
    throw H.wrapException(new P.StateError("More than one element"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [null];
  },
  $asIterable: function() {
    return [W.TextTrackCue];
  },
  $isList: true,
  $isEfficientLength: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "TextTrackCueList"
},

TextTrackList: {"": "EventTarget_ListMixin_ImmutableListMixin0;",
  get$length: function(receiver) {
    return receiver.length;
  },
  "+length": 0,
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  "+[]:1:0": 0,
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  "+[]=:2:0": 0,
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  "+length=": 0,
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw H.wrapException(P.StateError$("No elements"));
  },
  get$last: function(receiver) {
    var len = receiver.length;
    if (len > 0)
      return receiver[len - 1];
    throw H.wrapException(new P.StateError("No elements"));
  },
  get$single: function(receiver) {
    var len = receiver.length;
    if (len === 1)
      return receiver[0];
    if (len === 0)
      throw H.wrapException(new P.StateError("No elements"));
    throw H.wrapException(new P.StateError("More than one element"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [null];
  },
  $asIterable: function() {
    return [W.TextTrack];
  },
  $isList: true,
  $isEfficientLength: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "TextTrackList"
},

Touch: {"": "Interceptor;",
  get$target: function(receiver) {
    return W._convertNativeToDart_EventTarget(receiver.target);
  },
  "%": "Touch"
},

TouchList: {"": "Interceptor_ListMixin_ImmutableListMixin7;",
  get$length: function(receiver) {
    return receiver.length;
  },
  "+length": 0,
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  "+[]:1:0": 0,
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  "+[]=:2:0": 0,
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  "+length=": 0,
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw H.wrapException(P.StateError$("No elements"));
  },
  get$last: function(receiver) {
    var len = receiver.length;
    if (len > 0)
      return receiver[len - 1];
    throw H.wrapException(new P.StateError("No elements"));
  },
  get$single: function(receiver) {
    var len = receiver.length;
    if (len === 1)
      return receiver[0];
    if (len === 0)
      throw H.wrapException(new P.StateError("No elements"));
    throw H.wrapException(new P.StateError("More than one element"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [null];
  },
  $asIterable: function() {
    return [W.Touch];
  },
  $isList: true,
  $isEfficientLength: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "TouchList"
},

TrackElement: {"": "HtmlElement;kind=,src=", "%": "HTMLTrackElement"},

TransitionEvent: {"": "Event;", $isTransitionEvent: true, "%": "TransitionEvent|WebKitTransitionEvent"},

UIEvent: {"": "Event;detail=", "%": "CompositionEvent|FocusEvent|SVGZoomEvent|TextEvent|TouchEvent;UIEvent"},

VideoElement: {"": "MediaElement;height=,width%", "%": "HTMLVideoElement"},

Window: {"": "EventTarget;name=",
  get$location: function(receiver) {
    var result = receiver.location;
    if (W.Window__isDartLocation(result) === true)
      return result;
    if (null == receiver._location_wrapper)
      receiver._location_wrapper = new W._LocationWrapper(result);
    return receiver._location_wrapper;
  },
  _requestAnimationFrame$1: function(receiver, callback) {
    return receiver.requestAnimationFrame(H.convertDartClosureToJS(callback, 1));
  },
  _ensureRequestAnimationFrame$0: function(receiver) {
    if (!!(receiver.requestAnimationFrame && receiver.cancelAnimationFrame))
      return;
      (function($this) {
   var vendors = ['ms', 'moz', 'webkit', 'o'];
   for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
     $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
     $this.cancelAnimationFrame =
         $this[vendors[i]+'CancelAnimationFrame'] ||
         $this[vendors[i]+'CancelRequestAnimationFrame'];
   }
   if ($this.requestAnimationFrame && $this.cancelAnimationFrame) return;
   $this.requestAnimationFrame = function(callback) {
      return window.setTimeout(function() {
        callback(Date.now());
      }, 16 /* 16ms ~= 60fps */);
   };
   $this.cancelAnimationFrame = function(id) { clearTimeout(id); }
  })(receiver);
  },
  get$parent: function(receiver) {
    return W._convertNativeToDart_Window(receiver.parent);
  },
  get$top: function(receiver) {
    return W._convertNativeToDart_Window(receiver.top);
  },
  close$0: function(receiver) {
    return receiver.close();
  },
  get$close: function(_receiver) {
    return new H.BoundClosure$i0(this, W.Window.prototype.close$0, _receiver, "close$0");
  },
  print$0: function(receiver) {
    return receiver.print();
  },
  get$print: function(_receiver) {
    return new H.BoundClosure$i0(this, W.Window.prototype.print$0, _receiver, "print$0");
  },
  toString$0: function(receiver) {
    return receiver.toString();
  },
  get$onBlur: function(receiver) {
    return C.EventStreamProvider_blur.forTarget$1(receiver);
  },
  get$onChange: function(receiver) {
    return C.EventStreamProvider_change.forTarget$1(receiver);
  },
  get$onClick: function(receiver) {
    return C.EventStreamProvider_click.forTarget$1(receiver);
  },
  get$onFocus: function(receiver) {
    return C.EventStreamProvider_focus.forTarget$1(receiver);
  },
  get$onInput: function(receiver) {
    return C.EventStreamProvider_input.forTarget$1(receiver);
  },
  $isInterceptor: true,
  $isEventTarget: true,
  "%": "DOMWindow|Window"
},

_Attr: {"": "Node;name=,value%", "%": "Attr"},

_CSSValue: {"": "Interceptor;", "%": "CSSPrimitiveValue;CSSValue;_CSSValue_ListMixin|_CSSValue_ListMixin_ImmutableListMixin"},

_ClientRect: {"": "Interceptor;height=,left=,right=,top=,width=",
  toString$0: function(receiver) {
    return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(receiver.width) + " x " + H.S(receiver.height);
  },
  $eq: function(receiver, other) {
    var t1, t2, t3;
    if (other == null)
      return false;
    t1 = J.getInterceptor$x(other);
    if (typeof other !== "object" || other === null || !t1.$isRectangle)
      return false;
    t2 = receiver.left;
    t3 = t1.get$left(other);
    if (t2 == null ? t3 == null : t2 === t3) {
      t2 = receiver.top;
      t3 = t1.get$top(other);
      if (t2 == null ? t3 == null : t2 === t3) {
        t2 = receiver.width;
        t3 = t1.get$width(other);
        if (t2 == null ? t3 == null : t2 === t3) {
          t2 = receiver.height;
          t1 = t1.get$height(other);
          t1 = t2 == null ? t1 == null : t2 === t1;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function(receiver) {
    var t1, t2, t3, t4;
    t1 = J.get$hashCode$(receiver.left);
    t2 = J.get$hashCode$(receiver.top);
    t3 = J.get$hashCode$(receiver.width);
    t4 = J.get$hashCode$(receiver.height);
    return W._JenkinsSmiHash_finish(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(0, t1), t2), t3), t4));
  },
  $isRectangle: true,
  $asRectangle: function() {
    return [null];
  },
  "%": "ClientRect|DOMRect"
},

_ClientRectList: {"": "Interceptor_ListMixin_ImmutableListMixin8;",
  get$length: function(receiver) {
    return receiver.length;
  },
  "+length": 0,
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  "+[]:1:0": 0,
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  "+[]=:2:0": 0,
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  "+length=": 0,
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw H.wrapException(P.StateError$("No elements"));
  },
  get$last: function(receiver) {
    var len = receiver.length;
    if (len > 0)
      return receiver[len - 1];
    throw H.wrapException(new P.StateError("No elements"));
  },
  get$single: function(receiver) {
    var len = receiver.length;
    if (len === 1)
      return receiver[0];
    if (len === 0)
      throw H.wrapException(new P.StateError("No elements"));
    throw H.wrapException(new P.StateError("More than one element"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [null];
  },
  $asIterable: function() {
    return [P.Rectangle];
  },
  $isList: true,
  $isEfficientLength: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "ClientRectList"
},

_CssRuleList: {"": "Interceptor_ListMixin_ImmutableListMixin9;",
  get$length: function(receiver) {
    return receiver.length;
  },
  "+length": 0,
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  "+[]:1:0": 0,
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  "+[]=:2:0": 0,
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  "+length=": 0,
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw H.wrapException(P.StateError$("No elements"));
  },
  get$last: function(receiver) {
    var len = receiver.length;
    if (len > 0)
      return receiver[len - 1];
    throw H.wrapException(new P.StateError("No elements"));
  },
  get$single: function(receiver) {
    var len = receiver.length;
    if (len === 1)
      return receiver[0];
    if (len === 0)
      throw H.wrapException(new P.StateError("No elements"));
    throw H.wrapException(new P.StateError("More than one element"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [null];
  },
  $asIterable: function() {
    return [W.CssRule];
  },
  $isList: true,
  $isEfficientLength: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "CSSRuleList"
},

_CssValueList: {"": "_CSSValue_ListMixin_ImmutableListMixin;",
  get$length: function(receiver) {
    return receiver.length;
  },
  "+length": 0,
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  "+[]:1:0": 0,
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  "+[]=:2:0": 0,
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  "+length=": 0,
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw H.wrapException(P.StateError$("No elements"));
  },
  get$last: function(receiver) {
    var len = receiver.length;
    if (len > 0)
      return receiver[len - 1];
    throw H.wrapException(new P.StateError("No elements"));
  },
  get$single: function(receiver) {
    var len = receiver.length;
    if (len === 1)
      return receiver[0];
    if (len === 0)
      throw H.wrapException(new P.StateError("No elements"));
    throw H.wrapException(new P.StateError("More than one element"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [null];
  },
  $asIterable: function() {
    return [W._CSSValue];
  },
  $isList: true,
  $isEfficientLength: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "CSSValueList|WebKitCSSFilterValue|WebKitCSSMixFunctionValue|WebKitCSSTransformValue"
},

_GamepadList: {"": "Interceptor_ListMixin_ImmutableListMixin10;",
  get$length: function(receiver) {
    return receiver.length;
  },
  "+length": 0,
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  "+[]:1:0": 0,
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  "+[]=:2:0": 0,
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  "+length=": 0,
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw H.wrapException(P.StateError$("No elements"));
  },
  get$last: function(receiver) {
    var len = receiver.length;
    if (len > 0)
      return receiver[len - 1];
    throw H.wrapException(new P.StateError("No elements"));
  },
  get$single: function(receiver) {
    var len = receiver.length;
    if (len === 1)
      return receiver[0];
    if (len === 0)
      throw H.wrapException(new P.StateError("No elements"));
    throw H.wrapException(new P.StateError("More than one element"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [null];
  },
  $asIterable: function() {
    return [W.Gamepad];
  },
  $isList: true,
  $isEfficientLength: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "GamepadList"
},

_NamedNodeMap: {"": "Interceptor_ListMixin_ImmutableListMixin11;",
  get$length: function(receiver) {
    return receiver.length;
  },
  "+length": 0,
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  "+[]:1:0": 0,
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  "+[]=:2:0": 0,
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  "+length=": 0,
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw H.wrapException(P.StateError$("No elements"));
  },
  get$last: function(receiver) {
    var len = receiver.length;
    if (len > 0)
      return receiver[len - 1];
    throw H.wrapException(new P.StateError("No elements"));
  },
  get$single: function(receiver) {
    var len = receiver.length;
    if (len === 1)
      return receiver[0];
    if (len === 0)
      throw H.wrapException(new P.StateError("No elements"));
    throw H.wrapException(new P.StateError("More than one element"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [null];
  },
  $asIterable: function() {
    return [W.Node];
  },
  $isList: true,
  $isEfficientLength: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "MozNamedAttrMap|NamedNodeMap"
},

_SpeechInputResultList: {"": "Interceptor_ListMixin_ImmutableListMixin12;",
  get$length: function(receiver) {
    return receiver.length;
  },
  "+length": 0,
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  "+[]:1:0": 0,
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  "+[]=:2:0": 0,
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  "+length=": 0,
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw H.wrapException(P.StateError$("No elements"));
  },
  get$last: function(receiver) {
    var len = receiver.length;
    if (len > 0)
      return receiver[len - 1];
    throw H.wrapException(new P.StateError("No elements"));
  },
  get$single: function(receiver) {
    var len = receiver.length;
    if (len === 1)
      return receiver[0];
    if (len === 0)
      throw H.wrapException(new P.StateError("No elements"));
    throw H.wrapException(new P.StateError("More than one element"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [null];
  },
  $asIterable: function() {
    return [W.SpeechInputResult];
  },
  $isList: true,
  $isEfficientLength: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "SpeechInputResultList"
},

_SpeechRecognitionResultList: {"": "Interceptor_ListMixin_ImmutableListMixin13;",
  get$length: function(receiver) {
    return receiver.length;
  },
  "+length": 0,
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  "+[]:1:0": 0,
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  "+[]=:2:0": 0,
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  "+length=": 0,
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw H.wrapException(P.StateError$("No elements"));
  },
  get$last: function(receiver) {
    var len = receiver.length;
    if (len > 0)
      return receiver[len - 1];
    throw H.wrapException(new P.StateError("No elements"));
  },
  get$single: function(receiver) {
    var len = receiver.length;
    if (len === 1)
      return receiver[0];
    if (len === 0)
      throw H.wrapException(new P.StateError("No elements"));
    throw H.wrapException(new P.StateError("More than one element"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [null];
  },
  $asIterable: function() {
    return [W.SpeechRecognitionResult];
  },
  $isList: true,
  $isEfficientLength: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "SpeechRecognitionResultList"
},

_StyleSheetList: {"": "Interceptor_ListMixin_ImmutableListMixin14;",
  get$length: function(receiver) {
    return receiver.length;
  },
  "+length": 0,
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  "+[]:1:0": 0,
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  "+[]=:2:0": 0,
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  "+length=": 0,
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw H.wrapException(P.StateError$("No elements"));
  },
  get$last: function(receiver) {
    var len = receiver.length;
    if (len > 0)
      return receiver[len - 1];
    throw H.wrapException(new P.StateError("No elements"));
  },
  get$single: function(receiver) {
    var len = receiver.length;
    if (len === 1)
      return receiver[0];
    if (len === 0)
      throw H.wrapException(new P.StateError("No elements"));
    throw H.wrapException(new P.StateError("More than one element"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [null];
  },
  $asIterable: function() {
    return [W.StyleSheet];
  },
  $isList: true,
  $isEfficientLength: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "StyleSheetList"
}}],
["dart.dom.indexed_db", "dart:indexed_db", , P, {
KeyRange: {"": "Interceptor;", $isKeyRange: true, "%": "IDBKeyRange"}}],
["dart.dom.svg", "dart:svg", , P, {
Interceptor_ListMixin15: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true, $isIterable: true, $asIterable: null},

Interceptor_ListMixin_ImmutableListMixin15: {"": "Interceptor_ListMixin15+ImmutableListMixin;", $asList: null, $asIterable: null, $isList: true, $isEfficientLength: true, $isIterable: true},

Interceptor_ListMixin16: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true, $isIterable: true, $asIterable: null},

Interceptor_ListMixin_ImmutableListMixin16: {"": "Interceptor_ListMixin16+ImmutableListMixin;", $asList: null, $asIterable: null, $isList: true, $isEfficientLength: true, $isIterable: true},

Interceptor_ListMixin17: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true, $isIterable: true, $asIterable: null},

Interceptor_ListMixin_ImmutableListMixin17: {"": "Interceptor_ListMixin17+ImmutableListMixin;", $asList: null, $asIterable: null, $isList: true, $isEfficientLength: true, $isIterable: true},

Interceptor_ListMixin18: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true, $isIterable: true, $asIterable: null},

Interceptor_ListMixin_ImmutableListMixin18: {"": "Interceptor_ListMixin18+ImmutableListMixin;", $asList: null, $asIterable: null, $isList: true, $isEfficientLength: true, $isIterable: true},

_AttributeClassSet: {"": "CssClassSetImpl;_svg$_element",
  readClasses$0: function() {
    var classname, s, t1, t2, trimmed;
    classname = new W._ElementAttributeMap(this._svg$_element)._element.getAttribute("class");
    s = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSString);
    if (classname == null)
      return s;
    for (t1 = classname.split(" "), t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();) {
      trimmed = J.trim$0$s(t2._current);
      if (trimmed.length !== 0)
        s.add$1(s, trimmed);
    }
    return s;
  },
  writeClasses$1: function(s) {
    new W._ElementAttributeMap(this._svg$_element)._element.setAttribute("class", s.join$1(s, " "));
  }
},

Interceptor_ListMixin19: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true, $isIterable: true, $asIterable: null},

Interceptor_ListMixin_ImmutableListMixin19: {"": "Interceptor_ListMixin19+ImmutableListMixin;", $asList: null, $asIterable: null, $isList: true, $isEfficientLength: true, $isIterable: true},

Interceptor_ListMixin20: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true, $isIterable: true, $asIterable: null},

Interceptor_ListMixin_ImmutableListMixin20: {"": "Interceptor_ListMixin20+ImmutableListMixin;", $asList: null, $asIterable: null, $isList: true, $isEfficientLength: true, $isIterable: true},

AElement: {"": "GraphicsElement;target=,href=", $isInterceptor: true, "%": "SVGAElement"},

AltGlyphElement: {"": "TextPositioningElement;href=", $isInterceptor: true, "%": "SVGAltGlyphElement"},

AnimationElement: {"": "SvgElement;", $isInterceptor: true, "%": "SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGSetElement"},

CircleElement: {"": "GraphicsElement;", $isInterceptor: true, "%": "SVGCircleElement"},

ClipPathElement: {"": "GraphicsElement;", $isInterceptor: true, "%": "SVGClipPathElement"},

DefsElement: {"": "GraphicsElement;", $isInterceptor: true, "%": "SVGDefsElement"},

ElementInstance: {"": "EventTarget;firstChild=,lastChild=,parentNode=",
  get$onBlur: function(receiver) {
    return C.EventStreamProvider_blur.forTarget$1(receiver);
  },
  get$onChange: function(receiver) {
    return C.EventStreamProvider_change.forTarget$1(receiver);
  },
  get$onClick: function(receiver) {
    return C.EventStreamProvider_click.forTarget$1(receiver);
  },
  get$onFocus: function(receiver) {
    return C.EventStreamProvider_focus.forTarget$1(receiver);
  },
  get$onInput: function(receiver) {
    return C.EventStreamProvider_input.forTarget$1(receiver);
  },
  "%": "SVGElementInstance"
},

EllipseElement: {"": "GraphicsElement;", $isInterceptor: true, "%": "SVGEllipseElement"},

FEBlendElement: {"": "SvgElement;height=,width=", $isInterceptor: true, "%": "SVGFEBlendElement"},

FEColorMatrixElement: {"": "SvgElement;type=,values=,height=,width=", $isInterceptor: true, "%": "SVGFEColorMatrixElement"},

FEComponentTransferElement: {"": "SvgElement;height=,width=", $isInterceptor: true, "%": "SVGFEComponentTransferElement"},

FECompositeElement: {"": "SvgElement;operator=,height=,width=", $isInterceptor: true, "%": "SVGFECompositeElement"},

FEConvolveMatrixElement: {"": "SvgElement;height=,width=", $isInterceptor: true, "%": "SVGFEConvolveMatrixElement"},

FEDiffuseLightingElement: {"": "SvgElement;height=,width=", $isInterceptor: true, "%": "SVGFEDiffuseLightingElement"},

FEDisplacementMapElement: {"": "SvgElement;height=,width=", $isInterceptor: true, "%": "SVGFEDisplacementMapElement"},

FEFloodElement: {"": "SvgElement;height=,width=", $isInterceptor: true, "%": "SVGFEFloodElement"},

FEGaussianBlurElement: {"": "SvgElement;height=,width=", $isInterceptor: true, "%": "SVGFEGaussianBlurElement"},

FEImageElement: {"": "SvgElement;height=,width=,href=", $isInterceptor: true, "%": "SVGFEImageElement"},

FEMergeElement: {"": "SvgElement;height=,width=", $isInterceptor: true, "%": "SVGFEMergeElement"},

FEMorphologyElement: {"": "SvgElement;operator=,height=,width=", $isInterceptor: true, "%": "SVGFEMorphologyElement"},

FEOffsetElement: {"": "SvgElement;height=,width=", $isInterceptor: true, "%": "SVGFEOffsetElement"},

FESpecularLightingElement: {"": "SvgElement;height=,width=", $isInterceptor: true, "%": "SVGFESpecularLightingElement"},

FETileElement: {"": "SvgElement;height=,width=", $isInterceptor: true, "%": "SVGFETileElement"},

FETurbulenceElement: {"": "SvgElement;type=,height=,width=", $isInterceptor: true, "%": "SVGFETurbulenceElement"},

FilterElement: {"": "SvgElement;height=,width=,href=", $isInterceptor: true, "%": "SVGFilterElement"},

ForeignObjectElement: {"": "GraphicsElement;height=,width=", $isInterceptor: true, "%": "SVGForeignObjectElement"},

GElement: {"": "GraphicsElement;", $isInterceptor: true, "%": "SVGGElement"},

GraphicsElement: {"": "SvgElement;", $isInterceptor: true, "%": ";SVGGraphicsElement"},

ImageElement0: {"": "GraphicsElement;height=,width=,href=", $isInterceptor: true, "%": "SVGImageElement"},

Length: {"": "Interceptor;value%", "%": "SVGLength"},

LengthList: {"": "Interceptor_ListMixin_ImmutableListMixin15;",
  $index: function(receiver, index) {
    var t1 = receiver.numberOfItems;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver.getItem(index);
  },
  "+[]:1:0": 0,
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  "+[]=:2:0": 0,
  get$length: function(receiver) {
    return receiver.numberOfItems;
  },
  "+length": 0,
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  "+length=": 0,
  get$first: function(receiver) {
    var t1 = receiver.numberOfItems;
    if (typeof t1 !== "number")
      throw t1.$gt();
    if (t1 > 0)
      return receiver[0];
    throw H.wrapException(P.StateError$("No elements"));
  },
  get$last: function(receiver) {
    var len = receiver.numberOfItems;
    if (typeof len !== "number")
      throw len.$gt();
    if (len > 0)
      return receiver[len - 1];
    throw H.wrapException(new P.StateError("No elements"));
  },
  get$single: function(receiver) {
    var len = receiver.numberOfItems;
    if (len === 1)
      return receiver[0];
    if (len === 0)
      throw H.wrapException(new P.StateError("No elements"));
    throw H.wrapException(new P.StateError("More than one element"));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  $asList: function() {
    return [null];
  },
  $asIterable: function() {
    return [P.Length];
  },
  $isList: true,
  $isEfficientLength: true,
  $isIterable: true,
  "%": "SVGLengthList"
},

LineElement: {"": "GraphicsElement;", $isInterceptor: true, "%": "SVGLineElement"},

MarkerElement: {"": "SvgElement;", $isInterceptor: true, "%": "SVGMarkerElement"},

MaskElement: {"": "SvgElement;height=,width=", $isInterceptor: true, "%": "SVGMaskElement"},

Number: {"": "Interceptor;value%", "%": "SVGNumber"},

NumberList: {"": "Interceptor_ListMixin_ImmutableListMixin16;",
  $index: function(receiver, index) {
    var t1 = receiver.numberOfItems;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver.getItem(index);
  },
  "+[]:1:0": 0,
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  "+[]=:2:0": 0,
  get$length: function(receiver) {
    return receiver.numberOfItems;
  },
  "+length": 0,
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  "+length=": 0,
  get$first: function(receiver) {
    var t1 = receiver.numberOfItems;
    if (typeof t1 !== "number")
      throw t1.$gt();
    if (t1 > 0)
      return receiver[0];
    throw H.wrapException(P.StateError$("No elements"));
  },
  get$last: function(receiver) {
    var len = receiver.numberOfItems;
    if (typeof len !== "number")
      throw len.$gt();
    if (len > 0)
      return receiver[len - 1];
    throw H.wrapException(new P.StateError("No elements"));
  },
  get$single: function(receiver) {
    var len = receiver.numberOfItems;
    if (len === 1)
      return receiver[0];
    if (len === 0)
      throw H.wrapException(new P.StateError("No elements"));
    throw H.wrapException(new P.StateError("More than one element"));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  $asList: function() {
    return [null];
  },
  $asIterable: function() {
    return [P.Number];
  },
  $isList: true,
  $isEfficientLength: true,
  $isIterable: true,
  "%": "SVGNumberList"
},

PathElement: {"": "GraphicsElement;", $isInterceptor: true, "%": "SVGPathElement"},

PathSeg: {"": "Interceptor;", "%": "SVGPathSeg|SVGPathSegArcAbs|SVGPathSegArcRel|SVGPathSegClosePath|SVGPathSegCurvetoCubicAbs|SVGPathSegCurvetoCubicRel|SVGPathSegCurvetoCubicSmoothAbs|SVGPathSegCurvetoCubicSmoothRel|SVGPathSegCurvetoQuadraticAbs|SVGPathSegCurvetoQuadraticRel|SVGPathSegCurvetoQuadraticSmoothAbs|SVGPathSegCurvetoQuadraticSmoothRel|SVGPathSegLinetoAbs|SVGPathSegLinetoHorizontalAbs|SVGPathSegLinetoHorizontalRel|SVGPathSegLinetoRel|SVGPathSegLinetoVerticalAbs|SVGPathSegLinetoVerticalRel|SVGPathSegMovetoAbs|SVGPathSegMovetoRel"},

PathSegList: {"": "Interceptor_ListMixin_ImmutableListMixin17;",
  $index: function(receiver, index) {
    var t1 = receiver.numberOfItems;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver.getItem(index);
  },
  "+[]:1:0": 0,
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  "+[]=:2:0": 0,
  get$length: function(receiver) {
    return receiver.numberOfItems;
  },
  "+length": 0,
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  "+length=": 0,
  get$first: function(receiver) {
    var t1 = receiver.numberOfItems;
    if (typeof t1 !== "number")
      throw t1.$gt();
    if (t1 > 0)
      return receiver[0];
    throw H.wrapException(P.StateError$("No elements"));
  },
  get$last: function(receiver) {
    var len = receiver.numberOfItems;
    if (typeof len !== "number")
      throw len.$gt();
    if (len > 0)
      return receiver[len - 1];
    throw H.wrapException(new P.StateError("No elements"));
  },
  get$single: function(receiver) {
    var len = receiver.numberOfItems;
    if (len === 1)
      return receiver[0];
    if (len === 0)
      throw H.wrapException(new P.StateError("No elements"));
    throw H.wrapException(new P.StateError("More than one element"));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  $asList: function() {
    return [null];
  },
  $asIterable: function() {
    return [P.PathSeg];
  },
  $isList: true,
  $isEfficientLength: true,
  $isIterable: true,
  "%": "SVGPathSegList"
},

PatternElement: {"": "SvgElement;height=,width=,href=", $isInterceptor: true, "%": "SVGPatternElement"},

PolygonElement: {"": "GraphicsElement;", $isInterceptor: true, "%": "SVGPolygonElement"},

PolylineElement: {"": "GraphicsElement;", $isInterceptor: true, "%": "SVGPolylineElement"},

RectElement: {"": "GraphicsElement;height=,width=", $isInterceptor: true, "%": "SVGRectElement"},

ScriptElement: {"": "SvgElement;type%,href=", $isScriptElement: true, $isInterceptor: true, "%": "SVGScriptElement"},

StringList: {"": "Interceptor_ListMixin_ImmutableListMixin18;",
  $index: function(receiver, index) {
    var t1 = receiver.numberOfItems;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver.getItem(index);
  },
  "+[]:1:0": 0,
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  "+[]=:2:0": 0,
  get$length: function(receiver) {
    return receiver.numberOfItems;
  },
  "+length": 0,
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  "+length=": 0,
  get$first: function(receiver) {
    var t1 = receiver.numberOfItems;
    if (typeof t1 !== "number")
      throw t1.$gt();
    if (t1 > 0)
      return receiver[0];
    throw H.wrapException(P.StateError$("No elements"));
  },
  get$last: function(receiver) {
    var len = receiver.numberOfItems;
    if (typeof len !== "number")
      throw len.$gt();
    if (len > 0)
      return receiver[len - 1];
    throw H.wrapException(new P.StateError("No elements"));
  },
  get$single: function(receiver) {
    var len = receiver.numberOfItems;
    if (len === 1)
      return receiver[0];
    if (len === 0)
      throw H.wrapException(new P.StateError("No elements"));
    throw H.wrapException(new P.StateError("More than one element"));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  $asList: function() {
    return [null];
  },
  $asIterable: function() {
    return [J.JSString];
  },
  $isList: true,
  $isEfficientLength: true,
  $isIterable: true,
  "%": "SVGStringList"
},

StyleElement0: {"": "SvgElement;type%", "%": "SVGStyleElement"},

SvgElement: {"": "Element;",
  get$classes: function(receiver) {
    if (receiver._cssClassSet == null)
      receiver._cssClassSet = new P._AttributeClassSet(receiver);
    return receiver._cssClassSet;
  },
  get$children: function(receiver) {
    var t1 = new P.FilteredElementList(receiver, new W._ChildNodeListLazy(receiver));
    H.setRuntimeTypeInfo(t1, [W.Element]);
    return t1;
  },
  get$outerHtml: function(receiver) {
    var container, cloned, t1;
    container = W._ElementFactoryProvider_createElement_tag("div", null);
    cloned = receiver.cloneNode(true);
    t1 = J.getInterceptor$x(container);
    J.add$1$ax(t1.get$children(container), cloned);
    return t1.get$innerHtml(container);
  },
  get$innerHtml: function(receiver) {
    var container, cloned, t1;
    container = W._ElementFactoryProvider_createElement_tag("div", null);
    cloned = receiver.cloneNode(true);
    t1 = J.getInterceptor$x(container);
    J.addAll$1$ax(t1.get$children(container), J.get$children$x(cloned));
    return t1.get$innerHtml(container);
  },
  set$innerHtml: function(receiver, value) {
    receiver.textContent = null;
    receiver.appendChild(this.createFragment$3$treeSanitizer$validator(receiver, value, null, null));
  },
  createFragment$3$treeSanitizer$validator: function(receiver, svg, treeSanitizer, validator) {
    var t1, html, fragment, svgFragment, root;
    validator = new W.NodeValidatorBuilder([]);
    t1 = validator._validators;
    t1.push(W._Html5NodeValidator$(null));
    t1.push(W._TemplatingNodeValidator$());
    t1.push(new W._SvgNodeValidator());
    treeSanitizer = new W._ValidatingTreeSanitizer(validator);
    html = "<svg version=\"1.1\">" + svg + "</svg>";
    fragment = J.createFragment$2$treeSanitizer$x(document.body, html, treeSanitizer);
    svgFragment = document.createDocumentFragment();
    fragment.toString;
    t1 = new W._ChildNodeListLazy(fragment);
    root = t1.get$single(t1);
    for (; t1 = root.firstChild, t1 != null;)
      svgFragment.appendChild(t1);
    return svgFragment;
  },
  createFragment$2$treeSanitizer: function($receiver, svg, treeSanitizer) {
    return this.createFragment$3$treeSanitizer$validator($receiver, svg, treeSanitizer, null);
  },
  $isSvgElement: true,
  "%": "SVGAltGlyphDefElement|SVGAltGlyphItemElement|SVGComponentTransferFunctionElement|SVGDescElement|SVGFEDistantLightElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEMergeNodeElement|SVGFEPointLightElement|SVGFESpotLightElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGGlyphElement|SVGHKernElement|SVGMetadataElement|SVGMissingGlyphElement|SVGStopElement|SVGTitleElement|SVGVKernElement;SVGElement"
},

SvgSvgElement: {"": "GraphicsElement;height=,width=",
  getElementById$1: function(receiver, elementId) {
    return receiver.getElementById(elementId);
  },
  $isSvgSvgElement: true,
  $isInterceptor: true,
  "%": "SVGSVGElement"
},

SwitchElement: {"": "GraphicsElement;", $isInterceptor: true, "%": "SVGSwitchElement"},

SymbolElement: {"": "SvgElement;", $isInterceptor: true, "%": "SVGSymbolElement"},

TextContentElement: {"": "GraphicsElement;", $isInterceptor: true, "%": ";SVGTextContentElement"},

TextPathElement: {"": "TextContentElement;method=,href=", $isInterceptor: true, "%": "SVGTextPathElement"},

TextPositioningElement: {"": "TextContentElement;", "%": "SVGTSpanElement|SVGTextElement;SVGTextPositioningElement"},

Transform: {"": "Interceptor;type=", "%": "SVGTransform"},

TransformList: {"": "Interceptor_ListMixin_ImmutableListMixin19;",
  $index: function(receiver, index) {
    var t1 = receiver.numberOfItems;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver.getItem(index);
  },
  "+[]:1:0": 0,
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  "+[]=:2:0": 0,
  get$length: function(receiver) {
    return receiver.numberOfItems;
  },
  "+length": 0,
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  "+length=": 0,
  get$first: function(receiver) {
    var t1 = receiver.numberOfItems;
    if (typeof t1 !== "number")
      throw t1.$gt();
    if (t1 > 0)
      return receiver[0];
    throw H.wrapException(P.StateError$("No elements"));
  },
  get$last: function(receiver) {
    var len = receiver.numberOfItems;
    if (typeof len !== "number")
      throw len.$gt();
    if (len > 0)
      return receiver[len - 1];
    throw H.wrapException(new P.StateError("No elements"));
  },
  get$single: function(receiver) {
    var len = receiver.numberOfItems;
    if (len === 1)
      return receiver[0];
    if (len === 0)
      throw H.wrapException(new P.StateError("No elements"));
    throw H.wrapException(new P.StateError("More than one element"));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  $asList: function() {
    return [null];
  },
  $asIterable: function() {
    return [P.Transform];
  },
  $isList: true,
  $isEfficientLength: true,
  $isIterable: true,
  "%": "SVGTransformList"
},

UseElement: {"": "GraphicsElement;height=,width=,href=", $isInterceptor: true, "%": "SVGUseElement"},

ViewElement: {"": "SvgElement;", $isInterceptor: true, "%": "SVGViewElement"},

_ElementInstanceList: {"": "Interceptor_ListMixin_ImmutableListMixin20;",
  get$length: function(receiver) {
    return receiver.length;
  },
  "+length": 0,
  $index: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.wrapException(P.RangeError$range(index, 0, receiver.length));
    return receiver.item(index);
  },
  "+[]:1:0": 0,
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  "+[]=:2:0": 0,
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  "+length=": 0,
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw H.wrapException(P.StateError$("No elements"));
  },
  get$last: function(receiver) {
    var len = receiver.length;
    if (len > 0)
      return receiver[len - 1];
    throw H.wrapException(new P.StateError("No elements"));
  },
  get$single: function(receiver) {
    var len = receiver.length;
    if (len === 1)
      return receiver[0];
    if (len === 0)
      throw H.wrapException(new P.StateError("No elements"));
    throw H.wrapException(new P.StateError("More than one element"));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  $asList: function() {
    return [null];
  },
  $asIterable: function() {
    return [P.ElementInstance];
  },
  $isList: true,
  $isEfficientLength: true,
  $isIterable: true,
  "%": "SVGElementInstanceList"
},

_GradientElement: {"": "SvgElement;href=", $isInterceptor: true, "%": "SVGGradientElement|SVGLinearGradientElement|SVGRadialGradientElement"},

_SVGCursorElement: {"": "SvgElement;", $isInterceptor: true, "%": "SVGCursorElement"},

_SVGFEDropShadowElement: {"": "SvgElement;", $isInterceptor: true, "%": "SVGFEDropShadowElement"},

_SVGGlyphRefElement: {"": "SvgElement;", $isInterceptor: true, "%": "SVGGlyphRefElement"},

_SVGMPathElement: {"": "SvgElement;", $isInterceptor: true, "%": "SVGMPathElement"}}],
["dart.dom.web_sql", "dart:web_sql", , P, {
Interceptor_ListMixin21: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true, $isIterable: true, $asIterable: null},

Interceptor_ListMixin_ImmutableListMixin21: {"": "Interceptor_ListMixin21+ImmutableListMixin;", $asList: null, $asIterable: null, $isList: true, $isEfficientLength: true, $isIterable: true},

SqlError: {"": "Interceptor;message=", "%": "SQLError"},

SqlResultSetRowList: {"": "Interceptor_ListMixin_ImmutableListMixin21;",
  get$length: function(receiver) {
    return receiver.length;
  },
  "+length": 0,
  $index: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.wrapException(P.RangeError$range(index, 0, receiver.length));
    return P.convertNativeToDart_Dictionary(receiver.item(index));
  },
  "+[]:1:0": 0,
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  "+[]=:2:0": 0,
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  "+length=": 0,
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw H.wrapException(P.StateError$("No elements"));
  },
  get$last: function(receiver) {
    var len = receiver.length;
    if (len > 0)
      return receiver[len - 1];
    throw H.wrapException(new P.StateError("No elements"));
  },
  get$single: function(receiver) {
    var len = receiver.length;
    if (len === 1)
      return receiver[0];
    if (len === 0)
      throw H.wrapException(new P.StateError("No elements"));
    throw H.wrapException(new P.StateError("More than one element"));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  $asList: function() {
    return [null];
  },
  $asIterable: function() {
    return [P.Map];
  },
  $isList: true,
  $isEfficientLength: true,
  $isIterable: true,
  "%": "SQLResultSetRowList"
}}],
["dart.isolate", "dart:isolate", , P, {
ReceivePort: {"": "Object;", $isReceivePort: true, $isStream: true,
  $asStream: function() {
    return [null];
  }
}}],
["dart.js", "dart:js", , P, {
_convertDartFunction: function(f, captureThis) {
  return function(_call, f, captureThis) {return function() {return _call(f, captureThis, this, Array.prototype.slice.apply(arguments));}}(P._callDartFunction$closure.call$4, f, captureThis);
},

_callDartFunction: function(callback, captureThis, $self, $arguments) {
  var arguments0, t1;
  if (captureThis === true) {
    arguments0 = [$self];
    C.JSArray_methods.addAll$1(arguments0, $arguments);
    $arguments = arguments0;
  }
  t1 = J.map$1$ax($arguments, P._convertToDart$closure);
  return P._convertToJS(H.Primitives_applyFunction(callback, t1.toList$0(t1), P.Function__toMangledNames(null)));
},

_defineProperty: function(o, $name, value) {
  var exception;
  if (Object.isExtensible(o))
    try {
      Object.defineProperty(o, $name, { value: value});
      return true;
    } catch (exception) {
      H.unwrapException(exception);
    }

  return false;
},

_convertToJS: function(o) {
  var t1;
  if (o == null)
    return;
  else {
    if (typeof o !== "string")
      if (typeof o !== "number")
        if (typeof o !== "boolean") {
          t1 = J.getInterceptor(o);
          t1 = typeof o === "object" && o !== null && !!t1.$isBlob || typeof o === "object" && o !== null && !!t1.$isKeyRange || typeof o === "object" && o !== null && !!t1.$isImageData || typeof o === "object" && o !== null && !!t1.$isNode || typeof o === "object" && o !== null && !!t1.$isTypedData;
        } else
          t1 = true;
      else
        t1 = true;
    else
      t1 = true;
    if (t1)
      return o;
    else {
      t1 = J.getInterceptor(o);
      if (typeof o === "object" && o !== null && !!t1.$isDateTime)
        return H.Primitives_lazyAsJsDate(o);
      else if (typeof o === "object" && o !== null && !!t1.$isJsObject)
        return o._jsObject;
      else if (typeof o === "object" && o !== null && !!t1.$isFunction)
        return P._getJsProxy(o, "$dart_jsFunction", new P._convertToJS_closure());
      else
        return P._getJsProxy(o, "_$dart_jsObject", new P._convertToJS_closure0());
    }
  }
},

_getJsProxy: function(o, propertyName, createProxy) {
  var jsProxy = o[propertyName];
  if (jsProxy == null) {
    jsProxy = createProxy.call$1(o);
    P._defineProperty(o, propertyName, jsProxy);
  }
  return jsProxy;
},

_convertToDart: function(o) {
  var t1;
  if (o == null || typeof o == "string" || typeof o == "number" || typeof o == "boolean")
    return o;
  else {
    t1 = J.getInterceptor(o);
    if (typeof o === "object" && o !== null && !!t1.$isBlob || typeof o === "object" && o !== null && !!t1.$isKeyRange || typeof o === "object" && o !== null && !!t1.$isImageData || typeof o === "object" && o !== null && !!t1.$isNode || typeof o === "object" && o !== null && !!t1.$isTypedData)
      return o;
    else if (o instanceof Date)
      return P.DateTime$fromMillisecondsSinceEpoch(o.getMilliseconds(), false);
    else if (typeof o == "function")
      return P._getDartProxy(o, "_$dart_dartClosure", new P._convertToDart_closure());
    else if (o.constructor === DartObject)
      return o.o;
    else
      return P._getDartProxy(o, "_$dart_dartObject", new P._convertToDart_closure0());
  }
},

_getDartProxy: function(o, propertyName, createProxy) {
  var dartProxy = o[propertyName];
  if (dartProxy == null) {
    dartProxy = createProxy.call$1(o);
    P._defineProperty(o, propertyName, dartProxy);
  }
  return dartProxy;
},

JsObject: {"": "Object;_jsObject",
  $index: function(_, property) {
    if (typeof property !== "string" && typeof property !== "number")
      throw H.wrapException(new P.ArgumentError("property is not a String or num"));
    return P._convertToDart(this._jsObject[property]);
  },
  "+[]:1:0": 0,
  $indexSet: function(_, property, value) {
    if (typeof property !== "string" && typeof property !== "number")
      throw H.wrapException(new P.ArgumentError("property is not a String or num"));
    this._jsObject[property] = P._convertToJS(value);
  },
  "+[]=:2:0": 0,
  get$hashCode: function(_) {
    return 0;
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$isJsObject && this._jsObject === other._jsObject;
  },
  hasProperty$1: function(property) {
    return property in this._jsObject;
  },
  toString$0: function(_) {
    var t1, exception;
    try {
      t1 = String(this._jsObject);
      return t1;
    } catch (exception) {
      H.unwrapException(exception);
      return P.Object.prototype.toString$0.call(this, this);
    }

  },
  callMethod$2: function(method, args) {
    var t1, t2;
    t1 = this._jsObject;
    t2 = new H.MappedListIterable(args, P._convertToJS$closure);
    H.setRuntimeTypeInfo(t2, [null, null]);
    t2 = t2.toList$0(t2);
    return P._convertToDart(t1[method].apply(t1, t2));
  },
  JsObject$_fromJs$1: function(_jsObject) {
    P._getDartProxy(this._jsObject, "_$dart_dartObject", new P.JsObject$_fromJs_closure(this));
  },
  $isJsObject: true,
  static: {
JsObject$_fromJs: function(_jsObject) {
  var t1 = new P.JsObject(_jsObject);
  t1.JsObject$_fromJs$1(_jsObject);
  return t1;
},

JsObject_JsObject$fromBrowserObject: function(object) {
  if (typeof object === "number" || typeof object === "string" || typeof object === "boolean" || object == null)
    throw H.wrapException(new P.ArgumentError("object cannot be a num, string, bool, or null"));
  return P.JsObject$_fromJs(P._convertToJS(object));
}}

},

JsObject$_fromJs_closure: {"": "Closure;this_0",
  call$1: function(o) {
    return this.this_0;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

JsFunction: {"": "JsObject;_jsObject"},

_convertToJS_closure: {"": "Closure;",
  call$1: function(o) {
    var jsFunction = P._convertDartFunction(o, false);
    P._defineProperty(jsFunction, "_$dart_dartClosure", o);
    return jsFunction;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_convertToJS_closure0: {"": "Closure;",
  call$1: function(o) {
    return new DartObject(o);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_convertToDart_closure: {"": "Closure;",
  call$1: function(o) {
    var t1 = new P.JsFunction(o);
    t1.JsObject$_fromJs$1(o);
    return t1;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_convertToDart_closure0: {"": "Closure;",
  call$1: function(o) {
    return P.JsObject$_fromJs(o);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
}}],
["dart.math", "dart:math", , P, {
_JenkinsSmiHash_combine0: function(hash, value) {
  hash = 536870911 & C.JSInt_methods.$add(hash, value);
  hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
  return (hash ^ C.JSInt_methods.$shr(hash, 6)) >>> 0;
},

_JenkinsSmiHash_finish0: function(hash) {
  hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
  hash = (hash ^ C.JSInt_methods.$shr(hash, 11)) >>> 0;
  return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
},

min: function(a, b) {
  if (typeof a !== "number")
    throw H.wrapException(new P.ArgumentError(a));
  if (typeof b !== "number")
    throw H.wrapException(new P.ArgumentError(b));
  if (a > b)
    return b;
  if (a < b)
    return a;
  if (typeof b === "number") {
    if (typeof a === "number")
      if (a === 0)
        return (a + b) * a * b;
    if (a === 0 && C.JSDouble_methods.get$isNegative(b) || C.JSDouble_methods.get$isNaN(b))
      return b;
    return a;
  }
  return a;
},

_RectangleBase: {"": "Object;",
  get$right: function(_) {
    return J.$add$ns(this.get$left(this), this.get$width(this));
  },
  toString$0: function(_) {
    return "Rectangle (" + H.S(this.get$left(this)) + ", " + H.S(this.get$top(this)) + ") " + H.S(this.get$width(this)) + " x " + H.S(this.get$height(this));
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor$x(other);
    if (typeof other !== "object" || other === null || !t1.$isRectangle)
      return false;
    this.get$left(this);
    t1.get$left(other);
    return false;
  },
  get$hashCode: function(_) {
    var t1, t2, t3, t4;
    t1 = J.get$hashCode$(this.get$left(this));
    t2 = J.get$hashCode$(this.get$top(this));
    t3 = J.get$hashCode$(this.get$width(this));
    t4 = J.get$hashCode$(this.get$height(this));
    return P._JenkinsSmiHash_finish0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(0, t1), t2), t3), t4));
  }
},

Rectangle: {"": "_RectangleBase;left>,top>,width>,height>", $isRectangle: true, $asRectangle: null, $as_RectangleBase: null}}],
["dart.mirrors", "dart:mirrors", , P, {
reflectClass: function(key) {
  var t1, tm;
  t1 = J.getInterceptor(key);
  if (typeof key !== "object" || key === null || !t1.$isType || t1.$eq(key, C.Type_e5Z))
    throw H.wrapException(new P.ArgumentError(H.S(key) + " does not denote a class"));
  tm = H.reflectClassByMangledName(key.get$_typeName());
  t1 = J.getInterceptor(tm);
  if (typeof tm !== "object" || tm === null || !t1.$isClassMirror)
    throw H.wrapException(new P.ArgumentError(H.S(key) + " does not denote a class"));
  return tm.get$originalDeclaration();
},

Mirror: {"": "Object;", $isMirror: true},

InstanceMirror: {"": "Object;", $isInstanceMirror: true, $isMirror: true},

LibraryMirror: {"": "Object;", $isLibraryMirror: true, $isMirror: true},

ClassMirror: {"": "Object;", $isClassMirror: true, $isMirror: true},

MethodMirror: {"": "Object;", $isMethodMirror: true, $isMirror: true},

VariableMirror: {"": "Object;", $isVariableMirror: true, $isMirror: true},

ParameterMirror: {"": "Object;", $isParameterMirror: true, $isVariableMirror: true, $isMirror: true},

MirrorsUsed: {"": "Object;symbols,targets,metaTargets,override"}}],
["dart.typed_data", "dart:typed_data", , P, {
TypedData_ListMixin: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true, $isIterable: true, $asIterable: null},

TypedData_ListMixin_FixedLengthListMixin: {"": "TypedData_ListMixin+FixedLengthListMixin;", $asList: null, $asIterable: null},

TypedData_ListMixin0: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true, $isIterable: true, $asIterable: null},

TypedData_ListMixin_FixedLengthListMixin0: {"": "TypedData_ListMixin0+FixedLengthListMixin;", $asList: null, $asIterable: null},

TypedData_ListMixin1: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true, $isIterable: true, $asIterable: null},

TypedData_ListMixin_FixedLengthListMixin1: {"": "TypedData_ListMixin1+FixedLengthListMixin;", $asList: null, $asIterable: null},

TypedData_ListMixin2: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true, $isIterable: true, $asIterable: null},

TypedData_ListMixin_FixedLengthListMixin2: {"": "TypedData_ListMixin2+FixedLengthListMixin;", $asList: null, $asIterable: null},

TypedData_ListMixin3: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true, $isIterable: true, $asIterable: null},

TypedData_ListMixin_FixedLengthListMixin3: {"": "TypedData_ListMixin3+FixedLengthListMixin;", $asList: null, $asIterable: null},

TypedData_ListMixin4: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true, $isIterable: true, $asIterable: null},

TypedData_ListMixin_FixedLengthListMixin4: {"": "TypedData_ListMixin4+FixedLengthListMixin;", $asList: null, $asIterable: null},

TypedData_ListMixin5: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true, $isIterable: true, $asIterable: null},

TypedData_ListMixin_FixedLengthListMixin5: {"": "TypedData_ListMixin5+FixedLengthListMixin;", $asList: null, $asIterable: null},

TypedData_ListMixin6: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true, $isIterable: true, $asIterable: null},

TypedData_ListMixin_FixedLengthListMixin6: {"": "TypedData_ListMixin6+FixedLengthListMixin;", $asList: null, $asIterable: null},

TypedData_ListMixin7: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true, $isIterable: true, $asIterable: null},

TypedData_ListMixin_FixedLengthListMixin7: {"": "TypedData_ListMixin7+FixedLengthListMixin;", $asList: null, $asIterable: null},

Int64List: {"": "TypedData;", $isList: true,
  $asList: function() {
    return [J.JSInt];
  },
  $isEfficientLength: true,
  $isIterable: true,
  $asIterable: function() {
    return [J.JSInt];
  },
  $isJavaScriptIndexingBehavior: true,
  static: {
"": "Int64List_BYTES_PER_ELEMENT",
}

},

Uint64List: {"": "TypedData;", $isList: true,
  $asList: function() {
    return [J.JSInt];
  },
  $isEfficientLength: true,
  $isIterable: true,
  $asIterable: function() {
    return [J.JSInt];
  },
  $isJavaScriptIndexingBehavior: true,
  static: {
"": "Uint64List_BYTES_PER_ELEMENT",
}

},

TypedData: {"": "Interceptor;",
  _invalidIndex$2: function(receiver, index, $length) {
    var t1 = J.getInterceptor$n(index);
    if (t1.$lt(index, 0) || t1.$ge(index, $length))
      throw H.wrapException(P.RangeError$range(index, 0, $length));
    else
      throw H.wrapException(new P.ArgumentError("Invalid list index " + H.S(index)));
  },
  _checkIndex$2: function(receiver, index, $length) {
    if (index >>> 0 != index || J.$ge$n(index, $length))
      this._invalidIndex$2(receiver, index, $length);
  },
  _checkSublistArguments$3: function(receiver, start, end, $length) {
    this._checkIndex$2(receiver, start, $length + 1);
    return $length;
  },
  $isTypedData: true,
  "%": "DataView;ArrayBufferView;TypedData_ListMixin|TypedData_ListMixin_FixedLengthListMixin|TypedData_ListMixin0|TypedData_ListMixin_FixedLengthListMixin0|TypedData_ListMixin1|TypedData_ListMixin_FixedLengthListMixin1|TypedData_ListMixin2|TypedData_ListMixin_FixedLengthListMixin2|TypedData_ListMixin3|TypedData_ListMixin_FixedLengthListMixin3|TypedData_ListMixin4|TypedData_ListMixin_FixedLengthListMixin4|TypedData_ListMixin5|TypedData_ListMixin_FixedLengthListMixin5|TypedData_ListMixin6|TypedData_ListMixin_FixedLengthListMixin6|TypedData_ListMixin7|TypedData_ListMixin_FixedLengthListMixin7|Int64List|Uint64List"
},

Float32List: {"": "TypedData_ListMixin_FixedLengthListMixin;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  "+length": 0,
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  "+[]:1:0": 0,
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  "+[]=:2:0": 0,
  sublist$2: function(receiver, start, end) {
    var source, t1;
    source = receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, C.JS_CONST_ZYJ(receiver)));
    source.$dartCachedLength = source.length;
    t1 = new Float32Array(source);
    t1.$dartCachedLength = t1.length;
    return t1;
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $asList: function() {
    return [J.JSDouble];
  },
  $asIterable: function() {
    return [J.JSDouble];
  },
  $isList: true,
  $isEfficientLength: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Float32Array"
},

Float64List: {"": "TypedData_ListMixin_FixedLengthListMixin0;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  "+length": 0,
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  "+[]:1:0": 0,
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  "+[]=:2:0": 0,
  sublist$2: function(receiver, start, end) {
    var source, t1;
    source = receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, C.JS_CONST_ZYJ(receiver)));
    source.$dartCachedLength = source.length;
    t1 = new Float64Array(source);
    t1.$dartCachedLength = t1.length;
    return t1;
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $asList: function() {
    return [J.JSDouble];
  },
  $asIterable: function() {
    return [J.JSDouble];
  },
  $isList: true,
  $isEfficientLength: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Float64Array"
},

Int16List: {"": "TypedData_ListMixin_FixedLengthListMixin1;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  "+length": 0,
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  "+[]:1:0": 0,
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  "+[]=:2:0": 0,
  sublist$2: function(receiver, start, end) {
    var source, t1;
    source = receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, C.JS_CONST_ZYJ(receiver)));
    source.$dartCachedLength = source.length;
    t1 = new Int16Array(source);
    t1.$dartCachedLength = t1.length;
    return t1;
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $asList: function() {
    return [J.JSInt];
  },
  $asIterable: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Int16Array"
},

Int32List: {"": "TypedData_ListMixin_FixedLengthListMixin2;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  "+length": 0,
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  "+[]:1:0": 0,
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  "+[]=:2:0": 0,
  sublist$2: function(receiver, start, end) {
    var source, t1;
    source = receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, C.JS_CONST_ZYJ(receiver)));
    source.$dartCachedLength = source.length;
    t1 = new Int32Array(source);
    t1.$dartCachedLength = t1.length;
    return t1;
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $asList: function() {
    return [J.JSInt];
  },
  $asIterable: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Int32Array"
},

Int8List: {"": "TypedData_ListMixin_FixedLengthListMixin3;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  "+length": 0,
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  "+[]:1:0": 0,
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  "+[]=:2:0": 0,
  sublist$2: function(receiver, start, end) {
    var source, t1;
    source = receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, C.JS_CONST_ZYJ(receiver)));
    source.$dartCachedLength = source.length;
    t1 = new Int8Array(source);
    t1.$dartCachedLength = t1.length;
    return t1;
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $asList: function() {
    return [J.JSInt];
  },
  $asIterable: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Int8Array"
},

Uint16List: {"": "TypedData_ListMixin_FixedLengthListMixin4;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  "+length": 0,
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  "+[]:1:0": 0,
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  "+[]=:2:0": 0,
  sublist$2: function(receiver, start, end) {
    var source, t1;
    source = receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, C.JS_CONST_ZYJ(receiver)));
    source.$dartCachedLength = source.length;
    t1 = new Uint16Array(source);
    t1.$dartCachedLength = t1.length;
    return t1;
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $asList: function() {
    return [J.JSInt];
  },
  $asIterable: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Uint16Array"
},

Uint32List: {"": "TypedData_ListMixin_FixedLengthListMixin5;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  "+length": 0,
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  "+[]:1:0": 0,
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  "+[]=:2:0": 0,
  sublist$2: function(receiver, start, end) {
    var source, t1;
    source = receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, C.JS_CONST_ZYJ(receiver)));
    source.$dartCachedLength = source.length;
    t1 = new Uint32Array(source);
    t1.$dartCachedLength = t1.length;
    return t1;
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $asList: function() {
    return [J.JSInt];
  },
  $asIterable: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Uint32Array"
},

Uint8ClampedList: {"": "TypedData_ListMixin_FixedLengthListMixin6;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  "+length": 0,
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  "+[]:1:0": 0,
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  "+[]=:2:0": 0,
  sublist$2: function(receiver, start, end) {
    var source, t1;
    source = receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, C.JS_CONST_ZYJ(receiver)));
    source.$dartCachedLength = source.length;
    t1 = new Uint8ClampedArray(source);
    t1.$dartCachedLength = t1.length;
    return t1;
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $asList: function() {
    return [J.JSInt];
  },
  $asIterable: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "CanvasPixelArray|Uint8ClampedArray"
},

Uint8List: {"": "TypedData_ListMixin_FixedLengthListMixin7;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  "+length": 0,
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  "+[]:1:0": 0,
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  "+[]=:2:0": 0,
  sublist$2: function(receiver, start, end) {
    var source, t1;
    source = receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, C.JS_CONST_ZYJ(receiver)));
    source.$dartCachedLength = source.length;
    t1 = new Uint8Array(source);
    t1.$dartCachedLength = t1.length;
    return t1;
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $asList: function() {
    return [J.JSInt];
  },
  $asIterable: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true,
  "%": ";Uint8Array"
}}],
["html_common", "dart:html_common", , P, {
convertNativeToDart_Dictionary: function(object) {
  var dict, keys, t1, key;
  if (object == null)
    return;
  dict = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
  keys = Object.getOwnPropertyNames(object);
  for (t1 = new H.ListIterator(keys, keys.length, 0, null), H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(keys, "JSArray", 0)]); t1.moveNext$0();) {
    key = t1._current;
    dict.$indexSet(dict, key, object[key]);
  }
  return dict;
},

convertNativeToDart_DateTime: function(date) {
  return P.DateTime$fromMillisecondsSinceEpoch(date.getTime(), true);
},

convertNativeToDart_AcceptStructuredClone: function(object, mustCopy) {
  var copies = [];
  return new P.convertNativeToDart_AcceptStructuredClone_walk(mustCopy, new P.convertNativeToDart_AcceptStructuredClone_findSlot([], copies), new P.convertNativeToDart_AcceptStructuredClone_readSlot(copies), new P.convertNativeToDart_AcceptStructuredClone_writeSlot(copies)).call$1(object);
},

Device_isOpera: function() {
  if ($.Device__isOpera == null)
    $.Device__isOpera = J.contains$2$asx(window.navigator.userAgent, "Opera", 0);
  return $.Device__isOpera;
},

Device_isWebKit: function() {
  if ($.Device__isWebKit == null)
    $.Device__isWebKit = P.Device_isOpera() !== true && J.contains$2$asx(window.navigator.userAgent, "WebKit", 0);
  return $.Device__isWebKit;
},

convertNativeToDart_AcceptStructuredClone_findSlot: {"": "Closure;values_0,copies_1",
  call$1: function(value) {
    var t1, $length, i, t2;
    t1 = this.values_0;
    $length = t1.length;
    for (i = 0; i < $length; ++i) {
      t2 = t1[i];
      if (t2 == null ? value == null : t2 === value)
        return i;
    }
    t1.push(value);
    this.copies_1.push(null);
    return $length;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

convertNativeToDart_AcceptStructuredClone_readSlot: {"": "Closure;copies_2",
  call$1: function(i) {
    var t1 = this.copies_2;
    if (i >>> 0 !== i || i >= t1.length)
      throw H.ioore(t1, i);
    return t1[i];
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

convertNativeToDart_AcceptStructuredClone_writeSlot: {"": "Closure;copies_3",
  call$2: function(i, x) {
    var t1 = this.copies_3;
    if (i >>> 0 !== i || i >= t1.length)
      throw H.ioore(t1, i);
    t1[i] = x;
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

convertNativeToDart_AcceptStructuredClone_walk: {"": "Closure;mustCopy_4,findSlot_5,readSlot_6,writeSlot_7",
  call$1: function(e) {
    var slot, copy, t1, t2, key, $length, i;
    if (e == null)
      return e;
    if (typeof e === "boolean")
      return e;
    if (typeof e === "number")
      return e;
    if (typeof e === "string")
      return e;
    if (e instanceof Date)
      return P.convertNativeToDart_DateTime(e);
    if (e instanceof RegExp)
      throw H.wrapException(P.UnimplementedError$("structured clone of RegExp"));
    if (Object.getPrototypeOf(e) === Object.prototype) {
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (copy != null)
        return copy;
      copy = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
      this.writeSlot_7.call$2(slot, copy);
      for (t1 = Object.keys(e), t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();) {
        key = t2._current;
        copy.$indexSet(copy, key, this.call$1(e[key]));
      }
      return copy;
    }
    if (e instanceof Array) {
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (copy != null)
        return copy;
      t1 = J.getInterceptor$asx(e);
      $length = t1.get$length(e);
      copy = this.mustCopy_4 ? new Array($length) : e;
      this.writeSlot_7.call$2(slot, copy);
      if (typeof $length !== "number")
        throw H.iae($length);
      t2 = J.getInterceptor$ax(copy);
      i = 0;
      for (; i < $length; ++i)
        t2.$indexSet(copy, i, this.call$1(t1.$index(e, i)));
      return copy;
    }
    return e;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

CssClassSetImpl: {"": "Object;",
  toString$0: function(_) {
    var t1 = this.readClasses$0();
    return t1.join$1(t1, " ");
  },
  get$iterator: function(_) {
    var t1 = this.readClasses$0();
    t1 = new P.LinkedHashSetIterator(t1, t1._modifications, null, null);
    H.setRuntimeTypeInfo(t1, [null]);
    t1._cell = t1._set._first;
    return t1;
  },
  forEach$1: function(_, f) {
    var t1 = this.readClasses$0();
    t1.forEach$1(t1, f);
  },
  join$1: function(_, separator) {
    var t1 = this.readClasses$0();
    return t1.join$1(t1, separator);
  },
  map$1: function(_, f) {
    var t1 = this.readClasses$0();
    return H.MappedIterable_MappedIterable(t1, f, H.getRuntimeTypeArgument(t1, "IterableBase", 0), null);
  },
  where$1: function(_, f) {
    var t1, t2;
    t1 = this.readClasses$0();
    t2 = new H.WhereIterable(t1, f);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "IterableBase", 0)]);
    return t2;
  },
  any$1: function(_, f) {
    var t1 = this.readClasses$0();
    return t1.any$1(t1, f);
  },
  get$isEmpty: function(_) {
    return this.readClasses$0()._collection$_length === 0;
  },
  "+isEmpty": 0,
  get$isNotEmpty: function(_) {
    return this.readClasses$0()._collection$_length !== 0;
  },
  "+isNotEmpty": 0,
  get$length: function(_) {
    return this.readClasses$0()._collection$_length;
  },
  "+length": 0,
  contains$1: function(_, value) {
    var t1 = this.readClasses$0();
    return t1.contains$1(t1, value);
  },
  lookup$1: function(value) {
    var t1 = this.readClasses$0();
    return t1.contains$1(t1, value) ? value : null;
  },
  add$1: function(_, value) {
    return this.modify$1(new P.CssClassSetImpl_add_closure(value));
  },
  get$add: function(_receiver) {
    return new J.BoundClosure$i1(this, P.CssClassSetImpl.prototype.add$1, _receiver, "add$1");
  },
  remove$1: function(_, value) {
    var s, result;
    s = this.readClasses$0();
    result = s.remove$1(s, value);
    this.writeClasses$1(s);
    return result;
  },
  addAll$1: function(_, iterable) {
    this.modify$1(new P.CssClassSetImpl_addAll_closure(iterable));
  },
  get$first: function(_) {
    var t1 = this.readClasses$0();
    return t1.get$first(t1);
  },
  get$last: function(_) {
    var t1 = this.readClasses$0();
    return t1.get$last(t1);
  },
  get$single: function(_) {
    var t1 = this.readClasses$0();
    return t1.get$single(t1);
  },
  toList$1$growable: function(_, growable) {
    var t1 = this.readClasses$0();
    return t1.toList$1$growable(t1, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  firstWhere$2$orElse: function(_, test, orElse) {
    var t1 = this.readClasses$0();
    return t1.firstWhere$2$orElse(t1, test, orElse);
  },
  firstWhere$1: function($receiver, test) {
    return this.firstWhere$2$orElse($receiver, test, null);
  },
  elementAt$1: function(_, index) {
    var t1 = this.readClasses$0();
    return t1.elementAt$1(t1, index);
  },
  modify$1: function(f) {
    var s, ret;
    s = this.readClasses$0();
    ret = f.call$1(s);
    this.writeClasses$1(s);
    return ret;
  },
  $isEfficientLength: true,
  $isIterable: true,
  $asIterable: function() {
    return [J.JSString];
  }
},

CssClassSetImpl_add_closure: {"": "Closure;value_0",
  call$1: function(s) {
    return J.add$1$ax(s, this.value_0);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

CssClassSetImpl_addAll_closure: {"": "Closure;iterable_0",
  call$1: function(s) {
    return J.addAll$1$ax(s, this.iterable_0);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

FilteredElementList: {"": "ListBase;_html_common$_node,_childNodes",
  get$_filtered: function() {
    var t1 = this._childNodes;
    return P.List_List$from(t1.where$1(t1, new P.FilteredElementList__filtered_closure()), true, W.Element);
  },
  forEach$1: function(_, f) {
    H.IterableMixinWorkaround_forEach(this.get$_filtered(), f);
  },
  $indexSet: function(_, index, value) {
    var t1 = this.get$_filtered();
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    J.replaceWith$1$x(t1[index], value);
  },
  "+[]=:2:0": 0,
  set$length: function(_, newLength) {
    var len, t1;
    len = this.get$_filtered().length;
    t1 = J.getInterceptor$n(newLength);
    if (t1.$ge(newLength, len))
      return;
    else if (t1.$lt(newLength, 0))
      throw H.wrapException(new P.ArgumentError("Invalid list length"));
    this.removeRange$2(this, newLength, len);
  },
  "+length=": 0,
  add$1: function(_, value) {
    this._childNodes._this.appendChild(value);
  },
  get$add: function(_receiver) {
    return new J.BoundClosure$i1(this, P.FilteredElementList.prototype.add$1, _receiver, "add$1");
  },
  addAll$1: function(_, iterable) {
    var t1, t2;
    for (t1 = J.get$iterator$ax(iterable), t2 = this._childNodes._this; t1.moveNext$0();)
      t2.appendChild(t1.get$current());
  },
  contains$1: function(_, needle) {
    return false;
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    throw H.wrapException(P.UnsupportedError$("Cannot setRange on filtered list"));
  },
  removeRange$2: function(_, start, end) {
    H.IterableMixinWorkaround_forEach(C.JSArray_methods.sublist$2(this.get$_filtered(), start, end), new P.FilteredElementList_removeRange_closure());
  },
  remove$1: function(_, element) {
    return false;
  },
  get$length: function(_) {
    return this.get$_filtered().length;
  },
  "+length": 0,
  $index: function(_, index) {
    var t1 = this.get$_filtered();
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    return t1[index];
  },
  "+[]:1:0": 0,
  get$iterator: function(_) {
    var t1, t2;
    t1 = this.get$_filtered();
    t2 = new H.ListIterator(t1, t1.length, 0, null);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]);
    return t2;
  },
  $asListBase: null,
  $asList: null,
  $asIterable: null
},

FilteredElementList__filtered_closure: {"": "Closure;",
  call$1: function(n) {
    var t1 = J.getInterceptor(n);
    return typeof n === "object" && n !== null && !!t1.$isElement;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

FilteredElementList_removeRange_closure: {"": "Closure;",
  call$1: function(el) {
    return J.remove$0$ax(el);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
}}],
["input_autocomplete", "package:autocomplete_ui/input_autocomplete.dart", , R, {
highlightTextAndHtmlEscape: function(text, query) {
  var span, t1, html, idx, t2, prefix, t3, value, postfix;
  span = W._ElementFactoryProvider_createElement_tag("span", null);
  t1 = J.getInterceptor$x(span);
  t1.set$text(span, text);
  html = t1.get$innerHtml(span);
  t1 = J.getInterceptor$asx(query);
  if (t1.get$isEmpty(query) === true)
    return html;
  html.toString;
  idx = C.JSString_methods.indexOf$1(html.toLowerCase(), query);
  if (idx >= 0) {
    t2 = J.getInterceptor$s(html);
    prefix = t2.substring$2(html, 0, idx);
    t3 = t1.get$length(query);
    if (typeof t3 !== "number")
      throw H.iae(t3);
    value = t2.substring$2(html, idx, idx + t3);
    t1 = t1.get$length(query);
    if (typeof t1 !== "number")
      throw H.iae(t1);
    postfix = t2.substring$1(html, idx + t1);
    html = prefix + "<strong>" + value + "</strong>" + postfix;
  }
  return html;
},

AutocompleteChoice: {"": "Object;"},

AutocompleteChoiceImpl: {"": "AutocompleteChoice;key>,label,obj", $isAutocompleteChoiceImpl: true},

BaseAutocompleteChoiceRenderer: {"": "Object;"},

AutocompleteChoiceRendererImpl: {"": "BaseAutocompleteChoiceRenderer;",
  renderChoice$2: function(_, choice, query) {
    var t1 = J.getInterceptor(choice);
    if (typeof choice === "object" && choice !== null && !!t1.$isAutocompleteChoiceImpl) {
      t1 = W._ElementFactoryProvider_createElement_tag("div", null);
      J.set$innerHtml$x(t1, R.highlightTextAndHtmlEscape(H.S(choice.label), query));
      return t1;
    }
    throw H.wrapException(new P.ArgumentError("Invalid choice " + H.S(choice)));
  },
  "+renderChoice:2:0": 0
},

SimpleStringDatasource: {"": "Object;_givenChoices,_choices",
  query$1: function(_, query) {
    var t1, completer, t2;
    t1 = [P.Iterable, R.AutocompleteChoice];
    completer = new P._AsyncCompleter(P._Future$(t1));
    H.setRuntimeTypeInfo(completer, [t1]);
    t1 = this._choices;
    if (query.length === 0) {
      t2 = completer.future;
      if (t2._state !== 0)
        H.throwExpression(new P.StateError("Future already completed"));
      t2._asyncComplete$1(t1);
    } else {
      t2 = "looking for " + query + " in ";
      t1.toString;
      t1 = new H.WhereIterable(t1, new R.SimpleStringDatasource_query_closure(query));
      H.setRuntimeTypeInfo(t1, [null]);
      P.print(t2 + t1.get$length(t1));
      t1 = this._choices;
      t1.toString;
      t1 = new H.WhereIterable(t1, new R.SimpleStringDatasource_query_closure0(query));
      H.setRuntimeTypeInfo(t1, [null]);
      t2 = completer.future;
      if (t2._state !== 0)
        H.throwExpression(new P.StateError("Future already completed"));
      t2._asyncComplete$1(t1);
    }
    return completer.future;
  },
  objectByKey$1: function(key) {
    var t1, t2, choice;
    for (t1 = this._choices, t1.toString, t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();) {
      choice = t2._current;
      if (J.$eq(J.get$key$x(choice), key))
        return choice;
    }
    return;
  },
  SimpleStringDatasource$1: function(_givenChoices) {
    var t1, choice, t2;
    this._choices = P.List_List(null, null);
    for (t1 = J.get$iterator$ax(this._givenChoices); t1.moveNext$0();) {
      choice = t1.get$current();
      t2 = J.getInterceptor(choice);
      this._choices.push(new R.AutocompleteChoiceImpl(t2.toString$0(choice), t2.toString$0(choice), choice));
    }
  },
  $isSimpleStringDatasource: true,
  static: {
SimpleStringDatasource$: function(_givenChoices) {
  var t1 = new R.SimpleStringDatasource(_givenChoices, null);
  t1.SimpleStringDatasource$1(_givenChoices);
  return t1;
}}

},

SimpleStringDatasource_query_closure: {"": "Closure;query_0",
  call$1: function(choice) {
    return C.JSString_methods.contains$1(J.toLowerCase$0$s(J.get$key$x(choice)), this.query_0);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

SimpleStringDatasource_query_closure0: {"": "Closure;query_1",
  call$1: function(choice) {
    return C.JSString_methods.contains$1(J.toLowerCase$0$s(J.get$key$x(choice)), this.query_1);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

ValueHolder: {"": ["Object_ChangeNotifier;_input_autocomplete$__$inputHasFocus,_input_autocomplete$__$filteredChoices,_input_autocomplete$__$xyz,_input_autocomplete$__$hasSearched,_input_autocomplete$__$mynull,_input_autocomplete$__$searchquery,_focusedItemIndex@-,_changes,_records", null, null, null, null, null, null, function() {
    return [C.C_ObservableProperty];
  }, null, null],
  get$inputHasFocus: function() {
    return this._input_autocomplete$__$inputHasFocus;
    "24,20,21";
  },
  "+inputHasFocus": 1,
  set$inputHasFocus: function(value) {
    this._input_autocomplete$__$inputHasFocus = this.notifyPropertyChange$3(this, C.Symbol_inputHasFocus, this._input_autocomplete$__$inputHasFocus, value);
    "11,16,24,20";
  },
  "+inputHasFocus=": 1,
  get$filteredChoices: function() {
    return this._input_autocomplete$__$filteredChoices;
    "49,20,21";
  },
  "+filteredChoices": 1,
  set$filteredChoices: function(value) {
    this._input_autocomplete$__$filteredChoices = this.notifyPropertyChange$3(this, C.Symbol_filteredChoices, this._input_autocomplete$__$filteredChoices, value);
    "11,16,49,20";
  },
  "+filteredChoices=": 1,
  get$xyz: function() {
    return this._input_autocomplete$__$xyz;
    "7,20,21";
  },
  "+xyz": 1,
  set$xyz: function(value) {
    this._input_autocomplete$__$xyz = this.notifyPropertyChange$3(this, C.Symbol_xyz, this._input_autocomplete$__$xyz, value);
    "11,16,7,20";
  },
  "+xyz=": 1,
  get$hasSearched: function() {
    return this._input_autocomplete$__$hasSearched;
    "24,20,21";
  },
  "+hasSearched": 1,
  set$hasSearched: function(value) {
    this._input_autocomplete$__$hasSearched = this.notifyPropertyChange$3(this, C.Symbol_hasSearched, this._input_autocomplete$__$hasSearched, value);
    "11,16,24,20";
  },
  "+hasSearched=": 1,
  get$mynull: function() {
    return this._input_autocomplete$__$mynull;
    "0,20,21";
  },
  "+mynull": 1,
  set$mynull: function(value) {
    this._input_autocomplete$__$mynull = this.notifyPropertyChange$3(this, C.Symbol_mynull, this._input_autocomplete$__$mynull, value);
    "11,16,0,20";
  },
  "+mynull=": 1,
  get$searchquery: function(_) {
    return this._input_autocomplete$__$searchquery;
    "7,20,21";
  },
  "+searchquery": 1,
  set$searchquery: function(_, value) {
    this._input_autocomplete$__$searchquery = this.notifyPropertyChange$3(this, C.Symbol_searchquery, this._input_autocomplete$__$searchquery, value);
    "11,16,7,20";
  },
  "+searchquery=": 1
},

Object_ChangeNotifier: {"": "Object+ChangeNotifier;", $isObservable: true},

InputAutocompleteComponent: {"": ["PolymerElement_ChangeNotifier0;_renderer%-,_input_autocomplete$__$datasource%-,_input_autocomplete$__$model%-,_input_autocomplete$__$selectedchoice%-,_changes,_records,_changes,_records,_declaration,_observers,_unbound,_unbindAllJob,_propertyObserver,syntax,_shadowRoots,$$-", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, function() {
    return [C.C_Reflectable];
  }],
  get$datasource: function(receiver) {
    return receiver._input_autocomplete$__$datasource;
    "50,20,21,22";
  },
  "+datasource": 1,
  set$datasource: function(receiver, value) {
    receiver._input_autocomplete$__$datasource = this.notifyPropertyChange$3(receiver, C.Symbol_datasource, receiver._input_autocomplete$__$datasource, value);
    "11,16,50,20";
  },
  "+datasource=": 1,
  get$model: function(receiver) {
    return receiver._input_autocomplete$__$model;
    "51,20,21";
  },
  "+model": 1,
  set$model: function(receiver, value) {
    receiver._input_autocomplete$__$model = this.notifyPropertyChange$3(receiver, C.Symbol_model, receiver._input_autocomplete$__$model, value);
    "11,16,51,20";
  },
  "+model=": 1,
  get$selectedchoice: function(receiver) {
    return receiver._input_autocomplete$__$selectedchoice;
    "19,20,21,22";
  },
  "+selectedchoice": 1,
  set$selectedchoice: function(receiver, value) {
    receiver._input_autocomplete$__$selectedchoice = this.notifyPropertyChange$3(receiver, C.Symbol_selectedchoice, receiver._input_autocomplete$__$selectedchoice, value);
    "11,16,19,20";
  },
  "+selectedchoice=": 1,
  get$applyAuthorStyles: function(receiver) {
    return true;
    "24";
  },
  "+applyAuthorStyles": 1,
  set$renderer: function(receiver, renderer) {
    receiver._renderer = renderer;
    "11,52,23,22";
  },
  "+renderer=": 1,
  get$renderer: function(receiver) {
    if (receiver._renderer == null)
      receiver._renderer = new R.AutocompleteChoiceRendererImpl();
    return receiver._renderer;
    "23,22";
  },
  "+renderer": 1,
  isFocused$1: function(receiver, choice) {
    var t1;
    if (!J.$lt$n(receiver._input_autocomplete$__$model.get$_focusedItemIndex(), 0)) {
      t1 = receiver._input_autocomplete$__$model;
      t1 = J.$ge$n(t1.get$_focusedItemIndex(), J.get$length$asx(t1.get$filteredChoices()));
    } else
      t1 = true;
    if (t1)
      return false;
    return J.$eq(J.$index$asx(receiver._input_autocomplete$__$model.get$filteredChoices(), receiver._input_autocomplete$__$model.get$_focusedItemIndex()), choice);
    "24,53,19";
  },
  "+isFocused:1:0": 1,
  set$choices: function(receiver, choices) {
    var t1;
    P.print("Setting choices. to " + H.S(choices));
    t1 = R.SimpleStringDatasource$(choices);
    receiver._input_autocomplete$__$datasource = this.notifyPropertyChange$3(receiver, C.Symbol_datasource, receiver._input_autocomplete$__$datasource, t1);
    "11,54,42,22";
  },
  "+choices=": 1,
  get$choices: function(receiver) {
    var t1 = receiver._input_autocomplete$__$datasource;
    return t1 == null ? null : H.interceptedTypeCast(t1, "$isSimpleStringDatasource")._givenChoices;
    "42,22";
  },
  "+choices": 1,
  _focusNext$1: function(receiver, next) {
    var newfocus = J.$add$ns(receiver._input_autocomplete$__$model.get$_focusedItemIndex(), next);
    if (J.$lt$n(newfocus, 0))
      newfocus = 0;
    if (J.$ge$n(newfocus, J.get$length$asx(receiver._input_autocomplete$__$model.get$filteredChoices())))
      newfocus = J.$sub$n(J.get$length$asx(receiver._input_autocomplete$__$model.get$filteredChoices()), 1);
    receiver._input_autocomplete$__$model.set$_focusedItemIndex(newfocus);
    "11,55,15";
  },
  "+_focusNext:1:0": 1,
  keyDown$3: function(receiver, $event, detail, target) {
    var t1 = J.getInterceptor$x($event);
    switch (t1.get$keyCode($event)) {
      case 40:
        this._focusNext$1(receiver, 1);
        t1.preventDefault$0($event);
        break;
      case 38:
        this._focusNext$1(receiver, -1);
        t1.preventDefault$0($event);
        break;
      case 13:
        this.selectChoice$1(receiver, J.$index$asx(receiver._input_autocomplete$__$model.get$filteredChoices(), receiver._input_autocomplete$__$model.get$_focusedItemIndex()));
        break;
      default:
    }
    "11,56,57,58,11,59,60";
  },
  "+keyDown:3:0": 1,
  selectCurrentFocus$0: function(receiver) {
    this.selectChoice$1(receiver, J.$index$asx(receiver._input_autocomplete$__$model.get$filteredChoices(), receiver._input_autocomplete$__$model.get$_focusedItemIndex()));
    "11";
  },
  "+selectCurrentFocus:0:0": 1,
  selectChoice$1: function(receiver, choice) {
    P.print("selectChoice");
    receiver._input_autocomplete$__$selectedchoice = this.notifyPropertyChange$3(receiver, C.Symbol_selectedchoice, receiver._input_autocomplete$__$selectedchoice, choice);
    J.blur$0$x(J.query$1$x(this.getShadowRoot$1(receiver, "tapo-input-autocomplete"), "input"));
    if (choice != null)
      J.set$value$x(J.query$1$x(this.getShadowRoot$1(receiver, "tapo-input-autocomplete"), "input"), J.get$key$x(choice));
    else
      J.set$value$x(J.query$1$x(this.getShadowRoot$1(receiver, "tapo-input-autocomplete"), "input"), "");
    "11,53,19";
  },
  "+selectChoice:1:0": 1,
  mouseUpChoice$3: function(receiver, $event, detail, target) {
    var t1, choiceKey, choice;
    t1 = J.getInterceptor(target);
    if (typeof target === "object" && target !== null && !!t1.$isElement) {
      choiceKey = new W._ElementAttributeMap(target)._element.getAttribute("choice-key");
      choice = receiver._input_autocomplete$__$datasource.objectByKey$1(choiceKey);
      if (choice == null)
        P.print("could not find choice with key " + choiceKey);
      this.selectChoice$1(receiver, choice);
    }
    "11,56,61,58,11,59,60";
  },
  "+mouseUpChoice:3:0": 1,
  mouseOverChoice$3: function(receiver, $event, detail, target) {
    var t1, choiceKey, choice, idx;
    P.print("mouseOver");
    t1 = J.getInterceptor(target);
    if (typeof target === "object" && target !== null && !!t1.$isElement) {
      choiceKey = new W._ElementAttributeMap(target)._element.getAttribute("choice-key");
      choice = receiver._input_autocomplete$__$datasource.objectByKey$1(choiceKey);
      idx = J.indexOf$1$asx(receiver._input_autocomplete$__$model.get$filteredChoices(), choice);
      t1 = receiver._input_autocomplete$__$model;
      if (idx === t1.get$_focusedItemIndex() || idx < 0)
        return;
      t1.set$_focusedItemIndex(idx);
      P.print("focusedItemIndex: " + H.S(idx));
    }
    "11,56,61,58,11,59,60";
  },
  "+mouseOverChoice:3:0": 1,
  mouseDown$3: function(receiver, $event, detail, target) {
    P.print("mouse down");
    J.preventDefault$0$x($event);
    "11,56,61,58,11,59,60";
  },
  "+mouseDown:3:0": 1,
  keyUp$3: function(receiver, e, detail, target) {
    this._doSearch$0(receiver);
    "11,62,61,58,11,59,60";
  },
  "+keyUp:3:0": 1,
  get$_input: function(receiver) {
    return J.query$1$x(this.getShadowRoot$1(receiver, "tapo-input-autocomplete"), "input");
    "63";
  },
  "+_input": 1,
  _doSearch$0: function(receiver) {
    var t1 = J.get$classes$x(J.query$1$x(this.getShadowRoot$1(receiver, "tapo-input-autocomplete"), "input"));
    t1.add$1(t1, "loading");
    J.query$1$x(receiver._input_autocomplete$__$datasource, J.toLowerCase$0$s(J.get$value$x(J.query$1$x(this.getShadowRoot$1(receiver, "tapo-input-autocomplete"), "input")))).then$1(new R.InputAutocompleteComponent__doSearch_closure(receiver));
    "11";
  },
  "+_doSearch:0:0": 1,
  inputFocus$3: function(receiver, e, detail, target) {
    receiver._input_autocomplete$__$model.set$xyz("haha " + H.S(P.DateTime$_now()));
    P.print("inputFocus " + H.S(receiver._input_autocomplete$__$model.get$xyz()));
    this._positionCompleteBox$0(receiver);
    receiver._input_autocomplete$__$model.set$inputHasFocus(true);
    "11,62,61,58,11,59,60";
  },
  "+inputFocus:3:0": 1,
  inputBlur$3: function(receiver, e, detail, target) {
    receiver._input_autocomplete$__$model.set$inputHasFocus(false);
    "11,62,61,58,11,59,60";
  },
  "+inputBlur:3:0": 1,
  enteredView$0: function(receiver) {
    var el, t1;
    A.Polymer.prototype.enteredView$0.call(this, receiver);
    J.get$changes$x(receiver._input_autocomplete$__$model).listen$1(new R.InputAutocompleteComponent_enteredView_closure(receiver));
    this._positionCompleteBox$0(receiver);
    el = J.query$1$x(this.getShadowRoot$1(receiver, "tapo-input-autocomplete"), "input");
    t1 = J.getInterceptor$x(el);
    t1.get$onFocus(el).listen$1(new R.InputAutocompleteComponent_enteredView_closure0(receiver));
    t1.get$onBlur(el).listen$1(new R.InputAutocompleteComponent_enteredView_closure1(receiver));
    "11";
  },
  "+enteredView:0:0": 1,
  renderChoice$1: function(receiver, choice) {
    var input = J.query$1$x(this.getShadowRoot$1(receiver, "tapo-input-autocomplete"), "input");
    P.print("we need to set " + J.get$outerHtml$x(J.renderChoice$2$x(this.get$renderer(receiver), choice, J.get$value$x(input))));
    return W.Element_Element$html("<span>test<strong>asdf</strong></span>", null, null);
    "11,53,19";
  },
  "+renderChoice:1:0": 1,
  _parseStyleInt$1: function(receiver, styleValue) {
    var t1, pos;
    t1 = J.getInterceptor$asx(styleValue);
    pos = t1.indexOf$1(styleValue, "px");
    return H.Primitives_parseInt(pos > 0 ? t1.substring$2(styleValue, 0, pos) : styleValue, null, null);
    "64,65,7";
  },
  "+_parseStyleInt:1:0": 1,
  _positionCompleteBox$0: function(receiver) {
    var $content, input, t1, rect, t2, t3, t4, style, t5, marginLeft;
    $content = J.query$1$x(this.getShadowRoot$1(receiver, "tapo-input-autocomplete"), ".autocomplete-content-wrapper-marker");
    if ($content == null) {
      P.print("unable to find autocomplete-content");
      return;
    }
    input = J.query$1$x(this.getShadowRoot$1(receiver, "tapo-input-autocomplete"), "input");
    t1 = J.getInterceptor$x(input);
    rect = t1.getBoundingClientRect$0(input);
    t2 = J.getInterceptor$x($content);
    t3 = J.get$width$x(t2.getBoundingClientRect$0($content));
    t4 = t2.get$clientWidth($content);
    if (typeof t3 !== "number")
      throw t3.$sub();
    if (typeof t4 !== "number")
      throw H.iae(t4);
    style = t1.getComputedStyle$0(input);
    t1 = J.getInterceptor$x(rect);
    J.set$top$x(t2.get$style($content), H.S(t1.get$height(rect)) + "px");
    t5 = J.getInterceptor$x(style);
    marginLeft = this._parseStyleInt$1(receiver, t5.get$marginLeft(style));
    this._parseStyleInt$1(receiver, t5.get$marginRight(style));
    J.set$left$x(t2.get$style($content), H.S(marginLeft) + "px");
    t2 = t2.get$style($content);
    t1 = t1.get$width(rect);
    if (typeof t1 !== "number")
      throw t1.$sub();
    J.set$width$x(t2, H.S(t1 - (t3 - t4)) + "px");
    "11";
  },
  "+_positionCompleteBox:0:0": 1,
  InputAutocompleteComponent$created$0: function(receiver) {
    B.onPropertyChange(receiver, C.Symbol_datasource, new R.InputAutocompleteComponent$created_closure());
    "11";
  },
  "@": function() {
    return [C.CustomTag_8aB];
  },
  static: {
InputAutocompleteComponent$created: function(receiver) {
  var t1, t2, t3, t4, t5;
  t1 = $.get$Polymer__polymerSyntax();
  t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
  t3 = J.JSString;
  t4 = W.Element;
  t5 = new B.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null);
  H.setRuntimeTypeInfo(t5, [t3, t4]);
  receiver._input_autocomplete$__$model = new R.ValueHolder(false, null, null, false, null, "", -1, null, null);
  receiver.syntax = t1;
  receiver._shadowRoots = t2;
  receiver.$$ = t5;
  C.InputAutocompleteComponent_methods.Element$created$0(receiver);
  C.InputAutocompleteComponent_methods.PolymerElement$created$0(receiver);
  C.InputAutocompleteComponent_methods.InputAutocompleteComponent$created$0(receiver);
  return receiver;
  "10";
},

"+new InputAutocompleteComponent$created:0:0": 1}

},

"+InputAutocompleteComponent": [],

PolymerElement_ChangeNotifier0: {"": "PolymerElement+ChangeNotifier;", $isObservable: true},

InputAutocompleteComponent$created_closure: {"": "Closure;",
  call$0: function() {
    P.print("datasource changed.");
    "11";
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+InputAutocompleteComponent$created_closure": [],

InputAutocompleteComponent__doSearch_closure: {"": "Closure;this_0-",
  call$1: function(matches) {
    var t1, t2, t3;
    t1 = this.this_0;
    t2 = J.getInterceptor$x(t1);
    t2.get$_input_autocomplete$__$model(t1).set$filteredChoices(J.toList$0$ax(matches));
    t3 = J.get$classes$x(J.query$1$x(t2.getShadowRoot$1(t1, "tapo-input-autocomplete"), "input"));
    t3.remove$1(t3, "loading");
    t2._positionCompleteBox$0(t1);
    "11,66,11";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+InputAutocompleteComponent__doSearch_closure": [],

InputAutocompleteComponent_enteredView_closure: {"": "Closure;this_0-",
  call$1: function(records) {
    var t1 = J.get$_input_autocomplete$__$model$x(this.this_0);
    t1.set$hasSearched(t1.get$filteredChoices() != null);
    "11,67,11";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+InputAutocompleteComponent_enteredView_closure": [],

InputAutocompleteComponent_enteredView_closure0: {"": "Closure;this_1-",
  call$1: function(e) {
    return J.inputFocus$3$x(this.this_1, null, null, null);
    "11,62,11";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+InputAutocompleteComponent_enteredView_closure": [],

InputAutocompleteComponent_enteredView_closure1: {"": "Closure;this_2-",
  call$1: function(e) {
    J.get$_input_autocomplete$__$model$x(this.this_2).set$inputHasFocus(false);
    return;
    "11,62,11";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+InputAutocompleteComponent_enteredView_closure": []}],
["lib_input_autocomplete_html_0", "package:autocomplete_ui/input_autocomplete.html.0.dart", , O, {
_init: function() {
  A.Polymer_register("tapo-input-autocomplete", C.Type_dcN);
  "11,12";
},

"+_init:0:0": 1}],
["logging", "package:logging/logging.dart", , N, {
Logger: {"": "Object;name>,parent>,_level,_children>,children>,_logging$_controller",
  get$fullName: function() {
    var t1, t2, t3;
    t1 = this.parent;
    t2 = t1 == null || J.$eq(J.get$name$x(t1), "");
    t3 = this.name;
    return t2 ? t3 : t1.get$fullName() + "." + t3;
  },
  get$level: function() {
    if ($.hierarchicalLoggingEnabled) {
      var t1 = this.parent;
      if (t1 != null)
        return t1.get$level();
    }
    return $._rootLevel;
  },
  isLoggable$1: function(value) {
    return value.value >= this.get$level().value;
  },
  log$4: function(logLevel, message, error, stackTrace) {
    var t1, t2, t3, record, target;
    if (logLevel.value >= this.get$level().value) {
      t1 = this.get$fullName();
      t2 = P.DateTime$_now();
      t3 = $.LogRecord__nextNumber;
      $.LogRecord__nextNumber = t3 + 1;
      record = new N.LogRecord(logLevel, message, t1, t2, t3, error, stackTrace);
      if ($.hierarchicalLoggingEnabled)
        for (target = this; target != null;) {
          t1 = J.getInterceptor$x(target);
          t1._publish$1(target, record);
          target = t1.get$parent(target);
        }
      else
        J._publish$1$x(N.Logger_Logger(""), record);
    }
  },
  fine$3: function(message, error, stackTrace) {
    return this.log$4(C.Level_FINE_500, message, error, stackTrace);
  },
  fine$1: function(message) {
    return this.fine$3(message, null, null);
  },
  info$3: function(message, error, stackTrace) {
    return this.log$4(C.Level_INFO_800, message, error, stackTrace);
  },
  info$1: function(message) {
    return this.info$3(message, null, null);
  },
  warning$3: function(message, error, stackTrace) {
    return this.log$4(C.Level_WARNING_900, message, error, stackTrace);
  },
  warning$1: function(message) {
    return this.warning$3(message, null, null);
  },
  _publish$1: function(_, record) {
  },
  Logger$_internal$3: function($name, $parent, children) {
    var t1 = this.parent;
    if (t1 != null) {
      t1 = J.get$_children$x(t1);
      t1.$indexSet(t1, this.name, this);
    }
  },
  $isLogger: true,
  static: {
"": "Logger__loggers",
Logger_Logger: function($name) {
  return $.get$Logger__loggers().putIfAbsent$2($name, new N.Logger_Logger_closure($name));
},

Logger_Logger$_named: function($name) {
  var dot, $parent, thisName;
  if (C.JSString_methods.startsWith$1($name, "."))
    throw H.wrapException(new P.ArgumentError("name shouldn't start with a '.'"));
  dot = C.JSString_methods.lastIndexOf$1($name, ".");
  if (dot === -1) {
    $parent = $name !== "" ? N.Logger_Logger("") : null;
    thisName = $name;
  } else {
    $parent = N.Logger_Logger(C.JSString_methods.substring$2($name, 0, dot));
    thisName = C.JSString_methods.substring$1($name, dot + 1);
  }
  return N.Logger$_internal(thisName, $parent, P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, N.Logger));
},

Logger$_internal: function($name, $parent, children) {
  var t1 = new F.UnmodifiableMapView0(children);
  H.setRuntimeTypeInfo(t1, [null, null]);
  t1 = new N.Logger($name, $parent, null, children, t1, null);
  t1.Logger$_internal$3($name, $parent, children);
  return t1;
}}

},

Logger_Logger_closure: {"": "Closure;name_0",
  call$0: function() {
    return N.Logger_Logger$_named(this.name_0);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Level: {"": "Object;name>,value>",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$isLevel && this.value === other.value;
  },
  $lt: function(_, other) {
    var t1 = J.get$value$x(other);
    if (typeof t1 !== "number")
      throw H.iae(t1);
    return this.value < t1;
  },
  $le: function(_, other) {
    var t1 = J.get$value$x(other);
    if (typeof t1 !== "number")
      throw H.iae(t1);
    return this.value <= t1;
  },
  $gt: function(_, other) {
    var t1 = J.get$value$x(other);
    if (typeof t1 !== "number")
      throw H.iae(t1);
    return this.value > t1;
  },
  $ge: function(_, other) {
    var t1 = J.get$value$x(other);
    if (typeof t1 !== "number")
      throw H.iae(t1);
    return this.value >= t1;
  },
  compareTo$1: function(_, other) {
    var t1 = J.get$value$x(other);
    if (typeof t1 !== "number")
      throw H.iae(t1);
    return this.value - t1;
  },
  get$hashCode: function(_) {
    return this.value;
  },
  toString$0: function(_) {
    return this.name;
  },
  $isLevel: true,
  static: {
"": "Level_ALL,Level_OFF,Level_FINEST,Level_FINER,Level_FINE,Level_CONFIG,Level_INFO,Level_WARNING,Level_SEVERE,Level_SHOUT",
}

},

LogRecord: {"": "Object;level<,message>,loggerName,time,sequenceNumber,error>,stackTrace<",
  toString$0: function(_) {
    return "[" + this.level.name + "] " + this.loggerName + ": " + this.message;
  },
  static: {
"": "LogRecord__nextNumber",
}

}}],
["metadata", "/Volumes/mydata/data/dev/dart/dart-sdk/lib/html/html_common/metadata.dart", , B, {
SupportedBrowser: {"": "Object;browserName,minimumVersion", static: {
"": "SupportedBrowser_CHROME,SupportedBrowser_FIREFOX,SupportedBrowser_IE,SupportedBrowser_OPERA,SupportedBrowser_SAFARI",
}
},

Experimental: {"": "Object;"},

DomName: {"": "Object;name>"},

DocsEditable: {"": "Object;"},

Unstable: {"": "Object;"}}],
["observe", "package:observe/observe.dart", , B, {
onPropertyChange: function(source, sourceName, callback) {
  return J.get$changes$x(source).listen$1(new B.onPropertyChange_closure(sourceName, callback));
},

_notifyPropertyChange: function(obj, field, oldValue, newValue) {
  var t1, t2;
  t1 = J.getInterceptor$x(obj);
  if (t1.get$hasObservers(obj) && !J.$eq(oldValue, newValue)) {
    t2 = new B.PropertyChangeRecord(obj, field, oldValue, newValue);
    H.setRuntimeTypeInfo(t2, [null]);
    t1.notifyChange$1(obj, t2);
  }
  return newValue;
},

_changeRecordMatches: function(record, key) {
  var t1 = J.getInterceptor(record);
  if (typeof record === "object" && record !== null && !!t1.$isListChangeRecord)
    return typeof key === "number" && Math.floor(key) === key && record.indexChanged$1(key);
  if (typeof record === "object" && record !== null && !!t1.$isPropertyChangeRecord)
    return J.$eq(record.name, key);
  if (typeof record === "object" && record !== null && !!t1.$isMapChangeRecord) {
    t1 = J.getInterceptor$x(key);
    if (typeof key === "object" && key !== null && !!t1.$isSymbol)
      key = t1.get$_name(key);
    return J.$eq(record.key, key);
  }
  return false;
},

_getObjectProperty: function(object, property) {
  var t1, t2, t3, result;
  if (object == null)
    return;
  t1 = J.getInterceptor(object);
  if (typeof object === "object" && object !== null && (object.constructor === Array || !!t1.$isList) && typeof property === "number" && Math.floor(property) === property) {
    if (typeof property !== "number")
      throw property.$ge();
    if (property >= 0) {
      t2 = t1.get$length(object);
      if (typeof t2 !== "number")
        throw H.iae(t2);
      t2 = property < t2;
    } else
      t2 = false;
    if (t2)
      return t1.$index(object, property);
    else
      return;
  }
  t2 = J.getInterceptor$x(property);
  t3 = typeof property === "object" && property !== null && !!t2.$isSymbol;
  if (t3) {
    result = B._tryGetField(H.reflect(object), property);
    if (result != null)
      return result.reflectee;
  }
  if (typeof object === "object" && object !== null && !!t1.$isMap)
    return t1.$index(object, t3 ? t2.get$_name(property) : property);
  return;
},

_setObjectProperty: function(object, property, value) {
  var t1, t2, t3;
  t1 = J.getInterceptor(object);
  if (typeof object === "object" && object !== null && (object.constructor === Array || !!t1.$isList) && typeof property === "number" && Math.floor(property) === property) {
    if (typeof property !== "number")
      throw property.$ge();
    if (property >= 0) {
      t2 = t1.get$length(object);
      if (typeof t2 !== "number")
        throw H.iae(t2);
      t2 = property < t2;
    } else
      t2 = false;
    if (t2) {
      t1.$indexSet(object, property, value);
      return true;
    } else
      return false;
  }
  t2 = J.getInterceptor$x(property);
  t3 = typeof property === "object" && property !== null && !!t2.$isSymbol;
  if (t3)
    if (B._trySetField(H.reflect(object), property, value) === true)
      return true;
  if (typeof object === "object" && object !== null && !!t1.$isMap) {
    t1.$indexSet(object, t3 ? t2.get$_name(property) : property, value);
    return true;
  }
  return false;
},

_tryGetField: function(mirror, $name) {
  var t1, exception, t2;
  try {
    t1 = mirror.getField$1($name);
    return t1;
  } catch (exception) {
    t1 = H.unwrapException(exception);
    t2 = J.getInterceptor(t1);
    if (typeof t1 === "object" && t1 !== null && !!t2.$isNoSuchMethodError) {
      if (B._hasMember(mirror, $name, new B._tryGetField_closure()))
        throw exception;
      return;
    } else
      throw exception;
  }

},

_trySetField: function(mirror, $name, value) {
  var exception, t1, t2;
  try {
    mirror.setField$2($name, value);
    return true;
  } catch (exception) {
    t1 = H.unwrapException(exception);
    t2 = J.getInterceptor(t1);
    if (typeof t1 === "object" && t1 !== null && !!t2.$isNoSuchMethodError) {
      if (B._hasMember(mirror, $name, new B._trySetField_closure()) || B._hasMember(mirror, new H.Symbol0(H.Symbol_validate(H.S(J.get$_name$x($name)) + "=")), null))
        throw exception;
      return false;
    } else
      throw exception;
  }

},

_hasMember: function(mirror, $name, test) {
  var type, t1, member, t2, exception;
  type = H.reflectClassByMangledName(J.get$runtimeType$(mirror.reflectee)._typeName);
  for (t1 = test != null; type != null;) {
    member = J.$index$asx(type.get$members(), $name);
    if (member != null)
      t2 = test == null || test.call$1(member) === true;
    else
      t2 = false;
    if (t2)
      return true;
    try {
      type = type.get$superclass();
    } catch (exception) {
      t1 = H.unwrapException(exception);
      t2 = J.getInterceptor(t1);
      if (typeof t1 === "object" && t1 !== null && !!t2.$isUnsupportedError)
        return false;
      else
        throw exception;
    }

  }
  return false;
},

_isPathValid: function(s) {
  s = J.replaceAll$2$s(s, $.get$_spacesRegExp(), "");
  if (s === "")
    return true;
  if (0 >= s.length)
    throw H.ioore(s, 0);
  if (s[0] === ".")
    return false;
  return $.get$_pathRegExp().hasMatch$1(s);
},

onPropertyChange_closure: {"": "Closure;sourceName_0,callback_1",
  call$1: function(records) {
    var t1, t2, record, t3;
    for (t1 = J.get$iterator$ax(records), t2 = this.sourceName_0; t1.moveNext$0();) {
      record = t1.get$current();
      t3 = J.getInterceptor(record);
      if (typeof record === "object" && record !== null && !!t3.$isPropertyChangeRecord && J.$eq(record.name, t2)) {
        this.callback_1.call$0();
        break;
      }
    }
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

ChangeNotifier: {"": "Object;",
  get$changes: function(receiver) {
    var t1, t2;
    if (receiver._changes == null) {
      t1 = this.get$_observed(receiver);
      receiver._changes = P.StreamController_StreamController$broadcast(this.get$_unobserved(receiver), t1, true, null);
    }
    t1 = receiver._changes;
    t1.toString;
    t2 = new P._BroadcastStream(t1);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_BroadcastStreamController", 0)]);
    return t2;
  },
  _observed$0: function(receiver) {
  },
  get$_observed: function(_receiver) {
    return new H.BoundClosure$i0(this, B.ChangeNotifier.prototype._observed$0, _receiver, "_observed$0");
  },
  _unobserved$0: function(receiver) {
  },
  get$_unobserved: function(_receiver) {
    return new H.BoundClosure$i0(this, B.ChangeNotifier.prototype._unobserved$0, _receiver, "_unobserved$0");
  },
  deliverChanges$0: function(receiver) {
    var records, t1, t2;
    records = receiver._records;
    receiver._records = null;
    t1 = receiver._changes;
    if (t1 != null) {
      t2 = t1._async$_next;
      t2 = t2 == null ? t1 != null : t2 !== t1;
    } else
      t2 = false;
    if (t2 && records != null) {
      t2 = new P.UnmodifiableListView(records);
      H.setRuntimeTypeInfo(t2, [B.ChangeRecord]);
      if (t1._state >= 4)
        H.throwExpression(t1._addEventError$0());
      t1._sendData$1(t2);
      return true;
    }
    return false;
  },
  get$deliverChanges: function(_receiver) {
    return new H.BoundClosure$i0(this, B.ChangeNotifier.prototype.deliverChanges$0, _receiver, "deliverChanges$0");
  },
  get$hasObservers: function(receiver) {
    var t1, t2;
    t1 = receiver._changes;
    if (t1 != null) {
      t2 = t1._async$_next;
      t1 = t2 == null ? t1 != null : t2 !== t1;
    } else
      t1 = false;
    return t1;
  },
  notifyPropertyChange$3: function(receiver, field, oldValue, newValue) {
    return B._notifyPropertyChange(receiver, field, oldValue, newValue);
  },
  notifyChange$1: function(receiver, record) {
    var t1, t2;
    t1 = receiver._changes;
    if (t1 != null) {
      t2 = t1._async$_next;
      t1 = t2 == null ? t1 != null : t2 !== t1;
    } else
      t1 = false;
    if (!t1)
      return;
    if (receiver._records == null) {
      receiver._records = [];
      P.scheduleMicrotask(this.get$deliverChanges(receiver));
    }
    receiver._records.push(record);
  },
  $isObservable: true
},

ChangeRecord: {"": "Object;", $isChangeRecord: true},

PropertyChangeRecord: {"": "ChangeRecord;object,name>,oldValue>,newValue>",
  changes$1: function(_, key) {
    var t1 = J.getInterceptor(key);
    return typeof key === "object" && key !== null && !!t1.$isSymbol && J.$eq(this.name, key);
  },
  get$changes: function(_receiver) {
    return new J.BoundClosure$i1(this, B.PropertyChangeRecord.prototype.changes$1, _receiver, "changes$1");
  },
  toString$0: function(_) {
    return "#<PropertyChangeRecord " + H.S(this.name) + " from: " + H.S(this.oldValue) + " to: " + H.S(this.newValue) + ">";
  },
  $isPropertyChangeRecord: true
},

CompoundBinding: {"": "ChangeNotifier;_combinator,_observe$_observers,_values,_observe$_value,scheduled,_changes,_records",
  _combinator$1: function(arg0) {
    return this._combinator.call$1(arg0);
  },
  get$length: function(_) {
    return this._observe$_observers._collection$_length;
  },
  "+length": 0,
  get$value: function(_) {
    return this._observe$_value;
    "11,20";
  },
  "+value": 1,
  set$value: function(_, newValue) {
    this._observe$_value = B._notifyPropertyChange(this, C.Symbol_value, this._observe$_value, newValue);
    "11,68,11,20";
  },
  "+value=": 1,
  bind$3: function(_, $name, model, path) {
    var t1;
    this.unbind$1(this, $name);
    t1 = this._observe$_observers;
    t1.$indexSet(t1, $name, B.PathObserver$(model, path).bindSync$1(new B.CompoundBinding_bind_closure(this, $name)));
  },
  unbind$2$suppressResolve: function(_, $name, suppressResolve) {
    var t1, binding;
    t1 = this._observe$_observers;
    binding = t1.remove$1(t1, $name);
    if (binding == null)
      return;
    binding.cancel$0();
    t1 = this._values;
    t1.remove$1(t1, $name);
    if (!suppressResolve)
      this._scheduleResolve$0();
  },
  unbind$1: function($receiver, name) {
    return this.unbind$2$suppressResolve($receiver, name, false);
  },
  _scheduleResolve$0: function() {
    if (this.scheduled)
      return;
    this.scheduled = true;
    P.scheduleMicrotask(this.get$resolve());
  },
  resolve$0: function() {
    if (this._observe$_observers._collection$_length === 0)
      return;
    this.scheduled = false;
    if (this._combinator == null)
      throw H.wrapException(new P.StateError("CompoundBinding attempted to resolve without a combinator"));
    var t1 = this._combinator$1(this._values);
    this._observe$_value = B._notifyPropertyChange(this, C.Symbol_value, this._observe$_value, t1);
  },
  get$resolve: function() {
    return new H.BoundClosure$0(this, B.CompoundBinding.prototype.resolve$0, null, "resolve$0");
  },
  close$0: function(_) {
    var t1, t2, t3;
    for (t1 = this._observe$_observers, t2 = t1.get$values(t1), t3 = t2._iterable, t3 = t3.get$iterator(t3), t3 = new H.MappedIterator(null, t3, t2._f), H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "MappedIterable", 0), H.getRuntimeTypeArgument(t2, "MappedIterable", 1)]); t3.moveNext$0();)
      t3._current.cancel$0();
    t1.clear$0(t1);
    t1 = this._values;
    t1.clear$0(t1);
    this._observe$_value = B._notifyPropertyChange(this, C.Symbol_value, this._observe$_value, null);
  },
  get$close: function(_receiver) {
    return new H.BoundClosure$i0(this, B.CompoundBinding.prototype.close$0, _receiver, "close$0");
  },
  _unobserved$0: function(_) {
    return this.close$0(this);
  },
  get$_unobserved: function(_receiver) {
    return new H.BoundClosure$i0(this, B.CompoundBinding.prototype._unobserved$0, _receiver, "_unobserved$0");
  },
  $isCompoundBinding: true
},

CompoundBinding_bind_closure: {"": "Closure;this_0,name_1",
  call$1: function(value) {
    var t1, t2;
    t1 = this.this_0;
    t2 = t1._values;
    t2.$indexSet(t2, this.name_1, value);
    t1._scheduleResolve$0();
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

ObservableProperty: {"": "Object;", $isObservableProperty: true},

Reflectable: {"": "Object;"},

Observable_deliverChanges_closure: {"": "Closure;box_0,this_1",
  call$2: function($name, oldValue) {
    var t1, newValue, t2, t3;
    t1 = this.this_1;
    newValue = t1._mirror.getField$1($name).reflectee;
    if (!J.$eq(oldValue, newValue)) {
      t2 = this.box_0;
      if (t2.records_0 == null)
        t2.records_0 = [];
      t2 = t2.records_0;
      t3 = new B.PropertyChangeRecord(t1, $name, oldValue, newValue);
      H.setRuntimeTypeInfo(t3, [null]);
      t2.push(t3);
      t1 = t1._values;
      t1.$indexSet(t1, $name, newValue);
    }
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

ObservableBox: {"": "ChangeNotifier;",
  get$value: function(_) {
    return this._observe$_value;
    "69,20";
  },
  "+value": 1,
  set$value: function(_, newValue) {
    this._observe$_value = B._notifyPropertyChange(this, C.Symbol_value, this._observe$_value, newValue);
    "11,68,69,20";
  },
  "+value=": 1,
  toString$0: function(_) {
    return "#<" + H.S(new H.TypeImpl(H.getRuntimeTypeString(this), null)) + " value: " + H.S(this._observe$_value) + ">";
  }
},

MapChangeRecord: {"": "ChangeRecord;key>,oldValue>,newValue>,isInsert,isRemove",
  changes$1: function(_, otherKey) {
    return J.$eq(this.key, otherKey);
  },
  get$changes: function(_receiver) {
    return new J.BoundClosure$i1(this, B.MapChangeRecord.prototype.changes$1, _receiver, "changes$1");
  },
  toString$0: function(_) {
    var kind;
    if (this.isInsert)
      kind = "insert";
    else
      kind = this.isRemove ? "remove" : "set";
    return "#<MapChangeRecord " + kind + " " + H.S(this.key) + " from: " + H.S(this.oldValue) + " to: " + H.S(this.newValue) + ">";
  },
  $isMapChangeRecord: true
},

ObservableMap: {"": "ChangeNotifier;_observe$_map,_changes,_records",
  get$keys: function() {
    return this._observe$_map.get$keys();
    "70,20";
  },
  "+keys": 1,
  get$values: function(_) {
    var t1 = this._observe$_map;
    return t1.get$values(t1);
    "71,20";
  },
  "+values": 1,
  get$length: function(_) {
    var t1 = this._observe$_map;
    return t1.get$length(t1);
    "15,20";
  },
  "+length": 1,
  get$isEmpty: function(_) {
    var t1 = this._observe$_map;
    return t1.get$length(t1) === 0;
    "24,20";
  },
  "+isEmpty": 1,
  get$isNotEmpty: function(_) {
    var t1 = this._observe$_map;
    return t1.get$length(t1) !== 0;
    "24,20";
  },
  "+isNotEmpty": 1,
  containsValue$1: function(value) {
    return this._observe$_map.containsValue$1(value);
    "24,16,0,20";
  },
  "+containsValue:1:0": 1,
  containsKey$1: function(key) {
    return this._observe$_map.containsKey$1(key);
    "24,72,0,20";
  },
  "+containsKey:1:0": 1,
  $index: function(_, key) {
    var t1 = this._observe$_map;
    return t1.$index(t1, key);
    "73,72,0,20";
  },
  "+[]:1:0": 1,
  $indexSet: function(_, key, value) {
    var t1, len, oldValue, t2, t3;
    t1 = this._observe$_map;
    len = t1.get$length(t1);
    oldValue = t1.$index(t1, key);
    t1.$indexSet(t1, key, value);
    t2 = this._changes;
    if (t2 != null) {
      t3 = t2._async$_next;
      t2 = t3 == null ? t2 != null : t3 !== t2;
    } else
      t2 = false;
    if (t2)
      if (len !== t1.get$length(t1)) {
        B._notifyPropertyChange(this, C.Symbol_length, len, t1.get$length(t1));
        t1 = new B.MapChangeRecord(key, null, value, true, false);
        H.setRuntimeTypeInfo(t1, [null, null]);
        this.notifyChange$1(this, t1);
      } else if (!J.$eq(oldValue, value)) {
        t1 = new B.MapChangeRecord(key, oldValue, value, false, false);
        H.setRuntimeTypeInfo(t1, [null, null]);
        this.notifyChange$1(this, t1);
      }
    "11,72,74,16,73,20";
  },
  "+[]=:2:0": 1,
  addAll$1: function(_, other) {
    other.forEach$1(other, new B.ObservableMap_addAll_closure(this));
  },
  putIfAbsent$2: function(key, ifAbsent) {
    var t1, len, result, t2, t3;
    t1 = this._observe$_map;
    len = t1.get$length(t1);
    result = t1.putIfAbsent$2(key, ifAbsent);
    t2 = this._changes;
    if (t2 != null) {
      t3 = t2._async$_next;
      t2 = t3 == null ? t2 != null : t3 !== t2;
    } else
      t2 = false;
    if (t2 && len !== t1.get$length(t1)) {
      B._notifyPropertyChange(this, C.Symbol_length, len, t1.get$length(t1));
      t1 = new B.MapChangeRecord(key, null, result, true, false);
      H.setRuntimeTypeInfo(t1, [null, null]);
      this.notifyChange$1(this, t1);
    }
    return result;
  },
  remove$1: function(_, key) {
    var t1, len, result, t2, t3;
    t1 = this._observe$_map;
    len = t1.get$length(t1);
    result = t1.remove$1(t1, key);
    t2 = this._changes;
    if (t2 != null) {
      t3 = t2._async$_next;
      t2 = t3 == null ? t2 != null : t3 !== t2;
    } else
      t2 = false;
    if (t2 && len !== t1.get$length(t1)) {
      t2 = new B.MapChangeRecord(key, result, null, false, true);
      H.setRuntimeTypeInfo(t2, [null, null]);
      this.notifyChange$1(this, t2);
      B._notifyPropertyChange(this, C.Symbol_length, len, t1.get$length(t1));
    }
    return result;
  },
  forEach$1: function(_, f) {
    var t1 = this._observe$_map;
    return t1.forEach$1(t1, f);
  },
  toString$0: function(_) {
    return P.Maps_mapToString(this);
  },
  $asMap: null,
  $isMap: true,
  static: {
ObservableMap_ObservableMap$from: function(other, $K, $V) {
  var t1 = B.ObservableMap_ObservableMap$_createFromType(other, $K, $V);
  t1.addAll$1(t1, other);
  return t1;
},

ObservableMap_ObservableMap$_createFromType: function(other, $K, $V) {
  var t1, t2, result;
  t1 = J.getInterceptor(other);
  if (typeof other === "object" && other !== null && !!t1.$isLinkedHashMap) {
    t1 = $K;
    t2 = $V;
    result = new B.ObservableMap(P.LinkedHashMap_LinkedHashMap(null, null, null, t1, t2), null, null);
    H.setRuntimeTypeInfo(result, [t1, t2]);
  } else {
    t1 = $K;
    t2 = $V;
    result = new B.ObservableMap(P.HashMap_HashMap(null, null, null, t1, t2), null, null);
    H.setRuntimeTypeInfo(result, [t1, t2]);
  }
  return result;
}}

},

ObservableMap_addAll_closure: {"": "Closure;this_0",
  call$2: function(key, value) {
    var t1 = this.this_0;
    t1.$indexSet(t1, key, value);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

PathObserver: {"": "ChangeNotifier;path>,_isValid,_segments,_values,_subs,_changes,_records",
  get$value: function(_) {
    var t1, t2;
    if (!this._isValid)
      return;
    t1 = this._changes;
    if (t1 != null) {
      t2 = t1._async$_next;
      t1 = t2 == null ? t1 != null : t2 !== t1;
    } else
      t1 = false;
    if (!t1)
      this._updateValues$0();
    return C.JSArray_methods.get$last(this._values);
    "11,20";
  },
  "+value": 1,
  set$value: function(_, value) {
    var t1, len, t2, t3;
    t1 = this._segments;
    len = t1.length;
    if (len === 0)
      return;
    t2 = this._changes;
    if (t2 != null) {
      t3 = t2._async$_next;
      t2 = t3 == null ? t2 != null : t3 !== t2;
    } else
      t2 = false;
    if (!t2)
      this._updateValues$0();
    t2 = this._values;
    t3 = len - 1;
    if (t3 < 0 || t3 >= t2.length)
      throw H.ioore(t2, t3);
    t2 = t2[t3];
    if (t3 >= t1.length)
      throw H.ioore(t1, t3);
    if (B._setObjectProperty(t2, t1[t3], value)) {
      t1 = this._values;
      if (len >= t1.length)
        throw H.ioore(t1, len);
      t1[len] = value;
    }
    "11,16,0,20";
  },
  "+value=": 1,
  bindSync$1: function(callback) {
    var result = this.get$changes(this).listen$1(new B.PathObserver_bindSync_closure(this, callback));
    callback.call$1(this.get$value(this));
    return result;
  },
  _observed$0: function(_) {
    B.ChangeNotifier.prototype._observed$0.call(this, this);
    this._updateValues$0();
    this._observe$_observePath$0();
  },
  get$_observed: function(_receiver) {
    return new H.BoundClosure$i0(this, B.PathObserver.prototype._observed$0, _receiver, "_observed$0");
  },
  _unobserved$0: function(_) {
    var i, t1;
    for (i = 0; t1 = this._subs, i < t1.length; ++i) {
      t1 = t1[i];
      if (t1 != null) {
        t1.cancel$0();
        t1 = this._subs;
        if (i >= t1.length)
          throw H.ioore(t1, i);
        t1[i] = null;
      }
    }
  },
  get$_unobserved: function(_receiver) {
    return new H.BoundClosure$i0(this, B.PathObserver.prototype._unobserved$0, _receiver, "_unobserved$0");
  },
  _updateValues$0: function() {
    var t1, i, t2, i0, t3, t4;
    for (t1 = this._segments, i = 0; i < t1.length; i = i0) {
      t2 = this._values;
      i0 = i + 1;
      t3 = t2.length;
      if (i >= t3)
        throw H.ioore(t2, i);
      t4 = B._getObjectProperty(t2[i], t1[i]);
      if (i0 >= t3)
        throw H.ioore(t2, i0);
      t2[i0] = t4;
    }
  },
  _updateObservedValues$1: function(start) {
    var t1, i, oldValue, newValue, t2, i0, t3;
    for (t1 = this._segments, i = start, oldValue = null, newValue = null; i < t1.length; i = i0) {
      t2 = this._values;
      i0 = i + 1;
      t3 = t2.length;
      if (i0 < 0 || i0 >= t3)
        throw H.ioore(t2, i0);
      oldValue = t2[i0];
      if (i < 0 || i >= t3)
        throw H.ioore(t2, i);
      newValue = B._getObjectProperty(t2[i], t1[i]);
      if (oldValue == null ? newValue == null : oldValue === newValue) {
        this._observe$_observePath$2(start, i);
        return;
      }
      t2 = this._values;
      if (i0 >= t2.length)
        throw H.ioore(t2, i0);
      t2[i0] = newValue;
    }
    this._observe$_observePath$1(start);
    if (this.get$hasObservers(this) && !J.$eq(oldValue, newValue)) {
      t1 = new B.PropertyChangeRecord(this, C.Symbol_value, oldValue, newValue);
      t1.$builtinTypeInfo = [null];
      this.notifyChange$1(this, t1);
    }
  },
  _observe$_observePath$2: function(start, end) {
    var i, t1;
    if (end == null)
      end = this._segments.length;
    if (typeof end !== "number")
      throw H.iae(end);
    i = start;
    for (; i < end; ++i) {
      t1 = this._subs;
      if (i < 0 || i >= t1.length)
        throw H.ioore(t1, i);
      t1 = t1[i];
      if (t1 != null)
        t1.cancel$0();
      this._observeIndex$1(i);
    }
  },
  _observe$_observePath$0: function() {
    return this._observe$_observePath$2(0, null);
  },
  _observe$_observePath$1: function(start) {
    return this._observe$_observePath$2(start, null);
  },
  _observeIndex$1: function(i) {
    var t1, object, t2, subscription, handleError, handleDone;
    t1 = this._values;
    if (i < 0 || i >= t1.length)
      throw H.ioore(t1, i);
    object = t1[i];
    t1 = J.getInterceptor$x(object);
    if (typeof object === "object" && object !== null && !!t1.$isObservable) {
      t2 = this._subs;
      subscription = t1.get$changes(object)._createSubscription$1(false);
      subscription._async$_onData = $.Zone__current.registerUnaryCallback$1(new B.PathObserver__observeIndex_closure(this, i, object));
      handleError = P._nullErrorHandler$closure;
      subscription._onError = P._registerErrorHandler(handleError, $.Zone__current);
      handleDone = P._nullDoneHandler$closure;
      subscription._onDone = $.Zone__current.registerCallback$1(handleDone);
      if (i >= t2.length)
        throw H.ioore(t2, i);
      t2[i] = subscription;
    }
  },
  PathObserver$2: function(object, path) {
    var t1, t2, segment, index;
    if (this._isValid)
      for (t1 = J.trim$0$s(path).split("."), t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]), t1 = this._segments; t2.moveNext$0();) {
        segment = t2._current;
        if (J.$eq(segment, ""))
          continue;
        index = H.Primitives_parseInt(segment, 10, new B.PathObserver_closure());
        t1.push(index != null ? index : new H.Symbol0(H.Symbol_validate(segment)));
      }
    t1 = this._segments;
    t2 = P.List_List(t1.length + 1, P.Object);
    H.setRuntimeTypeInfo(t2, [P.Object]);
    this._values = t2;
    t2 = this._values;
    if (0 >= t2.length)
      throw H.ioore(t2, 0);
    t2[0] = object;
    t1 = P.List_List(t1.length, P.StreamSubscription);
    H.setRuntimeTypeInfo(t1, [P.StreamSubscription]);
    this._subs = t1;
  },
  $isPathObserver: true,
  static: {
PathObserver$: function(object, path) {
  var t1 = new B.PathObserver(path, B._isPathValid(path), [], null, null, null, null);
  t1.PathObserver$2(object, path);
  return t1;
}}

},

PathObserver_closure: {"": "Closure;",
  call$1: function(_) {
    return;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

PathObserver_bindSync_closure: {"": "Closure;this_0,callback_1",
  call$1: function(records) {
    var t1 = this.this_0;
    this.callback_1.call$1(t1.get$value(t1));
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

PathObserver__observeIndex_closure: {"": "Closure;this_0,i_1,object_2",
  call$1: function(records) {
    var t1, t2, t3, t4, record;
    t1 = this.this_0;
    t2 = t1._values;
    t3 = this.i_1;
    if (t3 < 0 || t3 >= t2.length)
      throw H.ioore(t2, t3);
    if (t2[t3] !== this.object_2)
      return;
    for (t2 = J.get$iterator$ax(records), t4 = t1._segments; t2.moveNext$0();) {
      record = t2.get$current();
      if (t3 >= t4.length)
        throw H.ioore(t4, t3);
      if (B._changeRecordMatches(record, t4[t3])) {
        t1._updateObservedValues$1(t3);
        return;
      }
    }
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_tryGetField_closure: {"": "Closure;",
  call$1: function(m) {
    var t1, t2;
    t1 = m;
    t2 = J.getInterceptor(t1);
    if (typeof t1 !== "object" || t1 === null || !t2.$isVariableMirror) {
      t1 = m;
      t2 = J.getInterceptor(t1);
      t1 = typeof t1 === "object" && t1 !== null && !!t2.$isMethodMirror && m.get$isGetter();
    } else
      t1 = true;
    return t1;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_trySetField_closure: {"": "Closure;",
  call$1: function(m) {
    var t1, t2;
    t1 = m;
    t2 = J.getInterceptor(t1);
    return typeof t1 === "object" && t1 !== null && !!t2.$isVariableMirror;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

closure1: {"": "Closure;",
  call$0: function() {
    return new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^(?:(?:[$_a-zA-Z]+[$_a-zA-Z0-9]*|(?:[0-9]|[1-9]+[0-9]+)))(?:\\.(?:[$_a-zA-Z]+[$_a-zA-Z0-9]*|(?:[0-9]|[1-9]+[0-9]+)))*$", false, true, false), null, null);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
}}],
["observe.src.dirty_check", "package:observe/src/dirty_check.dart", , O, {
registerObservable: function(obj) {
  if ($._allObservables == null)
    $._allObservables = [];
  $._allObservables.push(obj);
  $._allObservablesCount = $._allObservablesCount + 1;
},

dirtyCheckObservables: function() {
  var cycles, debugLoop, toCheck, t1, anyChanged, i, observer, t2, info;
  if ($._delivering)
    return;
  if ($._allObservables == null)
    return;
  $._delivering = true;
  cycles = 0;
  debugLoop = null;
  do {
    ++cycles;
    if (cycles === 1000)
      debugLoop = [];
    toCheck = $._allObservables;
    $._allObservables = [];
    for (t1 = debugLoop != null, anyChanged = false, i = 0; i < toCheck.length; ++i) {
      observer = toCheck[i];
      t2 = observer._changes;
      t2 = t2._async$_next !== t2;
      if (t2) {
        if (observer.deliverChanges$0(observer)) {
          if (t1)
            debugLoop.push([i, observer]);
          anyChanged = true;
        }
        $._allObservables.push(observer);
      }
    }
  } while (cycles < 1000 && anyChanged);
  if (t1 && anyChanged) {
    $.get$_logger().warning$1("Possible loop in Observable.dirtyCheck, stopped checking.");
    for (debugLoop.toString, t1 = new H.ListIterator(debugLoop, debugLoop.length, 0, null), H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(debugLoop, "JSArray", 0)]); t1.moveNext$0();) {
      info = t1._current;
      t2 = J.getInterceptor$asx(info);
      $.get$_logger().warning$1("In last iteration Observable changed at index " + H.S(t2.$index(info, 0)) + ", object: " + H.S(t2.$index(info, 1)) + ".");
    }
  }
  $._allObservablesCount = $._allObservables.length;
  $._delivering = false;
},

dirtyCheckZoneSpec: function() {
  var t1 = {};
  t1.pending_0 = false;
  t1 = new O.dirtyCheckZoneSpec_enqueueDirtyCheck(t1);
  return new P._ZoneSpecification(null, null, null, null, new O.dirtyCheckZoneSpec_wrapCallback(t1), new O.dirtyCheckZoneSpec_wrapUnaryCallback(t1), null, null, null, null, null, null, null);
},

dirtyCheckZoneSpec_enqueueDirtyCheck: {"": "Closure;box_0",
  call$2: function($parent, zone) {
    var t1 = this.box_0;
    if (t1.pending_0)
      return;
    t1.pending_0 = true;
    $parent.scheduleMicrotask$2(zone, new O.dirtyCheckZoneSpec_enqueueDirtyCheck_closure(t1));
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

dirtyCheckZoneSpec_enqueueDirtyCheck_closure: {"": "Closure;box_0",
  call$0: function() {
    this.box_0.pending_0 = false;
    O.dirtyCheckObservables();
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

dirtyCheckZoneSpec_wrapCallback: {"": "Closure;enqueueDirtyCheck_1",
  call$4: function($self, $parent, zone, f) {
    if (f == null)
      return f;
    return new O.dirtyCheckZoneSpec_wrapCallback_closure(this.enqueueDirtyCheck_1, $parent, zone, f);
  },
  "+call:4:0": 0,
  $isFunction: true
},

dirtyCheckZoneSpec_wrapCallback_closure: {"": "Closure;enqueueDirtyCheck_2,parent_3,zone_4,f_5",
  call$0: function() {
    this.enqueueDirtyCheck_2.call$2(this.parent_3, this.zone_4);
    return this.f_5.call$0();
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

dirtyCheckZoneSpec_wrapUnaryCallback: {"": "Closure;enqueueDirtyCheck_6",
  call$4: function($self, $parent, zone, f) {
    if (f == null)
      return f;
    return new O.dirtyCheckZoneSpec_wrapUnaryCallback_closure(this.enqueueDirtyCheck_6, $parent, zone, f);
  },
  "+call:4:0": 0,
  $isFunction: true
},

dirtyCheckZoneSpec_wrapUnaryCallback_closure: {"": "Closure;enqueueDirtyCheck_7,parent_8,zone_9,f_10",
  call$1: function(x) {
    this.enqueueDirtyCheck_7.call$2(this.parent_8, this.zone_9);
    return this.f_10.call$1(x);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
}}],
["path", "package:path/path.dart", , B, {
current: function() {
  var t1, t2;
  t1 = $.get$currentJsMirrorSystem().get$libraries();
  t2 = P.Uri$_fromMatch($.get$Uri__splitRe().firstMatch$1("dart:io"));
  t1 = t1.__js_mirrors$_source;
  if (t1.$index(t1, t2) != null) {
    t1 = $.get$currentJsMirrorSystem().get$libraries();
    t2 = P.Uri$_fromMatch($.get$Uri__splitRe().firstMatch$1("dart:io"));
    t1 = t1.__js_mirrors$_source;
    t2 = J.get$classes$x(t1.$index(t1, t2));
    return J.get$path$x(t2.$index(t2, C.Symbol_Directory).getField$1(C.Symbol_current).reflectee);
  } else {
    t1 = $.get$currentJsMirrorSystem().get$libraries();
    t2 = P.Uri$_fromMatch($.get$Uri__splitRe().firstMatch$1("dart:html"));
    t1 = t1.__js_mirrors$_source;
    if (t1.$index(t1, t2) != null) {
      t1 = $.get$currentJsMirrorSystem().get$libraries();
      t2 = P.Uri$_fromMatch($.get$Uri__splitRe().firstMatch$1("dart:html"));
      t1 = t1.__js_mirrors$_source;
      return J.get$href$x(J.get$location$x(t1.$index(t1, t2).getField$1(C.Symbol_window).reflectee));
    } else
      return ".";
  }
},

"+current": 0,

_validateArgList: function(method, args) {
  var i, numArgs, numArgs0, message, t1, t2, t3;
  for (i = 1; i < 8; ++i) {
    if (args[i] == null || args[i - 1] != null)
      continue;
    for (numArgs = 8; numArgs >= 1; numArgs = numArgs0) {
      numArgs0 = numArgs - 1;
      if (args[numArgs0] != null)
        break;
    }
    message = new P.StringBuffer("");
    message._contents = "";
    t1 = method + "(";
    message._contents = message._contents + t1;
    t1 = new H.SubListIterable(args, 0, numArgs);
    t1.$builtinTypeInfo = [null];
    t2 = t1._start;
    if (t2 < 0)
      H.throwExpression(new P.RangeError("value " + t2));
    t3 = t1._endOrLength;
    if (t3 != null) {
      if (J.$lt$n(t3, 0))
        H.throwExpression(new P.RangeError("value " + H.S(t3)));
      if (typeof t3 !== "number")
        throw H.iae(t3);
      if (t2 > t3)
        H.throwExpression(P.RangeError$range(t2, 0, t3));
    }
    t1 = new H.MappedListIterable(t1, new B._validateArgList_closure());
    t1.$builtinTypeInfo = [null, null];
    t1 = t1.join$1(t1, ", ");
    message._contents = message._contents + t1;
    t1 = "): part " + (i - 1) + " was null, but part " + i + " was not.";
    message._contents = message._contents + t1;
    throw H.wrapException(new P.ArgumentError(message._contents));
  }
},

Style__getPlatformStyle: function() {
  var t1, t2;
  t1 = $.get$currentJsMirrorSystem().get$libraries();
  t2 = P.Uri$_fromMatch($.get$Uri__splitRe().firstMatch$1("dart:io"));
  t1 = t1.__js_mirrors$_source;
  if (t1.$index(t1, t2) == null)
    return $.get$Style_url();
  t1 = $.get$currentJsMirrorSystem().get$libraries();
  t2 = P.Uri$_fromMatch($.get$Uri__splitRe().firstMatch$1("dart:io"));
  t1 = t1.__js_mirrors$_source;
  t2 = J.get$classes$x(t1.$index(t1, t2));
  if (J.$eq(t2.$index(t2, C.Symbol_Platform).getField$1(C.Symbol_operatingSystem).reflectee, "windows"))
    return $.get$Style_windows();
  return $.get$Style_posix();
},

_validateArgList_closure: {"": "Closure;",
  call$1: function(arg) {
    return arg == null ? "null" : "\"" + H.S(arg) + "\"";
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Builder: {"": "Object;style>,root",
  get$separator: function() {
    return this.style.get$separator();
  },
  dirname$1: function(path) {
    var parsed, t1, t2;
    parsed = this._parse$1(path);
    parsed.removeTrailingSeparators$0();
    t1 = parsed.parts;
    t2 = t1.length;
    if (t2 === 0) {
      t1 = parsed.root;
      return t1 == null ? "." : t1;
    }
    if (t2 === 1) {
      t1 = parsed.root;
      return t1 == null ? "." : t1;
    }
    C.JSArray_methods.removeLast$0(t1);
    t1 = parsed.separators;
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    t1.pop();
    parsed.removeTrailingSeparators$0();
    return parsed.toString$0(parsed);
  },
  join$8: function(_, part1, part2, part3, part4, part5, part6, part7, part8) {
    var parts, t1;
    parts = [part1, part2, part3, part4, part5, part6, part7, part8];
    B._validateArgList("join", parts);
    t1 = new H.WhereIterable(parts, new B.Builder_join_closure());
    H.setRuntimeTypeInfo(t1, [null]);
    return this.joinAll$1(t1);
  },
  join$1: function($receiver, part1) {
    return this.join$8($receiver, part1, null, null, null, null, null, null, null);
  },
  joinAll$1: function(parts) {
    var buffer, t1, t2, t3, needsSeparator, isAbsoluteAndNotRootRelative, part, root, oldRoot, str, t4;
    buffer = P.StringBuffer$("");
    for (t1 = new H.WhereIterable(parts, new B.Builder_joinAll_closure()), H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(parts, "IterableBase", 0)]), t2 = J.get$iterator$ax(t1._iterable), t2 = new H.WhereIterator(t2, t1._f), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "WhereIterable", 0)]), t1 = this.style, t3 = t2._iterator, needsSeparator = false, isAbsoluteAndNotRootRelative = false; t2.moveNext$0();) {
      part = t3.get$current();
      if (this._parse$1(part).isRootRelative && isAbsoluteAndNotRootRelative) {
        root = this._parse$1(buffer._contents).root;
        oldRoot = root == null ? "" : root;
        buffer._contents = "";
        str = typeof oldRoot === "string" ? oldRoot : H.S(oldRoot);
        buffer._contents = buffer._contents + str;
        str = typeof part === "string" ? part : H.S(part);
        buffer._contents = buffer._contents + str;
      } else if (this._parse$1(part).root != null) {
        isAbsoluteAndNotRootRelative = !this._parse$1(part).isRootRelative;
        buffer._contents = "";
        str = typeof part === "string" ? part : H.S(part);
        buffer._contents = buffer._contents + str;
      } else {
        t4 = J.getInterceptor$asx(part);
        if (J.$gt$n(t4.get$length(part), 0) && J.contains$1$asx(t4.$index(part, 0), t1.get$separatorPattern()) === true)
          ;
        else if (needsSeparator === true) {
          t4 = t1.get$separator();
          buffer._contents = buffer._contents + t4;
        }
        str = typeof part === "string" ? part : H.S(part);
        buffer._contents = buffer._contents + str;
      }
      needsSeparator = J.contains$1$asx(part, t1.get$needsSeparatorPattern());
    }
    return buffer._contents;
  },
  split$1: function(_, path) {
    var parsed, t1;
    parsed = this._parse$1(path);
    t1 = new H.WhereIterable(parsed.parts, new B.Builder_split_closure());
    H.setRuntimeTypeInfo(t1, [null]);
    parsed.parts = P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0));
    t1 = parsed.root;
    if (t1 != null)
      C.JSArray_methods.insert$2(parsed.parts, 0, t1);
    return parsed.parts;
  },
  resolve$7: function(part1, part2, part3, part4, part5, part6, part7) {
    return this.join$8(this, this.root, part1, part2, part3, part4, part5, part6, part7);
  },
  get$resolve: function() {
    return new B.BoundClosure$7(this, B.Builder.prototype.resolve$7, null, "resolve$7");
  },
  _parse$1: function(path) {
    var t1, root, t2, parts, separators, t3, firstSeparator, t4, start, t5, t6;
    t1 = this.style;
    root = t1.getRoot$1(path);
    t2 = t1.getRelativeRoot$1(path);
    if (root != null)
      path = J.substring$1$s(path, J.get$length$asx(root));
    parts = [];
    separators = [];
    t3 = t1.get$separatorPattern();
    firstSeparator = t3.matchAsPrefix$1(t3, path);
    if (firstSeparator != null) {
      t3 = firstSeparator._match;
      if (0 >= t3.length)
        throw H.ioore(t3, 0);
      separators.push(t3[0]);
      if (0 >= t3.length)
        throw H.ioore(t3, 0);
      path = J.substring$1$s(path, J.get$length$asx(t3[0]));
    } else
      separators.push("");
    t3 = t1.get$separatorPattern();
    if (typeof path !== "string")
      H.throwExpression(new P.ArgumentError(path));
    t3 = new H._AllMatchesIterable(t3, path);
    t3 = new H._AllMatchesIterator(t3._re, t3._string, null);
    t4 = J.getInterceptor$asx(path);
    start = 0;
    for (; t3.moveNext$0();) {
      t5 = t3.__js_helper$_current._match;
      parts.push(t4.substring$2(path, start, t5.index));
      if (0 >= t5.length)
        throw H.ioore(t5, 0);
      separators.push(t5[0]);
      t6 = t5.index;
      if (0 >= t5.length)
        throw H.ioore(t5, 0);
      t5 = J.get$length$asx(t5[0]);
      if (typeof t5 !== "number")
        throw H.iae(t5);
      start = t6 + t5;
    }
    t3 = t4.get$length(path);
    if (typeof t3 !== "number")
      throw H.iae(t3);
    if (start < t3) {
      parts.push(t4.substring$1(path, start));
      separators.push("");
    }
    return new B._ParsedPath(t1, root, t2 != null, parts, separators);
  },
  static: {
Builder_Builder: function(root, style) {
  root = B.current();
  style = $.get$Style_platform();
  return new B.Builder(style, root);
}}

},

Builder_join_closure: {"": "Closure;",
  call$1: function(part) {
    return part != null;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Builder_joinAll_closure: {"": "Closure;",
  call$1: function(part) {
    return !J.$eq(part, "");
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Builder_split_closure: {"": "Closure;",
  call$1: function(part) {
    return J.get$isEmpty$asx(part) !== true;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Style: {"": "Object;relativeRootPattern<",
  getRoot$1: function(path) {
    var t1, matches;
    t1 = this.get$rootPattern();
    if (typeof path !== "string")
      H.throwExpression(new P.ArgumentError(path));
    matches = new H._AllMatchesIterable(t1, path);
    if (!matches.get$isEmpty(matches))
      return J.$index$asx(matches.get$first(matches), 0);
    return this.getRelativeRoot$1(path);
  },
  getRelativeRoot$1: function(path) {
    var t1, matches;
    t1 = this.get$relativeRootPattern();
    if (t1 == null)
      return;
    t1.toString;
    if (typeof path !== "string")
      H.throwExpression(new P.ArgumentError(path));
    matches = new H._AllMatchesIterable(t1, path);
    if (!matches.get$iterator(matches).moveNext$0())
      return;
    return J.$index$asx(matches.get$first(matches), 0);
  },
  toString$0: function(_) {
    return this.get$name(this);
  }
},

_PosixStyle: {"": "Style;name>,separator<,separatorPattern<,needsSeparatorPattern<,rootPattern<,relativeRootPattern"},

_WindowsStyle: {"": "Style;name>,separator<,separatorPattern<,needsSeparatorPattern<,rootPattern<,relativeRootPattern"},

_UrlStyle: {"": "Style;name>,separator<,separatorPattern<,needsSeparatorPattern<,rootPattern<,relativeRootPattern<,path$Style$relativeRootPattern"},

_ParsedPath: {"": "Object;style>,root,isRootRelative,parts,separators",
  removeTrailingSeparators$0: function() {
    var t1, t2;
    t1 = this.separators;
    while (true) {
      t2 = this.parts;
      if (!(t2.length !== 0 && J.$eq(C.JSArray_methods.get$last(t2), "")))
        break;
      C.JSArray_methods.removeLast$0(this.parts);
      if (0 >= t1.length)
        throw H.ioore(t1, 0);
      t1.pop();
    }
    t2 = t1.length;
    if (t2 > 0)
      t1[t2 - 1] = "";
  },
  toString$0: function(_) {
    var builder, t1, i, str, t2;
    builder = P.StringBuffer$("");
    t1 = this.root;
    if (t1 != null)
      builder.write$1(t1);
    for (t1 = this.separators, i = 0; i < this.parts.length; ++i) {
      if (i >= t1.length)
        throw H.ioore(t1, i);
      str = t1[i];
      str = typeof str === "string" ? str : H.S(str);
      builder._contents = builder._contents + str;
      t2 = this.parts;
      if (i >= t2.length)
        throw H.ioore(t2, i);
      str = t2[i];
      str = typeof str === "string" ? str : H.S(str);
      builder._contents = builder._contents + str;
    }
    builder.write$1(C.JSArray_methods.get$last(t1));
    return builder._contents;
  }
}}],
["polymer", "package:polymer/polymer.dart", , A, {
_preventFlashOfUnstyledContent: function() {
  var style, head;
  style = document.createElement("style", null);
  style.textContent = ".polymer-veiled { opacity: 0; } \n.polymer-unveil{ -webkit-transition: opacity 0.3s; transition: opacity 0.3s; }\n";
  head = document.querySelector("head");
  head.insertBefore(style, head.firstChild);
  A._veilElements();
  $.get$Polymer__ready().future.then$1(new A._preventFlashOfUnstyledContent_closure());
},

_veilElements: function() {
  var t1, t2, selector, t3;
  for (t1 = $.get$Polymer_veiledElements(), t2 = new H.ListIterator(t1, 1, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();) {
    selector = t2._current;
    for (t1 = W._FrozenElementList$_wrap(document.querySelectorAll(selector), null), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
      t3 = J.get$classes$x(t1._current);
      t3.add$1(t3, "polymer-veiled");
    }
  }
},

_notifySuper: function($name) {
  var t1, waiting;
  t1 = $.get$_waitSuper();
  waiting = t1.remove$1(t1, $name);
  if (waiting != null)
    for (t1 = J.get$iterator$ax(waiting); t1.moveNext$0();)
      J.registerWhenReady$0$x(t1.get$current());
},

_getProperties: function(cls, props, matches) {
  var t1, field, t2, getter;
  for (t1 = J.get$iterator$ax(J.get$values$x(cls.get$variables())); t1.moveNext$0();) {
    field = t1.get$current();
    if (J.get$isFinal$x(field) === true || field.get$isStatic() || field.get$isPrivate())
      continue;
    for (t2 = J.get$iterator$ax(field.get$metadata()); t2.moveNext$0();)
      if (matches.call$1(t2.get$current().get$reflectee()) === true) {
        if (props == null)
          props = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
        props.$indexSet(props, field.get$simpleName(), field);
        break;
      }
  }
  for (t1 = J.get$iterator$ax(J.get$values$x(cls.get$getters())); t1.moveNext$0();) {
    getter = t1.get$current();
    if (getter.get$isStatic() || getter.get$isPrivate())
      continue;
    for (t2 = J.get$iterator$ax(getter.get$metadata()); t2.moveNext$0();)
      if (matches.call$1(t2.get$current().get$reflectee()) === true) {
        t2 = H.Symbol_validate(H.S(J.get$_name$x(getter.get$simpleName())) + "=");
        if (cls.get$setters().containsKey$1(new H.Symbol0(t2)) === true) {
          if (props == null)
            props = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
          props.$indexSet(props, getter.get$simpleName(), getter);
        }
        break;
      }
  }
  return props;
},

_shimShadowDomStyling: function(template, $name, extendee) {
  var t1, platform, shadowCss;
  if ($.get$context() == null || template == null)
    return;
  if ($.get$context().hasProperty$1("ShadowDOMPolyfill"))
    return;
  t1 = $.get$context();
  platform = t1.$index(t1, "Platform");
  if (platform == null)
    return;
  shadowCss = J.$index$asx(platform, "ShadowCSS");
  if (shadowCss == null)
    return;
  shadowCss.callMethod$2("shimStyling", [template, $name, extendee]);
},

_cssTextFromSheet: function(sheet) {
  var t1, resource;
  if (sheet == null || $.get$context() == null)
    return "";
  t1 = P.JsObject_JsObject$fromBrowserObject(sheet);
  resource = P._convertToDart(t1._jsObject.__resource);
  return resource != null ? resource : "";
},

_eventNameFromType: function(eventType) {
  var result = J.$index$asx($.get$_reverseEventTranslations(), eventType);
  return result != null ? result : eventType;
},

Polymer_register: function($name, type) {
  var t1, waiting;
  if (type == null)
    type = C.Type_I2I;
  t1 = $.get$_typesByName();
  t1.$indexSet(t1, $name, type);
  t1 = $.get$_waitType();
  waiting = t1.remove$1(t1, $name);
  if (waiting != null)
    J.registerWhenReady$0$x(waiting);
},

Polymer__unbindNodeTree: function(node) {
  A.Polymer__forNodeTree(node, new A.Polymer__unbindNodeTree_closure());
},

Polymer__forNodeTree: function(node, callback) {
  var child;
  if (node == null)
    return;
  callback.call$1(node);
  for (child = node.firstChild; child != null; child = child.nextSibling)
    A.Polymer__forNodeTree(child, callback);
},

Polymer__bindProperties: function(inA, inProperty, inB, inPath) {
  var path;
  if ($.get$_bindLog().isLoggable$1(C.Level_FINE_500))
    $.get$_bindLog().fine$1("[" + H.S(inB) + "]: bindProperties: [" + H.S(inPath) + "] to [" + J.get$localName$x(inA) + "].[" + H.S(inProperty) + "]");
  path = B.PathObserver$(inB, inPath);
  if (path.get$value(path) == null)
    path.set$value(path, H.reflect(inA).getField$1(inProperty).reflectee);
  return A._PolymerBinding$(inA, inProperty, inB, inPath);
},

Polymer_getBindingWithEvents: function(model, path, $name, node, originalGetBinding) {
  var eventName, translated, t1, t2;
  if (typeof $name !== "string" || !C.JSString_methods.startsWith$1($name, "on-"))
    return originalGetBinding.call$4(model, path, $name, node);
  if ($.get$_eventsLog().isLoggable$1(C.Level_FINE_500))
    $.get$_eventsLog().fine$1("event: [" + J.get$localName$x(node) + "]." + H.S($name) + " => [" + J.get$localName$x(model) + "]." + H.S(path) + "())");
  eventName = J.substring$1$s($name, 3);
  translated = C.Map_484CA.$index(C.Map_484CA, eventName);
  if (translated != null)
    eventName = translated;
  t1 = J.get$on$x(node);
  t1 = t1.$index(t1, eventName);
  t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new A.Polymer_getBindingWithEvents_closure(model, path, $name, node, originalGetBinding)), t1._useCapture);
  H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
  t2._tryResume$0();
  return t2;
},

Polymer__findController: function(node) {
  var node0, t1;
  for (; node0 = J.get$parentNode$x(node), node0 != null; node = node0)
    ;
  t1 = $.get$_shadowHost();
  return t1.$index(t1, node);
},

Polymer__invokeMethod: function(receiver, methodName, args) {
  var receiverMirror, method, t1;
  receiverMirror = H.reflect(receiver);
  method = J.$index$asx(H.reflectClassByMangledName(J.get$runtimeType$(receiverMirror.reflectee)._typeName).get$methods(), methodName);
  if (method != null) {
    t1 = method.get$parameters();
    t1 = t1.where$1(t1, new A.Polymer__invokeMethod_closure());
    C.JSArray_methods.set$length(args, t1.get$length(t1));
  }
  return receiverMirror.invoke$2(methodName, args).reflectee;
},

Polymer_applyStyleToScope: function(style, scope) {
  var clone, attr;
  if (style == null)
    return;
  clone = document.createElement("style", null);
  clone.textContent = style.textContent;
  attr = new W._ElementAttributeMap(style)._element.getAttribute("element");
  if (attr != null) {
    clone.toString;
    new W._ElementAttributeMap(clone)._element.setAttribute("element", attr);
  }
  scope.appendChild(clone);
},

Polymer_unveilElements: function() {
  var t1 = window;
  C.Window_methods._ensureRequestAnimationFrame$0(t1);
  C.Window_methods._requestAnimationFrame$1(t1, W._wrapZone(new A.Polymer_unveilElements_closure()));
},

_propertyType: function(property) {
  var t1 = J.getInterceptor$x(property);
  return typeof property === "object" && property !== null && !!t1.$isVariableMirror ? t1.get$type(property) : H.interceptedTypeCast(property, "$isMethodMirror").get$returnType();
},

_inferPropertyType: function(value, property) {
  var type, t;
  type = A._propertyType(property);
  if (J.$eq(type.get$qualifiedName(), C.Symbol_46c) || J.$eq(type.get$qualifiedName(), C.Symbol_dynamic))
    if (value != null) {
      t = A._getCoreType(value);
      if (t != null)
        return P.reflectClass(t);
      return H.reflectClassByMangledName(J.get$runtimeType$(H.reflect(value).reflectee)._typeName);
    }
  return type;
},

_getCoreType: function(value) {
  var t1;
  if (value == null)
    return C.Type_eZO;
  if (typeof value === "number" && Math.floor(value) === value)
    return C.Type_SnA;
  if (typeof value === "number")
    return C.Type_qq1;
  if (typeof value === "boolean")
    return C.Type_EsU;
  if (typeof value === "string")
    return C.Type_Ejg;
  t1 = J.getInterceptor(value);
  if (typeof value === "object" && value !== null && !!t1.$isDateTime)
    return C.Type_dVs;
  return;
},

_runJob: function(job, callback, wait) {
  if (job != null)
    job.stop$0(job);
  else
    job = new A._Job(null, null);
  job._callback = callback;
  job._timer = P.Timer_Timer(wait, job.get$complete(job));
  return job;
},

initPolymer: function() {
  if ($._useDirtyChecking)
    $.Zone__current.fork$1$specification(O.dirtyCheckZoneSpec()).run$1(A._initPolymerOptimized$closure);
  else
    A._initPolymerOptimized();
},

_initPolymerOptimized: function() {
  var t1 = document;
  W._registerCustomElement(window, t1, "polymer-element", C.Type_YnA, null);
  A._loadLibraries();
  A._preventFlashOfUnstyledContent();
  $.get$customElementsReady().then$1(new A._initPolymerOptimized_closure());
},

_loadLibraries: function() {
  var lib, e, s, t1, t2, exception, t3;
  for (t1 = $.get$_librariesToLoad(), t1.toString, t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();) {
    lib = t2._current;
    try {
      A._loadLibrary(lib);
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      t1 = null;
      t3 = new P._Future(0, $.Zone__current, null, null, null, null, null, null);
      t3.$builtinTypeInfo = [t1];
      t3 = new P._AsyncCompleter(t3);
      t3.$builtinTypeInfo = [t1];
      t1 = t3.future;
      if (t1._state !== 0)
        H.throwExpression(new P.StateError("Future already completed"));
      t1._asyncCompleteError$2(e, s);
    }

  }
},

_discoverScripts: function(doc, baseUri, seen, scripts) {
  var line, t1, scriptSeen, node, t2, url;
  if (seen == null)
    seen = P.LinkedHashSet_LinkedHashSet(null, null, null, W.Document);
  if (scripts == null)
    scripts = [];
  if (doc == null) {
    line = "warning: " + H.S(baseUri) + " not found.";
    t1 = $.printToZone;
    if (t1 == null)
      H.printToConsole(line);
    else
      t1.call$1(line);
    return scripts;
  }
  if (seen.contains$1(seen, doc))
    return scripts;
  seen.add$1(seen, doc);
  for (t1 = W._FrozenElementList$_wrap(doc.querySelectorAll("script,link[rel=\"import\"]"), null), t1 = t1.get$iterator(t1), scriptSeen = false; t1.moveNext$0();) {
    node = t1._current;
    t2 = J.getInterceptor$x(node);
    if (typeof node === "object" && node !== null && !!t2.$isLinkElement)
      A._discoverScripts(node.import, node.href, seen, scripts);
    else if (typeof node === "object" && node !== null && !!t2.$isScriptElement0 && node.type === "application/dart")
      if (!scriptSeen) {
        url = t2.get$src(node);
        scripts.push(url === "" ? baseUri : url);
        scriptSeen = true;
      } else {
        line = "warning: more than one Dart script tag in " + H.S(baseUri) + ". Dartium currently only allows a single Dart script tag per document.";
        t2 = $.printToZone;
        if (t2 == null)
          H.printToConsole(line);
        else
          t2.call$1(line);
      }
  }
  return scripts;
},

_loadLibrary: function(uriString) {
  var t1, uri, lib, packageUri, canonicalLib, line, t2, $arguments, t3, t4, c, meta, type, waiting;
  t1 = $.get$_rootUri();
  t1.toString;
  uri = t1.resolveUri$1(P.Uri$_fromMatch($.get$Uri__splitRe().firstMatch$1(uriString)));
  t1 = $.get$_libs().__js_mirrors$_source;
  lib = t1.$index(t1, uri);
  if (J.startsWith$1$s(uri._path, $.get$_packageRoot()) && J.endsWith$1$s(uri._path, ".dart")) {
    t1 = "package:" + J.substring$1$s(uri._path, $.get$_packageRoot().length);
    packageUri = P.Uri$_fromMatch($.get$Uri__splitRe().firstMatch$1(t1));
    t1 = $.get$_libs().__js_mirrors$_source;
    canonicalLib = t1.$index(t1, packageUri);
    if (canonicalLib != null)
      lib = canonicalLib;
  }
  if (lib == null) {
    line = "warning: " + H.S(uri) + " library not found";
    t1 = $.printToZone;
    if (t1 == null)
      H.printToConsole(line);
    else
      t1.call$1(line);
    return;
  }
  t1 = lib.get$functions().__js_mirrors$_source;
  t1 = t1.get$values(t1);
  t2 = t1._iterable;
  t2 = t2.get$iterator(t2);
  $arguments = H.substitute(t1.$asMappedIterable, H.getRuntimeTypeInfo(t1));
  t3 = $arguments == null ? null : $arguments[0];
  $arguments = H.substitute(t1.$asMappedIterable, H.getRuntimeTypeInfo(t1));
  t4 = $arguments == null ? null : $arguments[1];
  t1 = new H.MappedIterator(null, t2, t1._f);
  t1.$builtinTypeInfo = [t3, t4];
  for (; t1.moveNext$0();)
    A._maybeInvoke(lib, t1._current);
  t1 = J.get$classes$x(lib);
  t1 = t1.get$values(t1);
  t2 = t1._iterable;
  t2 = t2.get$iterator(t2);
  $arguments = H.substitute(t1.$asMappedIterable, H.getRuntimeTypeInfo(t1));
  t3 = $arguments == null ? null : $arguments[0];
  $arguments = H.substitute(t1.$asMappedIterable, H.getRuntimeTypeInfo(t1));
  t4 = $arguments == null ? null : $arguments[1];
  t1 = new H.MappedIterator(null, t2, t1._f);
  t1.$builtinTypeInfo = [t3, t4];
  for (; t1.moveNext$0();) {
    c = t1._current;
    for (t2 = J.get$iterator$ax(c.get$metadata()); t2.moveNext$0();) {
      meta = t2.get$current().get$reflectee();
      t3 = J.getInterceptor(meta);
      if (typeof meta === "object" && meta !== null && !!t3.$isCustomTag) {
        t3 = meta.tagName;
        type = M.getReflectedTypeWorkaround(c);
        if (type == null)
          type = C.Type_I2I;
        t4 = $.get$_typesByName();
        t4.$indexSet(t4, t3, type);
        t4 = $.get$_waitType();
        waiting = t4.remove$1(t4, t3);
        if (waiting != null)
          J.registerWhenReady$0$x(waiting);
      }
    }
  }
},

_maybeInvoke: function(obj, method) {
  var t1, annotationFound, line;
  for (t1 = J.get$iterator$ax(method.get$metadata()); annotationFound = false, t1.moveNext$0();)
    if (t1.get$current().get$reflectee() === C.C__InitMethodAnnotation) {
      annotationFound = true;
      break;
    }
  if (!annotationFound)
    return;
  if (!method.get$isStatic()) {
    line = "warning: methods marked with @initMethod should be static, " + H.S(method.get$simpleName()) + " is not.";
    t1 = $.printToZone;
    if (t1 == null)
      H.printToConsole(line);
    else
      t1.call$1(line);
    return;
  }
  t1 = method.get$parameters();
  t1 = t1.where$1(t1, new A._maybeInvoke_closure());
  if (t1.get$iterator(t1).moveNext$0()) {
    line = "warning: methods marked with @initMethod should take no arguments, " + H.S(method.get$simpleName()) + " expects some.";
    t1 = $.printToZone;
    if (t1 == null)
      H.printToConsole(line);
    else
      t1.call$1(line);
    return;
  }
  obj.invoke$2(method.get$simpleName(), C.List_empty);
},

_preventFlashOfUnstyledContent_closure: {"": "Closure;",
  call$1: function(_) {
    A.Polymer_unveilElements();
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

PolymerDeclaration: {"": "HtmlElement;_type,_supertype,_super,_polymer$_name,_polymer$_publish=,_publishLC=,_polymer$_observe=,_instanceAttributes=,_sheets,_styles,_eventDelegates=,_templateDelegates",
  get$type: function(receiver) {
    return receiver._type;
  },
  get$superDeclaration: function(receiver) {
    return receiver._super;
  },
  get$name: function(receiver) {
    return receiver._polymer$_name;
  },
  get$templateContent: function(receiver) {
    var template, t1, t2;
    template = receiver.querySelector("template");
    if (template != null) {
      t1 = J.getInterceptor(template);
      t2 = J.get$content$x(typeof template === "object" && template !== null && !!t1.$isNodeBindExtension ? template : M.nodeBindFallback(template));
      t1 = t2;
    } else
      t1 = null;
    return t1;
  },
  registerWhenReady$0: function(receiver) {
    var extendee;
    if (this.waitingForType$1(receiver, receiver._polymer$_name))
      return;
    extendee = new W._ElementAttributeMap(receiver)._element.getAttribute("extends");
    if (this.waitingForExtendee$1(receiver, extendee))
      return;
    this.register$2(receiver, receiver._polymer$_name, extendee);
    A._notifySuper(receiver._polymer$_name);
  },
  waitingForType$1: function(receiver, $name) {
    var t1 = $.get$_typesByName();
    if (t1.$index(t1, $name) != null)
      return false;
    t1 = $.get$_waitType();
    t1.$indexSet(t1, $name, receiver);
    if (new W._ElementAttributeMap(receiver)._element.hasAttribute("noscript") === true)
      A.Polymer_register($name, null);
    return true;
  },
  waitingForExtendee$1: function(receiver, extendee) {
    if (extendee != null && J.indexOf$1$asx(extendee, "-") >= 0)
      if (!$.get$_declarations().containsKey$1(extendee)) {
        J.add$1$ax($.get$_waitSuper().putIfAbsent$2(extendee, new A.PolymerDeclaration_waitingForExtendee_closure()), receiver);
        return true;
      }
    return false;
  },
  register$2: function(receiver, $name, extendee) {
    var t1;
    this.buildType$2(receiver, $name, extendee);
    t1 = $.get$_declarations();
    t1.$indexSet(t1, $name, receiver);
    this.desugar$2(receiver, $name, extendee);
    this.registerType$1(receiver, $name);
  },
  buildType$2: function(receiver, $name, extendee) {
    var t1, cls;
    t1 = $.get$_typesByName();
    receiver._type = t1.$index(t1, $name);
    t1 = $.get$_typesByName();
    receiver._supertype = t1.$index(t1, extendee);
    if (receiver._supertype != null) {
      t1 = $.get$_declarations();
      receiver._super = t1.$index(t1, extendee);
    }
    cls = P.reflectClass(receiver._type);
    this.publishAttributes$2(receiver, cls, receiver._super);
    t1 = receiver._polymer$_publish;
    if (t1 != null)
      receiver._publishLC = this._lowerCaseMap$1(receiver, t1);
    this.inferObservers$1(receiver, cls);
  },
  desugar$2: function(receiver, $name, extendee) {
    var cls, registered;
    this.accumulateInstanceAttributes$0(receiver);
    this.addAttributeDelegates$1(receiver, receiver._eventDelegates);
    this.cacheSheets$0(receiver);
    this.cacheStyles$0(receiver);
    this.installLocalSheets$0(receiver);
    this.installGlobalStyles$0(receiver);
    A._shimShadowDomStyling(this.get$templateContent(receiver), $name, extendee);
    cls = P.reflectClass(receiver._type);
    registered = J.$index$asx(cls.get$methods(), C.Symbol_registerCallback);
    if (registered != null && registered.get$isStatic() && registered.get$isRegularMethod())
      cls.invoke$2(C.Symbol_registerCallback, [receiver]);
  },
  registerType$1: function(receiver, $name) {
    var decl, baseTag, t1, t2;
    for (decl = receiver, baseTag = null; decl != null;) {
      t1 = J.getInterceptor$x(decl);
      baseTag = t1.get$attributes(decl)._element.getAttribute("extends");
      decl = t1.get$superDeclaration(decl);
    }
    t1 = document;
    t2 = receiver._type;
    W._registerCustomElement(window, t1, $name, t2, baseTag);
  },
  publishAttributes$2: function(receiver, cls, superDecl) {
    var t1, t2, attrs, attr, property, mirror, t3;
    if (superDecl != null && J.get$_polymer$_publish$x(superDecl) != null) {
      t1 = J.get$_polymer$_publish$x(superDecl);
      t2 = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      t2.addAll$1(t2, t1);
      receiver._polymer$_publish = t2;
    }
    receiver._polymer$_publish = A._getProperties(cls, receiver._polymer$_publish, new A.PolymerDeclaration_publishAttributes_closure());
    attrs = new W._ElementAttributeMap(receiver)._element.getAttribute("attributes");
    if (attrs != null) {
      t1 = attrs.split(J.contains$1$asx(attrs, ",") ? "," : " ");
      t2 = new H.ListIterator(t1, t1.length, 0, null);
      H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]);
      for (; t2.moveNext$0();) {
        attr = J.trim$0$s(t2._current);
        if (attr !== "") {
          t1 = receiver._polymer$_publish;
          t1 = t1 != null && t1.containsKey$1(attr);
        } else
          t1 = false;
        if (t1)
          continue;
        property = new H.Symbol0(H.Symbol_validate(attr));
        mirror = J.$index$asx(cls.get$variables(), property);
        if (mirror == null) {
          mirror = J.$index$asx(cls.get$getters(), property);
          if (mirror != null) {
            t1 = H.Symbol_validate(H.S(J.get$_name$x(mirror.get$simpleName())) + "=");
            t1 = cls.get$setters().containsKey$1(new H.Symbol0(t1)) !== true;
          } else
            t1 = false;
          if (t1)
            mirror = null;
        }
        if (mirror == null) {
          window;
          t1 = $.get$Console__safeConsole();
          t3 = "property for attribute " + attr + " of polymer-element name=" + receiver._polymer$_name + " not found.";
          t1.toString;
          if (typeof console != "undefined")
            console.warn(t3);
          continue;
        }
        if (receiver._polymer$_publish == null)
          receiver._polymer$_publish = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
        t1 = receiver._polymer$_publish;
        t1.$indexSet(t1, property, mirror);
      }
    }
  },
  accumulateInstanceAttributes$0: function(receiver) {
    var t1, t2;
    receiver._instanceAttributes = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, P.Object);
    t1 = receiver._super;
    if (t1 != null) {
      t2 = receiver._instanceAttributes;
      t2.addAll$1(t2, J.get$_instanceAttributes$x(t1));
    }
    t1 = new W._ElementAttributeMap(receiver);
    t1.forEach$1(t1, new A.PolymerDeclaration_accumulateInstanceAttributes_closure(receiver));
  },
  addAttributeDelegates$1: function(receiver, delegates) {
    var t1 = new W._ElementAttributeMap(receiver);
    t1.forEach$1(t1, new A.PolymerDeclaration_addAttributeDelegates_closure(delegates));
  },
  cacheSheets$0: function(receiver) {
    var t1, t2;
    receiver._sheets = this.findNodes$1(receiver, "[rel=stylesheet]");
    for (t1 = receiver._sheets, t1.toString, t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();)
      J.remove$0$ax(t2._current);
  },
  cacheStyles$0: function(receiver) {
    var t1, t2;
    receiver._styles = this.findNodes$1(receiver, "style[polymer-scope]");
    for (t1 = receiver._styles, t1.toString, t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();)
      J.remove$0$ax(t2._current);
  },
  installLocalSheets$0: function(receiver) {
    var t1, sheets, $content, cssText, t2, str;
    t1 = receiver._sheets;
    t1.toString;
    sheets = new H.WhereIterable(t1, new A.PolymerDeclaration_installLocalSheets_closure());
    H.setRuntimeTypeInfo(sheets, [null]);
    $content = this.get$templateContent(receiver);
    if ($content != null) {
      cssText = P.StringBuffer$("");
      for (t1 = J.get$iterator$ax(sheets._iterable), t1 = new H.WhereIterator(t1, sheets._f), H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(sheets, "WhereIterable", 0)]), t2 = t1._iterator; t1.moveNext$0();) {
        str = A._cssTextFromSheet(t2.get$current());
        str = typeof str === "string" ? str : H.S(str);
        cssText._contents = cssText._contents + str;
        cssText._contents = cssText._contents + "\n";
      }
      if (cssText._contents.length > 0) {
        t1 = document.createElement("style", null);
        t1.textContent = H.S(cssText);
        t2 = J.getInterceptor$x($content);
        t2.insertBefore$2($content, t1, t2.get$firstChild($content));
      }
    }
  },
  findNodes$2: function(receiver, selector, matcher) {
    var t1, nodes, $content;
    t1 = W._FrozenElementList$_wrap(receiver.querySelectorAll(selector), null);
    nodes = t1.toList$0(t1);
    $content = this.get$templateContent(receiver);
    if ($content != null)
      C.JSArray_methods.addAll$1(nodes, J.queryAll$1$x($content, selector));
    return nodes;
  },
  findNodes$1: function($receiver, selector) {
    return this.findNodes$2($receiver, selector, null);
  },
  installGlobalStyles$0: function(receiver) {
    A.Polymer_applyStyleToScope(this.cssTextToScopeStyle$2(receiver, this.cssTextForScope$1(receiver, "global"), "global"), document.head);
  },
  cssTextForScope$1: function(receiver, scopeDescriptor) {
    var cssText, t1, t2, t3, str;
    cssText = P.StringBuffer$("");
    t1 = new A.PolymerDeclaration_cssTextForScope_matcher("[polymer-scope=" + scopeDescriptor + "]");
    for (t2 = receiver._sheets, t2.toString, t2 = new H.WhereIterable(t2, t1), H.setRuntimeTypeInfo(t2, [null]), t3 = J.get$iterator$ax(t2._iterable), t3 = new H.WhereIterator(t3, t2._f), H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "WhereIterable", 0)]), t2 = t3._iterator; t3.moveNext$0();) {
      str = A._cssTextFromSheet(t2.get$current());
      str = typeof str === "string" ? str : H.S(str);
      cssText._contents = cssText._contents + str;
      cssText._contents = cssText._contents + "\n\n";
    }
    for (t2 = receiver._styles, t2.toString, t1 = new H.WhereIterable(t2, t1), H.setRuntimeTypeInfo(t1, [null]), t2 = J.get$iterator$ax(t1._iterable), t2 = new H.WhereIterator(t2, t1._f), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "WhereIterable", 0)]), t1 = t2._iterator; t2.moveNext$0();) {
      t3 = t1.get$current().get$textContent();
      cssText._contents = cssText._contents + t3;
      cssText._contents = cssText._contents + "\n\n";
    }
    return cssText._contents;
  },
  cssTextToScopeStyle$2: function(receiver, cssText, scopeDescriptor) {
    var t1;
    if (cssText === "")
      return;
    t1 = document.createElement("style", null);
    t1.textContent = cssText;
    t1.toString;
    new W._ElementAttributeMap(t1)._element.setAttribute("element", receiver._polymer$_name + "-" + scopeDescriptor);
    return t1;
  },
  inferObservers$1: function(receiver, cls) {
    var t1, method, $name, t2;
    for (t1 = J.get$iterator$ax(J.get$values$x(cls.get$methods())); t1.moveNext$0();) {
      method = t1.get$current();
      if (method.get$isStatic() || !method.get$isRegularMethod())
        continue;
      $name = J.get$_name$x(method.get$simpleName());
      t2 = J.getInterceptor$s($name);
      if (t2.endsWith$1($name, "Changed") && !t2.$eq($name, "attributeChanged")) {
        if (receiver._polymer$_observe == null)
          receiver._polymer$_observe = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
        $name = t2.substring$2($name, 0, J.$sub$n(t2.get$length($name), 7));
        t2 = receiver._polymer$_observe;
        t2.$indexSet(t2, new H.Symbol0(H.Symbol_validate($name)), method.get$simpleName());
      }
    }
  },
  _lowerCaseMap$1: function(receiver, properties) {
    var map = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, null);
    properties.forEach$1(properties, new A.PolymerDeclaration__lowerCaseMap_closure(map));
    return map;
  },
  PolymerDeclaration$created$0: function(receiver) {
    receiver._polymer$_name = new W._ElementAttributeMap(receiver)._element.getAttribute("name");
    this.registerWhenReady$0(receiver);
  },
  $isPolymerDeclaration: true,
  static: {
"": "PolymerDeclaration__TAG",
PolymerDeclaration$created: function(receiver) {
  receiver._eventDelegates = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
  C.PolymerDeclaration_methods.Element$created$0(receiver);
  C.PolymerDeclaration_methods.PolymerDeclaration$created$0(receiver);
  return receiver;
},

"+new PolymerDeclaration$created:0:0": 0,

PolymerDeclaration_isInstanceAttribute: function($name) {
  return !C.Map_c94aj.containsKey$1($name) && !J.startsWith$1$s($name, "on-");
}}

},

PolymerDeclaration_waitingForExtendee_closure: {"": "Closure;",
  call$0: function() {
    return [];
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

PolymerDeclaration_publishAttributes_closure: {"": "Closure;",
  call$1: function(x) {
    var t1 = J.getInterceptor(x);
    return typeof x === "object" && x !== null && !!t1.$isPublishedProperty;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

PolymerDeclaration_accumulateInstanceAttributes_closure: {"": "Closure;this_0",
  call$2: function($name, value) {
    var t1;
    if (A.PolymerDeclaration_isInstanceAttribute($name)) {
      t1 = this.this_0._instanceAttributes;
      t1.$indexSet(t1, $name, value);
    }
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

PolymerDeclaration_addAttributeDelegates_closure: {"": "Closure;delegates_0",
  call$2: function($name, value) {
    var t1, t2, start, end, t3;
    t1 = J.getInterceptor$s($name);
    if (t1.startsWith$1($name, "on-")) {
      t2 = J.getInterceptor$asx(value);
      start = t2.indexOf$1(value, "{{");
      end = t2.lastIndexOf$1(value, "}}");
      if (start >= 0 && J.$ge$n(end, 0)) {
        t3 = this.delegates_0;
        t3.$indexSet(t3, t1.substring$1($name, 3), C.JSString_methods.trim$0(t2.substring$2(value, start + 2, end)));
      }
    }
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

PolymerDeclaration_installLocalSheets_closure: {"": "Closure;",
  call$1: function(s) {
    return J.get$attributes$x(s)._element.hasAttribute("polymer-scope") !== true;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

PolymerDeclaration_cssTextForScope_matcher: {"": "Closure;selector_0",
  call$1: function(s) {
    return J.matches$1$x(s, this.selector_0);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

PolymerDeclaration__lowerCaseMap_closure: {"": "Closure;map_0",
  call$2: function($name, value) {
    var t1 = this.map_0;
    t1.$indexSet(t1, J.toLowerCase$0$s(J.get$_name$x($name)), value);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

closure20: {"": "Closure;",
  call$0: function() {
    var map = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, J.JSString);
    C.Map_484CA.forEach$1(C.Map_484CA, new A._closure7(map));
    return map;
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

_closure7: {"": "Closure;map_0",
  call$2: function(onName, eventType) {
    var t1 = this.map_0;
    t1.$indexSet(t1, eventType, onName);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

PublishedProperty: {"": "ObservableProperty;", $isPublishedProperty: true},

Polymer: {"": ["Object;$$=-", function() {
    return [C.C_Reflectable];
  }],
  get$applyAuthorStyles: function(receiver) {
    return false;
  },
  "+applyAuthorStyles": 0,
  getShadowRoot$1: function(receiver, customTagName) {
    var t1 = receiver._shadowRoots;
    return t1.$index(t1, customTagName);
  },
  polymerCreated$0: function(receiver) {
    if (W._convertNativeToDart_Window(this.get$ownerDocument(receiver).defaultView) != null || $.Polymer__preparingElements > 0)
      this.prepareElement$0(receiver);
  },
  get$_customTagName: function(receiver) {
    var isAttr = this.get$attributes(receiver)._element.getAttribute("is");
    return isAttr == null || isAttr === "" ? this.get$localName(receiver) : isAttr;
  },
  prepareElement$0: function(receiver) {
    var t1, t2;
    t1 = this.get$_customTagName(receiver);
    t2 = $.get$_declarations();
    receiver._declaration = t2.$index(t2, t1);
    this.observeProperties$0(receiver);
    this.copyInstanceAttributes$0(receiver);
    this.takeAttributes$0(receiver);
    this.addHostListeners$0(receiver);
    $.Polymer__preparingElements = $.Polymer__preparingElements + 1;
    this.parseDeclarations$1(receiver, receiver._declaration);
    $.Polymer__preparingElements = $.Polymer__preparingElements - 1;
  },
  enteredView$0: function(receiver) {
    if (receiver._declaration == null)
      this.prepareElement$0(receiver);
    this.cancelUnbindAll$1$preventCascade(receiver, true);
  },
  "+enteredView:0:0": 0,
  leftView$0: function(receiver) {
    this.asyncUnbindAll$0(receiver);
  },
  parseDeclarations$1: function(receiver, declaration) {
    if (declaration != null) {
      this.parseDeclarations$1(receiver, J.get$superDeclaration$x(declaration));
      this.parseDeclaration$1(receiver, declaration);
    }
  },
  parseDeclaration$1: function(receiver, elementElement) {
    var t1, template, root, t2, $name;
    t1 = J.getInterceptor$x(elementElement);
    template = t1.query$1(elementElement, "template");
    if (template != null)
      if (J.get$attributes$x(receiver._declaration)._element.hasAttribute("lightdom") === true) {
        this.lightFromTemplate$1(receiver, template);
        root = null;
      } else
        root = this.shadowFromTemplate$1(receiver, template);
    else
      root = null;
    t2 = J.getInterceptor(root);
    if (typeof root !== "object" || root === null || !t2.$isShadowRoot)
      return;
    $name = t1.get$attributes(elementElement)._element.getAttribute("name");
    if ($name == null)
      return;
    t1 = receiver._shadowRoots;
    t1.$indexSet(t1, $name, root);
  },
  lightFromTemplate$1: function(receiver, template) {
    var t1, dom;
    if (template == null)
      return;
    t1 = J.getInterceptor(template);
    t1 = typeof template === "object" && template !== null && !!t1.$isNodeBindExtension ? template : M.nodeBindFallback(template);
    dom = t1.createInstance$2(receiver, receiver.syntax);
    this.append$1(receiver, dom);
    this.marshalNodeReferences$1(receiver, receiver);
    return dom;
  },
  shadowFromTemplate$1: function(receiver, template) {
    var root, t1;
    if (template == null)
      return;
    this.get$shadowRoot(receiver);
    root = this.createShadowRoot$0(receiver);
    t1 = $.get$_shadowHost();
    t1.$indexSet(t1, root, receiver);
    root.applyAuthorStyles = this.get$applyAuthorStyles(receiver);
    root.resetStyleInheritance = false;
    t1 = J.getInterceptor(template);
    t1 = typeof template === "object" && template !== null && !!t1.$isNodeBindExtension ? template : M.nodeBindFallback(template);
    root.appendChild(t1.createInstance$2(receiver, receiver.syntax));
    this.marshalNodeReferences$1(receiver, root);
    return root;
  },
  marshalNodeReferences$1: function(receiver, root) {
    var t1, t2, t3, n;
    for (t1 = J.queryAll$1$x(root, "[id]"), t1 = t1.get$iterator(t1), t2 = receiver.$$, t3 = J.getInterceptor$ax(t2); t1.moveNext$0();) {
      n = t1._current;
      t3.$indexSet(t2, J.get$id$x(n), n);
    }
  },
  attributeChanged$3: function(receiver, $name, oldValue, newValue) {
    var t1 = J.getInterceptor($name);
    if (!t1.$eq($name, "class") && !t1.$eq($name, "style"))
      this.attributeToProperty$2(receiver, $name, newValue);
  },
  copyInstanceAttributes$0: function(receiver) {
    var t1 = J.get$_instanceAttributes$x(receiver._declaration);
    t1.forEach$1(t1, new A.Polymer_copyInstanceAttributes_closure(receiver));
  },
  takeAttributes$0: function(receiver) {
    var t1;
    if (J.get$_publishLC$x(receiver._declaration) == null)
      return;
    t1 = this.get$attributes(receiver);
    t1.forEach$1(t1, this.get$attributeToProperty(receiver));
  },
  attributeToProperty$2: function(receiver, $name, value) {
    var property, $self, currentValue, newValue;
    property = this.propertyForAttribute$1(receiver, $name);
    if (property == null)
      return;
    if (value == null || J.contains$1$asx(value, $.get$Polymer_bindPattern()) === true)
      return;
    $self = H.reflect(receiver);
    currentValue = $self.getField$1(property.get$simpleName()).reflectee;
    newValue = Z.deserializeValue(value, currentValue, A._inferPropertyType(currentValue, property));
    if (newValue == null ? currentValue != null : newValue !== currentValue)
      $self.setField$2(property.get$simpleName(), newValue);
  },
  get$attributeToProperty: function(_receiver) {
    return new P.BoundClosure$i2(this, A.Polymer.prototype.attributeToProperty$2, _receiver, "attributeToProperty$2");
  },
  propertyForAttribute$1: function(receiver, $name) {
    var publishLC = J.get$_publishLC$x(receiver._declaration);
    if (publishLC == null)
      return;
    return publishLC.$index(publishLC, $name);
  },
  serializeValue$1: function(receiver, value) {
    if (value == null)
      return;
    if (typeof value === "boolean")
      return value ? "" : null;
    else if (typeof value === "string" || typeof value === "number" && Math.floor(value) === value || typeof value === "number")
      return H.S(value);
    return;
  },
  reflectPropertyToAttribute$1: function(receiver, $name) {
    var propValue, serializedValue, t1;
    propValue = H.reflect(receiver).getField$1($name).reflectee;
    serializedValue = this.serializeValue$1(receiver, propValue);
    if (serializedValue != null)
      this.get$attributes(receiver)._element.setAttribute(J.get$_name$x($name), serializedValue);
    else if (typeof propValue === "boolean") {
      t1 = this.get$attributes(receiver);
      t1.remove$1(t1, J.get$_name$x($name));
    }
  },
  bind$3: function(receiver, $name, model, path) {
    var property, observer, t1;
    if (receiver._declaration == null)
      this.prepareElement$0(receiver);
    property = this.propertyForAttribute$1(receiver, $name);
    if (property == null)
      return J.bind$3$x(M.nodeBindFallback(receiver), $name, model, path);
    else {
      J.unbind$1$x(M.nodeBindFallback(receiver), $name);
      observer = A.Polymer__bindProperties(receiver, property.get$simpleName(), model, path);
      this.reflectPropertyToAttribute$1(receiver, property.get$simpleName());
      t1 = J.get$bindings$x(M.nodeBindFallback(receiver));
      t1.$indexSet(t1, $name, observer);
      return observer;
    }
  },
  get$bindings: function(receiver) {
    return J.get$bindings$x(M.nodeBindFallback(receiver));
  },
  unbind$1: function(receiver, $name) {
    return J.unbind$1$x(M.nodeBindFallback(receiver), $name);
  },
  asyncUnbindAll$0: function(receiver) {
    if (receiver._unbound === true)
      return;
    $.get$_unbindLog().fine$1("[" + this.get$localName(receiver) + "] asyncUnbindAll");
    receiver._unbindAllJob = A._runJob(receiver._unbindAllJob, this.get$unbindAll(receiver), C.Duration_0);
  },
  unbindAll$0: function(receiver) {
    var root;
    if (receiver._unbound === true)
      return;
    this.unbindAllProperties$0(receiver);
    J.unbindAll$0$x(M.nodeBindFallback(receiver));
    root = this.get$shadowRoot(receiver);
    for (; root != null;) {
      A.Polymer__unbindNodeTree(root);
      root = root.olderShadowRoot;
    }
    receiver._unbound = true;
  },
  get$unbindAll: function(_receiver) {
    return new H.BoundClosure$i0(this, A.Polymer.prototype.unbindAll$0, _receiver, "unbindAll$0");
  },
  cancelUnbindAll$1$preventCascade: function(receiver, preventCascade) {
    var t1;
    if (receiver._unbound === true) {
      $.get$_unbindLog().warning$1("[" + this.get$localName(receiver) + "] already unbound, cannot cancel unbindAll");
      return;
    }
    $.get$_unbindLog().fine$1("[" + this.get$localName(receiver) + "] cancelUnbindAll");
    t1 = receiver._unbindAllJob;
    if (t1 != null) {
      t1.stop$0(t1);
      receiver._unbindAllJob = null;
    }
    if (preventCascade === true)
      return;
    A.Polymer__forNodeTree(this.get$shadowRoot(receiver), new A.Polymer_cancelUnbindAll_closure());
  },
  cancelUnbindAll$0: function($receiver) {
    return this.cancelUnbindAll$1$preventCascade($receiver, null);
  },
  observeProperties$0: function(receiver) {
    var t1, t2, observe, publish, t3, t4, $name;
    t1 = receiver._declaration;
    t2 = J.getInterceptor$x(t1);
    observe = t2.get$_polymer$_observe(t1);
    publish = t2.get$_polymer$_publish(t1);
    t1 = observe == null;
    if (!t1)
      for (observe.toString, t2 = new P.LinkedHashMapKeyIterable(observe), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(observe, "_LinkedHashMap", 0)]), t3 = t2._collection$_map, t4 = t3._modifications, t4 = new P.LinkedHashMapKeyIterator(t3, t4, null, null), H.setRuntimeTypeInfo(t4, [H.getRuntimeTypeArgument(t2, "LinkedHashMapKeyIterable", 0)]), t4._cell = t4._collection$_map._first; t4.moveNext$0();) {
        $name = t4._collection$_current;
        this.observeArrayValue$3(receiver, $name, H.reflect(receiver)._invoke$4($name, 1, J.get$_name$x($name), []), null);
      }
    if (!t1 || publish != null)
      receiver._propertyObserver = this.get$changes(receiver).listen$1(this.get$notifyPropertyChanges(receiver));
  },
  notifyPropertyChanges$1: function(receiver, changes) {
    var t1, t2, observe, publish, valuePairs, c;
    t1 = receiver._declaration;
    t2 = J.getInterceptor$x(t1);
    observe = t2.get$_polymer$_observe(t1);
    publish = t2.get$_polymer$_publish(t1);
    valuePairs = P.LinkedHashMap_LinkedHashMap(null, null, null, P.Symbol, A._PropertyValue);
    for (t1 = J.get$iterator$ax(changes); t1.moveNext$0();) {
      c = t1.get$current();
      t2 = J.getInterceptor(c);
      if (typeof c !== "object" || c === null || !t2.$isPropertyChangeRecord)
        continue;
      J.set$newValue$x(valuePairs.putIfAbsent$2(c.name, new A.Polymer_notifyPropertyChanges_closure(c)), c.newValue);
    }
    valuePairs.forEach$1(valuePairs, new A.Polymer_notifyPropertyChanges_closure0(receiver, changes, observe, publish));
  },
  get$notifyPropertyChanges: function(_receiver) {
    return new J.BoundClosure$i1(this, A.Polymer.prototype.notifyPropertyChanges$1, _receiver, "notifyPropertyChanges$1");
  },
  observeArrayValue$3: function(receiver, $name, value, old) {
    var observe = J.get$_polymer$_observe$x(receiver._declaration);
    if (observe == null)
      return;
    if (observe.$index(observe, $name) == null)
      return;
  },
  unbindAllProperties$0: function(receiver) {
    var t1 = receiver._propertyObserver;
    if (t1 != null) {
      t1.cancel$0();
      receiver._propertyObserver = null;
    }
    this.unregisterObservers$0(receiver);
  },
  unregisterObservers$0: function(receiver) {
    var t1, t2;
    t1 = receiver._observers;
    if (t1 == null)
      return;
    for (t1 = t1.get$values(t1), t2 = t1._iterable, t2 = t2.get$iterator(t2), t2 = new H.MappedIterator(null, t2, t1._f), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "MappedIterable", 0), H.getRuntimeTypeArgument(t1, "MappedIterable", 1)]); t2.moveNext$0();)
      t2._current.cancel$0();
    t1 = receiver._observers;
    t1.clear$0(t1);
    receiver._observers = null;
  },
  addHostListeners$0: function(receiver) {
    var events = J.get$_eventDelegates$x(receiver._declaration);
    if (events.get$isEmpty(events))
      return;
    if ($.get$_eventsLog().isLoggable$1(C.Level_FINE_500))
      $.get$_eventsLog().fine$1("[" + this.get$localName(receiver) + "] addHostListeners: " + H.S(events));
    this.addNodeListeners$3(receiver, receiver, events.get$keys(), this.get$hostEventListener(receiver));
  },
  addNodeListeners$3: function(receiver, node, events, listener) {
    var t1, t2, $name, t3, $arguments, t4;
    for (t1 = events._collection$_map, t2 = t1._modifications, t2 = new P.LinkedHashMapKeyIterator(t1, t2, null, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(events, "LinkedHashMapKeyIterable", 0)]), t2._cell = t2._collection$_map._first, t1 = J.getInterceptor$x(node); t2.moveNext$0();) {
      $name = t2._collection$_current;
      t3 = t1.get$on(node);
      t3 = t3.$index(t3, $name);
      $arguments = H.substitute(t3.$as_EventStream, H.getRuntimeTypeInfo(t3));
      t4 = $arguments == null ? null : $arguments[0];
      t3 = new W._EventStreamSubscription(0, t3._target, t3._eventType, W._wrapZone(listener), t3._useCapture);
      t3.$builtinTypeInfo = [t4];
      t4 = t3._onData;
      if (t4 != null && t3._pauseCount <= 0)
        J.addEventListener$3$x(t3._target, t3._eventType, t4, t3._useCapture);
    }
  },
  hostEventListener$1: function(receiver, $event) {
    var t1, log, t2, h;
    t1 = J.getInterceptor$x($event);
    if (t1.get$bubbles($event) !== true)
      return;
    log = $.get$_eventsLog().isLoggable$1(C.Level_FINE_500);
    if (log)
      $.get$_eventsLog().fine$1(">>> [" + this.get$localName(receiver) + "]: hostEventListener(" + H.S(t1.get$type($event)) + ")");
    t2 = J.get$_eventDelegates$x(receiver._declaration);
    h = t2.$index(t2, A._eventNameFromType(t1.get$type($event)));
    if (h != null) {
      if (log)
        $.get$_eventsLog().fine$1("[" + this.get$localName(receiver) + "] found host handler name [" + H.S(h) + "]");
      this.dispatchMethod$3(receiver, receiver, h, [$event, typeof $event === "object" && $event !== null && !!t1.$isCustomEvent ? t1.get$detail($event) : null, receiver]);
    }
    if (log)
      $.get$_eventsLog().fine$1("<<< [" + this.get$localName(receiver) + "]: hostEventListener(" + H.S(t1.get$type($event)) + ")");
  },
  get$hostEventListener: function(_receiver) {
    return new J.BoundClosure$i1(this, A.Polymer.prototype.hostEventListener$1, _receiver, "hostEventListener$1");
  },
  dispatchMethod$3: function(receiver, object, callbackOrMethod, args) {
    var log, t1;
    log = $.get$_eventsLog().isLoggable$1(C.Level_FINE_500);
    if (log)
      $.get$_eventsLog().fine$1(">>> [" + this.get$localName(receiver) + "]: dispatch " + H.S(callbackOrMethod));
    t1 = J.getInterceptor(callbackOrMethod);
    if (typeof callbackOrMethod === "object" && callbackOrMethod !== null && !!t1.$isFunction)
      H.Primitives_applyFunction(callbackOrMethod, args, P.Function__toMangledNames(null));
    else if (typeof callbackOrMethod === "string")
      A.Polymer__invokeMethod(object, new H.Symbol0(H.Symbol_validate(callbackOrMethod)), args);
    else
      $.get$_eventsLog().warning$1("invalid callback");
    if (log)
      $.get$_eventsLog().info$1("<<< [" + this.get$localName(receiver) + "]: dispatch " + H.S(callbackOrMethod));
  },
  $isPolymer: true,
  $isNodeBindExtension: true,
  $isObservable: true,
  $isElement: true,
  $isInterceptor: true,
  $isNode: true,
  $isEventTarget: true
},

Polymer_copyInstanceAttributes_closure: {"": "Closure;this_0",
  call$2: function($name, value) {
    J.get$attributes$x(this.this_0).putIfAbsent$2($name, new A.Polymer_copyInstanceAttributes__closure(value));
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

Polymer_copyInstanceAttributes__closure: {"": "Closure;value_1",
  call$0: function() {
    return this.value_1;
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Polymer_cancelUnbindAll_closure: {"": "Closure;",
  call$1: function(n) {
    var t1 = J.getInterceptor$x(n);
    if (typeof n === "object" && n !== null && !!t1.$isPolymer)
      t1.cancelUnbindAll$0(n);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Polymer__unbindNodeTree_closure: {"": "Closure;",
  call$1: function(node) {
    var t1 = J.getInterceptor(node);
    return J.unbindAll$0$x(typeof node === "object" && node !== null && !!t1.$isNodeBindExtension ? node : M.nodeBindFallback(node));
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Polymer_notifyPropertyChanges_closure: {"": "Closure;c_0",
  call$0: function() {
    return new A._PropertyValue(this.c_0.oldValue, null);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Polymer_notifyPropertyChanges_closure0: {"": "Closure;this_1,changes_2,observe_3,publish_4",
  call$2: function($name, pair) {
    var t1, method, t2;
    t1 = this.publish_4;
    if (t1 != null && t1.containsKey$1($name))
      J.reflectPropertyToAttribute$1$x(this.this_1, $name);
    t1 = this.observe_3;
    if (t1 == null)
      return;
    method = t1.$index(t1, $name);
    if (method != null) {
      t1 = this.this_1;
      t2 = J.getInterceptor$x(pair);
      J.observeArrayValue$3$x(t1, $name, t2.get$newValue(pair), t2.get$oldValue(pair));
      A.Polymer__invokeMethod(t1, method, [t2.get$oldValue(pair), t2.get$newValue(pair), this.changes_2]);
    }
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

Polymer_observeArrayValue_closure: {"": "Closure;this_0,old_1,callbackName_2",
  call$1: function(changes) {
    A.Polymer__invokeMethod(this.this_0, this.callbackName_2, [this.old_1]);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Polymer_getBindingWithEvents_closure: {"": "Closure;model_0,path_1,name_2,node_3,originalGetBinding_4",
  call$1: function($event) {
    var t1, ctrlr, t2, method, t3, obj;
    t1 = this.node_3;
    ctrlr = A.Polymer__findController(t1);
    t2 = J.getInterceptor$x(ctrlr);
    if (typeof ctrlr !== "object" || ctrlr === null || !t2.$isPolymer)
      return;
    method = this.path_1;
    t3 = J.getInterceptor$asx(method);
    if (J.$eq(t3.$index(method, 0), "@")) {
      obj = this.model_0;
      method = J.get$value$x(this.originalGetBinding_4.call$4(obj, t3.substring$1(method, 1), this.name_2, t1));
    } else
      obj = ctrlr;
    t3 = J.getInterceptor$x($event);
    t2.dispatchMethod$3(ctrlr, obj, method, [$event, typeof $event === "object" && $event !== null && !!t3.$isCustomEvent ? t3.get$detail($event) : null, t1]);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Polymer__invokeMethod_closure: {"": "Closure;",
  call$1: function(p) {
    return !p.get$isOptional();
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Polymer_unveilElements_closure: {"": "Closure;",
  call$1: function(_) {
    var nodes, t1, t2;
    nodes = W._FrozenElementList$_wrap(document.querySelectorAll(".polymer-veiled"), null);
    for (t1 = nodes.get$iterator(nodes); t1.moveNext$0();) {
      t2 = J.get$classes$x(t1._current);
      t2.add$1(t2, "polymer-unveil");
      t2.remove$1(t2, "polymer-veiled");
    }
    if (nodes.get$isNotEmpty(nodes)) {
      t1 = C._CustomEventStreamProvider__determineTransitionEventType.forTarget$1(window);
      t1.get$first(t1).then$1(new A.Polymer_unveilElements__closure(nodes));
    }
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Polymer_unveilElements__closure: {"": "Closure;nodes_0",
  call$1: function(_) {
    var t1, t2;
    for (t1 = this.nodes_0, t1 = t1.get$iterator(t1); t1.moveNext$0();) {
      t2 = J.get$classes$x(t1._current);
      t2.remove$1(t2, "polymer-unveil");
    }
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_PolymerBinding: {"": "NodeBinding;_polymer$_target,_property,_sub,_lastValue,_node,_model,_observer,_pathSub,property,path",
  close$0: function(_) {
    if (this._node == null)
      return;
    this._sub.cancel$0();
    M.NodeBinding.prototype.close$0.call(this, this);
  },
  get$close: function(_receiver) {
    return new H.BoundClosure$i0(this, A._PolymerBinding.prototype.close$0, _receiver, "close$0");
  },
  valueChanged$1: function(newValue) {
    this._lastValue = newValue;
    this._polymer$_target.setField$2(this._property, newValue);
  },
  get$valueChanged: function() {
    return new H.BoundClosure$1(this, A._PolymerBinding.prototype.valueChanged$1, null, "valueChanged$1");
  },
  _propertyValueChanged$1: function(records) {
    var t1, t2, record, t3, newValue;
    for (t1 = J.get$iterator$ax(records), t2 = this._property; t1.moveNext$0();) {
      record = t1.get$current();
      t3 = J.getInterceptor(record);
      if (typeof record === "object" && record !== null && !!t3.$isPropertyChangeRecord && J.$eq(record.name, t2)) {
        newValue = this._polymer$_target._invoke$4(t2, 1, J.get$_name$x(t2), []).reflectee;
        t1 = this._lastValue;
        if (t1 == null ? newValue != null : t1 !== newValue)
          J.set$value$x(this._observer, newValue);
        return;
      }
    }
  },
  get$_propertyValueChanged: function() {
    return new H.BoundClosure$1(this, A._PolymerBinding.prototype._propertyValueChanged$1, null, "_propertyValueChanged$1");
  },
  _PolymerBinding$4: function(node, property, model, path) {
    this._sub = J.get$changes$x(node).listen$1(this.get$_propertyValueChanged());
  },
  static: {
_PolymerBinding$: function(node, property, model, path) {
  var t1, t2, t3;
  t1 = H.reflect(node);
  t2 = J.get$_name$x(property);
  t3 = path != null ? path : "";
  t3 = new A._PolymerBinding(t1, property, null, null, node, model, null, null, t2, t3);
  t3._observePath$0();
  t3._PolymerBinding$4(node, property, model, path);
  return t3;
}}

},

PolymerElement: {"": ["HtmlElement_Polymer_ChangeNotifier;_changes,_records,_declaration,_observers,_unbound,_unbindAllJob,_propertyObserver,syntax,_shadowRoots,$$-", null, null, null, null, null, null, null, null, null, function() {
    return [C.C_Reflectable];
  }],
  PolymerElement$created$0: function(receiver) {
    this.polymerCreated$0(receiver);
  },
  static: {
PolymerElement$created: function(receiver) {
  var t1, t2, t3, t4, t5;
  t1 = $.get$Polymer__polymerSyntax();
  t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
  t3 = J.JSString;
  t4 = W.Element;
  t5 = new B.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null);
  H.setRuntimeTypeInfo(t5, [t3, t4]);
  receiver.syntax = t1;
  receiver._shadowRoots = t2;
  receiver.$$ = t5;
  C.PolymerElement_methods.Element$created$0(receiver);
  C.PolymerElement_methods.PolymerElement$created$0(receiver);
  return receiver;
},

"+new PolymerElement$created:0:0": 0}

},

HtmlElement_Polymer: {"": ["HtmlElement+Polymer;$$=-", function() {
    return [C.C_Reflectable];
  }], $isPolymer: true, $isNodeBindExtension: true, $isObservable: true, $isElement: true, $isInterceptor: true, $isNode: true, $isEventTarget: true},

HtmlElement_Polymer_ChangeNotifier: {"": "HtmlElement_Polymer+ChangeNotifier;", $isObservable: true},

_PropertyValue: {"": "Object;oldValue>,newValue*", $is_PropertyValue: true},

_PolymerExpressionsWithEventDelegate: {"": "PolymerExpressions;globals"},

_Job: {"": "Object;_callback,_timer",
  _callback$0: function() {
    return this._callback.call$0();
  },
  stop$0: function(_) {
    var t1 = this._timer;
    if (t1 != null) {
      t1.cancel$0();
      this._timer = null;
    }
  },
  complete$0: function(_) {
    if (this._timer != null) {
      this.stop$0(this);
      this._callback$0();
    }
  },
  get$complete: function(_receiver) {
    return new H.BoundClosure$i0(this, A._Job.prototype.complete$0, _receiver, "complete$0");
  }
},

CustomTag: {"": "Object;tagName>", $isCustomTag: true},

_initPolymerOptimized_closure: {"": "Closure;",
  call$1: function(_) {
    var t1 = $.get$Polymer__ready().future;
    if (t1._state !== 0)
      H.throwExpression(new P.StateError("Future already completed"));
    t1._asyncComplete$1(null);
    return;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_maybeInvoke_closure: {"": "Closure;",
  call$1: function(p) {
    return !p.get$isOptional();
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_InitMethodAnnotation: {"": "Object;"}}],
["polymer.deserialize", "package:polymer/deserialize.dart", , Z, {
deserializeValue: function(value, currentValue, type) {
  var handler, t1, exception;
  handler = J.$index$asx($.get$_typeHandlers(), type.get$qualifiedName());
  if (handler != null)
    return handler.call$2(value, currentValue);
  try {
    t1 = C.C_JsonCodec.decode$1(J.replaceAll$2$s(value, "'", "\""));
    return t1;
  } catch (exception) {
    H.unwrapException(exception);
    return value;
  }

},

closure0: {"": "Closure;",
  call$0: function() {
    var m = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    m.$indexSet(m, C.Symbol_iC9, new Z._closure());
    m.$indexSet(m, C.Symbol_s2s, new Z._closure0());
    m.$indexSet(m, C.Symbol_4YB, new Z._closure1());
    m.$indexSet(m, C.Symbol_6TA, new Z._closure2());
    m.$indexSet(m, C.Symbol_mdn, new Z._closure3());
    m.$indexSet(m, C.Symbol_sMO, new Z._closure4());
    return m;
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

_closure: {"": "Closure;",
  call$2: function(x, _) {
    return x;
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

_closure0: {"": "Closure;",
  call$2: function(x, _) {
    return x;
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

_closure1: {"": "Closure;",
  call$2: function(x, def) {
    var t1, exception;
    try {
      t1 = P.DateTime_parse(x);
      return t1;
    } catch (exception) {
      H.unwrapException(exception);
      return def;
    }

  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

_closure2: {"": "Closure;",
  call$2: function(x, _) {
    return !J.$eq(x, "false");
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

_closure3: {"": "Closure;",
  call$2: function(x, def) {
    return H.Primitives_parseInt(x, null, new Z.__closure0(def));
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

__closure0: {"": "Closure;def_0",
  call$1: function(_) {
    return this.def_0;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_closure4: {"": "Closure;",
  call$2: function(x, def) {
    return H.Primitives_parseDouble(x, new Z.__closure(def));
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

__closure: {"": "Closure;def_1",
  call$1: function(_) {
    return this.def_1;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
}}],
["polymer.src.reflected_type", "package:polymer/src/reflected_type.dart", , M, {
getReflectedTypeWorkaround: function(cls) {
  var t1, t2;
  t1 = H.reflect(cls);
  t2 = $.get$_mangledNameField();
  t2 = t1._invoke$4(t2, 1, J.get$_name$x(t2), []);
  return $.get$_jsHelper().invoke$2(C.Symbol_createRuntimeType, [t2.reflectee]).get$reflectee();
},

closure21: {"": "Closure;",
  call$0: function() {
    var t1, $name;
    for (t1 = J.get$iterator$ax(H.reflectClassByMangledName(J.get$runtimeType$(H.reflect(P.reflectClass(C.Type_ah5)).reflectee)._typeName).get$variables().get$keys()); t1.moveNext$0();) {
      $name = t1.get$current();
      if (J.$eq(J.get$_name$x($name), "_mangledName"))
        return $name;
    }
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
}}],
["polymer_expressions", "package:polymer_expressions/polymer_expressions.dart", , T, {
_classAttributeConverter: function(v) {
  var t1 = J.getInterceptor$ax(v);
  if (typeof v === "object" && v !== null && !!t1.$isMap) {
    t1 = J.where$1$ax(v.get$keys(), new T._classAttributeConverter_closure(v));
    t1 = t1.join$1(t1, " ");
  } else
    t1 = typeof v === "object" && v !== null && (v.constructor === Array || !!t1.$isIterable) ? t1.join$1(v, " ") : v;
  return t1;
},

_styleAttributeConverter: function(v) {
  var t1 = J.getInterceptor$ax(v);
  if (typeof v === "object" && v !== null && !!t1.$isMap) {
    t1 = J.map$1$ax(v.get$keys(), new T._styleAttributeConverter_closure(v));
    t1 = t1.join$1(t1, ";");
  } else
    t1 = typeof v === "object" && v !== null && (v.constructor === Array || !!t1.$isIterable) ? t1.join$1(v, ";") : v;
  return t1;
},

_classAttributeConverter_closure: {"": "Closure;v_0",
  call$1: function(k) {
    var t1 = this.v_0;
    return J.$eq(t1.$index(t1, k), true);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_styleAttributeConverter_closure: {"": "Closure;v_0",
  call$1: function(k) {
    var t1 = this.v_0;
    return H.S(k) + ": " + H.S(t1.$index(t1, k));
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

PolymerExpressions: {"": "BindingDelegate;",
  getBinding$4: function(model, path, $name, node) {
    var expr, t1;
    if (path == null)
      return;
    expr = T.Parser$(path, null).parse$0();
    t1 = J.getInterceptor(model);
    if (typeof model !== "object" || model === null || !t1.$isScope)
      model = new K.Scope(null, model, B.ObservableMap_ObservableMap$from(this.globals, null, null), null);
    t1 = J.getInterceptor(node);
    t1 = typeof node === "object" && node !== null && !!t1.$isElement;
    if (t1 && J.$eq($name, "class"))
      return T._Binding$(expr, model, T._classAttributeConverter$closure);
    if (t1 && J.$eq($name, "style"))
      return T._Binding$(expr, model, T._styleAttributeConverter$closure);
    return T._Binding$(expr, model, null);
  },
  get$getBinding: function() {
    return new P.BoundClosure$4(this, T.PolymerExpressions.prototype.getBinding$4, null, "getBinding$4");
  },
  getInstanceModel$2: function(template, model) {
    var t1 = J.getInterceptor(model);
    if (typeof model !== "object" || model === null || !t1.$isScope)
      return new K.Scope(null, model, B.ObservableMap_ObservableMap$from(this.globals, null, null), null);
    return model;
  }
},

_Binding: {"": "ChangeNotifier;_scope,_polymer_expressions$_expr,_converter,_polymer_expressions$_value,_changes,_records",
  _converter$1: function(arg0) {
    return this._converter.call$1(arg0);
  },
  _polymer_expressions$_setValue$1: function(v) {
    var oldValue, t1;
    oldValue = this._polymer_expressions$_value;
    t1 = J.getInterceptor(v);
    if (typeof v === "object" && v !== null && !!t1.$isComprehension) {
      t1 = J.map$1$ax(v.iterable, new T._Binding__setValue_closure(this, v));
      this._polymer_expressions$_value = t1.toList$1$growable(t1, false);
    } else
      this._polymer_expressions$_value = this._converter == null ? v : this._converter$1(v);
    B._notifyPropertyChange(this, C.Symbol_value, oldValue, this._polymer_expressions$_value);
  },
  get$_polymer_expressions$_setValue: function() {
    return new H.BoundClosure$1(this, T._Binding.prototype._polymer_expressions$_setValue$1, null, "_polymer_expressions$_setValue$1");
  },
  get$value: function(_) {
    return this._polymer_expressions$_value;
    "11,20";
  },
  "+value": 1,
  set$value: function(_, v) {
    var e, exception, t1, t2;
    try {
      K.assign(this._polymer_expressions$_expr, v, this._scope);
    } catch (exception) {
      t1 = H.unwrapException(exception);
      t2 = J.getInterceptor(t1);
      if (typeof t1 === "object" && t1 !== null && !!t2.$isEvalException) {
        e = t1;
        $.get$_logger0().warning$1("Error evaluating expression '" + H.S(this._polymer_expressions$_expr) + "': " + H.S(J.get$message$x(e)));
      } else
        throw exception;
    }

    "11,75,11,20";
  },
  "+value=": 1,
  _Binding$3: function(expr, scope, _converter) {
    var e, t1, t2, exception, t3;
    t1 = this._polymer_expressions$_expr;
    t2 = t1.get$onUpdate().listen$1(this.get$_polymer_expressions$_setValue());
    t2.onError$1(t2, new T._Binding_closure(this));
    try {
      J.accept$1$x(t1, new K.Updater(this._scope));
      t1.get$currentValue();
      this._polymer_expressions$_setValue$1(t1.get$currentValue());
    } catch (exception) {
      t2 = H.unwrapException(exception);
      t3 = J.getInterceptor(t2);
      if (typeof t2 === "object" && t2 !== null && !!t3.$isEvalException) {
        e = t2;
        $.get$_logger0().warning$1("Error evaluating expression '" + H.S(t1) + "': " + H.S(J.get$message$x(e)));
      } else
        throw exception;
    }

  },
  static: {
_Binding$: function(expr, scope, _converter) {
  var t1 = new T._Binding(scope, expr.accept$1(expr, new K.ObserverBuilder(scope, P.ListQueue$(null, null))), _converter, null, null, null);
  t1._Binding$3(expr, scope, _converter);
  return t1;
}}

},

_Binding_closure: {"": "Closure;this_0",
  call$1: function(e) {
    $.get$_logger0().warning$1("Error evaluating expression '" + H.S(this.this_0._polymer_expressions$_expr) + "': " + H.S(J.get$message$x(e)));
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_Binding__setValue_closure: {"": "Closure;this_0,v_1",
  call$1: function(i) {
    var vars = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    vars.$indexSet(vars, this.v_1.identifier, i);
    return new K.Scope(this.this_0._scope, null, B.ObservableMap_ObservableMap$from(vars, null, null), null);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
}}],
["polymer_expressions.async", "package:polymer_expressions/async.dart", , B, {
StreamBinding: {"": "ObservableBox;stream,_observe$_value,_changes,_records",
  StreamBinding$1: function(stream, $T) {
    this.stream.listen$1(new B.StreamBinding_closure($T, this));
  },
  $asObservableBox: function($T) {
    return [null];
  },
  static: {
StreamBinding$: function(stream, $T) {
  var t1 = new B.StreamBinding(stream, null, null, null);
  H.setRuntimeTypeInfo(t1, [$T]);
  t1.StreamBinding$1(stream, $T);
  return t1;
}}

},

StreamBinding_closure: {"": "Closure;T_0,this_1",
  call$1: function(i) {
    var t1 = this.this_1;
    t1._observe$_value = B._notifyPropertyChange(t1, C.Symbol_value, t1._observe$_value, i);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
}}],
["polymer_expressions.eval", "package:polymer_expressions/eval.dart", , K, {
eval0: function(expr, scope) {
  var observer = J.accept$1$x(expr, new K.ObserverBuilder(scope, P.ListQueue$(null, null)));
  J.accept$1$x(observer, new K.Updater(scope));
  return observer.get$_eval$_value();
},

assign: function(expr, value, scope) {
  var t1, t2, filters, t3, t4, property, expression, isIndex, filterExpr, observer, o;
  t1 = {};
  t1.expr_0 = expr;
  t2 = new K.assign_notAssignable(t1);
  filters = [];
  for (; t3 = t1.expr_0, t4 = J.getInterceptor$x(t3), typeof t3 === "object" && t3 !== null && !!t4.$isBinaryOperator;) {
    if (!J.$eq(t4.get$operator(t3), "|"))
      break;
    filters.push(t4.get$right(t3));
    t1.expr_0 = t4.get$left(t3);
  }
  t1 = t1.expr_0;
  t3 = J.getInterceptor(t1);
  if (typeof t1 === "object" && t1 !== null && !!t3.$isIdentifier) {
    property = t3.get$value(t1);
    expression = C.C_EmptyExpression;
    isIndex = false;
  } else if (typeof t1 === "object" && t1 !== null && !!t3.$isInvoke) {
    expression = t1.get$receiver();
    if (J.$eq(t3.get$method(t1), "[]")) {
      t3 = t1.get$arguments();
      if (0 >= t3.length)
        throw H.ioore(t3, 0);
      t3 = t3[0];
      t4 = J.getInterceptor(t3);
      if (typeof t3 !== "object" || t3 === null || !t4.$isLiteral)
        t2.call$0();
      t1 = t1.get$arguments();
      if (0 >= t1.length)
        throw H.ioore(t1, 0);
      property = J.get$value$x(t1[0]);
      isIndex = true;
    } else {
      if (t3.get$method(t1) != null) {
        if (t1.get$arguments() != null)
          t2.call$0();
        property = t3.get$method(t1);
      } else {
        t2.call$0();
        property = null;
      }
      isIndex = false;
    }
  } else {
    t2.call$0();
    expression = null;
    property = null;
    isIndex = false;
  }
  for (t1 = new H.ListIterator(filters, filters.length, 0, null), H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(filters, "JSArray", 0)]); t1.moveNext$0();) {
    filterExpr = t1._current;
    observer = J.accept$1$x(filterExpr, new K.ObserverBuilder(scope, P.ListQueue$(null, null)));
    J.accept$1$x(observer, new K.Updater(scope));
    observer.get$_eval$_value();
    throw H.wrapException(K.EvalException$("filter must implement Transformer: " + H.S(filterExpr)));
  }
  o = K.eval0(expression, scope);
  if (o == null)
    throw H.wrapException(K.EvalException$("Can't assign to null: " + H.S(expression)));
  if (isIndex)
    J.$indexSet$ax(o, property, value);
  else
    H.reflect(o).setField$2(new H.Symbol0(H.Symbol_validate(property)), value);
},

_convert: function(v) {
  var t1 = J.getInterceptor(v);
  if (typeof v === "object" && v !== null && !!t1.$isStream)
    return B.StreamBinding$(v, null);
  return v;
},

$call: function(receiver, args) {
  var t1 = J.getInterceptor(receiver);
  return K._convert(typeof receiver === "object" && receiver !== null && !!t1.$isMethod ? receiver.mirror.invoke$3(receiver.symbol, args, null).reflectee : H.Primitives_applyFunction(receiver, args, P.Function__toMangledNames(null)));
},

"+call:2:0": 0,

closure3: {"": "Closure;",
  call$2: function(a, b) {
    return J.$add$ns(a, b);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

closure4: {"": "Closure;",
  call$2: function(a, b) {
    return J.$sub$n(a, b);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

closure5: {"": "Closure;",
  call$2: function(a, b) {
    return J.$mul$n(a, b);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

closure6: {"": "Closure;",
  call$2: function(a, b) {
    return J.$div$n(a, b);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

closure7: {"": "Closure;",
  call$2: function(a, b) {
    return J.$eq(a, b);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

closure8: {"": "Closure;",
  call$2: function(a, b) {
    return !J.$eq(a, b);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

closure9: {"": "Closure;",
  call$2: function(a, b) {
    return J.$gt$n(a, b);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

closure10: {"": "Closure;",
  call$2: function(a, b) {
    return J.$ge$n(a, b);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

closure11: {"": "Closure;",
  call$2: function(a, b) {
    return J.$lt$n(a, b);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

closure12: {"": "Closure;",
  call$2: function(a, b) {
    return J.$le$n(a, b);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

closure13: {"": "Closure;",
  call$2: function(a, b) {
    return a === true || b === true;
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

closure14: {"": "Closure;",
  call$2: function(a, b) {
    return a === true && b === true;
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

closure15: {"": "Closure;",
  call$2: function(a, f) {
    var t1 = H.checkFunctionSubtype(f, "Object__Object", null, null, null);
    if (t1)
      return f.call$1(a);
    throw H.wrapException(K.EvalException$("Filters must be a one-argument function."));
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

closure16: {"": "Closure;",
  call$1: function(a) {
    return a;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

closure17: {"": "Closure;",
  call$1: function(a) {
    return J.$negate$n(a);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

closure18: {"": "Closure;",
  call$1: function(a) {
    return a !== true;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

assign_notAssignable: {"": "Closure;box_0",
  call$0: function() {
    return H.throwExpression(K.EvalException$("Expression is not assignable: " + H.S(this.box_0.expr_0)));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Scope: {"": "Object;parent>,model>,_variables,__modelMirror",
  get$_modelMirror: function() {
    var t1 = this.__modelMirror;
    if (t1 != null)
      return t1;
    this.__modelMirror = H.reflect(this.model);
    return this.__modelMirror;
  },
  $index: function(_, $name) {
    var t1, symbol, memberMirror, t2;
    if (J.$eq($name, "this"))
      return this.model;
    else {
      t1 = this._variables._observe$_map;
      if (t1.containsKey$1($name))
        return K._convert(t1.$index(t1, $name));
      else if (this.model != null) {
        symbol = new H.Symbol0(H.Symbol_validate($name));
        memberMirror = Z.getMemberMirror(H.reflectClassByMangledName(J.get$runtimeType$(this.get$_modelMirror().reflectee)._typeName), symbol);
        t1 = J.getInterceptor(memberMirror);
        if (typeof memberMirror !== "object" || memberMirror === null || !t1.$isVariableMirror)
          t2 = typeof memberMirror === "object" && memberMirror !== null && !!t1.$isMethodMirror && memberMirror.get$isGetter();
        else
          t2 = true;
        if (t2)
          return K._convert(this.get$_modelMirror().getField$1(symbol).reflectee);
        else if (typeof memberMirror === "object" && memberMirror !== null && !!t1.$isMethodMirror)
          return new K.Method(this.get$_modelMirror(), symbol);
      }
    }
    t1 = this.parent;
    if (t1 != null)
      return K._convert(t1.$index(t1, $name));
    else
      throw H.wrapException(K.EvalException$("variable '" + H.S($name) + "' not found"));
  },
  "+[]:1:0": 0,
  ownerOf$1: function($name) {
    var t1;
    if (J.$eq($name, "this"))
      return;
    else {
      t1 = this._variables;
      if (t1._observe$_map.containsKey$1($name))
        return t1;
      else {
        t1 = H.Symbol_validate($name);
        if (Z.getMemberMirror(H.reflectClassByMangledName(J.get$runtimeType$(this.get$_modelMirror().reflectee)._typeName), new H.Symbol0(t1)) != null)
          return this.model;
      }
    }
    t1 = this.parent;
    if (t1 != null)
      return t1.ownerOf$1($name);
  },
  contains$1: function(_, $name) {
    var t1;
    if (this._variables._observe$_map.containsKey$1($name))
      return true;
    else {
      t1 = H.Symbol_validate($name);
      if (Z.getMemberMirror(H.reflectClassByMangledName(J.get$runtimeType$(this.get$_modelMirror().reflectee)._typeName), new H.Symbol0(t1)) != null)
        return true;
    }
    t1 = this.parent;
    if (t1 != null)
      return t1.contains$1(t1, $name);
    return false;
  },
  $isScope: true
},

ExpressionObserver: {"": "Object;_parent?,_eval$_value<",
  get$onUpdate: function() {
    var t1, t2;
    t1 = this._eval$_controller;
    t2 = new P._BroadcastStream(t1);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_BroadcastStreamController", 0)]);
    return t2;
  },
  get$currentValue: function() {
    return this._eval$_value;
  },
  _updateSelf$1: function(scope) {
  },
  _invalidate$1: function(scope) {
    var t1;
    this._observe$1(this, scope);
    t1 = this._parent;
    if (t1 != null)
      t1._invalidate$1(scope);
  },
  _observe$1: function(_, scope) {
    var t1, _oldValue, t2;
    t1 = this._eval$_subscription;
    if (t1 != null) {
      t1.cancel$0();
      this._eval$_subscription = null;
    }
    _oldValue = this._eval$_value;
    this._updateSelf$1(scope);
    t1 = this._eval$_value;
    if (t1 == null ? _oldValue != null : t1 !== _oldValue) {
      t2 = this._eval$_controller;
      if (t2._state >= 4)
        H.throwExpression(t2._addEventError$0());
      t2._sendData$1(t1);
    }
  },
  toString$0: function(_) {
    var t1 = this._eval$_expr;
    return t1.toString$0(t1);
  }
},

Updater: {"": "RecursiveVisitor;scope",
  visitExpression$1: function(e) {
    e._observe$1(e, this.scope);
  },
  visitInExpression$1: function(c) {
    J.accept$1$x(c.get$right(c), this);
    c._observe$1(c, this.scope);
  }
},

ObserverBuilder: {"": "Visitor;scope,parents",
  visitEmptyExpression$1: function(e) {
    return new K.EmptyObserver(e, null, null, null, P.StreamController_StreamController$broadcast(null, null, false, null));
  },
  visitParenthesizedExpression$1: function(e) {
    var t1 = e.child;
    return t1.accept$1(t1, this);
  },
  visitInvoke$1: function(i) {
    var receiver, t1, args, t2, invoke;
    receiver = J.accept$1$x(i.get$receiver(), this);
    t1 = i.get$arguments();
    if (t1 == null)
      args = null;
    else {
      t2 = this.get$visit();
      t1.toString;
      t2 = new H.MappedListIterable(t1, t2);
      H.setRuntimeTypeInfo(t2, [null, null]);
      args = t2.toList$1$growable(t2, false);
    }
    invoke = new K.InvokeObserver(receiver, args, i, null, null, null, P.StreamController_StreamController$broadcast(null, null, false, null));
    receiver.set$_parent(invoke);
    if (args != null) {
      args.toString;
      H.IterableMixinWorkaround_forEach(args, new K.ObserverBuilder_visitInvoke_closure(invoke));
    }
    return invoke;
  },
  visitLiteral$1: function(l) {
    return new K.LiteralObserver(l, null, null, null, P.StreamController_StreamController$broadcast(null, null, false, null));
  },
  visitMapLiteral$1: function(l) {
    var t1, entries, map;
    t1 = new H.MappedListIterable(l.get$entries(l), this.get$visit());
    H.setRuntimeTypeInfo(t1, [null, null]);
    entries = t1.toList$1$growable(t1, false);
    map = new K.MapLiteralObserver(entries, l, null, null, null, P.StreamController_StreamController$broadcast(null, null, false, null));
    H.IterableMixinWorkaround_forEach(entries, new K.ObserverBuilder_visitMapLiteral_closure(map));
    return map;
  },
  visitMapLiteralEntry$1: function(e) {
    var key, value, entry;
    key = J.accept$1$x(e.get$key(e), this);
    value = J.accept$1$x(e.get$entryValue(), this);
    entry = new K.MapLiteralEntryObserver(key, value, e, null, null, null, P.StreamController_StreamController$broadcast(null, null, false, null));
    key.set$_parent(entry);
    value.set$_parent(entry);
    return entry;
  },
  visitIdentifier$1: function(i) {
    return new K.IdentifierObserver(i, null, null, null, P.StreamController_StreamController$broadcast(null, null, false, null));
  },
  visitBinaryOperator$1: function(o) {
    var left, right, binary;
    left = J.accept$1$x(o.get$left(o), this);
    right = J.accept$1$x(o.get$right(o), this);
    binary = new K.BinaryObserver(left, right, o, null, null, null, P.StreamController_StreamController$broadcast(null, null, false, null));
    left.set$_parent(binary);
    right.set$_parent(binary);
    return binary;
  },
  visitUnaryOperator$1: function(o) {
    var expr, unary;
    expr = J.accept$1$x(o.get$child(), this);
    unary = new K.UnaryObserver(expr, o, null, null, null, P.StreamController_StreamController$broadcast(null, null, false, null));
    expr.set$_parent(unary);
    return unary;
  },
  visitInExpression$1: function(i) {
    var left, right, inexpr;
    left = J.accept$1$x(i.get$left(i), this);
    right = J.accept$1$x(i.get$right(i), this);
    inexpr = new K.InObserver(left, right, i, null, null, null, P.StreamController_StreamController$broadcast(null, null, false, null));
    right.set$_parent(inexpr);
    return inexpr;
  }
},

ObserverBuilder_visitInvoke_closure: {"": "Closure;invoke_0",
  call$1: function(a) {
    var t1 = this.invoke_0;
    a.set$_parent(t1);
    return t1;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

ObserverBuilder_visitMapLiteral_closure: {"": "Closure;map_0",
  call$1: function(e) {
    var t1 = this.map_0;
    e.set$_parent(t1);
    return t1;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

EmptyObserver: {"": "ExpressionObserver;_eval$_expr,_parent,_eval$_subscription,_eval$_value,_eval$_controller",
  _updateSelf$1: function(scope) {
    this._eval$_value = scope.model;
  },
  accept$1: function(_, v) {
    return v.visitEmptyExpression$1(this);
  },
  $asExpressionObserver: function() {
    return [U.EmptyExpression];
  },
  $isEmptyExpression: true
},

LiteralObserver: {"": "ExpressionObserver;_eval$_expr,_parent,_eval$_subscription,_eval$_value,_eval$_controller",
  get$value: function(_) {
    var t1 = this._eval$_expr;
    return t1.get$value(t1);
  },
  "+value": 0,
  _updateSelf$1: function(scope) {
    var t1 = this._eval$_expr;
    this._eval$_value = t1.get$value(t1);
  },
  accept$1: function(_, v) {
    return v.visitLiteral$1(this);
  },
  $asExpressionObserver: function() {
    return [U.Literal];
  },
  $asLiteral: function() {
    return [null];
  },
  $isLiteral: true
},

MapLiteralObserver: {"": "ExpressionObserver;entries>,_eval$_expr,_parent,_eval$_subscription,_eval$_value,_eval$_controller",
  _updateSelf$1: function(scope) {
    this._eval$_value = H.IterableMixinWorkaround_fold(this.entries, P.LinkedHashMap_LinkedHashMap(null, null, null, null, null), new K.MapLiteralObserver__updateSelf_closure());
  },
  accept$1: function(_, v) {
    return v.visitMapLiteral$1(this);
  },
  $asExpressionObserver: function() {
    return [U.MapLiteral];
  },
  $isMapLiteral: true
},

MapLiteralObserver__updateSelf_closure: {"": "Closure;",
  call$2: function(m, e) {
    J.$indexSet$ax(m, J.get$key$x(e).get$_eval$_value(), e.get$entryValue().get$_eval$_value());
    return m;
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

MapLiteralEntryObserver: {"": "ExpressionObserver;key>,entryValue<,_eval$_expr,_parent,_eval$_subscription,_eval$_value,_eval$_controller",
  accept$1: function(_, v) {
    return v.visitMapLiteralEntry$1(this);
  },
  $asExpressionObserver: function() {
    return [U.MapLiteralEntry];
  },
  $isMapLiteralEntry: true
},

IdentifierObserver: {"": "ExpressionObserver;_eval$_expr,_parent,_eval$_subscription,_eval$_value,_eval$_controller",
  get$value: function(_) {
    var t1 = this._eval$_expr;
    return t1.get$value(t1);
  },
  "+value": 0,
  _updateSelf$1: function(scope) {
    var t1, owner, t2;
    t1 = this._eval$_expr;
    this._eval$_value = scope.$index(scope, t1.get$value(t1));
    owner = scope.ownerOf$1(t1.get$value(t1));
    t2 = J.getInterceptor$x(owner);
    if (typeof owner === "object" && owner !== null && !!t2.$isObservable) {
      t1 = H.Symbol_validate(t1.get$value(t1));
      this._eval$_subscription = t2.get$changes(owner).listen$1(new K.IdentifierObserver__updateSelf_closure(this, scope, new H.Symbol0(t1)));
    }
  },
  accept$1: function(_, v) {
    return v.visitIdentifier$1(this);
  },
  $asExpressionObserver: function() {
    return [U.Identifier];
  },
  $isIdentifier: true
},

IdentifierObserver__updateSelf_closure: {"": "Closure;this_0,scope_1,symbol_2",
  call$1: function(changes) {
    if (J.any$1$ax(changes, new K.IdentifierObserver__updateSelf__closure(this.symbol_2)) === true)
      this.this_0._invalidate$1(this.scope_1);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

IdentifierObserver__updateSelf__closure: {"": "Closure;symbol_3",
  call$1: function(c) {
    var t1 = J.getInterceptor(c);
    return typeof c === "object" && c !== null && !!t1.$isPropertyChangeRecord && J.$eq(c.name, this.symbol_3);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

UnaryObserver: {"": "ExpressionObserver;child<,_eval$_expr,_parent,_eval$_subscription,_eval$_value,_eval$_controller",
  get$operator: function(_) {
    var t1 = this._eval$_expr;
    return t1.get$operator(t1);
  },
  _updateSelf$1: function(scope) {
    var t1, t2, f;
    t1 = $.get$_UNARY_OPERATORS();
    t2 = this._eval$_expr;
    f = t1.$index(t1, t2.get$operator(t2));
    if (J.$eq(t2.get$operator(t2), "!")) {
      t1 = this.child.get$_eval$_value();
      this._eval$_value = f.call$1(t1 == null ? false : t1);
    } else {
      t1 = this.child.get$_eval$_value();
      this._eval$_value = t1 == null ? null : f.call$1(t1);
    }
  },
  accept$1: function(_, v) {
    return v.visitUnaryOperator$1(this);
  },
  $asExpressionObserver: function() {
    return [U.UnaryOperator];
  },
  $isUnaryOperator: true
},

BinaryObserver: {"": "ExpressionObserver;left>,right>,_eval$_expr,_parent,_eval$_subscription,_eval$_value,_eval$_controller",
  get$operator: function(_) {
    var t1 = this._eval$_expr;
    return t1.get$operator(t1);
  },
  _updateSelf$1: function(scope) {
    var t1, t2, f;
    t1 = $.get$_BINARY_OPERATORS();
    t2 = this._eval$_expr;
    f = t1.$index(t1, t2.get$operator(t2));
    if (J.$eq(t2.get$operator(t2), "&&") || J.$eq(t2.get$operator(t2), "||")) {
      t1 = this.left.get$_eval$_value();
      if (t1 == null)
        t1 = false;
      t2 = this.right.get$_eval$_value();
      this._eval$_value = f.call$2(t1, t2 == null ? false : t2);
    } else if (J.$eq(t2.get$operator(t2), "==") || J.$eq(t2.get$operator(t2), "!="))
      this._eval$_value = f.call$2(this.left.get$_eval$_value(), this.right.get$_eval$_value());
    else {
      t1 = this.left.get$_eval$_value();
      if (t1 == null || this.right.get$_eval$_value() == null)
        this._eval$_value = null;
      else
        this._eval$_value = f.call$2(t1, this.right.get$_eval$_value());
    }
  },
  accept$1: function(_, v) {
    return v.visitBinaryOperator$1(this);
  },
  $asExpressionObserver: function() {
    return [U.BinaryOperator];
  },
  $isBinaryOperator: true
},

InvokeObserver: {"": "ExpressionObserver;receiver<,arguments<,_eval$_expr,_parent,_eval$_subscription,_eval$_value,_eval$_controller",
  get$isGetter: function() {
    return this._eval$_expr.get$isGetter();
  },
  get$method: function(_) {
    var t1 = this._eval$_expr;
    return t1.get$method(t1);
  },
  _updateSelf$1: function(scope) {
    var t1, args, receiverValue, key, mirror, symbol;
    t1 = this.arguments;
    if (t1 == null)
      args = [];
    else {
      t1.toString;
      t1 = new H.MappedListIterable(t1, new K.InvokeObserver__updateSelf_closure());
      H.setRuntimeTypeInfo(t1, [null, null]);
      args = t1.toList$1$growable(t1, false);
    }
    receiverValue = this.receiver.get$_eval$_value();
    if (receiverValue == null)
      this._eval$_value = null;
    else {
      t1 = this._eval$_expr;
      if (t1.get$method(t1) == null)
        if (t1.get$isGetter())
          this._eval$_value = receiverValue;
        else
          this._eval$_value = K.$call(receiverValue, args);
      else if (J.$eq(t1.get$method(t1), "[]")) {
        if (0 >= args.length)
          throw H.ioore(args, 0);
        key = args[0];
        t1 = J.getInterceptor$asx(receiverValue);
        this._eval$_value = t1.$index(receiverValue, key);
        if (typeof receiverValue === "object" && receiverValue !== null && !!t1.$isObservable)
          this._eval$_subscription = t1.get$changes(receiverValue).listen$1(new K.InvokeObserver__updateSelf_closure0(this, scope, key));
      } else {
        mirror = H.reflect(receiverValue);
        symbol = new H.Symbol0(H.Symbol_validate(t1.get$method(t1)));
        this._eval$_value = t1.get$isGetter() ? mirror.getField$1(symbol).reflectee : mirror.invoke$3(symbol, args, null).reflectee;
        t1 = J.getInterceptor$x(receiverValue);
        if (typeof receiverValue === "object" && receiverValue !== null && !!t1.$isObservable)
          this._eval$_subscription = t1.get$changes(receiverValue).listen$1(new K.InvokeObserver__updateSelf_closure1(this, scope, symbol));
      }
    }
  },
  accept$1: function(_, v) {
    return v.visitInvoke$1(this);
  },
  $asExpressionObserver: function() {
    return [U.Invoke];
  },
  $isInvoke: true
},

InvokeObserver__updateSelf_closure: {"": "Closure;",
  call$1: function(a) {
    return a.get$_eval$_value();
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

InvokeObserver__updateSelf_closure0: {"": "Closure;this_0,scope_1,key_2",
  call$1: function(changes) {
    if (J.any$1$ax(changes, new K.InvokeObserver__updateSelf__closure0(this.key_2)) === true)
      this.this_0._invalidate$1(this.scope_1);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

InvokeObserver__updateSelf__closure0: {"": "Closure;key_3",
  call$1: function(c) {
    var t1 = J.getInterceptor(c);
    return typeof c === "object" && c !== null && !!t1.$isMapChangeRecord && J.$eq(c.key, this.key_3);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

InvokeObserver__updateSelf_closure1: {"": "Closure;this_4,scope_5,symbol_6",
  call$1: function(changes) {
    if (J.any$1$ax(changes, new K.InvokeObserver__updateSelf__closure(this.symbol_6)) === true)
      this.this_4._invalidate$1(this.scope_5);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

InvokeObserver__updateSelf__closure: {"": "Closure;symbol_7",
  call$1: function(c) {
    var t1 = J.getInterceptor(c);
    return typeof c === "object" && c !== null && !!t1.$isPropertyChangeRecord && J.$eq(c.name, this.symbol_7);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

InObserver: {"": "ExpressionObserver;left*,right>,_eval$_expr,_parent,_eval$_subscription,_eval$_value,_eval$_controller",
  _updateSelf$1: function(scope) {
    var identifier, iterable, t1, t2;
    identifier = this.left;
    iterable = this.right.get$_eval$_value();
    t1 = J.getInterceptor(iterable);
    if ((typeof iterable !== "object" || iterable === null || iterable.constructor !== Array && !t1.$isIterable) && iterable != null)
      throw H.wrapException(K.EvalException$("right side of 'in' is not an iterator"));
    t1 = J.get$value$x(identifier);
    t2 = iterable != null ? iterable : C.List_empty;
    this._eval$_value = new K.Comprehension(t1, t2);
  },
  accept$1: function(_, v) {
    return v.visitInExpression$1(this);
  },
  $asExpressionObserver: function() {
    return [U.InExpression];
  },
  $isInExpression: true
},

InObserver__updateSelf_closure: {"": "Closure;this_0,scope_1",
  call$1: function(changes) {
    if (J.any$1$ax(changes, new K.InObserver__updateSelf__closure()) === true)
      this.this_0._invalidate$1(this.scope_1);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

InObserver__updateSelf__closure: {"": "Closure;",
  call$1: function(c) {
    var t1 = J.getInterceptor(c);
    return typeof c === "object" && c !== null && !!t1.$isListChangeRecord;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Comprehension: {"": "Object;identifier,iterable", $isComprehension: true},

Method: {"": "Object;mirror,symbol",
  call$1: function(arg0) {
    return this.mirror.invoke$3(this.symbol, [arg0], null).reflectee;
  },
  "+call:1:0": 0,
  $isMethod: true,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

EvalException: {"": "Object;message>",
  toString$0: function(_) {
    return "EvalException: " + this.message;
  },
  $isEvalException: true,
  static: {
EvalException$: function(message) {
  return new K.EvalException(message);
}}

}}],
["polymer_expressions.expression", "package:polymer_expressions/expression.dart", , U, {
_listEquals: function(a, b) {
  var t1, i, t2;
  if (a == null ? b == null : a === b)
    return true;
  if (a == null || b == null)
    return false;
  t1 = J.getInterceptor$asx(a);
  if (!J.$eq(t1.get$length(a), b.length))
    return false;
  i = 0;
  while (true) {
    t2 = t1.get$length(a);
    if (typeof t2 !== "number")
      throw H.iae(t2);
    if (!(i < t2))
      break;
    t2 = t1.$index(a, i);
    if (i >= b.length)
      throw H.ioore(b, i);
    if (!J.$eq(t2, b[i]))
      return false;
    ++i;
  }
  return true;
},

_hashList: function(l) {
  l.toString;
  return U._JenkinsSmiHash_finish1(H.IterableMixinWorkaround_fold(l, 0, new U._hashList_closure()));
},

_JenkinsSmiHash_combine1: function(hash, value) {
  var t1 = J.$add$ns(hash, value);
  if (typeof t1 !== "number")
    throw H.iae(t1);
  hash = 536870911 & t1;
  hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
  return (hash ^ C.JSInt_methods.$shr(hash, 6)) >>> 0;
},

_JenkinsSmiHash_finish1: function(hash) {
  if (typeof hash !== "number")
    throw H.iae(hash);
  hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
  hash = (hash ^ C.JSInt_methods.$shr(hash, 11)) >>> 0;
  return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
},

AstFactory: {"": "Object;",
  invoke$3: function(e, m, a) {
    return new U.Invoke(e, m, a);
  },
  "+invoke:3:0": 0,
  "*invoke": [11],
  invoke$2: function(e, m) {
    return this.invoke$3(e, m, null);
  },
  "+invoke:2:0": 0
},

Expression: {"": "Object;"},

EmptyExpression: {"": "Expression;",
  accept$1: function(_, v) {
    return v.visitEmptyExpression$1(this);
  },
  $isEmptyExpression: true
},

Literal: {"": "Expression;value>",
  accept$1: function(_, v) {
    return v.visitLiteral$1(this);
  },
  toString$0: function(_) {
    var t1 = this.value;
    return typeof t1 === "string" ? "\"" + H.S(t1) + "\"" : H.S(t1);
  },
  $eq: function(_, o) {
    var t1;
    if (o == null)
      return false;
    t1 = H.checkSubtype(o, "$isLiteral", [H.getRuntimeTypeArgument(this, "Literal", 0)], "$asLiteral");
    return t1 && J.$eq(J.get$value$x(o), this.value);
  },
  get$hashCode: function(_) {
    return J.get$hashCode$(this.value);
  },
  $isLiteral: true
},

MapLiteral: {"": "Expression;entries>",
  accept$1: function(_, v) {
    return v.visitMapLiteral$1(this);
  },
  toString$0: function(_) {
    return "{" + H.S(this.entries) + "}";
  },
  $eq: function(_, o) {
    var t1;
    if (o == null)
      return false;
    t1 = J.getInterceptor$x(o);
    return typeof o === "object" && o !== null && !!t1.$isMapLiteral && U._listEquals(t1.get$entries(o), this.entries);
  },
  get$hashCode: function(_) {
    return U._hashList(this.entries);
  },
  $isMapLiteral: true
},

MapLiteralEntry: {"": "Expression;key>,entryValue<",
  accept$1: function(_, v) {
    return v.visitMapLiteralEntry$1(this);
  },
  toString$0: function(_) {
    return H.S(this.key) + ": " + H.S(this.entryValue);
  },
  $eq: function(_, o) {
    var t1;
    if (o == null)
      return false;
    t1 = J.getInterceptor$x(o);
    if (typeof o === "object" && o !== null && !!t1.$isMapLiteralEntry)
      t1 = J.$eq(t1.get$key(o), this.key) && J.$eq(o.get$entryValue(), this.entryValue);
    else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    var t1, t2;
    t1 = J.get$hashCode$(this.key.value);
    t2 = J.get$hashCode$(this.entryValue);
    return U._JenkinsSmiHash_finish1(U._JenkinsSmiHash_combine1(U._JenkinsSmiHash_combine1(0, t1), t2));
  },
  $isMapLiteralEntry: true
},

ParenthesizedExpression: {"": "Expression;child<",
  accept$1: function(_, v) {
    return v.visitParenthesizedExpression$1(this);
  },
  toString$0: function(_) {
    return "(" + H.S(this.child) + ")";
  },
  $eq: function(_, o) {
    var t1;
    if (o == null)
      return false;
    t1 = J.getInterceptor(o);
    return typeof o === "object" && o !== null && !!t1.$isParenthesizedExpression && J.$eq(o.child, this.child);
  },
  get$hashCode: function(_) {
    return J.get$hashCode$(this.child);
  },
  $isParenthesizedExpression: true
},

Identifier: {"": "Expression;value>",
  accept$1: function(_, v) {
    return v.visitIdentifier$1(this);
  },
  toString$0: function(_) {
    return this.value;
  },
  $eq: function(_, o) {
    var t1;
    if (o == null)
      return false;
    t1 = J.getInterceptor$x(o);
    return typeof o === "object" && o !== null && !!t1.$isIdentifier && J.$eq(t1.get$value(o), this.value);
  },
  get$hashCode: function(_) {
    return J.get$hashCode$(this.value);
  },
  $isIdentifier: true
},

UnaryOperator: {"": "Expression;operator>,child<",
  accept$1: function(_, v) {
    return v.visitUnaryOperator$1(this);
  },
  toString$0: function(_) {
    return H.S(this.operator) + " " + H.S(this.child);
  },
  $eq: function(_, o) {
    var t1;
    if (o == null)
      return false;
    t1 = J.getInterceptor$x(o);
    if (typeof o === "object" && o !== null && !!t1.$isUnaryOperator)
      t1 = J.$eq(t1.get$operator(o), this.operator) && J.$eq(o.get$child(), this.child);
    else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    var t1, t2;
    t1 = J.get$hashCode$(this.operator);
    t2 = J.get$hashCode$(this.child);
    return U._JenkinsSmiHash_finish1(U._JenkinsSmiHash_combine1(U._JenkinsSmiHash_combine1(0, t1), t2));
  },
  $isUnaryOperator: true
},

BinaryOperator: {"": "Expression;operator>,left>,right>",
  accept$1: function(_, v) {
    return v.visitBinaryOperator$1(this);
  },
  toString$0: function(_) {
    return "(" + H.S(this.left) + " " + H.S(this.operator) + " " + H.S(this.right) + ")";
  },
  $eq: function(_, o) {
    var t1;
    if (o == null)
      return false;
    t1 = J.getInterceptor$x(o);
    if (typeof o === "object" && o !== null && !!t1.$isBinaryOperator)
      t1 = J.$eq(t1.get$operator(o), this.operator) && J.$eq(t1.get$left(o), this.left) && J.$eq(t1.get$right(o), this.right);
    else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    var t1, t2, t3;
    t1 = J.get$hashCode$(this.operator);
    t2 = J.get$hashCode$(this.left);
    t3 = J.get$hashCode$(this.right);
    return U._JenkinsSmiHash_finish1(U._JenkinsSmiHash_combine1(U._JenkinsSmiHash_combine1(U._JenkinsSmiHash_combine1(0, t1), t2), t3));
  },
  $isBinaryOperator: true
},

InExpression: {"": "Expression;left>,right>",
  accept$1: function(_, v) {
    return v.visitInExpression$1(this);
  },
  toString$0: function(_) {
    return "(" + H.S(this.left) + " in " + H.S(this.right) + ")";
  },
  $eq: function(_, o) {
    var t1;
    if (o == null)
      return false;
    t1 = J.getInterceptor$x(o);
    if (typeof o === "object" && o !== null && !!t1.$isInExpression)
      t1 = J.$eq(t1.get$left(o), this.left) && J.$eq(t1.get$right(o), this.right);
    else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    var t1, t2;
    t1 = this.left;
    t1 = t1.get$hashCode(t1);
    t2 = J.get$hashCode$(this.right);
    return U._JenkinsSmiHash_finish1(U._JenkinsSmiHash_combine1(U._JenkinsSmiHash_combine1(0, t1), t2));
  },
  $isInExpression: true
},

Invoke: {"": "Expression;receiver<,method>,arguments<",
  accept$1: function(_, v) {
    return v.visitInvoke$1(this);
  },
  get$isGetter: function() {
    return this.arguments == null;
  },
  toString$0: function(_) {
    return H.S(this.receiver) + "." + H.S(this.method) + "(" + H.S(this.arguments) + ")";
  },
  $eq: function(_, o) {
    var t1;
    if (o == null)
      return false;
    t1 = J.getInterceptor$x(o);
    if (typeof o === "object" && o !== null && !!t1.$isInvoke)
      t1 = J.$eq(o.get$receiver(), this.receiver) && J.$eq(t1.get$method(o), this.method) && U._listEquals(o.get$arguments(), this.arguments);
    else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    var t1, t2, t3;
    t1 = J.get$hashCode$(this.receiver);
    t2 = J.get$hashCode$(this.method);
    t3 = U._hashList(this.arguments);
    return U._JenkinsSmiHash_finish1(U._JenkinsSmiHash_combine1(U._JenkinsSmiHash_combine1(U._JenkinsSmiHash_combine1(0, t1), t2), t3));
  },
  $isInvoke: true
},

_hashList_closure: {"": "Closure;",
  call$2: function(h, item) {
    return U._JenkinsSmiHash_combine1(h, J.get$hashCode$(item));
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
}}],
["polymer_expressions.parser", "package:polymer_expressions/parser.dart", , T, {
Parser: {"": "Object;_astFactory,_tokenizer,_tokens,_parser$_iterator,_token",
  parse$0: function() {
    var t1, t2;
    this._tokens = this._tokenizer.tokenize$0();
    t1 = this._tokens;
    t1.toString;
    t2 = new H.ListIterator(t1, t1.length, 0, null);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]);
    this._parser$_iterator = t2;
    this._advance$0();
    return this._parseExpression$0();
  },
  _advance$2: function(kind, value) {
    var t1;
    if (kind != null) {
      t1 = J.get$kind$x(this._token);
      t1 = t1 == null ? kind != null : t1 !== kind;
    } else
      t1 = false;
    if (!t1)
      t1 = value != null && !J.$eq(J.get$value$x(this._token), value);
    else
      t1 = true;
    if (t1)
      throw H.wrapException(Y.ParseException$("Expected " + value + ": " + H.S(this._token)));
    this._token = this._parser$_iterator.moveNext$0() ? this._parser$_iterator._current : null;
  },
  _advance$0: function() {
    return this._advance$2(null, null);
  },
  _parseExpression$0: function() {
    if (this._token == null) {
      this._astFactory.toString;
      return C.C_EmptyExpression;
    }
    var expr = this._parseUnary$0();
    return expr == null ? null : this._parsePrecedence$2(expr, 0);
  },
  _parsePrecedence$2: function(left, precedence) {
    var t1, t2, t3, t4, args, indexExpr;
    for (t1 = this._astFactory; t2 = this._token, t2 != null;) {
      t3 = J.getInterceptor$x(t2);
      t4 = t3.get$kind(t2);
      if (t4 === 9)
        if (J.$eq(t3.get$value(t2), "(")) {
          args = this._parseArguments$0();
          t1.toString;
          left = new U.Invoke(left, null, args);
        } else if (J.$eq(J.get$value$x(this._token), "[")) {
          indexExpr = this._parseIndex$0();
          args = indexExpr == null ? [] : [indexExpr];
          t1.toString;
          left = new U.Invoke(left, "[]", args);
        } else
          break;
      else if (t4 === 3) {
        this._advance$0();
        left = this._makeInvoke$2(left, this._parseUnary$0());
      } else if (t4 === 10 && J.$eq(t3.get$value(t2), "in"))
        left = this._parseComprehension$1(left);
      else {
        t2 = this._token;
        if (J.get$kind$x(t2) === 8 && J.$ge$n(t2.get$precedence(), precedence))
          left = this._parseBinary$1(left);
        else
          break;
      }
    }
    return left;
  },
  _makeInvoke$2: function(left, right) {
    var t1, t2;
    if (typeof right === "object" && right !== null && !!right.$isIdentifier) {
      t1 = right.get$value(right);
      this._astFactory.toString;
      return new U.Invoke(left, t1, null);
    } else {
      if (typeof right === "object" && right !== null && !!right.$isInvoke) {
        t1 = right.get$receiver();
        t2 = J.getInterceptor(t1);
        t2 = typeof t1 === "object" && t1 !== null && !!t2.$isIdentifier;
        t1 = t2;
      } else
        t1 = false;
      if (t1) {
        t1 = J.get$value$x(right.get$receiver());
        t2 = right.get$arguments();
        this._astFactory.toString;
        return new U.Invoke(left, t1, t2);
      } else
        throw H.wrapException(Y.ParseException$("expected identifier: " + H.S(right)));
    }
  },
  _parseBinary$1: function(left) {
    var op, right, t1, t2;
    op = this._token;
    this._advance$0();
    right = this._parseUnary$0();
    while (true) {
      t1 = this._token;
      if (t1 != null) {
        t2 = J.get$kind$x(t1);
        t1 = (t2 === 8 || t2 === 3 || t2 === 9) && J.$gt$n(t1.get$precedence(), op.get$precedence());
      } else
        t1 = false;
      if (!t1)
        break;
      right = this._parsePrecedence$2(right, this._token.get$precedence());
    }
    t1 = J.get$value$x(op);
    this._astFactory.toString;
    return new U.BinaryOperator(t1, left, right);
  },
  _parseUnary$0: function() {
    var t1, t2, value, expr;
    t1 = this._token;
    t2 = J.getInterceptor$x(t1);
    if (t2.get$kind(t1) === 8) {
      value = t2.get$value(t1);
      t1 = J.getInterceptor(value);
      if (t1.$eq(value, "+") || t1.$eq(value, "-")) {
        this._advance$0();
        t1 = J.get$kind$x(this._token);
        if (t1 === 6) {
          t1 = H.Primitives_parseInt(H.S(value) + H.S(J.get$value$x(this._token)), null, null);
          this._astFactory.toString;
          value = new U.Literal(t1);
          value.$builtinTypeInfo = [null];
          this._advance$0();
          return value;
        } else {
          t2 = this._astFactory;
          if (t1 === 7) {
            t1 = H.Primitives_parseDouble(H.S(value) + H.S(J.get$value$x(this._token)), null);
            t2.toString;
            value = new U.Literal(t1);
            value.$builtinTypeInfo = [null];
            this._advance$0();
            return value;
          } else {
            expr = this._parsePrecedence$2(this._parsePrimary$0(), 11);
            t2.toString;
            return new U.UnaryOperator(value, expr);
          }
        }
      } else if (t1.$eq(value, "!")) {
        this._advance$0();
        expr = this._parsePrecedence$2(this._parsePrimary$0(), 11);
        this._astFactory.toString;
        return new U.UnaryOperator(value, expr);
      }
    }
    return this._parsePrimary$0();
  },
  _parsePrimary$0: function() {
    var t1, t2, keyword;
    t1 = this._token;
    t2 = J.getInterceptor$x(t1);
    switch (t2.get$kind(t1)) {
      case 10:
        keyword = t2.get$value(t1);
        t1 = J.getInterceptor(keyword);
        if (t1.$eq(keyword, "this")) {
          this._advance$0();
          this._astFactory.toString;
          return new U.Identifier("this");
        } else if (t1.$eq(keyword, "in"))
          return;
        throw H.wrapException(new P.ArgumentError("unrecognized keyword: " + H.S(keyword)));
      case 2:
        return this._parseInvokeOrIdentifier$0();
      case 1:
        return this._parseString$0();
      case 6:
        return this._parseInteger$0();
      case 7:
        return this._parseDecimal$0();
      case 9:
        if (J.$eq(t2.get$value(t1), "("))
          return this._parseParenthesized$0();
        else if (J.$eq(J.get$value$x(this._token), "{"))
          return this._parseMapLiteral$0();
        return;
      default:
        return;
    }
  },
  _parseMapLiteral$0: function() {
    var entries, t1, t2, t3, value;
    entries = [];
    t1 = this._astFactory;
    do {
      this._advance$0();
      t2 = this._token;
      t3 = J.getInterceptor$x(t2);
      if (t3.get$kind(t2) === 9 && J.$eq(t3.get$value(t2), "}"))
        break;
      t2 = J.get$value$x(this._token);
      t1.toString;
      value = new U.Literal(t2);
      value.$builtinTypeInfo = [null];
      this._advance$0();
      this._advance$2(5, ":");
      entries.push(new U.MapLiteralEntry(value, this._parseExpression$0()));
      t2 = this._token;
    } while (t2 != null && J.$eq(J.get$value$x(t2), ","));
    this._advance$2(9, "}");
    return new U.MapLiteral(entries);
  },
  _parseComprehension$1: function(left) {
    var t1, right;
    t1 = J.getInterceptor(left);
    if (typeof left !== "object" || left === null || !t1.$isIdentifier)
      throw H.wrapException(Y.ParseException$("in... statements must start with an identifier"));
    this._advance$0();
    right = this._parseExpression$0();
    this._astFactory.toString;
    return new U.InExpression(left, right);
  },
  _parseInvokeOrIdentifier$0: function() {
    var t1, identifier, args;
    if (J.$eq(J.get$value$x(this._token), "true")) {
      this._advance$0();
      this._astFactory.toString;
      t1 = new U.Literal(true);
      H.setRuntimeTypeInfo(t1, [null]);
      return t1;
    }
    if (J.$eq(J.get$value$x(this._token), "false")) {
      this._advance$0();
      this._astFactory.toString;
      t1 = new U.Literal(false);
      H.setRuntimeTypeInfo(t1, [null]);
      return t1;
    }
    if (J.$eq(J.get$value$x(this._token), "null")) {
      this._advance$0();
      this._astFactory.toString;
      t1 = new U.Literal(null);
      H.setRuntimeTypeInfo(t1, [null]);
      return t1;
    }
    identifier = this._parseIdentifier$0();
    args = this._parseArguments$0();
    if (args == null)
      return identifier;
    else {
      this._astFactory.toString;
      return new U.Invoke(identifier, null, args);
    }
  },
  _parseIdentifier$0: function() {
    var t1, t2, value;
    t1 = this._token;
    t2 = J.getInterceptor$x(t1);
    if (t2.get$kind(t1) !== 2)
      throw H.wrapException(Y.ParseException$("expected identifier: " + H.S(t1) + ".value"));
    value = t2.get$value(t1);
    this._advance$0();
    this._astFactory.toString;
    return new U.Identifier(value);
  },
  _parseArguments$0: function() {
    var t1, t2, args;
    t1 = this._token;
    if (t1 != null) {
      t2 = J.getInterceptor$x(t1);
      t1 = t2.get$kind(t1) === 9 && J.$eq(t2.get$value(t1), "(");
    } else
      t1 = false;
    if (t1) {
      args = [];
      do {
        this._advance$0();
        t1 = this._token;
        t2 = J.getInterceptor$x(t1);
        if (t2.get$kind(t1) === 9 && J.$eq(t2.get$value(t1), ")"))
          break;
        args.push(this._parseExpression$0());
        t1 = this._token;
      } while (t1 != null && J.$eq(J.get$value$x(t1), ","));
      this._advance$2(9, ")");
      return args;
    }
    return;
  },
  _parseIndex$0: function() {
    var t1, t2, expr;
    t1 = this._token;
    if (t1 != null) {
      t2 = J.getInterceptor$x(t1);
      t1 = t2.get$kind(t1) === 9 && J.$eq(t2.get$value(t1), "[");
    } else
      t1 = false;
    if (t1) {
      this._advance$0();
      expr = this._parseExpression$0();
      this._advance$2(9, "]");
      return expr;
    }
    return;
  },
  _parseParenthesized$0: function() {
    this._advance$0();
    var expr = this._parseExpression$0();
    this._advance$2(9, ")");
    this._astFactory.toString;
    return new U.ParenthesizedExpression(expr);
  },
  _parseString$0: function() {
    var t1, value;
    t1 = J.get$value$x(this._token);
    this._astFactory.toString;
    value = new U.Literal(t1);
    H.setRuntimeTypeInfo(value, [null]);
    this._advance$0();
    return value;
  },
  _parseInteger$1: function(prefix) {
    var t1, value;
    t1 = H.Primitives_parseInt(H.S(prefix) + H.S(J.get$value$x(this._token)), null, null);
    this._astFactory.toString;
    value = new U.Literal(t1);
    H.setRuntimeTypeInfo(value, [null]);
    this._advance$0();
    return value;
  },
  _parseInteger$0: function() {
    return this._parseInteger$1("");
  },
  _parseDecimal$1: function(prefix) {
    var t1, value;
    t1 = H.Primitives_parseDouble(H.S(prefix) + H.S(J.get$value$x(this._token)), null);
    this._astFactory.toString;
    value = new U.Literal(t1);
    H.setRuntimeTypeInfo(value, [null]);
    this._advance$0();
    return value;
  },
  _parseDecimal$0: function() {
    return this._parseDecimal$1("");
  },
  static: {
Parser$: function(input, astFactory) {
  var t1, t2;
  t1 = P.StringBuffer$("");
  t2 = new U.AstFactory();
  return new T.Parser(t2, new Y.Tokenizer([], t1, new P.RuneIterator(input, 0, 0, null), null), null, null, null);
}}

}}],
["polymer_expressions.src.globals", "package:polymer_expressions/src/globals.dart", , K, {
enumerate: function(iterable) {
  var t1 = new K.EnumerateIterable(iterable);
  H.setRuntimeTypeInfo(t1, [null]);
  return t1;
},

IndexedValue: {"": "Object;index>-,value>-", $isIndexedValue: true,
  "@": function() {
    return [C.C_Reflectable];
  },
  "<>": [4],
  static: {
IndexedValue$: function(index, value, $V) {
  var t1 = new K.IndexedValue(index, value);
  H.setRuntimeTypeInfo(t1, [$V]);
  return t1;
  "13,14,15,16,17";
},

"+new IndexedValue:2:0": 1}

},

"+IndexedValue": [],

EnumerateIterable: {"": "IterableBase;_globals$_iterable",
  get$iterator: function(_) {
    var t1 = J.get$iterator$ax(this._globals$_iterable);
    t1 = new K.EnumerateIterator(t1, 0, null);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "EnumerateIterable", 0)]);
    return t1;
  },
  get$length: function(_) {
    return J.get$length$asx(this._globals$_iterable);
  },
  "+length": 0,
  get$isEmpty: function(_) {
    return J.get$isEmpty$asx(this._globals$_iterable);
  },
  "+isEmpty": 0,
  get$first: function(_) {
    var t1 = J.get$first$ax(this._globals$_iterable);
    t1 = new K.IndexedValue(0, t1);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "EnumerateIterable", 0)]);
    return t1;
  },
  get$last: function(_) {
    var t1, t2, t3;
    t1 = this._globals$_iterable;
    t2 = J.getInterceptor$asx(t1);
    t3 = J.$sub$n(t2.get$length(t1), 1);
    t1 = t2.get$last(t1);
    t1 = new K.IndexedValue(t3, t1);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "EnumerateIterable", 0)]);
    return t1;
  },
  get$single: function(_) {
    var t1 = J.get$single$ax(this._globals$_iterable);
    t1 = new K.IndexedValue(0, t1);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "EnumerateIterable", 0)]);
    return t1;
  },
  elementAt$1: function(_, index) {
    var t1 = J.elementAt$1$ax(this._globals$_iterable, index);
    t1 = new K.IndexedValue(index, t1);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "EnumerateIterable", 0)]);
    return t1;
  },
  $asIterableBase: function($V) {
    return [[K.IndexedValue, $V]];
  },
  $asIterable: function($V) {
    return [[K.IndexedValue, $V]];
  }
},

EnumerateIterator: {"": "Iterator;_globals$_iterator,_globals$_index,_globals$_current",
  get$current: function() {
    return this._globals$_current;
  },
  "+current": 0,
  moveNext$0: function() {
    var t1, t2;
    t1 = this._globals$_iterator;
    if (t1.moveNext$0()) {
      t2 = this._globals$_index;
      this._globals$_index = t2 + 1;
      t1 = new K.IndexedValue(t2, t1.get$current());
      H.setRuntimeTypeInfo(t1, [null]);
      this._globals$_current = t1;
      return true;
    }
    this._globals$_current = null;
    return false;
  },
  $asIterator: function($V) {
    return [[K.IndexedValue, $V]];
  }
}}],
["polymer_expressions.src.mirrors", "package:polymer_expressions/src/mirrors.dart", , Z, {
getMemberMirror: function(classMirror, $name) {
  var superclass, mirror, t1;
  if (classMirror.get$members().containsKey$1($name) === true)
    return J.$index$asx(classMirror.get$members(), $name);
  superclass = classMirror.get$superclass();
  if (superclass != null && !J.$eq(superclass.get$qualifiedName(), C.Symbol_46c)) {
    mirror = Z.getMemberMirror(classMirror.get$superclass(), $name);
    if (mirror != null)
      return mirror;
  }
  for (t1 = J.get$iterator$ax(classMirror.get$superinterfaces()); t1.moveNext$0();) {
    mirror = Z.getMemberMirror(t1.get$current(), $name);
    if (mirror != null)
      return mirror;
  }
  return;
}}],
["polymer_expressions.tokenizer", "package:polymer_expressions/tokenizer.dart", , Y, {
isIdentifierOrKeywordStart: function(next) {
  var t1;
  if (typeof next !== "number")
    throw H.iae(next);
  if (!(97 <= next && next <= 122))
    t1 = 65 <= next && next <= 90 || next === 95 || next === 36 || next > 127;
  else
    t1 = true;
  return t1;
},

isIdentifier: function(next) {
  var t1;
  if (typeof next !== "number")
    throw H.iae(next);
  if (!(97 <= next && next <= 122))
    if (!(65 <= next && next <= 90))
      t1 = 48 <= next && next <= 57 || next === 95 || next === 36 || next > 127;
    else
      t1 = true;
  else
    t1 = true;
  return t1;
},

escape: function(c) {
  switch (c) {
    case 102:
      return 12;
    case 110:
      return 10;
    case 114:
      return 13;
    case 116:
      return 9;
    case 118:
      return 11;
    default:
      return c;
  }
},

Token: {"": "Object;kind>,value>,precedence<",
  toString$0: function(_) {
    return "(" + this.kind + ", '" + this.value + "')";
  }
},

Tokenizer: {"": "Object;_tokenizer$_tokens,_sb,_tokenizer$_iterator,_tokenizer$_next",
  tokenize$0: function() {
    var t1, t2, t3, charCodes, value;
    t1 = this._tokenizer$_iterator;
    this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
    for (t2 = this._tokenizer$_tokens; t3 = this._tokenizer$_next, t3 != null;)
      if (t3 === 32 || t3 === 9 || t3 === 160)
        this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
      else if (t3 === 34 || t3 === 39)
        this.tokenizeString$0();
      else if (Y.isIdentifierOrKeywordStart(t3))
        this.tokenizeIdentifierOrKeyword$0();
      else {
        t3 = this._tokenizer$_next;
        if (typeof t3 !== "number")
          throw H.iae(t3);
        if (48 <= t3 && t3 <= 57)
          this.tokenizeNumber$0();
        else if (t3 === 46) {
          this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
          t3 = this._tokenizer$_next;
          if (typeof t3 !== "number")
            throw H.iae(t3);
          if (48 <= t3 && t3 <= 57)
            this.tokenizeFraction$0();
          else
            t2.push(new Y.Token(3, ".", 11));
        } else if (t3 === 44) {
          this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
          t2.push(new Y.Token(4, ",", 0));
        } else if (t3 === 58) {
          this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
          t2.push(new Y.Token(5, ":", 0));
        } else if (C.JSArray_methods.contains$1(C.List_UiL, t3))
          this.tokenizeOperator$0();
        else if (C.JSArray_methods.contains$1(C.List_ww8, this._tokenizer$_next)) {
          charCodes = P.List_List$filled(1, this._tokenizer$_next, J.JSInt);
          charCodes.$builtinTypeInfo = [J.JSInt];
          value = H.Primitives_stringFromCharCodes(charCodes);
          t2.push(new Y.Token(9, value, C.Map_FKtZ4.$index(C.Map_FKtZ4, value)));
          this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
        } else
          this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
      }
    return t2;
  },
  tokenizeString$0: function() {
    var quoteChar, t1, t2, t3, charCodes;
    quoteChar = this._tokenizer$_next;
    t1 = this._tokenizer$_iterator;
    this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
    for (t2 = this._sb; t3 = this._tokenizer$_next, t3 == null ? quoteChar != null : t3 !== quoteChar;) {
      if (t3 == null)
        throw H.wrapException(Y.ParseException$("unterminated string"));
      if (t3 === 92) {
        this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
        t3 = this._tokenizer$_next;
        if (t3 == null)
          throw H.wrapException(Y.ParseException$("unterminated string"));
        charCodes = P.List_List$filled(1, Y.escape(t3), J.JSInt);
        charCodes.$builtinTypeInfo = [J.JSInt];
        t3 = H.Primitives_stringFromCharCodes(charCodes);
        t2._contents = t2._contents + t3;
      } else {
        charCodes = P.List_List$filled(1, t3, J.JSInt);
        charCodes.$builtinTypeInfo = [J.JSInt];
        t3 = H.Primitives_stringFromCharCodes(charCodes);
        t2._contents = t2._contents + t3;
      }
      this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
    }
    this._tokenizer$_tokens.push(new Y.Token(1, t2._contents, 0));
    t2._contents = "";
    this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
  },
  tokenizeIdentifierOrKeyword$0: function() {
    var t1, t2, t3, charCodes, value;
    t1 = this._tokenizer$_iterator;
    t2 = this._sb;
    while (true) {
      t3 = this._tokenizer$_next;
      if (!(t3 != null && Y.isIdentifier(t3)))
        break;
      charCodes = P.List_List$filled(1, this._tokenizer$_next, J.JSInt);
      charCodes.$builtinTypeInfo = [J.JSInt];
      t3 = H.Primitives_stringFromCharCodes(charCodes);
      t2._contents = t2._contents + t3;
      this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
    }
    value = t2._contents;
    t1 = this._tokenizer$_tokens;
    if (C.JSArray_methods.contains$1(C.List_in_this, value))
      t1.push(new Y.Token(10, value, 0));
    else
      t1.push(new Y.Token(2, value, 0));
    t2._contents = "";
  },
  tokenizeNumber$0: function() {
    var t1, t2, t3, t4, charCodes;
    t1 = this._tokenizer$_iterator;
    t2 = this._sb;
    while (true) {
      t3 = this._tokenizer$_next;
      if (t3 != null) {
        if (typeof t3 !== "number")
          throw H.iae(t3);
        t4 = 48 <= t3 && t3 <= 57;
      } else
        t4 = false;
      if (!t4)
        break;
      charCodes = P.List_List$filled(1, t3, J.JSInt);
      charCodes.$builtinTypeInfo = [J.JSInt];
      t3 = H.Primitives_stringFromCharCodes(charCodes);
      t2._contents = t2._contents + t3;
      this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
    }
    if (t3 === 46) {
      this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
      t1 = this._tokenizer$_next;
      if (typeof t1 !== "number")
        throw H.iae(t1);
      if (48 <= t1 && t1 <= 57)
        this.tokenizeFraction$0();
      else
        this._tokenizer$_tokens.push(new Y.Token(3, ".", 11));
    } else {
      this._tokenizer$_tokens.push(new Y.Token(6, t2._contents, 0));
      t2._contents = "";
    }
  },
  tokenizeFraction$0: function() {
    var t1, t2, t3, t4, charCodes;
    t1 = this._sb;
    t1.write$1(P.String_String$fromCharCode(46));
    t2 = this._tokenizer$_iterator;
    while (true) {
      t3 = this._tokenizer$_next;
      if (t3 != null) {
        if (typeof t3 !== "number")
          throw H.iae(t3);
        t4 = 48 <= t3 && t3 <= 57;
      } else
        t4 = false;
      if (!t4)
        break;
      charCodes = P.List_List$filled(1, t3, J.JSInt);
      charCodes.$builtinTypeInfo = [J.JSInt];
      t3 = H.Primitives_stringFromCharCodes(charCodes);
      t1._contents = t1._contents + t3;
      this._tokenizer$_next = t2.moveNext$0() ? t2._currentCodePoint : null;
    }
    this._tokenizer$_tokens.push(new Y.Token(7, t1._contents, 0));
    t1._contents = "";
  },
  tokenizeOperator$0: function() {
    var startChar, t1, t2, op2, op, charCodes;
    startChar = this._tokenizer$_next;
    t1 = this._tokenizer$_iterator;
    this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
    if (C.JSArray_methods.contains$1(C.List_UiL, this._tokenizer$_next)) {
      t2 = this._tokenizer$_next;
      op2 = H.Primitives_stringFromCharCodes([startChar, t2]);
      if (C.JSArray_methods.contains$1(C.List_Ynd, op2)) {
        this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
        op = op2;
      } else {
        charCodes = P.List_List$filled(1, startChar, J.JSInt);
        charCodes.$builtinTypeInfo = [J.JSInt];
        op = H.Primitives_stringFromCharCodes(charCodes);
      }
    } else {
      charCodes = P.List_List$filled(1, startChar, J.JSInt);
      charCodes.$builtinTypeInfo = [J.JSInt];
      op = H.Primitives_stringFromCharCodes(charCodes);
    }
    this._tokenizer$_tokens.push(new Y.Token(8, op, C.Map_FKtZ4.$index(C.Map_FKtZ4, op)));
  }
},

ParseException: {"": "Object;message>",
  toString$0: function(_) {
    return "ParseException: " + this.message;
  },
  static: {
ParseException$: function(message) {
  return new Y.ParseException(message);
}}

}}],
["polymer_expressions.visitor", "package:polymer_expressions/visitor.dart", , S, {
Visitor: {"": "Object;",
  visit$1: function(s) {
    return J.accept$1$x(s, this);
  },
  get$visit: function() {
    return new H.BoundClosure$1(this, S.Visitor.prototype.visit$1, null, "visit$1");
  }
},

RecursiveVisitor: {"": "Visitor;",
  visitEmptyExpression$1: function(e) {
    return this.visitExpression$1(e);
  },
  visitParenthesizedExpression$1: function(e) {
    e.accept$1(e, this);
    this.visitExpression$1(e);
  },
  visitInvoke$1: function(i) {
    var t1, t2;
    J.accept$1$x(i.get$receiver(), this);
    t1 = i.get$arguments();
    if (t1 != null)
      for (t1.toString, t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();)
        J.accept$1$x(t2._current, this);
    this.visitExpression$1(i);
  },
  visitLiteral$1: function(l) {
    return this.visitExpression$1(l);
  },
  visitMapLiteral$1: function(l) {
    var t1, t2;
    for (t1 = l.get$entries(l), t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();)
      J.accept$1$x(t2._current, this);
    this.visitExpression$1(l);
  },
  visitMapLiteralEntry$1: function(e) {
    J.accept$1$x(e.get$key(e), this);
    J.accept$1$x(e.get$entryValue(), this);
    this.visitExpression$1(e);
  },
  visitIdentifier$1: function(i) {
    return this.visitExpression$1(i);
  },
  visitBinaryOperator$1: function(o) {
    J.accept$1$x(o.get$left(o), this);
    J.accept$1$x(o.get$right(o), this);
    this.visitExpression$1(o);
  },
  visitUnaryOperator$1: function(o) {
    J.accept$1$x(o.get$child(), this);
    this.visitExpression$1(o);
  },
  visitInExpression$1: function(c) {
    J.accept$1$x(c.get$left(c), this);
    J.accept$1$x(c.get$right(c), this);
    this.visitExpression$1(c);
  }
}}],
["", "package:autocomplete_ui/example/simple_autocomplete_example.dart", , Q, {
SimpleAutocompleteExample: {"": ["PolymerElement_ChangeNotifier1;_simple_autocomplete_example$__$selectedchoice%-,_simple_autocomplete_example$__$exampleDatasource%-,_changes,_records,_changes,_records,_declaration,_observers,_unbound,_unbindAllJob,_propertyObserver,syntax,_shadowRoots,$$-", null, null, null, null, null, null, null, null, null, null, null, null, null, function() {
    return [C.C_Reflectable];
  }],
  get$selectedchoice: function(receiver) {
    return receiver._simple_autocomplete_example$__$selectedchoice;
    "19,20,21";
  },
  "+selectedchoice": 1,
  set$selectedchoice: function(receiver, value) {
    receiver._simple_autocomplete_example$__$selectedchoice = this.notifyPropertyChange$3(receiver, C.Symbol_selectedchoice, receiver._simple_autocomplete_example$__$selectedchoice, value);
    "11,16,19,20";
  },
  "+selectedchoice=": 1,
  get$exampleDatasource: function(receiver) {
    return receiver._simple_autocomplete_example$__$exampleDatasource;
    "76,20,21";
  },
  "+exampleDatasource": 1,
  set$exampleDatasource: function(receiver, value) {
    receiver._simple_autocomplete_example$__$exampleDatasource = this.notifyPropertyChange$3(receiver, C.Symbol_exampleDatasource, receiver._simple_autocomplete_example$__$exampleDatasource, value);
    "11,16,76,20";
  },
  "+exampleDatasource=": 1,
  get$autocompleteChoices: function(receiver) {
    var t1 = ["Test 1", "Test 2", "Misc", "Abcdef", "Haha", "Lorem Ipsum", "Testing 3"];
    H.IterableMixinWorkaround_sortList(t1, null);
    return t1;
    "77";
  },
  "+autocompleteChoices": 1,
  SimpleAutocompleteExample$created$0: function(receiver) {
    var t1, t2;
    t1 = ["Test 1", "Test 2", "Misc", "Abcdef", "Haha", "Lorem Ipsum", "Testing 3"];
    H.IterableMixinWorkaround_sortList(t1, null);
    t2 = new Q.ExampleDatasource(t1, null);
    t2.SimpleStringDatasource$1(t1);
    receiver._simple_autocomplete_example$__$exampleDatasource = this.notifyPropertyChange$3(receiver, C.Symbol_exampleDatasource, receiver._simple_autocomplete_example$__$exampleDatasource, t2);
    "11";
  },
  "@": function() {
    return [C.CustomTag_gg9];
  },
  static: {
SimpleAutocompleteExample$created: function(receiver) {
  var t1, t2, t3, t4, t5;
  t1 = $.get$Polymer__polymerSyntax();
  t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
  t3 = J.JSString;
  t4 = W.Element;
  t5 = new B.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null);
  H.setRuntimeTypeInfo(t5, [t3, t4]);
  receiver.syntax = t1;
  receiver._shadowRoots = t2;
  receiver.$$ = t5;
  C.SimpleAutocompleteExample_methods.Element$created$0(receiver);
  C.SimpleAutocompleteExample_methods.PolymerElement$created$0(receiver);
  C.SimpleAutocompleteExample_methods.SimpleAutocompleteExample$created$0(receiver);
  return receiver;
  "18";
},

"+new SimpleAutocompleteExample$created:0:0": 1}

},

"+SimpleAutocompleteExample": [],

PolymerElement_ChangeNotifier1: {"": "PolymerElement+ChangeNotifier;", $isObservable: true},

ExampleDatasource: {"": "SimpleStringDatasource;_givenChoices,_choices",
  query$1: function(_, query) {
    var t1, completer;
    t1 = [P.Iterable, R.AutocompleteChoice];
    completer = new P._AsyncCompleter(P._Future$(t1));
    H.setRuntimeTypeInfo(completer, [t1]);
    P.Future_Future$delayed(C.Duration_300000, new Q.ExampleDatasource_query_closure(completer, R.SimpleStringDatasource.prototype.query$1.call(this, this, query)), null);
    return completer.future;
  }
},

ExampleDatasource_query_closure: {"": "Closure;completer_0,future_1",
  call$0: function() {
    this.future_1.then$1(new Q.ExampleDatasource_query__closure(this.completer_0));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

ExampleDatasource_query__closure: {"": "Closure;completer_2",
  call$1: function(coll) {
    var t1 = this.completer_2.future;
    if (t1._state !== 0)
      H.throwExpression(new P.StateError("Future already completed"));
    t1._asyncComplete$1(coll);
    return;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
}}],
["template_binding", "package:template_binding/template_binding.dart", , M, {
_InputBinding__getStreamForInputType: function(element) {
  var t1 = J.getInterceptor$x(element);
  if (typeof element === "object" && element !== null && !!t1.$isOptionElement)
    return C.EventStreamProvider_input.forElement$1(element);
  switch (t1.get$type(element)) {
    case "checkbox":
      return $.get$_InputBinding__checkboxEventType().forTarget$1(element);
    case "radio":
    case "select-multiple":
    case "select-one":
      return t1.get$onChange(element);
    default:
      return t1.get$onInput(element);
  }
},

_getTreeScope: function(node) {
  var t1, node0;
  for (; t1 = J.getInterceptor$x(node), node0 = t1.get$parentNode(node), node0 != null; node = node0)
    ;
  if (typeof node === "object" && node !== null && !!t1.$isDocument || typeof node === "object" && node !== null && !!t1.$isShadowRoot || typeof node === "object" && node !== null && !!t1.$isSvgSvgElement)
    return node;
  return;
},

_createDeepCloneAndDecorateTemplates: function(node, delegate) {
  var t1, clone, t2, c;
  t1 = J.getInterceptor$x(node);
  clone = t1.clone$1(node, false);
  t2 = J.getInterceptor$x(clone);
  if (typeof clone === "object" && clone !== null && !!t2.$isElement)
    if (clone.localName !== "template")
      t2 = t2.get$attributes(clone)._element.hasAttribute("template") === true && C.Map_05eTF.containsKey$1(t2.get$localName(clone)) === true;
    else
      t2 = true;
  else
    t2 = false;
  if (t2) {
    M.nodeBindFallback(clone)._decorate$1(node);
    if (delegate != null)
      M.nodeBindFallback(clone).set$_bindingDelegate(delegate);
  }
  for (c = t1.get$firstChild(node); c != null; c = c.nextSibling)
    clone.appendChild(M._createDeepCloneAndDecorateTemplates(c, delegate));
  return clone;
},

_addBindings: function(node, model, delegate) {
  var t1, bindings, tokens, c;
  t1 = J.getInterceptor$x(node);
  if (typeof node === "object" && node !== null && !!t1.$isElement)
    bindings = M._parseAttributeBindings(node);
  else if (typeof node === "object" && node !== null && !!t1.$isText) {
    tokens = M._parseMustacheTokens(node.textContent);
    bindings = tokens != null ? ["text", tokens] : null;
  } else
    bindings = null;
  if (bindings != null)
    M._processBindings(bindings, node, model, delegate);
  for (c = t1.get$firstChild(node); c != null; c = J.get$nextNode$x(c))
    M._addBindings(c, model, delegate);
},

_parseAttributeBindings: function(element) {
  var t1, t2;
  t1 = {};
  t1.bindings_0 = null;
  t1.ifFound_1 = false;
  t1.bindFound_2 = false;
  t2 = new W._ElementAttributeMap(element);
  t2.forEach$1(t2, new M._parseAttributeBindings_closure(t1, M.isSemanticTemplate(element)));
  if (t1.ifFound_1 && !t1.bindFound_2) {
    if (t1.bindings_0 == null)
      t1.bindings_0 = [];
    t2 = t1.bindings_0;
    t2.push("bind");
    t2.push(M._parseMustacheTokens("{{}}"));
  }
  return t1.bindings_0;
},

_processBindings: function(bindings, node, model, delegate) {
  var i, t1, t2, t3;
  for (i = 0; t1 = bindings.length, i < t1; i += 2) {
    t2 = bindings[i];
    t3 = i + 1;
    if (t3 >= t1)
      throw H.ioore(bindings, t3);
    M._setupBinding(node, t2, bindings[t3], model, delegate);
  }
},

_setupBinding: function(node, $name, tokens, model, delegate) {
  var t1, replacementBinding, i, t2;
  t1 = J.getInterceptor$asx(tokens);
  if (J.$eq(t1.get$length(tokens), 3) && J.get$isEmpty$asx(t1.$index(tokens, 0)) === true && J.get$isEmpty$asx(t1.$index(tokens, 2)) === true) {
    M._bindOrDelegate(node, $name, model, t1.$index(tokens, 1), delegate);
    return;
  }
  replacementBinding = new B.CompoundBinding(null, P.LinkedHashMap_LinkedHashMap(null, null, null, null, null), P.LinkedHashMap_LinkedHashMap(null, null, null, null, null), null, false, null, null);
  replacementBinding._combinator = null;
  replacementBinding.scheduled = true;
  replacementBinding._combinator = new M._setupBinding_closure(tokens);
  replacementBinding._scheduleResolve$0();
  i = 1;
  while (true) {
    t2 = t1.get$length(tokens);
    if (typeof t2 !== "number")
      throw H.iae(t2);
    if (!(i < t2))
      break;
    M._bindOrDelegate(replacementBinding, i, model, t1.$index(tokens, i), delegate);
    i += 2;
  }
  replacementBinding.resolve$0();
  t1 = J.getInterceptor(node);
  J.bind$3$x(typeof node === "object" && node !== null && !!t1.$isNodeBindExtension ? node : M.nodeBindFallback(node), $name, replacementBinding, "value");
},

_bindOrDelegate: function(node, $name, model, path, delegate) {
  var delegateBinding, t1;
  if (delegate != null) {
    delegate.toString;
    delegateBinding = A.Polymer_getBindingWithEvents(model, path, $name, node, T.PolymerExpressions.prototype.get$getBinding.call(delegate));
    if (delegateBinding != null) {
      model = delegateBinding;
      path = "value";
    }
  }
  t1 = J.getInterceptor$x(node);
  if (typeof node === "object" && node !== null && !!t1.$isCompoundBinding)
    t1.bind$3(node, $name, model, path);
  else
    J.bind$3$x(typeof node === "object" && node !== null && !!t1.$isNodeBindExtension ? node : M.nodeBindFallback(node), $name, model, path);
},

_parseMustacheTokens: function(s) {
  var t1, $length, tokens, lastIndex, startIndex, endIndex;
  t1 = J.getInterceptor$asx(s);
  if (t1.get$isEmpty(s) === true)
    return;
  $length = t1.get$length(s);
  if (typeof $length !== "number")
    throw H.iae($length);
  tokens = null;
  lastIndex = 0;
  for (; lastIndex < $length;) {
    startIndex = t1.indexOf$2(s, "{{", lastIndex);
    endIndex = startIndex < 0 ? -1 : t1.indexOf$2(s, "}}", startIndex + 2);
    if (endIndex < 0) {
      if (tokens == null)
        return;
      tokens.push(t1.substring$1(s, lastIndex));
      break;
    }
    if (tokens == null)
      tokens = [];
    tokens.push(t1.substring$2(s, lastIndex, startIndex));
    tokens.push(C.JSString_methods.trim$0(t1.substring$2(s, startIndex + 2, endIndex)));
    lastIndex = endIndex + 2;
  }
  if (lastIndex === $length)
    tokens.push("");
  return tokens;
},

_addTemplateInstanceRecord: function(fragment, model) {
  var t1, instanceRecord, node;
  t1 = fragment.firstChild;
  if (t1 == null)
    return;
  instanceRecord = new M.TemplateInstance(t1, fragment.lastChild, model);
  node = instanceRecord.firstNode;
  for (; node != null;) {
    M.nodeBindFallback(node).set$_templateInstance(instanceRecord);
    node = node.nextSibling;
  }
},

nodeBindFallback: function(node) {
  var t1, values, extension;
  t1 = $.get$_expando();
  t1.toString;
  values = H.Primitives_getProperty(node, "expando$values");
  extension = values == null ? null : H.Primitives_getProperty(values, t1._getKey$0());
  if (extension != null)
    return extension;
  t1 = J.getInterceptor$x(node);
  if (typeof node === "object" && node !== null && !!t1.$isInputElement)
    extension = new M._InputElementExtension(node, null, null);
  else if (typeof node === "object" && node !== null && !!t1.$isSelectElement)
    extension = new M._SelectElementExtension(node, null, null);
  else if (typeof node === "object" && node !== null && !!t1.$isTextAreaElement)
    extension = new M._TextAreaElementExtension(node, null, null);
  else if (typeof node === "object" && node !== null && !!t1.$isElement) {
    if (node.localName !== "template")
      t1 = t1.get$attributes(node)._element.hasAttribute("template") === true && C.Map_05eTF.containsKey$1(t1.get$localName(node)) === true;
    else
      t1 = true;
    extension = t1 ? new M.TemplateBindExtension(null, null, null, false, null, null, null, node, null, null) : new M._ElementExtension(node, null, null);
  } else
    extension = typeof node === "object" && node !== null && !!t1.$isText ? new M._TextExtension(node, null, null) : new M.NodeBindExtension(node, null, null);
  t1 = $.get$_expando();
  t1.$indexSet(t1, node, extension);
  return extension;
},

isSemanticTemplate: function(n) {
  var t1 = J.getInterceptor$x(n);
  if (typeof n === "object" && n !== null && !!t1.$isElement)
    if (n.localName !== "template")
      t1 = t1.get$attributes(n)._element.hasAttribute("template") === true && C.Map_05eTF.containsKey$1(t1.get$localName(n)) === true;
    else
      t1 = true;
  else
    t1 = false;
  return t1;
},

_ElementExtension: {"": "NodeBindExtension;_node,_bindings,_templateInstance",
  bind$3: function(_, $name, model, path) {
    var t1, t2, binding;
    t1 = this.get$_node();
    t2 = J.getInterceptor(t1);
    J.unbind$1$x(typeof t1 === "object" && t1 !== null && !!t2.$isNodeBindExtension ? this.get$_node() : this, $name);
    t1 = this.get$_node();
    t2 = J.getInterceptor(t1);
    if (typeof t1 === "object" && t1 !== null && !!t2.$isOptionElement && J.$eq($name, "value")) {
      t1 = J.get$attributes$x(this.get$_node());
      t1.remove$1(t1, $name);
      t1 = this.get$_node();
      t2 = path != null ? path : "";
      binding = new M._OptionValueBinding(null, t1, model, null, null, "value", t2);
      binding._observePath$0();
      binding._eventSub = M._InputBinding__getStreamForInputType(t1).listen$1(binding.get$nodeValueChanged());
    } else
      binding = M._AttributeBinding__AttributeBinding(this.get$_node(), $name, model, path);
    t1 = this.get$bindings(this);
    t1.$indexSet(t1, $name, binding);
    return binding;
  }
},

_AttributeBinding: {"": "NodeBinding;conditional,_node,_model,_observer,_pathSub,property,path",
  get$node: function() {
    return M.NodeBinding.prototype.get$node.call(this);
  },
  valueChanged$1: function(value) {
    var t1, t2;
    if (this.conditional) {
      t1 = null != value && false !== value;
      t2 = this.property;
      if (t1)
        J.get$attributes$x(M.NodeBinding.prototype.get$node.call(this))._element.setAttribute(t2, "");
      else {
        t1 = J.get$attributes$x(M.NodeBinding.prototype.get$node.call(this));
        t1.remove$1(t1, t2);
      }
    } else {
      t1 = J.get$attributes$x(M.NodeBinding.prototype.get$node.call(this));
      t2 = value == null ? "" : H.S(value);
      t1._element.setAttribute(this.property, t2);
    }
  },
  get$valueChanged: function() {
    return new H.BoundClosure$1(this, M._AttributeBinding.prototype.valueChanged$1, null, "valueChanged$1");
  },
  static: {
_AttributeBinding__AttributeBinding: function(node, $name, model, path) {
  var t1, conditional, t2;
  t1 = J.getInterceptor$s($name);
  conditional = t1.endsWith$1($name, "?");
  if (conditional) {
    t2 = J.get$attributes$x(node);
    t2.remove$1(t2, $name);
    $name = t1.substring$2($name, 0, J.$sub$n(t1.get$length($name), 1));
  }
  t1 = path != null ? path : "";
  t1 = new M._AttributeBinding(conditional, node, model, null, null, $name, t1);
  t1._observePath$0();
  return t1;
}}

},

_OptionValueBinding: {"": "_ValueBinding;_eventSub,_node,_model,_observer,_pathSub,property,path",
  get$node: function() {
    return M._ValueBinding.prototype.get$node.call(this);
  },
  valueChanged$1: function(newValue) {
    var select, t1, t2, valueBinding, oldValue, selectBinding;
    select = J.get$parent$x(M._ValueBinding.prototype.get$node.call(this));
    t1 = J.getInterceptor$x(select);
    if (typeof select === "object" && select !== null && !!t1.$isSelectElement) {
      t2 = J.get$bindings$x(M.nodeBindFallback(select));
      valueBinding = t2.$index(t2, "value");
      t2 = J.getInterceptor(valueBinding);
      if (typeof valueBinding === "object" && valueBinding !== null && !!t2.$is_SelectBinding) {
        oldValue = select.value;
        selectBinding = valueBinding;
      } else {
        oldValue = null;
        selectBinding = null;
      }
    } else {
      oldValue = null;
      selectBinding = null;
    }
    M._ValueBinding.prototype.valueChanged$1.call(this, newValue);
    if (selectBinding != null && selectBinding.get$_node() != null && !J.$eq(t1.get$value(select), oldValue))
      selectBinding.nodeValueChanged$1(null);
  },
  get$valueChanged: function() {
    return new H.BoundClosure$1(this, M._OptionValueBinding.prototype.valueChanged$1, null, "valueChanged$1");
  }
},

_InputBinding: {"": "NodeBinding;",
  get$valueChanged: function() {
    return new H.BoundClosure$1(this, M._InputBinding.prototype.valueChanged$1, null, "valueChanged$1");
  },
  get$nodeValueChanged: function() {
    return new H.BoundClosure$1(this, M._InputBinding.prototype.nodeValueChanged$1, null, "nodeValueChanged$1");
  },
  close$0: function(_) {
    if (this._node == null)
      return;
    this._eventSub.cancel$0();
    M.NodeBinding.prototype.close$0.call(this, this);
  },
  get$close: function(_receiver) {
    return new H.BoundClosure$i0(this, M._InputBinding.prototype.close$0, _receiver, "close$0");
  }
},

closure2: {"": "Closure;",
  call$0: function() {
    var checkbox, t1, fired, t2, t3;
    checkbox = document.createElement("div", null).appendChild(W.InputElement_InputElement(null));
    t1 = J.getInterceptor$x(checkbox);
    t1.set$type(checkbox, "checkbox");
    fired = [];
    t2 = t1.get$onClick(checkbox);
    t3 = new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(new M._closure5(fired)), t2._useCapture);
    H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
    t3._tryResume$0();
    t1 = t1.get$onChange(checkbox);
    t3 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new M._closure6(fired)), t1._useCapture);
    H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
    t3._tryResume$0();
    checkbox.dispatchEvent(W.MouseEvent_MouseEvent("click", false, 0, true, true, 0, 0, false, 0, false, null, 0, 0, false, window));
    return fired.length === 1 ? C.EventStreamProvider_change : C.JSArray_methods.get$first(fired);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

_closure5: {"": "Closure;fired_0",
  call$1: function(e) {
    this.fired_0.push(C.EventStreamProvider_click);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_closure6: {"": "Closure;fired_1",
  call$1: function(e) {
    this.fired_1.push(C.EventStreamProvider_change);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_ValueBinding: {"": "_InputBinding;_eventSub,_node,_model,_observer,_pathSub,property,path",
  get$node: function() {
    return M.NodeBinding.prototype.get$node.call(this);
  },
  valueChanged$1: function(newValue) {
    var t1 = this.get$node();
    J.set$value$x(t1, newValue == null ? "" : H.S(newValue));
  },
  get$valueChanged: function() {
    return new H.BoundClosure$1(this, M._ValueBinding.prototype.valueChanged$1, null, "valueChanged$1");
  },
  nodeValueChanged$1: function(e) {
    var t1 = J.get$value$x(this.get$node());
    J.set$value$x(this._observer, t1);
    O.dirtyCheckObservables();
  },
  get$nodeValueChanged: function() {
    return new H.BoundClosure$1(this, M._ValueBinding.prototype.nodeValueChanged$1, null, "nodeValueChanged$1");
  }
},

_CheckedBinding: {"": "_InputBinding;_eventSub,_node,_model,_observer,_pathSub,property,path",
  get$node: function() {
    return M.NodeBinding.prototype.get$node.call(this);
  },
  valueChanged$1: function(newValue) {
    var t1 = M.NodeBinding.prototype.get$node.call(this);
    J.set$checked$x(t1, null != newValue && false !== newValue);
  },
  get$valueChanged: function() {
    return new H.BoundClosure$1(this, M._CheckedBinding.prototype.valueChanged$1, null, "valueChanged$1");
  },
  nodeValueChanged$1: function(e) {
    var t1, t2, r, t3, checkedBinding;
    t1 = J.get$checked$x(M.NodeBinding.prototype.get$node.call(this));
    J.set$value$x(this._observer, t1);
    t1 = M.NodeBinding.prototype.get$node.call(this);
    t2 = J.getInterceptor(t1);
    if (typeof t1 === "object" && t1 !== null && !!t2.$isInputElement && J.$eq(J.get$type$x(M.NodeBinding.prototype.get$node.call(this)), "radio"))
      for (t1 = J.get$iterator$ax(M._CheckedBinding__getAssociatedRadioButtons(M.NodeBinding.prototype.get$node.call(this))); t1.moveNext$0();) {
        r = t1.get$current();
        t2 = J.getInterceptor(r);
        t3 = J.get$bindings$x(typeof r === "object" && r !== null && !!t2.$isNodeBindExtension ? r : M.nodeBindFallback(r));
        checkedBinding = t3.$index(t3, "checked");
        if (checkedBinding != null)
          J.set$value$x(checkedBinding, false);
      }
    O.dirtyCheckObservables();
  },
  get$nodeValueChanged: function() {
    return new H.BoundClosure$1(this, M._CheckedBinding.prototype.nodeValueChanged$1, null, "nodeValueChanged$1");
  },
  static: {
_CheckedBinding__getAssociatedRadioButtons: function(element) {
  var t1, t2, treeScope, radios;
  t1 = J.getInterceptor$x(element);
  t2 = t1.get$form(element);
  if (t2 != null) {
    t2.toString;
    t1 = new W._ChildNodeListLazy(t2);
    return t1.where$1(t1, new M._CheckedBinding__getAssociatedRadioButtons_closure(element));
  } else {
    treeScope = M._getTreeScope(element);
    if (treeScope == null)
      return C.List_empty;
    radios = J.querySelectorAll$1$x(treeScope, "input[type=\"radio\"][name=\"" + H.S(t1.get$name(element)) + "\"]");
    return radios.where$1(radios, new M._CheckedBinding__getAssociatedRadioButtons_closure0(element));
  }
}}

},

_CheckedBinding__getAssociatedRadioButtons_closure: {"": "Closure;element_0",
  call$1: function(el) {
    var t1, t2;
    t1 = this.element_0;
    t2 = J.getInterceptor(el);
    if (!t2.$eq(el, t1))
      if (typeof el === "object" && el !== null && !!t2.$isInputElement)
        if (el.type === "radio") {
          t2 = el.name;
          t1 = J.get$name$x(t1);
          t1 = t2 == null ? t1 == null : t2 === t1;
        } else
          t1 = false;
      else
        t1 = false;
    else
      t1 = false;
    return t1;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_CheckedBinding__getAssociatedRadioButtons_closure0: {"": "Closure;element_1",
  call$1: function(el) {
    var t1 = J.getInterceptor(el);
    return !t1.$eq(el, this.element_1) && t1.get$form(el) == null;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_SelectBinding: {"": "_InputBinding;_eventSub,_node,_model,_observer,_pathSub,property,path",
  get$node: function() {
    return M.NodeBinding.prototype.get$node.call(this);
  },
  valueChanged$1: function(newValue) {
    var t1 = {};
    if (this._tryUpdateValue$1(newValue) === true)
      return;
    t1.maxRetries_0 = 4;
    P.scheduleMicrotask(new M._SelectBinding_valueChanged_delaySetSelectedIndex(t1, this, newValue));
  },
  get$valueChanged: function() {
    return new H.BoundClosure$1(this, M._SelectBinding.prototype.valueChanged$1, null, "valueChanged$1");
  },
  _tryUpdateValue$1: function(newValue) {
    var t1, t2, intValue;
    t1 = this.property;
    t2 = J.getInterceptor(t1);
    if (t2.$eq(t1, "selectedIndex")) {
      intValue = M._SelectBinding__toInt(newValue);
      J.set$selectedIndex$x(M.NodeBinding.prototype.get$node.call(this), intValue);
      t1 = J.get$selectedIndex$x(M.NodeBinding.prototype.get$node.call(this));
      return t1 == null ? intValue == null : t1 === intValue;
    } else if (t2.$eq(t1, "value")) {
      t1 = M.NodeBinding.prototype.get$node.call(this);
      J.set$value$x(t1, newValue == null ? "" : H.S(newValue));
      return J.$eq(J.get$value$x(M.NodeBinding.prototype.get$node.call(this)), newValue);
    }
  },
  nodeValueChanged$1: function(e) {
    var t1, t2;
    t1 = this.property;
    t2 = J.getInterceptor(t1);
    if (t2.$eq(t1, "selectedIndex")) {
      t1 = J.get$selectedIndex$x(M.NodeBinding.prototype.get$node.call(this));
      J.set$value$x(this._observer, t1);
    } else if (t2.$eq(t1, "value")) {
      t1 = J.get$value$x(M.NodeBinding.prototype.get$node.call(this));
      J.set$value$x(this._observer, t1);
    }
  },
  get$nodeValueChanged: function() {
    return new H.BoundClosure$1(this, M._SelectBinding.prototype.nodeValueChanged$1, null, "nodeValueChanged$1");
  },
  $is_SelectBinding: true,
  static: {
_SelectBinding__toInt: function(value) {
  if (typeof value === "string")
    return H.Primitives_parseInt(value, null, new M._SelectBinding__toInt_closure());
  return typeof value === "number" && Math.floor(value) === value ? value : 0;
}}

},

_SelectBinding_valueChanged_delaySetSelectedIndex: {"": "Closure;box_0,this_1,newValue_2",
  call$0: function() {
    var t1, t2;
    if (this.this_1._tryUpdateValue$1(this.newValue_2) !== true) {
      t1 = this.box_0;
      t2 = t1.maxRetries_0;
      t1.maxRetries_0 = t2 - 1;
      t2 = t2 > 0;
      t1 = t2;
    } else
      t1 = false;
    if (t1)
      P.scheduleMicrotask(this);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

_SelectBinding__toInt_closure: {"": "Closure;",
  call$1: function(_) {
    return 0;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_InputElementExtension: {"": "_ElementExtension;_node,_bindings,_templateInstance",
  get$_node: function() {
    return this._node;
  },
  bind$3: function(_, $name, model, path) {
    var t1, t2, t3, t4;
    t1 = J.getInterceptor($name);
    if (!t1.$eq($name, "value") && !t1.$eq($name, "checked"))
      return M._ElementExtension.prototype.bind$3.call(this, this, $name, model, path);
    t2 = this.get$_node();
    t3 = J.getInterceptor(t2);
    J.unbind$1$x(typeof t2 === "object" && t2 !== null && !!t3.$isNodeBindExtension ? this.get$_node() : this, $name);
    t4 = J.get$attributes$x(this._node);
    t4.remove$1(t4, $name);
    t4 = this.get$bindings(this);
    if (t1.$eq($name, "value")) {
      t1 = this._node;
      t2 = path != null ? path : "";
      t2 = new M._ValueBinding(null, t1, model, null, null, "value", t2);
      t2._observePath$0();
      t2._eventSub = M._InputBinding__getStreamForInputType(t1).listen$1(t2.get$nodeValueChanged());
      t1 = t2;
    } else {
      t1 = this._node;
      t2 = path != null ? path : "";
      t2 = new M._CheckedBinding(null, t1, model, null, null, "checked", t2);
      t2._observePath$0();
      t2._eventSub = M._InputBinding__getStreamForInputType(t1).listen$1(t2.get$nodeValueChanged());
      t1 = t2;
    }
    t4.$indexSet(t4, $name, t1);
    return t1;
  }
},

NodeBindExtension: {"": "Object;_node<,_bindings,_templateInstance@",
  bind$3: function(_, $name, model, path) {
    var t1, t2;
    window;
    t1 = $.get$Console__safeConsole();
    t2 = "Unhandled binding to Node: " + H.S(this) + " " + H.S($name) + " " + H.S(model) + " " + H.S(path);
    t1.toString;
    if (typeof console != "undefined")
      console.error(t2);
  },
  unbind$1: function(_, $name) {
    var t1, binding;
    if (this._bindings == null)
      return;
    t1 = this.get$bindings(this);
    binding = t1.remove$1(t1, $name);
    if (binding != null)
      J.close$0$x(binding);
  },
  unbindAll$0: function(_) {
    var t1, t2, binding;
    if (this._bindings == null)
      return;
    for (t1 = this.get$bindings(this), t1 = t1.get$values(t1), t2 = t1._iterable, t2 = t2.get$iterator(t2), t2 = new H.MappedIterator(null, t2, t1._f), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "MappedIterable", 0), H.getRuntimeTypeArgument(t1, "MappedIterable", 1)]); t2.moveNext$0();) {
      binding = t2._current;
      if (binding != null)
        J.close$0$x(binding);
    }
    this._bindings = null;
  },
  get$unbindAll: function(_receiver) {
    return new H.BoundClosure$i0(this, M.NodeBindExtension.prototype.unbindAll$0, _receiver, "unbindAll$0");
  },
  get$bindings: function(_) {
    if (this._bindings == null)
      this._bindings = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, M.NodeBinding);
    return this._bindings;
  },
  $isNodeBindExtension: true
},

TemplateInstance: {"": "Object;firstNode,lastNode,model>"},

BindingDelegate: {"": "Object;"},

NodeBinding: {"": "Object;_node<,path>",
  get$node: function() {
    return this._node;
  },
  get$model: function(_) {
    return this._model;
  },
  "+model": 0,
  get$value: function(_) {
    return J.get$value$x(this._observer);
  },
  "+value": 0,
  set$value: function(_, newValue) {
    J.set$value$x(this._observer, newValue);
  },
  "+value=": 0,
  _observePath$0: function() {
    var t1, t2;
    t1 = this._model;
    t2 = J.getInterceptor(t1);
    t1 = typeof t1 === "object" && t1 !== null && !!t2.$isPathObserver && J.$eq(this.path, "value");
    t2 = this._model;
    if (t1)
      this._observer = t2;
    else
      this._observer = B.PathObserver$(t2, this.path);
    this._pathSub = this._observer.bindSync$1(this.get$valueChanged());
  },
  get$valueChanged: function() {
    return new H.BoundClosure$1(this, M.NodeBinding.prototype.valueChanged$1, null, "valueChanged$1");
  },
  close$0: function(_) {
    var t1;
    if (this._node == null)
      return;
    t1 = this._pathSub;
    if (t1 != null)
      t1.cancel$0();
    this._pathSub = null;
    this._observer = null;
    this._node = null;
    this._model = null;
  },
  get$close: function(_receiver) {
    return new H.BoundClosure$i0(this, M.NodeBinding.prototype.close$0, _receiver, "close$0");
  },
  $isNodeBinding: true
},

_SelectElementExtension: {"": "_ElementExtension;_node,_bindings,_templateInstance",
  get$_node: function() {
    return this._node;
  },
  bind$3: function(_, $name, model, path) {
    var t1, t2, t3, t4;
    if (J.$eq($name, "selectedindex"))
      $name = "selectedIndex";
    t1 = J.getInterceptor($name);
    if (!t1.$eq($name, "selectedIndex") && !t1.$eq($name, "value"))
      return M._ElementExtension.prototype.bind$3.call(this, this, $name, model, path);
    t1 = this.get$_node();
    t2 = J.getInterceptor(t1);
    J.unbind$1$x(typeof t1 === "object" && t1 !== null && !!t2.$isNodeBindExtension ? this.get$_node() : this, $name);
    t3 = J.get$attributes$x(this._node);
    t3.remove$1(t3, $name);
    t3 = this.get$bindings(this);
    t4 = this._node;
    t1 = path != null ? path : "";
    t1 = new M._SelectBinding(null, t4, model, null, null, $name, t1);
    t1._observePath$0();
    t1._eventSub = M._InputBinding__getStreamForInputType(t4).listen$1(t1.get$nodeValueChanged());
    t3.$indexSet(t3, $name, t1);
    return t1;
  }
},

TemplateBindExtension: {"": "_ElementExtension;_model,_bindingDelegate?,_templateIterator@,_scheduled,_templateInstanceRef?,_content?,_templateIsDecorated?,_node,_bindings,_templateInstance",
  get$_node: function() {
    return this._node;
  },
  bind$3: function(_, $name, model, path) {
    var t1, t2;
    switch ($name) {
      case "bind":
      case "repeat":
      case "if":
        t1 = this.get$_node();
        t2 = J.getInterceptor(t1);
        J.unbind$1$x(typeof t1 === "object" && t1 !== null && !!t2.$isNodeBindExtension ? this.get$_node() : this, $name);
        if (this._templateIterator == null) {
          t1 = new M._TemplateIterator(this._node, [], null, null, false, null);
          t2 = new B.CompoundBinding(null, P.LinkedHashMap_LinkedHashMap(null, null, null, null, null), P.LinkedHashMap_LinkedHashMap(null, null, null, null, null), null, false, null, null);
          t2._combinator = t1.get$resolveInputs();
          t2._scheduleResolve$0();
          t1.inputs = t2;
          this._templateIterator = t1;
        }
        t1 = this.get$bindings(this);
        t2 = M._TemplateBinding$(this, $name, model, path);
        t1.$indexSet(t1, $name, t2);
        return t2;
      default:
        return M._ElementExtension.prototype.bind$3.call(this, this, $name, model, path);
    }
  },
  createInstance$2: function(model, delegate) {
    var t1, t2, instance;
    t1 = this.get$ref();
    t2 = J.getInterceptor(t1);
    instance = M._createDeepCloneAndDecorateTemplates(J.get$content$x(typeof t1 === "object" && t1 !== null && !!t2.$isNodeBindExtension ? t1 : M.nodeBindFallback(t1)), delegate);
    M._addBindings(instance, model, delegate);
    M._addTemplateInstanceRecord(instance, model);
    return instance;
  },
  get$model: function(_) {
    return this._model;
  },
  "+model": 0,
  set$model: function(_, value) {
    this._model = value;
    this._ensureSetModelScheduled$0();
  },
  "+model=": 0,
  get$bindingDelegate: function() {
    return this._bindingDelegate;
  },
  _ensureSetModelScheduled$0: function() {
    if (this._scheduled)
      return;
    this._decorate$0();
    this._scheduled = true;
    P.scheduleMicrotask(this.get$_setModel());
  },
  _setModel$0: function() {
    this._scheduled = false;
    M._addBindings(this._node, this._model, this._bindingDelegate);
  },
  get$_setModel: function() {
    return new H.BoundClosure$0(this, M.TemplateBindExtension.prototype._setModel$0, null, "_setModel$0");
  },
  get$ref: function() {
    var refId, treeScope, result, t1, nextRef;
    this._decorate$0();
    refId = J.get$attributes$x(this._node)._element.getAttribute("ref");
    if (refId != null) {
      treeScope = M._getTreeScope(this._node);
      result = treeScope != null ? J.getElementById$1$x(treeScope, refId) : null;
    } else
      result = null;
    if (result == null) {
      result = this._templateInstanceRef;
      if (result == null)
        return this._node;
    }
    t1 = J.getInterceptor(result);
    nextRef = (typeof result === "object" && result !== null && !!t1.$isNodeBindExtension ? result : M.nodeBindFallback(result)).get$ref();
    return nextRef != null ? nextRef : result;
  },
  get$content: function(_) {
    var t1;
    this._decorate$0();
    t1 = this._content;
    return t1 != null ? t1 : H.interceptedTypeCast(this._node, "$isTemplateElement").content;
  },
  _decorate$1: function(instanceRef) {
    var t1, t2, isNative, liftContents, templateElementExt, liftRoot;
    if (this._templateIsDecorated === true)
      return false;
    M.TemplateBindExtension__injectStylesheet();
    this._templateIsDecorated = true;
    t1 = this._node;
    t2 = J.getInterceptor(t1);
    isNative = typeof t1 === "object" && t1 !== null && !!t2.$isTemplateElement;
    liftContents = !isNative;
    if (liftContents) {
      t1 = this._node;
      t2 = J.getInterceptor$x(t1);
      t1 = t2.get$attributes(t1)._element.hasAttribute("template") === true && C.Map_05eTF.containsKey$1(t2.get$localName(t1)) === true;
    } else
      t1 = false;
    if (t1) {
      if (instanceRef != null)
        throw H.wrapException(new P.ArgumentError("instanceRef should not be supplied for attribute templates."));
      templateElementExt = M.TemplateBindExtension__extractTemplateFromAttributeTemplate(this._node);
      t1 = J.getInterceptor(templateElementExt);
      templateElementExt = typeof templateElementExt === "object" && templateElementExt !== null && !!t1.$isNodeBindExtension ? templateElementExt : M.nodeBindFallback(templateElementExt);
      templateElementExt.set$_templateIsDecorated(true);
      t1 = templateElementExt.get$_node();
      t2 = J.getInterceptor(t1);
      isNative = typeof t1 === "object" && t1 !== null && !!t2.$isTemplateElement;
      liftRoot = true;
    } else {
      templateElementExt = this;
      liftRoot = false;
    }
    if (!isNative)
      templateElementExt.set$_content(J.createDocumentFragment$0$x(M.TemplateBindExtension__getTemplateContentsOwner(J.get$ownerDocument$x(templateElementExt.get$_node()))));
    if (instanceRef != null)
      templateElementExt.set$_templateInstanceRef(instanceRef);
    else if (liftContents)
      M.TemplateBindExtension__liftNonNativeChildrenIntoContent(templateElementExt, this._node, liftRoot);
    else
      M.TemplateBindExtension_bootstrap(J.get$content$x(templateElementExt));
    return true;
  },
  _decorate$0: function() {
    return this._decorate$1(null);
  },
  static: {
"": "TemplateBindExtension__contentsOwner,TemplateBindExtension__allTemplatesSelectors,TemplateBindExtension__initStyles",
TemplateBindExtension__getTemplateContentsOwner: function(doc) {
  var t1, d, t2;
  if (W._convertNativeToDart_Window(doc.defaultView) == null)
    return doc;
  t1 = $.get$TemplateBindExtension__contentsOwner();
  d = t1.$index(t1, doc);
  if (d == null) {
    d = doc.implementation.createHTMLDocument("");
    for (; t1 = d.lastChild, t1 != null;) {
      t2 = t1.parentNode;
      if (t2 != null)
        t2.removeChild(t1);
    }
    t1 = $.get$TemplateBindExtension__contentsOwner();
    t1.$indexSet(t1, doc, d);
  }
  return d;
},

TemplateBindExtension__extractTemplateFromAttributeTemplate: function(el) {
  var t1, template, t2, t3, $name, value;
  t1 = J.getInterceptor$x(el);
  template = t1.get$ownerDocument(el).createElement("template", null);
  J.insertBefore$2$x(t1.get$parentNode(el), template, el);
  for (t2 = t1.get$attributes(el).get$keys(), t2 = P.List_List$from(t2, true, H.getRuntimeTypeArgument(t2, "JSArray", 0)), t3 = new H.ListIterator(t2, t2.length, 0, null), H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "JSArray", 0)]); t3.moveNext$0();) {
    $name = t3._current;
    switch ($name) {
      case "template":
        t2 = t1.get$attributes(el)._element;
        t2.getAttribute($name);
        t2.removeAttribute($name);
        break;
      case "repeat":
      case "bind":
      case "ref":
        template.toString;
        t2 = t1.get$attributes(el)._element;
        value = t2.getAttribute($name);
        t2.removeAttribute($name);
        new W._ElementAttributeMap(template)._element.setAttribute($name, value);
        break;
      default:
    }
  }
  return template;
},

TemplateBindExtension__liftNonNativeChildrenIntoContent: function(template, el, useRoot) {
  var $content, t1, t2, child;
  $content = J.get$content$x(template);
  if (useRoot) {
    J.append$1$x($content, el);
    return;
  }
  for (t1 = J.getInterceptor$x(el), t2 = J.getInterceptor$x($content); child = t1.get$firstChild(el), child != null;)
    t2.append$1($content, child);
},

TemplateBindExtension_bootstrap: function($content) {
  var t1, descendents;
  t1 = new M.TemplateBindExtension_bootstrap__bootstrap();
  descendents = J.querySelectorAll$1$x($content, $.get$TemplateBindExtension__allTemplatesSelectors());
  if (M.isSemanticTemplate($content))
    t1.call$1($content);
  descendents.forEach$1(descendents, t1);
},

TemplateBindExtension__injectStylesheet: function() {
  if ($.TemplateBindExtension__initStyles === true)
    return;
  $.TemplateBindExtension__initStyles = true;
  var style = document.createElement("style", null);
  style.textContent = "template,\nthead[template],\ntbody[template],\ntfoot[template],\nth[template],\ntr[template],\ntd[template],\ncaption[template],\ncolgroup[template],\ncol[template],\noption[template] {\n  display: none;\n}";
  document.head.appendChild(style);
}}

},

TemplateBindExtension_bootstrap__bootstrap: {"": "Closure;",
  call$1: function(template) {
    var t1;
    if (!M.nodeBindFallback(template)._decorate$1(null)) {
      t1 = J.getInterceptor(template);
      M.TemplateBindExtension_bootstrap(J.get$content$x(typeof template === "object" && template !== null && !!t1.$isNodeBindExtension ? template : M.nodeBindFallback(template)));
    }
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

closure19: {"": "Closure;",
  call$1: function(k) {
    return H.S(k) + "[template]";
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_TemplateBinding: {"": "NodeBinding;_ext,_node,_model,_observer,_pathSub,property,path",
  _observePath$0: function() {
  },
  valueChanged$1: function(newValue) {
  },
  get$valueChanged: function() {
    return new H.BoundClosure$1(this, M._TemplateBinding.prototype.valueChanged$1, null, "valueChanged$1");
  },
  close$0: function(_) {
    var templateIterator, t1;
    if (this._node == null)
      return;
    templateIterator = this._ext._templateIterator;
    if (templateIterator != null) {
      t1 = templateIterator.inputs;
      t1.unbind$1(t1, this.property);
    }
    M.NodeBinding.prototype.close$0.call(this, this);
  },
  get$close: function(_receiver) {
    return new H.BoundClosure$i0(this, M._TemplateBinding.prototype.close$0, _receiver, "close$0");
  },
  _TemplateBinding$4: function(ext, $name, model, path) {
    var t1 = this._ext._templateIterator.inputs;
    t1.bind$3(t1, this.property, model, this.path);
  },
  static: {
_TemplateBinding$: function(ext, $name, model, path) {
  var t1, t2;
  t1 = ext._node;
  t2 = path != null ? path : "";
  t2 = new M._TemplateBinding(ext, t1, model, null, null, $name, t2);
  t2._observePath$0();
  t2._TemplateBinding$4(ext, $name, model, path);
  return t2;
}}

},

_parseAttributeBindings_closure: {"": "Closure;box_0,isTemplateNode_1",
  call$2: function($name, value) {
    var t1, tokens;
    if (this.isTemplateNode_1) {
      t1 = J.getInterceptor($name);
      if (t1.$eq($name, "if"))
        this.box_0.ifFound_1 = true;
      else if (t1.$eq($name, "bind") || t1.$eq($name, "repeat")) {
        this.box_0.bindFound_2 = true;
        if (J.$eq(value, ""))
          value = "{{}}";
      }
    }
    tokens = M._parseMustacheTokens(value);
    if (tokens != null) {
      t1 = this.box_0;
      if (t1.bindings_0 == null)
        t1.bindings_0 = [];
      t1 = t1.bindings_0;
      t1.push($name);
      t1.push(tokens);
    }
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

_setupBinding_closure: {"": "Closure;tokens_0",
  call$1: function(values) {
    var newValue, t1, t2, t3, i, text, t4, str, value;
    newValue = P.StringBuffer$("");
    t1 = this.tokens_0;
    t2 = J.getInterceptor$asx(t1);
    t3 = J.getInterceptor$asx(values);
    i = 0;
    text = true;
    while (true) {
      t4 = t2.get$length(t1);
      if (typeof t4 !== "number")
        throw H.iae(t4);
      if (!(i < t4))
        break;
      if (text) {
        str = t2.$index(t1, i);
        str = typeof str === "string" ? str : H.S(str);
        newValue._contents = newValue._contents + str;
      } else {
        value = t3.$index(values, i);
        if (value != null) {
          str = typeof value === "string" ? value : H.S(value);
          newValue._contents = newValue._contents + str;
        }
      }
      ++i;
      text = !text;
    }
    return newValue._contents;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_TemplateIterator: {"": "Object;_templateElement,terminators,inputs,iteratedValue,closed,_template_binding$_sub",
  resolveInputs$1: function(values) {
    var t1;
    if (this.closed)
      return;
    if (values.containsKey$1("if") === true) {
      t1 = J.$index$asx(values, "if");
      t1 = !(null != t1 && false !== t1);
    } else
      t1 = false;
    if (t1)
      this.valueChanged$1(null);
    else if (values.containsKey$1("repeat") === true)
      this.valueChanged$1(J.$index$asx(values, "repeat"));
    else if (values.containsKey$1("bind") === true || values.containsKey$1("if") === true)
      this.valueChanged$1([J.$index$asx(values, "bind")]);
    else
      this.valueChanged$1(null);
    return;
  },
  get$resolveInputs: function() {
    return new H.BoundClosure$1(this, M._TemplateIterator.prototype.resolveInputs$1, null, "resolveInputs$1");
  },
  valueChanged$1: function(value) {
    var t1, oldValue, t2, splices;
    t1 = J.getInterceptor(value);
    if (typeof value !== "object" || value === null || value.constructor !== Array && !t1.$isList)
      value = null;
    oldValue = this.iteratedValue;
    this.unobserve$0();
    this.iteratedValue = value;
    t1 = this.iteratedValue;
    t1 = t1 != null ? t1 : [];
    t2 = oldValue != null ? oldValue : [];
    splices = O._calcSplices(t1, 0, J.get$length$asx(t1), t2, 0, J.get$length$asx(t2));
    if (splices.length > 0)
      this._handleChanges$1(splices);
    if (this.inputs._observe$_observers._collection$_length === 0) {
      this.close$0(this);
      M.nodeBindFallback(this._templateElement).set$_templateIterator(null);
    }
  },
  get$valueChanged: function() {
    return new H.BoundClosure$1(this, M._TemplateIterator.prototype.valueChanged$1, null, "valueChanged$1");
  },
  getTerminatorAt$1: function(index) {
    var t1, terminator, subIterator;
    if (J.$eq(index, -1))
      return this._templateElement;
    t1 = this.terminators;
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    terminator = t1[index];
    if (M.isSemanticTemplate(terminator)) {
      t1 = this._templateElement;
      t1 = terminator == null ? t1 != null : terminator !== t1;
    } else
      t1 = false;
    if (t1) {
      subIterator = M.nodeBindFallback(terminator).get$_templateIterator();
      if (subIterator != null)
        return subIterator.getTerminatorAt$1(subIterator.terminators.length - 1);
    }
    return terminator;
  },
  insertInstanceAt$3: function(index, fragment, instanceNodes) {
    var previousTerminator, t1, terminator, t2, $parent, insertBeforeNode;
    previousTerminator = this.getTerminatorAt$1(J.$sub$n(index, 1));
    t1 = fragment != null;
    if (t1)
      terminator = fragment.lastChild;
    else {
      t2 = J.getInterceptor$asx(instanceNodes);
      terminator = J.$gt$n(t2.get$length(instanceNodes), 0) ? t2.get$last(instanceNodes) : null;
    }
    if (terminator == null)
      terminator = previousTerminator;
    C.JSArray_methods.insert$2(this.terminators, index, terminator);
    $parent = J.get$parentNode$x(this._templateElement);
    insertBeforeNode = J.get$nextNode$x(previousTerminator);
    if (t1) {
      J.insertBefore$2$x($parent, fragment, insertBeforeNode);
      return;
    }
    for (t1 = J.get$iterator$ax(instanceNodes), t2 = J.getInterceptor$x($parent); t1.moveNext$0();)
      t2.insertBefore$2($parent, t1.get$current(), insertBeforeNode);
  },
  extractInstanceAt$1: function(index) {
    var instanceNodes, previousTerminator, terminator, t1, node, t2;
    instanceNodes = [];
    previousTerminator = this.getTerminatorAt$1(J.$sub$n(index, 1));
    terminator = this.getTerminatorAt$1(index);
    C.JSArray_methods.removeAt$1(this.terminators, index);
    J.get$parentNode$x(this._templateElement);
    for (t1 = J.getInterceptor$x(previousTerminator); !J.$eq(terminator, previousTerminator);) {
      node = t1.get$nextNode(previousTerminator);
      if (node == null ? terminator == null : node === terminator)
        terminator = previousTerminator;
      t2 = node.parentNode;
      if (t2 != null)
        t2.removeChild(node);
      instanceNodes.push(node);
    }
    return instanceNodes;
  },
  getInstanceModel$2: function(model, delegate) {
    if (delegate != null)
      return delegate.getInstanceModel$2(this._templateElement, model);
    return model;
  },
  _handleChanges$1: function(splices) {
    var template, t1, t2, delegate, instanceCache, t3, removeDelta, splice, t4, i, instanceNodes, addIndex, t5, model, actualModel, fragment;
    if (this.closed)
      return;
    splices = J.where$1$ax(splices, new M._TemplateIterator__handleChanges_closure());
    template = this._templateElement;
    t1 = J.getInterceptor$x(template);
    t2 = typeof template === "object" && template !== null && !!t1.$isNodeBindExtension;
    delegate = (t2 ? template : M.nodeBindFallback(template)).get$bindingDelegate();
    if (t1.get$parentNode(template) == null || W._convertNativeToDart_Window(t1.get$ownerDocument(template).defaultView) == null) {
      this.close$0(this);
      return;
    }
    instanceCache = P.HashMap_HashMap(P.identical$closure, null, null, null, null);
    for (t1 = splices.get$iterator(splices), t3 = t1._iterator, removeDelta = 0; t1.moveNext$0();) {
      splice = t3.get$current();
      for (t4 = J.getInterceptor$x(splice), i = 0; i < splice.get$removedCount(); ++i) {
        instanceNodes = this.extractInstanceAt$1(J.$add$ns(t4.get$index(splice), removeDelta));
        if (instanceNodes.length === 0)
          continue;
        instanceCache.$indexSet(instanceCache, M.nodeBindFallback(C.JSArray_methods.get$first(instanceNodes)).get$_templateInstance().model, instanceNodes);
      }
      t4 = splice.get$addedCount();
      if (typeof t4 !== "number")
        throw H.iae(t4);
      removeDelta -= t4;
    }
    for (t1 = splices.get$iterator(splices), t3 = t1._iterator; t1.moveNext$0();) {
      splice = t3.get$current();
      for (t4 = J.getInterceptor$x(splice), addIndex = t4.get$index(splice); t5 = J.getInterceptor$n(addIndex), t5.$lt(addIndex, J.$add$ns(t4.get$index(splice), splice.get$addedCount())); addIndex = t5.$add(addIndex, 1)) {
        model = J.$index$asx(this.iteratedValue, addIndex);
        instanceNodes = instanceCache.remove$1(instanceCache, model);
        if (instanceNodes == null) {
          actualModel = this.getInstanceModel$2(model, delegate);
          fragment = (t2 ? template : M.nodeBindFallback(template)).createInstance$2(actualModel, delegate);
        } else
          fragment = null;
        this.insertInstanceAt$3(addIndex, fragment, instanceNodes);
      }
    }
    for (t1 = instanceCache.get$values(instanceCache), t2 = t1._iterable, t2 = t2.get$iterator(t2), t2 = new H.MappedIterator(null, t2, t1._f), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "MappedIterable", 0), H.getRuntimeTypeArgument(t1, "MappedIterable", 1)]); t2.moveNext$0();)
      J.forEach$1$ax(t2._current, M._TemplateIterator__unbindAllRecursively$closure);
  },
  unobserve$0: function() {
    return;
  },
  close$0: function(_) {
    var t1;
    if (this.closed)
      return;
    this.unobserve$0();
    t1 = this.inputs;
    t1.close$0(t1);
    C.JSArray_methods.set$length(this.terminators, 0);
    this.closed = true;
  },
  get$close: function(_receiver) {
    return new H.BoundClosure$i0(this, M._TemplateIterator.prototype.close$0, _receiver, "close$0");
  },
  static: {
_TemplateIterator__unbindAllRecursively: function(node) {
  var nodeExt, t1, t2, templateIterator, c;
  nodeExt = M.nodeBindFallback(node);
  nodeExt.set$_templateInstance(null);
  t1 = J.getInterceptor(node);
  if (typeof node === "object" && node !== null && !!t1.$isElement)
    if (node.localName !== "template")
      t2 = t1.get$attributes(node)._element.hasAttribute("template") === true && C.Map_05eTF.containsKey$1(t1.get$localName(node)) === true;
    else
      t2 = true;
  else
    t2 = false;
  if (t2) {
    templateIterator = nodeExt.get$_templateIterator();
    if (templateIterator != null) {
      templateIterator.close$0(templateIterator);
      nodeExt.set$_templateIterator(null);
    }
  }
  J.unbindAll$0$x(typeof node === "object" && node !== null && !!t1.$isNodeBindExtension ? node : M.nodeBindFallback(node));
  for (c = t1.get$firstChild(node); c != null; c = J.get$nextNode$x(c))
    M._TemplateIterator__unbindAllRecursively(c);
}}

},

_TemplateIterator__handleChanges_closure: {"": "Closure;",
  call$1: function(s) {
    var t1 = J.getInterceptor(s);
    return typeof s === "object" && s !== null && !!t1.$isListChangeRecord;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_TextExtension: {"": "NodeBindExtension;_node,_bindings,_templateInstance",
  bind$3: function(_, $name, model, path) {
    var t1, t2;
    if (!J.$eq($name, "text"))
      return M.NodeBindExtension.prototype.bind$3.call(this, this, $name, model, path);
    this.unbind$1(this, $name);
    t1 = this.get$bindings(this);
    t2 = path != null ? path : "";
    t2 = new M._TextBinding(this._node, model, null, null, "text", t2);
    t2._observePath$0();
    t1.$indexSet(t1, $name, t2);
    return t2;
  }
},

_TextBinding: {"": "NodeBinding;_node,_model,_observer,_pathSub,property,path",
  valueChanged$1: function(newValue) {
    var t1 = this._node;
    J.set$text$x(t1, newValue == null ? "" : H.S(newValue));
  },
  get$valueChanged: function() {
    return new H.BoundClosure$1(this, M._TextBinding.prototype.valueChanged$1, null, "valueChanged$1");
  }
},

_TextAreaElementExtension: {"": "_ElementExtension;_node,_bindings,_templateInstance",
  get$_node: function() {
    return this._node;
  },
  bind$3: function(_, $name, model, path) {
    var t1, t2, t3, t4;
    if (!J.$eq($name, "value"))
      return M._ElementExtension.prototype.bind$3.call(this, this, $name, model, path);
    t1 = this.get$_node();
    t2 = J.getInterceptor(t1);
    J.unbind$1$x(typeof t1 === "object" && t1 !== null && !!t2.$isNodeBindExtension ? this.get$_node() : this, $name);
    t3 = J.get$attributes$x(this._node);
    t3.remove$1(t3, $name);
    t3 = this.get$bindings(this);
    t4 = this._node;
    t1 = path != null ? path : "";
    t1 = new M._ValueBinding(null, t4, model, null, null, "value", t1);
    t1._observePath$0();
    t1._eventSub = M._InputBinding__getStreamForInputType(t4).listen$1(t1.get$nodeValueChanged());
    t3.$indexSet(t3, $name, t1);
    return t1;
  }
}}],
["template_binding.src.list_diff", "package:template_binding/src/list_diff.dart", , O, {
_calcEditDistances: function(current, currentStart, currentEnd, old, oldStart, oldEnd) {
  var rowCount, columnCount, distances, t1, i, t2, j, t3, t4, t5, t6, t7, t8, t9, north, west;
  rowCount = J.$add$ns(J.$sub$n(oldEnd, oldStart), 1);
  columnCount = J.$add$ns(J.$sub$n(currentEnd, currentStart), 1);
  distances = P.List_List(rowCount, null);
  if (typeof rowCount !== "number")
    throw H.iae(rowCount);
  t1 = distances.length;
  i = 0;
  for (; i < rowCount; ++i) {
    t2 = P.List_List(columnCount, null);
    if (i >= t1)
      throw H.ioore(distances, i);
    distances[i] = t2;
    t2 = distances[i];
    if (0 >= t2.length)
      throw H.ioore(t2, 0);
    t2[0] = i;
  }
  if (typeof columnCount !== "number")
    throw H.iae(columnCount);
  j = 0;
  for (; j < columnCount; ++j) {
    if (0 >= t1)
      throw H.ioore(distances, 0);
    t2 = distances[0];
    if (j >= t2.length)
      throw H.ioore(t2, j);
    t2[j] = j;
  }
  for (t2 = J.getInterceptor$asx(old), t3 = J.getInterceptor$asx(current), i = 1; i < rowCount; ++i)
    for (t4 = i - 1, t5 = oldStart + i - 1, j = 1; j < columnCount; ++j) {
      t6 = t2.$index(old, t5);
      t7 = t3.$index(current, currentStart + j - 1);
      t8 = distances[t4];
      t9 = j - 1;
      if (t6 == null ? t7 == null : t6 === t7) {
        if (i >= t1)
          throw H.ioore(distances, i);
        t6 = distances[i];
        if (t4 >= t1)
          throw H.ioore(distances, t4);
        if (t9 >= t8.length)
          throw H.ioore(t8, t9);
        t9 = t8[t9];
        if (j >= t6.length)
          throw H.ioore(t6, j);
        t6[j] = t9;
      } else {
        if (t4 >= t1)
          throw H.ioore(distances, t4);
        if (j >= t8.length)
          throw H.ioore(t8, j);
        north = J.$add$ns(t8[j], 1);
        if (i >= t1)
          throw H.ioore(distances, i);
        t6 = distances[i];
        if (t9 >= t6.length)
          throw H.ioore(t6, t9);
        west = J.$add$ns(t6[t9], 1);
        t9 = distances[i];
        t6 = P.min(north, west);
        if (j >= t9.length)
          throw H.ioore(t9, j);
        t9[j] = t6;
      }
    }
  return distances;
},

_spliceOperationsFromEditDistances: function(distances) {
  var t1, i, j, t2, current, edits, t3, t4, t5, northWest, west, north, min;
  t1 = distances.length;
  i = t1 - 1;
  if (0 >= t1)
    throw H.ioore(distances, 0);
  j = distances[0].length - 1;
  if (i < 0)
    throw H.ioore(distances, i);
  t2 = distances[i];
  if (j < 0 || j >= t2.length)
    throw H.ioore(t2, j);
  current = t2[j];
  edits = [];
  while (true) {
    if (!(i > 0 || j > 0))
      break;
    c$0: {
      if (i === 0) {
        edits.push(2);
        --j;
        break c$0;
      }
      if (j === 0) {
        edits.push(3);
        --i;
        break c$0;
      }
      t2 = i - 1;
      if (t2 < 0)
        throw H.ioore(distances, t2);
      t3 = distances[t2];
      t4 = j - 1;
      t5 = t3.length;
      if (t4 < 0 || t4 >= t5)
        throw H.ioore(t3, t4);
      northWest = t3[t4];
      if (j < 0 || j >= t5)
        throw H.ioore(t3, j);
      west = t3[j];
      if (i < 0)
        throw H.ioore(distances, i);
      t3 = distances[i];
      if (t4 >= t3.length)
        throw H.ioore(t3, t4);
      north = t3[t4];
      min = P.min(P.min(west, north), northWest);
      if (min === northWest) {
        if (J.$eq(northWest, current))
          edits.push(0);
        else {
          edits.push(1);
          current = northWest;
        }
        j = t4;
        i = t2;
      } else if (min === west) {
        edits.push(3);
        current = west;
        i = t2;
      } else {
        edits.push(2);
        current = north;
        j = t4;
      }
    }
  }
  t1 = new H.ReversedListIterable(edits);
  H.setRuntimeTypeInfo(t1, [null]);
  return t1.toList$0(t1);
},

_sharedPrefix: function(arr1, arr2, searchLength) {
  var t1, t2, i, t3, t4;
  for (t1 = J.getInterceptor$asx(arr1), t2 = J.getInterceptor$asx(arr2), i = 0; i < searchLength; ++i) {
    t3 = t1.$index(arr1, i);
    t4 = t2.$index(arr2, i);
    if (t3 == null ? t4 != null : t3 !== t4)
      return i;
  }
  return searchLength;
},

_sharedSuffix: function(arr1, arr2, searchLength) {
  var t1, index1, t2, index2, count, t3, t4;
  t1 = J.getInterceptor$asx(arr1);
  index1 = t1.get$length(arr1);
  t2 = J.getInterceptor$asx(arr2);
  index2 = t2.get$length(arr2);
  count = 0;
  while (true) {
    if (count < searchLength) {
      index1 = J.$sub$n(index1, 1);
      t3 = t1.$index(arr1, index1);
      index2 = J.$sub$n(index2, 1);
      t4 = t2.$index(arr2, index2);
      t4 = t3 == null ? t4 == null : t3 === t4;
      t3 = t4;
    } else
      t3 = false;
    if (!t3)
      break;
    ++count;
  }
  return count;
},

_calcSplices: function(current, currentStart, currentEnd, old, oldStart, oldEnd) {
  var t1, t2, minLength, prefixCount, suffixCount, splice, oldStart0, ops, splices, oldIndex, index, i;
  t1 = J.getInterceptor$n(currentEnd);
  t2 = J.getInterceptor$n(oldEnd);
  minLength = P.min(t1.$sub(currentEnd, currentStart), t2.$sub(oldEnd, oldStart));
  prefixCount = currentStart === 0 && oldStart === 0 ? O._sharedPrefix(current, old, minLength) : 0;
  suffixCount = t1.$eq(currentEnd, J.get$length$asx(current)) && t2.$eq(oldEnd, J.get$length$asx(old)) ? O._sharedSuffix(current, old, minLength - prefixCount) : 0;
  currentStart += prefixCount;
  oldStart += prefixCount;
  currentEnd = t1.$sub(currentEnd, suffixCount);
  oldEnd = t2.$sub(oldEnd, suffixCount);
  t1 = J.getInterceptor$n(currentEnd);
  if (J.$eq(t1.$sub(currentEnd, currentStart), 0) && J.$eq(J.$sub$n(oldEnd, oldStart), 0))
    return C.List_empty;
  if (currentStart === currentEnd) {
    t1 = [];
    splice = new O.ListChangeDelta(currentStart, t1, 0);
    if (typeof oldEnd !== "number")
      throw H.iae(oldEnd);
    t1 = splice._removed;
    t2 = J.getInterceptor$asx(old);
    for (; oldStart < oldEnd; oldStart = oldStart0) {
      oldStart0 = oldStart + 1;
      t1.push(t2.$index(old, oldStart));
    }
    return [splice];
  } else if (oldStart === oldEnd) {
    t1 = t1.$sub(currentEnd, currentStart);
    t2 = [];
    return [new O.ListChangeDelta(currentStart, t2, t1)];
  }
  ops = O._spliceOperationsFromEditDistances(O._calcEditDistances(current, currentStart, currentEnd, old, oldStart, oldEnd));
  splices = [];
  for (t1 = J.getInterceptor$asx(old), oldIndex = oldStart, index = currentStart, splice = null, i = 0; i < ops.length; ++i)
    switch (ops[i]) {
      case 0:
        if (splice != null) {
          splices.push(splice);
          splice = null;
        }
        ++index;
        ++oldIndex;
        break;
      case 1:
        if (splice == null) {
          t2 = [];
          splice = new O.ListChangeDelta(index, t2, 0);
        }
        splice._addedCount = J.$add$ns(splice._addedCount, 1);
        ++index;
        splice._removed.push(t1.$index(old, oldIndex));
        ++oldIndex;
        break;
      case 2:
        if (splice == null) {
          t2 = [];
          splice = new O.ListChangeDelta(index, t2, 0);
        }
        splice._addedCount = J.$add$ns(splice._addedCount, 1);
        ++index;
        break;
      case 3:
        if (splice == null) {
          t2 = [];
          splice = new O.ListChangeDelta(index, t2, 0);
        }
        splice._removed.push(t1.$index(old, oldIndex));
        ++oldIndex;
        break;
      default:
    }
  if (splice != null)
    splices.push(splice);
  return splices;
},

ListChangeDelta: {"": "Object;index>,_removed,_addedCount",
  get$addedCount: function() {
    return this._addedCount;
  },
  get$removedCount: function() {
    return this._removed.length;
  },
  changes$1: function(_, key) {
    var t1;
    if (typeof key !== "number" || Math.floor(key) !== key || key < this.index)
      return false;
    if (!J.$eq(this._addedCount, this._removed.length))
      return true;
    t1 = this._addedCount;
    if (typeof t1 !== "number")
      throw H.iae(t1);
    return J.$lt$n(key, this.index + t1);
  },
  get$changes: function(_receiver) {
    return new J.BoundClosure$i1(this, O.ListChangeDelta.prototype.changes$1, _receiver, "changes$1");
  },
  toString$0: function(_) {
    return "#<" + H.S(new H.TypeImpl(H.getRuntimeTypeString(this), null)) + " index: " + H.S(this.index) + ", removed: " + H.S(this._removed) + ", addedCount: " + H.S(this._addedCount) + ">";
  },
  $isListChangeRecord: true,
  $isChangeRecord: true
}}],
["unmodifiable_collection", "package:unmodifiable_collection/unmodifiable_collection.dart", , F, {
UnmodifiableMapView0: {"": "Object;_unmodifiable_collection$_source",
  get$length: function(_) {
    return this._unmodifiable_collection$_source._collection$_length;
  },
  "+length": 0,
  get$isEmpty: function(_) {
    return this._unmodifiable_collection$_source._collection$_length === 0;
  },
  "+isEmpty": 0,
  get$isNotEmpty: function(_) {
    return this._unmodifiable_collection$_source._collection$_length !== 0;
  },
  "+isNotEmpty": 0,
  $index: function(_, key) {
    var t1 = this._unmodifiable_collection$_source;
    return t1.$index(t1, key);
  },
  "+[]:1:0": 0,
  containsKey$1: function(key) {
    return this._unmodifiable_collection$_source.containsKey$1(key);
  },
  "+containsKey:1:0": 0,
  containsValue$1: function(value) {
    return this._unmodifiable_collection$_source.containsValue$1(value);
  },
  "+containsValue:1:0": 0,
  forEach$1: function(_, f) {
    var t1 = this._unmodifiable_collection$_source;
    return t1.forEach$1(t1, f);
  },
  get$keys: function() {
    var t1, t2;
    t1 = this._unmodifiable_collection$_source;
    t2 = new P.LinkedHashMapKeyIterable(t1);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_LinkedHashMap", 0)]);
    return t2;
  },
  "+keys": 0,
  get$values: function(_) {
    var t1 = this._unmodifiable_collection$_source;
    return t1.get$values(t1);
  },
  "+values": 0,
  $indexSet: function(_, key, value) {
    return F.UnmodifiableMapView__throw0();
  },
  "+[]=:2:0": 0,
  putIfAbsent$2: function(key, ifAbsent) {
    F.UnmodifiableMapView__throw0();
  },
  addAll$1: function(_, other) {
    return F.UnmodifiableMapView__throw0();
  },
  remove$1: function(_, key) {
    F.UnmodifiableMapView__throw0();
  },
  $isMap: true,
  static: {
UnmodifiableMapView__throw0: function() {
  throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable Map"));
}}

}}],
]);
Isolate.$finishClasses($$, $, null);
$$ = null;

// Static function getters
init.globalFunctions.IsolateNatives__processWorkerMessage$closure = H.IsolateNatives__processWorkerMessage$closure = new H.Closure$2(H.IsolateNatives__processWorkerMessage, "IsolateNatives__processWorkerMessage$closure");
init.globalFunctions.Primitives__throwFormatException$closure = H.Primitives__throwFormatException$closure = new H.Closure$1(H.Primitives__throwFormatException, "Primitives__throwFormatException$closure");
init.globalFunctions.toStringWrapper$closure = H.toStringWrapper$closure = new H.Closure$0(H.toStringWrapper, "toStringWrapper$closure");
init.globalFunctions.invokeClosure$closure = H.invokeClosure$closure = new H.Closure$7(H.invokeClosure, "invokeClosure$closure");
init.globalFunctions.isAssignable$closure = H.isAssignable$closure = new H.Closure$2(H.isAssignable, "isAssignable$closure");
init.globalFunctions.typeNameInChrome$closure = H.typeNameInChrome$closure = new H.Closure$1(H.typeNameInChrome, "typeNameInChrome$closure");
init.globalFunctions.typeNameInSafari$closure = H.typeNameInSafari$closure = new H.Closure$1(H.typeNameInSafari, "typeNameInSafari$closure");
init.globalFunctions.typeNameInOpera$closure = H.typeNameInOpera$closure = new H.Closure$1(H.typeNameInOpera, "typeNameInOpera$closure");
init.globalFunctions.typeNameInFirefox$closure = H.typeNameInFirefox$closure = new H.Closure$1(H.typeNameInFirefox, "typeNameInFirefox$closure");
init.globalFunctions.typeNameInIE$closure = H.typeNameInIE$closure = new H.Closure$1(H.typeNameInIE, "typeNameInIE$closure");
init.globalFunctions.constructorNameFallback$closure = H.constructorNameFallback$closure = new H.Closure$1(H.constructorNameFallback, "constructorNameFallback$closure");
init.globalFunctions.callDartFunctionWith1Arg$closure = H.callDartFunctionWith1Arg$closure = new H.Closure$2(H.callDartFunctionWith1Arg, "callDartFunctionWith1Arg$closure");
init.globalFunctions.main$closure = E.main$closure = new H.Closure$0(E.main, "main$closure");
init.globalFunctions.reflect$closure = H.reflect$closure = new H.Closure$1(H.reflect, "reflect$closure");
init.globalFunctions._asyncRunCallback$closure = P._asyncRunCallback$closure = new H.Closure$0(P._asyncRunCallback, "_asyncRunCallback$closure");
init.globalFunctions._nullDataHandler$closure = P._nullDataHandler$closure = new H.Closure$1(P._nullDataHandler, "_nullDataHandler$closure");
init.globalFunctions._nullErrorHandler$closure = P._nullErrorHandler$closure = new P.Closure$22(P._nullErrorHandler, "_nullErrorHandler$closure");
init.globalFunctions._nullDoneHandler$closure = P._nullDoneHandler$closure = new H.Closure$0(P._nullDoneHandler, "_nullDoneHandler$closure");
init.globalFunctions._rootHandleUncaughtError$closure = P._rootHandleUncaughtError$closure = new P.Closure$5(P._rootHandleUncaughtError, "_rootHandleUncaughtError$closure");
init.globalFunctions._rootRun$closure = P._rootRun$closure = new P.Closure$4(P._rootRun, "_rootRun$closure");
init.globalFunctions._rootRunUnary$closure = P._rootRunUnary$closure = new P.Closure$5(P._rootRunUnary, "_rootRunUnary$closure");
init.globalFunctions._rootRunBinary$closure = P._rootRunBinary$closure = new P.Closure$6(P._rootRunBinary, "_rootRunBinary$closure");
init.globalFunctions._rootRegisterCallback$closure = P._rootRegisterCallback$closure = new P.Closure$4(P._rootRegisterCallback, "_rootRegisterCallback$closure");
init.globalFunctions._rootRegisterUnaryCallback$closure = P._rootRegisterUnaryCallback$closure = new P.Closure$4(P._rootRegisterUnaryCallback, "_rootRegisterUnaryCallback$closure");
init.globalFunctions._rootRegisterBinaryCallback$closure = P._rootRegisterBinaryCallback$closure = new P.Closure$4(P._rootRegisterBinaryCallback, "_rootRegisterBinaryCallback$closure");
init.globalFunctions._rootScheduleMicrotask$closure = P._rootScheduleMicrotask$closure = new P.Closure$4(P._rootScheduleMicrotask, "_rootScheduleMicrotask$closure");
init.globalFunctions._rootCreateTimer$closure = P._rootCreateTimer$closure = new P.Closure$5(P._rootCreateTimer, "_rootCreateTimer$closure");
init.globalFunctions._rootPrint$closure = P._rootPrint$closure = new P.Closure$4(P._rootPrint, "_rootPrint$closure");
init.globalFunctions._printToZone$closure = P._printToZone$closure = new H.Closure$1(P._printToZone, "_printToZone$closure");
init.globalFunctions._rootFork$closure = P._rootFork$closure = new P.Closure$5(P._rootFork, "_rootFork$closure");
init.globalFunctions._defaultEquals$closure = P._defaultEquals$closure = new H.Closure$2(P._defaultEquals, "_defaultEquals$closure");
init.globalFunctions._defaultHashCode$closure = P._defaultHashCode$closure = new H.Closure$1(P._defaultHashCode, "_defaultHashCode$closure");
init.globalFunctions._defaultToEncodable$closure = P._defaultToEncodable$closure = new H.Closure$1(P._defaultToEncodable, "_defaultToEncodable$closure");
init.globalFunctions.Comparable_compare$closure = P.Comparable_compare$closure = new H.Closure$2(P.Comparable_compare, "Comparable_compare$closure");
init.globalFunctions.identical$closure = P.identical$closure = new H.Closure$2(P.identical, "identical$closure");
init.globalFunctions.identityHashCode$closure = P.identityHashCode$closure = new H.Closure$1(P.identityHashCode, "identityHashCode$closure");
init.globalFunctions.int_parse$closure = P.int_parse$closure = new P.Closure$3(P.int_parse, "int_parse$closure");
init.globalFunctions.Element__determineTransitionEventType$closure = W.Element__determineTransitionEventType$closure = new H.Closure$1(W.Element__determineTransitionEventType, "Element__determineTransitionEventType$closure");
init.globalFunctions._Html5NodeValidator__standardAttributeValidator$closure = W._Html5NodeValidator__standardAttributeValidator$closure = new P.Closure$4(W._Html5NodeValidator__standardAttributeValidator, "_Html5NodeValidator__standardAttributeValidator$closure");
init.globalFunctions._Html5NodeValidator__uriAttributeValidator$closure = W._Html5NodeValidator__uriAttributeValidator$closure = new P.Closure$4(W._Html5NodeValidator__uriAttributeValidator, "_Html5NodeValidator__uriAttributeValidator$closure");
init.globalFunctions._callEnteredView$closure = W._callEnteredView$closure = new H.Closure$1(W._callEnteredView, "_callEnteredView$closure");
init.globalFunctions._callLeftView$closure = W._callLeftView$closure = new H.Closure$1(W._callLeftView, "_callLeftView$closure");
init.globalFunctions._callAttributeChanged$closure = W._callAttributeChanged$closure = new P.Closure$4(W._callAttributeChanged, "_callAttributeChanged$closure");
init.globalFunctions._callDartFunction$closure = P._callDartFunction$closure = new P.Closure$4(P._callDartFunction, "_callDartFunction$closure");
init.globalFunctions._convertToJS$closure = P._convertToJS$closure = new H.Closure$1(P._convertToJS, "_convertToJS$closure");
init.globalFunctions._convertToDart$closure = P._convertToDart$closure = new H.Closure$1(P._convertToDart, "_convertToDart$closure");
init.globalFunctions._initPolymerOptimized$closure = A._initPolymerOptimized$closure = new H.Closure$0(A._initPolymerOptimized, "_initPolymerOptimized$closure");
init.globalFunctions._classAttributeConverter$closure = T._classAttributeConverter$closure = new H.Closure$1(T._classAttributeConverter, "_classAttributeConverter$closure");
init.globalFunctions._styleAttributeConverter$closure = T._styleAttributeConverter$closure = new H.Closure$1(T._styleAttributeConverter, "_styleAttributeConverter$closure");
init.globalFunctions.enumerate$closure = K.enumerate$closure = new H.Closure$1(K.enumerate, "enumerate$closure");
init.globalFunctions._TemplateIterator__unbindAllRecursively$closure = M._TemplateIterator__unbindAllRecursively$closure = new H.Closure$1(M._TemplateIterator__unbindAllRecursively, "_TemplateIterator__unbindAllRecursively$closure");
// Runtime type support
J.JSString.$isString = true;
J.JSString.$isComparable = true;
J.JSString.$asComparable = [J.JSString];
J.JSString.$isObject = true;
J.JSInt.$isint = true;
J.JSInt.$isComparable = true;
J.JSInt.$asComparable = [J.JSNumber];
J.JSInt.$isComparable = true;
J.JSInt.$asComparable = [J.JSNumber];
J.JSInt.$isComparable = true;
J.JSInt.$asComparable = [J.JSNumber];
J.JSInt.$isObject = true;
W.Node.$isNode = true;
W.Node.$isEventTarget = true;
W.Node.$isObject = true;
W._CSSValue.$isObject = true;
W.StyleSheet.$isObject = true;
W.SpeechRecognitionResult.$isObject = true;
W.SpeechInputResult.$isObject = true;
W.Gamepad.$isObject = true;
W.CssRule.$isObject = true;
P.Rectangle.$isObject = true;
W.Touch.$isObject = true;
W.TextTrack.$isEventTarget = true;
W.TextTrack.$isObject = true;
W.TextTrackCue.$isEventTarget = true;
W.TextTrackCue.$isObject = true;
W.SpeechGrammar.$isObject = true;
W.SourceBuffer.$isEventTarget = true;
W.SourceBuffer.$isObject = true;
W.Plugin.$isObject = true;
W.MimeType.$isObject = true;
W.File.$isObject = true;
P.ElementInstance.$isEventTarget = true;
P.ElementInstance.$isObject = true;
P.Transform.$isObject = true;
P.PathSeg.$isObject = true;
P.Number.$isObject = true;
P.Length.$isObject = true;
P.Map.$isMap = true;
P.Map.$isObject = true;
J.JSDouble.$isdouble = true;
J.JSDouble.$isComparable = true;
J.JSDouble.$asComparable = [J.JSNumber];
J.JSDouble.$isComparable = true;
J.JSDouble.$asComparable = [J.JSNumber];
J.JSDouble.$isObject = true;
W.Entry.$isObject = true;
J.JSNumber.$isComparable = true;
J.JSNumber.$asComparable = [J.JSNumber];
J.JSNumber.$isObject = true;
P.Duration.$isDuration = true;
P.Duration.$isComparable = true;
P.Duration.$asComparable = [P.Duration];
P.Duration.$isObject = true;
P.Match.$isObject = true;
J.JSArray.$isList = true;
J.JSArray.$isIterable = true;
J.JSArray.$isObject = true;
P.Object.$isObject = true;
N.Level.$isComparable = true;
N.Level.$asComparable = [N.Level];
N.Level.$isObject = true;
U.EmptyExpression.$isExpression = true;
U.EmptyExpression.$isObject = true;
U.BinaryOperator.$isExpression = true;
U.BinaryOperator.$isObject = true;
U.InExpression.$isExpression = true;
U.InExpression.$isObject = true;
U.Invoke.$isExpression = true;
U.Invoke.$isObject = true;
U.UnaryOperator.$isExpression = true;
U.UnaryOperator.$isObject = true;
U.MapLiteral.$isExpression = true;
U.MapLiteral.$isObject = true;
U.MapLiteralEntry.$isExpression = true;
U.MapLiteralEntry.$isObject = true;
U.Identifier.$isIdentifier = true;
U.Identifier.$isExpression = true;
U.Identifier.$isObject = true;
U.Literal.$isExpression = true;
U.Literal.$isObject = true;
W.Element.$isElement = true;
W.Element.$isNode = true;
W.Element.$isEventTarget = true;
W.Element.$isObject = true;
K.IndexedValue.$isIndexedValue = true;
K.IndexedValue.$isObject = true;
J.JSBool.$isbool = true;
J.JSBool.$isObject = true;
P.Symbol.$isSymbol = true;
P.Symbol.$isObject = true;
W.TransitionEvent.$isEvent = true;
W.TransitionEvent.$isObject = true;
A.PolymerDeclaration.$isPolymerDeclaration = true;
A.PolymerDeclaration.$isElement = true;
A.PolymerDeclaration.$isNode = true;
A.PolymerDeclaration.$isEventTarget = true;
A.PolymerDeclaration.$isObject = true;
P.InstanceMirror.$isInstanceMirror = true;
P.InstanceMirror.$isMirror = true;
P.InstanceMirror.$isObject = true;
P.LibraryMirror.$isLibraryMirror = true;
P.LibraryMirror.$isMirror = true;
P.LibraryMirror.$isMirror = true;
P.LibraryMirror.$isObject = true;
P.MethodMirror.$isMirror = true;
P.MethodMirror.$isObject = true;
H.JsMethodMirror.$isMirror = true;
H.JsMethodMirror.$isMirror = true;
H.JsMethodMirror.$isMirror = true;
H.JsMethodMirror.$isObject = true;
P.ParameterMirror.$isMirror = true;
P.ParameterMirror.$isObject = true;
P.ClassMirror.$isClassMirror = true;
P.ClassMirror.$isMirror = true;
P.ClassMirror.$isMirror = true;
P.ClassMirror.$isObject = true;
M.NodeBinding.$isObject = true;
N.Logger.$isObject = true;
P.VariableMirror.$isMirror = true;
P.VariableMirror.$isObject = true;
B.ChangeRecord.$isChangeRecord = true;
B.ChangeRecord.$isObject = true;
P.Mirror.$isMirror = true;
P.Mirror.$isObject = true;
P.StreamSubscription.$isStreamSubscription = true;
P.StreamSubscription.$isObject = true;
W.Event.$isEvent = true;
W.Event.$isObject = true;
P.Stream.$isStream = true;
P.Stream.$isObject = true;
W.MouseEvent.$isEvent = true;
W.MouseEvent.$isObject = true;
A.Polymer.$isElement = true;
A.Polymer.$isNode = true;
A.Polymer.$isEventTarget = true;
A.Polymer.$isObject = true;
A._PropertyValue.$isObject = true;
P.Type.$isObject = true;
P.Uri.$isUri = true;
P.Uri.$isObject = true;
W.Document.$isNode = true;
W.Document.$isEventTarget = true;
W.Document.$isObject = true;
P.ReceivePort.$isStream = true;
P.ReceivePort.$asStream = [null];
P.ReceivePort.$isObject = true;
H._IsolateEvent.$isObject = true;
H._IsolateContext.$isObject = true;
W.ShadowRoot.$isNode = true;
W.ShadowRoot.$isEventTarget = true;
W.ShadowRoot.$isObject = true;
P.Iterable.$isIterable = true;
P.Iterable.$isObject = true;
R.AutocompleteChoice.$isAutocompleteChoice = true;
R.AutocompleteChoice.$isObject = true;
P.StackTrace.$isStackTrace = true;
P.StackTrace.$isObject = true;
P._BufferingStreamSubscription.$is_BufferingStreamSubscription = true;
P._BufferingStreamSubscription.$is_EventSink = true;
P._BufferingStreamSubscription.$isStreamSubscription = true;
P._BufferingStreamSubscription.$isObject = true;
P._BroadcastSubscription.$is_BroadcastSubscription = true;
P._BroadcastSubscription.$is_BufferingStreamSubscription = true;
P._BroadcastSubscription.$is_EventSink = true;
P._BroadcastSubscription.$isStreamSubscription = true;
P._BroadcastSubscription.$isObject = true;
H.JsLibraryMirror.$isJsLibraryMirror = true;
H.JsLibraryMirror.$isLibraryMirror = true;
H.JsLibraryMirror.$isMirror = true;
H.JsLibraryMirror.$isMirror = true;
H.JsLibraryMirror.$isMirror = true;
H.JsLibraryMirror.$isMirror = true;
H.JsLibraryMirror.$isMirror = true;
H.JsLibraryMirror.$isObject = true;
P.ZoneDelegate.$isZoneDelegate = true;
P.ZoneDelegate.$isObject = true;
P.Zone.$isZone = true;
P.Zone.$isObject = true;
P.Function.$isFunction = true;
P.Function.$isObject = true;
P.ZoneSpecification.$isZoneSpecification = true;
P.ZoneSpecification.$isObject = true;
W.EventTarget.$isEventTarget = true;
W.EventTarget.$isObject = true;
P.Timer.$isTimer = true;
P.Timer.$isObject = true;
W._Html5NodeValidator.$is_Html5NodeValidator = true;
W._Html5NodeValidator.$isNodeValidator = true;
W._Html5NodeValidator.$isObject = true;
P.Comparable.$isComparable = true;
P.Comparable.$isObject = true;
P._EventSink.$is_EventSink = true;
P._EventSink.$isObject = true;
P.Future.$isFuture = true;
P.Future.$isObject = true;
P.DateTime.$isDateTime = true;
P.DateTime.$isComparable = true;
P.DateTime.$asComparable = [null];
P.DateTime.$isObject = true;
P._DelayedEvent.$is_DelayedEvent = true;
P._DelayedEvent.$isObject = true;
W.NodeValidator.$isNodeValidator = true;
W.NodeValidator.$isObject = true;
U.Expression.$isExpression = true;
U.Expression.$isObject = true;
T._Binding.$is_Binding = true;
T._Binding.$isObject = true;
// getInterceptor methods
J.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return J.JSInt.prototype;
    return J.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return J.JSNull.prototype;
  if (typeof receiver == "boolean")
    return J.JSBool.prototype;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
C.AutocompleteResult_methods = U.AutocompleteResult.prototype;
C.C_EmptyExpression = new U.EmptyExpression();
C.C_EmptyIterator = new H.EmptyIterator();
C.C_JSArray = new J.JSArray();
C.C_JSBool = new J.JSBool();
C.C_JSDouble = new J.JSDouble();
C.C_JSInt = new J.JSInt();
C.C_JSNumber = new J.JSNumber();
C.C_JSString = new J.JSString();
C.C_JsonCodec = new P.JsonCodec();
C.C_ObservableProperty = new B.ObservableProperty();
C.C_PublishedProperty = new A.PublishedProperty();
C.C_Reflectable = new B.Reflectable();
C.C_UnknownJavaScriptObject = new J.UnknownJavaScriptObject();
C.C__DelayedDone = new P._DelayedDone();
C.C__InitMethodAnnotation = new A._InitMethodAnnotation();
C.C__RootZone = new P._RootZone();
C.C__RootZoneSpecification = new P._RootZoneSpecification();
C.CustomTag_8aB = new A.CustomTag("tapo-input-autocomplete");
C.CustomTag_aJM = new A.CustomTag("tapo-autocomplete-result");
C.CustomTag_gg9 = new A.CustomTag("simple-autocomplete-example");
C.Duration_0 = new P.Duration(0);
C.Duration_300000 = new P.Duration(300000);
C.EventStreamProvider_blur = H.setRuntimeTypeInfo(new W.EventStreamProvider("blur"), [W.Event]);
C.EventStreamProvider_change = H.setRuntimeTypeInfo(new W.EventStreamProvider("change"), [W.Event]);
C.EventStreamProvider_click = H.setRuntimeTypeInfo(new W.EventStreamProvider("click"), [W.MouseEvent]);
C.EventStreamProvider_focus = H.setRuntimeTypeInfo(new W.EventStreamProvider("focus"), [W.Event]);
C.EventStreamProvider_input = H.setRuntimeTypeInfo(new W.EventStreamProvider("input"), [W.Event]);
C.InputAutocompleteComponent_methods = R.InputAutocompleteComponent.prototype;
C.JSArray_methods = J.JSArray.prototype;
C.JSDouble_methods = J.JSDouble.prototype;
C.JSInt_methods = J.JSInt.prototype;
C.JSNull_methods = J.JSNull.prototype;
C.JSNumber_methods = J.JSNumber.prototype;
C.JSString_methods = J.JSString.prototype;
C.JS_CONST_ZYJ =     ((typeof version == "function" && typeof os == "object" && "system" in os)
    || (typeof navigator == "object"
        && navigator.userAgent.indexOf('Chrome') != -1))
        ? function(x) { return x.$dartCachedLength || x.length; }
        : function(x) { return x.length; };
;
C.JsonDecoder_null = new P.JsonDecoder(null);
C.JsonEncoder_null = new P.JsonEncoder(null);
C.Level_FINE_500 = new N.Level("FINE", 500);
C.Level_INFO_800 = new N.Level("INFO", 800);
C.Level_WARNING_900 = new N.Level("WARNING", 900);
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
C.List_1GN = H.setRuntimeTypeInfo(Isolate.makeConstantList(["*::class", "*::dir", "*::draggable", "*::hidden", "*::id", "*::inert", "*::itemprop", "*::itemref", "*::itemscope", "*::lang", "*::spellcheck", "*::title", "*::translate", "A::accesskey", "A::coords", "A::hreflang", "A::name", "A::shape", "A::tabindex", "A::target", "A::type", "AREA::accesskey", "AREA::alt", "AREA::coords", "AREA::nohref", "AREA::shape", "AREA::tabindex", "AREA::target", "AUDIO::controls", "AUDIO::loop", "AUDIO::mediagroup", "AUDIO::muted", "AUDIO::preload", "BDO::dir", "BODY::alink", "BODY::bgcolor", "BODY::link", "BODY::text", "BODY::vlink", "BR::clear", "BUTTON::accesskey", "BUTTON::disabled", "BUTTON::name", "BUTTON::tabindex", "BUTTON::type", "BUTTON::value", "CANVAS::height", "CANVAS::width", "CAPTION::align", "COL::align", "COL::char", "COL::charoff", "COL::span", "COL::valign", "COL::width", "COLGROUP::align", "COLGROUP::char", "COLGROUP::charoff", "COLGROUP::span", "COLGROUP::valign", "COLGROUP::width", "COMMAND::checked", "COMMAND::command", "COMMAND::disabled", "COMMAND::label", "COMMAND::radiogroup", "COMMAND::type", "DATA::value", "DEL::datetime", "DETAILS::open", "DIR::compact", "DIV::align", "DL::compact", "FIELDSET::disabled", "FONT::color", "FONT::face", "FONT::size", "FORM::accept", "FORM::autocomplete", "FORM::enctype", "FORM::method", "FORM::name", "FORM::novalidate", "FORM::target", "FRAME::name", "H1::align", "H2::align", "H3::align", "H4::align", "H5::align", "H6::align", "HR::align", "HR::noshade", "HR::size", "HR::width", "HTML::version", "IFRAME::align", "IFRAME::frameborder", "IFRAME::height", "IFRAME::marginheight", "IFRAME::marginwidth", "IFRAME::width", "IMG::align", "IMG::alt", "IMG::border", "IMG::height", "IMG::hspace", "IMG::ismap", "IMG::name", "IMG::usemap", "IMG::vspace", "IMG::width", "INPUT::accept", "INPUT::accesskey", "INPUT::align", "INPUT::alt", "INPUT::autocomplete", "INPUT::checked", "INPUT::disabled", "INPUT::inputmode", "INPUT::ismap", "INPUT::list", "INPUT::max", "INPUT::maxlength", "INPUT::min", "INPUT::multiple", "INPUT::name", "INPUT::placeholder", "INPUT::readonly", "INPUT::required", "INPUT::size", "INPUT::step", "INPUT::tabindex", "INPUT::type", "INPUT::usemap", "INPUT::value", "INS::datetime", "KEYGEN::disabled", "KEYGEN::keytype", "KEYGEN::name", "LABEL::accesskey", "LABEL::for", "LEGEND::accesskey", "LEGEND::align", "LI::type", "LI::value", "LINK::sizes", "MAP::name", "MENU::compact", "MENU::label", "MENU::type", "METER::high", "METER::low", "METER::max", "METER::min", "METER::value", "OBJECT::typemustmatch", "OL::compact", "OL::reversed", "OL::start", "OL::type", "OPTGROUP::disabled", "OPTGROUP::label", "OPTION::disabled", "OPTION::label", "OPTION::selected", "OPTION::value", "OUTPUT::for", "OUTPUT::name", "P::align", "PRE::width", "PROGRESS::max", "PROGRESS::min", "PROGRESS::value", "SELECT::autocomplete", "SELECT::disabled", "SELECT::multiple", "SELECT::name", "SELECT::required", "SELECT::size", "SELECT::tabindex", "SOURCE::type", "TABLE::align", "TABLE::bgcolor", "TABLE::border", "TABLE::cellpadding", "TABLE::cellspacing", "TABLE::frame", "TABLE::rules", "TABLE::summary", "TABLE::width", "TBODY::align", "TBODY::char", "TBODY::charoff", "TBODY::valign", "TD::abbr", "TD::align", "TD::axis", "TD::bgcolor", "TD::char", "TD::charoff", "TD::colspan", "TD::headers", "TD::height", "TD::nowrap", "TD::rowspan", "TD::scope", "TD::valign", "TD::width", "TEXTAREA::accesskey", "TEXTAREA::autocomplete", "TEXTAREA::cols", "TEXTAREA::disabled", "TEXTAREA::inputmode", "TEXTAREA::name", "TEXTAREA::placeholder", "TEXTAREA::readonly", "TEXTAREA::required", "TEXTAREA::rows", "TEXTAREA::tabindex", "TEXTAREA::wrap", "TFOOT::align", "TFOOT::char", "TFOOT::charoff", "TFOOT::valign", "TH::abbr", "TH::align", "TH::axis", "TH::bgcolor", "TH::char", "TH::charoff", "TH::colspan", "TH::headers", "TH::height", "TH::nowrap", "TH::rowspan", "TH::scope", "TH::valign", "TH::width", "THEAD::align", "THEAD::char", "THEAD::charoff", "THEAD::valign", "TR::align", "TR::bgcolor", "TR::char", "TR::charoff", "TR::valign", "TRACK::default", "TRACK::kind", "TRACK::label", "TRACK::srclang", "UL::compact", "UL::type", "VIDEO::controls", "VIDEO::height", "VIDEO::loop", "VIDEO::mediagroup", "VIDEO::muted", "VIDEO::preload", "VIDEO::width"]), [J.JSString]);
C.List_6Pr = Isolate.makeConstantList([0, 0, 26624, 1023, 0, 0, 65534, 2047]);
C.List_JYB = Isolate.makeConstantList([0, 0, 26624, 1023, 65534, 2047, 65534, 2047]);
C.List_UiL = Isolate.makeConstantList([43, 45, 42, 47, 33, 38, 60, 61, 62, 63, 94, 124]);
C.List_Ynd = Isolate.makeConstantList(["==", "!=", "<=", ">=", "||", "&&"]);
C.List_empty = Isolate.makeConstantList([]);
C.List_in_this = Isolate.makeConstantList(["in", "this"]);
C.List_nxB = Isolate.makeConstantList([0, 0, 24576, 1023, 65534, 34815, 65534, 18431]);
C.List_qg4 = Isolate.makeConstantList([0, 0, 32722, 12287, 65535, 34815, 65534, 18431]);
C.List_wSV = H.setRuntimeTypeInfo(Isolate.makeConstantList(["bind", "if", "ref", "repeat", "syntax"]), [J.JSString]);
C.List_ww8 = Isolate.makeConstantList([40, 41, 91, 93, 123, 125]);
C.List_yrN = H.setRuntimeTypeInfo(Isolate.makeConstantList(["A::href", "AREA::href", "BLOCKQUOTE::cite", "BODY::background", "COMMAND::icon", "DEL::cite", "FORM::action", "IMG::src", "INPUT::src", "INS::cite", "Q::cite", "VIDEO::poster"]), [J.JSString]);
C.List_05B = Isolate.makeConstantList(["caption", "col", "colgroup", "option", "optgroup", "tbody", "td", "tfoot", "th", "thead", "tr"]);
C.Map_05eTF = new H.ConstantStringMap(11, {caption: null, col: null, colgroup: null, option: null, optgroup: null, tbody: null, td: null, tfoot: null, th: null, thead: null, tr: null}, C.List_05B);
C.List_48l = Isolate.makeConstantList(["webkitanimationstart", "webkitanimationend", "webkittransitionend", "domfocusout", "domfocusin", "animationend", "animationiteration", "animationstart", "doubleclick", "fullscreenchange", "fullscreenerror", "keyadded", "keyerror", "keymessage", "needkey", "speechchange"]);
C.Map_484CA = new H.ConstantStringMap(16, {webkitanimationstart: "webkitAnimationStart", webkitanimationend: "webkitAnimationEnd", webkittransitionend: "webkitTransitionEnd", domfocusout: "DOMFocusOut", domfocusin: "DOMFocusIn", animationend: "webkitAnimationEnd", animationiteration: "webkitAnimationIteration", animationstart: "webkitAnimationStart", doubleclick: "dblclick", fullscreenchange: "webkitfullscreenchange", fullscreenerror: "webkitfullscreenerror", keyadded: "webkitkeyadded", keyerror: "webkitkeyerror", keymessage: "webkitkeymessage", needkey: "webkitneedkey", speechchange: "webkitSpeechChange"}, C.List_48l);
C.List_FKi = Isolate.makeConstantList(["!", ":", ",", ")", "]", "}", "?", "||", "&&", "|", "^", "&", "!=", "==", ">=", ">", "<=", "<", "+", "-", "%", "/", "*", "(", "[", ".", "{"]);
C.Map_FKtZ4 = new H.ConstantStringMap(27, {"!": 0, ":": 0, ",": 0, ")": 0, "]": 0, "}": 0, "?": 1, "||": 2, "&&": 3, "|": 4, "^": 5, "&": 6, "!=": 7, "==": 7, ">=": 8, ">": 8, "<=": 8, "<": 8, "+": 9, "-": 9, "%": 10, "/": 10, "*": 10, "(": 11, "[": 11, ".": 11, "{": 11}, C.List_FKi);
C.List_c9P = Isolate.makeConstantList(["name", "extends", "constructor", "noscript", "attributes"]);
C.Map_c94aj = new H.ConstantStringMap(5, {name: 1, extends: 1, constructor: 1, noscript: 1, attributes: 1}, C.List_c9P);
C.List_enumerate = Isolate.makeConstantList(["enumerate"]);
C.Map_wgEsG = new H.ConstantStringMap(1, {enumerate: K.enumerate$closure}, C.List_enumerate);
C.NodeList_methods = W.NodeList.prototype;
C.PolymerDeclaration_methods = A.PolymerDeclaration.prototype;
C.PolymerElement_methods = A.PolymerElement.prototype;
C.SimpleAutocompleteExample_methods = Q.SimpleAutocompleteExample.prototype;
C.Symbol_46c = new H.Symbol0("dart.core.Object");
C.Symbol_4YB = new H.Symbol0("dart.core.DateTime");
C.Symbol_6TA = new H.Symbol0("dart.core.bool");
C.Symbol_Directory = new H.Symbol0("Directory");
C.Symbol_Platform = new H.Symbol0("Platform");
C.Symbol_call = new H.Symbol0("call");
C.Symbol_choice = new H.Symbol0("choice");
C.Symbol_createRuntimeType = new H.Symbol0("createRuntimeType");
C.Symbol_current = new H.Symbol0("current");
C.Symbol_datasource = new H.Symbol0("datasource");
C.Symbol_dynamic = new H.Symbol0("dynamic");
C.Symbol_exampleDatasource = new H.Symbol0("exampleDatasource");
C.Symbol_filteredChoices = new H.Symbol0("filteredChoices");
C.Symbol_hasSearched = new H.Symbol0("hasSearched");
C.Symbol_iC9 = new H.Symbol0("dart.core.String");
C.Symbol_inputHasFocus = new H.Symbol0("inputHasFocus");
C.Symbol_length = new H.Symbol0("length");
C.Symbol_mdn = new H.Symbol0("dart.core.int");
C.Symbol_model = new H.Symbol0("model");
C.Symbol_mynull = new H.Symbol0("mynull");
C.Symbol_operatingSystem = new H.Symbol0("operatingSystem");
C.Symbol_registerCallback = new H.Symbol0("registerCallback");
C.Symbol_renderer = new H.Symbol0("renderer");
C.Symbol_s2s = new H.Symbol0("dart.core.Null");
C.Symbol_sMO = new H.Symbol0("dart.core.double");
C.Symbol_searchquery = new H.Symbol0("searchquery");
C.Symbol_selectedchoice = new H.Symbol0("selectedchoice");
C.Symbol_value = new H.Symbol0("value");
C.Symbol_void = new H.Symbol0("void");
C.Symbol_window = new H.Symbol0("window");
C.Symbol_xyz = new H.Symbol0("xyz");
C.Type_2Hr = H.createRuntimeType('ObservableMap');
C.TypeVariable_Sre = new H.TypeVariable(C.Type_2Hr, "K", 0);
C.Type_89x = H.createRuntimeType('ObservableBox');
C.TypeVariable_U8E = new H.TypeVariable(C.Type_89x, "T", 0);
C.Type_2Vk = H.createRuntimeType('IndexedValue');
C.TypeVariable_bBG = new H.TypeVariable(C.Type_2Vk, "V", 0);
C.TypeVariable_pWN = new H.TypeVariable(C.Type_2Hr, "V", 0);
C.Type_AGr = H.createRuntimeType('JsTypeVariableMirror');
C.Type_EjN = H.createRuntimeType('Function');
C.Type_Ejg = H.createRuntimeType('String');
C.Type_EsU = H.createRuntimeType('bool');
C.Type_HqF = H.createRuntimeType('Object');
C.Type_I2I = H.createRuntimeType('PolymerElement');
C.Type_SnA = H.createRuntimeType('int');
C.Type_XXD = H.createRuntimeType('JSObject');
C.Type_YnA = H.createRuntimeType('PolymerDeclaration');
C.Type_ah5 = H.createRuntimeType('ClassMirror');
C.Type_dVs = H.createRuntimeType('DateTime');
C.Type_dcN = H.createRuntimeType('InputAutocompleteComponent');
C.Type_e5Z = H.createRuntimeType('dynamic');
C.Type_eZO = H.createRuntimeType('Null');
C.Type_geu = H.createRuntimeType('AutocompleteResult');
C.Type_iTx = H.createRuntimeType('SimpleAutocompleteExample');
C.Type_oqh = H.createRuntimeType('Uint64List');
C.Type_qq1 = H.createRuntimeType('double');
C.Type_qxd = H.createRuntimeType('Int64List');
C.Utf8Codec_false = new P.Utf8Codec(false);
C.Window_methods = W.Window.prototype;
C._CustomEventStreamProvider__determineTransitionEventType = H.setRuntimeTypeInfo(new W._CustomEventStreamProvider(W.Element__determineTransitionEventType$closure), [W.TransitionEvent]);
C._ZoneSpecification_ALf = new P._ZoneSpecification(null, null, null, null, null, null, null, null, null, null, null, null, null);
$.lazyPort = null;
$.ReceivePortImpl__nextFreeId = 1;
$.Primitives_mirrorFunctionCacheName = "$cachedFunction";
$.Primitives_mirrorInvokeCacheName = "$cachedInvocation";
$.initNativeDispatchFlag = null;
$.printToZone = null;
$.classMirrors = null;
$._callbacksAreEnqueued = false;
$.Zone__current = C.C__RootZone;
$.Expando__keyCount = 0;
$.Element__parseDocument = null;
$.Element__parseRange = null;
$.Element__defaultValidator = null;
$.Element__defaultSanitizer = null;
$.Device__isOpera = null;
$.Device__isWebKit = null;
$.hierarchicalLoggingEnabled = false;
$._rootLevel = C.Level_INFO_800;
$.LogRecord__nextNumber = 0;
$._allObservablesCount = 0;
$._allObservables = null;
$._delivering = false;
$.Polymer__preparingElements = 0;
$._useDirtyChecking = true;
$.TemplateBindExtension__initStyles = null;
J.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return J.getInterceptor$ns(receiver).$add(receiver, a0);
};
J.$and$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver & a0) >>> 0;
  return J.getInterceptor$n(receiver).$and(receiver, a0);
};
J.$div$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver / a0;
  return J.getInterceptor$n(receiver).$div(receiver, a0);
};
J.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return J.getInterceptor(receiver).$eq(receiver, a0);
};
J.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return J.getInterceptor$n(receiver).$ge(receiver, a0);
};
J.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return J.getInterceptor$n(receiver).$gt(receiver, a0);
};
J.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return J.getInterceptor$asx(receiver).$index(receiver, a0);
};
J.$indexSet$ax = function(receiver, a0, a1) {
  if ((receiver.constructor == Array || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName])) && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
J.$le$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver <= a0;
  return J.getInterceptor$n(receiver).$le(receiver, a0);
};
J.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return J.getInterceptor$n(receiver).$lt(receiver, a0);
};
J.$mul$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return J.getInterceptor$n(receiver).$mul(receiver, a0);
};
J.$negate$n = function(receiver) {
  if (typeof receiver == "number")
    return -receiver;
  return J.getInterceptor$n(receiver).$negate(receiver);
};
J.$shl$n = function(receiver, a0) {
  return J.getInterceptor$n(receiver).$shl(receiver, a0);
};
J.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return J.getInterceptor$n(receiver).$sub(receiver, a0);
};
J.$tdiv$n = function(receiver, a0) {
  return J.getInterceptor$n(receiver).$tdiv(receiver, a0);
};
J._initMouseEvent$15$x = function(receiver, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14) {
  return J.getInterceptor$x(receiver)._initMouseEvent$15(receiver, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
};
J._publish$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver)._publish$1(receiver, a0);
};
J._replaceChild$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver)._replaceChild$2(receiver, a0, a1);
};
J.accept$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).accept$1(receiver, a0);
};
J.add$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).add$1(receiver, a0);
};
J.addAll$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).addAll$1(receiver, a0);
};
J.addEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).addEventListener$3(receiver, a0, a1, a2);
};
J.any$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).any$1(receiver, a0);
};
J.append$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).append$1(receiver, a0);
};
J.attributeChanged$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).attributeChanged$3(receiver, a0, a1, a2);
};
J.bind$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).bind$3(receiver, a0, a1, a2);
};
J.blur$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).blur$0(receiver);
};
J.close$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).close$0(receiver);
};
J.codeUnitAt$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).codeUnitAt$1(receiver, a0);
};
J.compareTo$1$ns = function(receiver, a0) {
  return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
};
J.contains$1$asx = function(receiver, a0) {
  return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
};
J.contains$2$asx = function(receiver, a0, a1) {
  return J.getInterceptor$asx(receiver).contains$2(receiver, a0, a1);
};
J.createDocumentFragment$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).createDocumentFragment$0(receiver);
};
J.createFragment$2$treeSanitizer$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).createFragment$2$treeSanitizer(receiver, a0, a1);
};
J.createFragment$3$treeSanitizer$validator$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).createFragment$3$treeSanitizer$validator(receiver, a0, a1, a2);
};
J.elementAt$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
};
J.endsWith$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).endsWith$1(receiver, a0);
};
J.enteredView$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).enteredView$0(receiver);
};
J.forEach$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
J.get$_children$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$_children(receiver);
};
J.get$_eventDelegates$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$_eventDelegates(receiver);
};
J.get$_input_autocomplete$__$model$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$_input_autocomplete$__$model(receiver);
};
J.get$_instanceAttributes$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$_instanceAttributes(receiver);
};
J.get$_name$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$_name(receiver);
};
J.get$_polymer$_observe$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$_polymer$_observe(receiver);
};
J.get$_polymer$_publish$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$_polymer$_publish(receiver);
};
J.get$_publishLC$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$_publishLC(receiver);
};
J.get$attributes$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$attributes(receiver);
};
J.get$bindings$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$bindings(receiver);
};
J.get$changes$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$changes(receiver);
};
J.get$checked$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$checked(receiver);
};
J.get$children$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$children(receiver);
};
J.get$className$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$className(receiver);
};
J.get$classes$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$classes(receiver);
};
J.get$content$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$content(receiver);
};
J.get$error$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$error(receiver);
};
J.get$first$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$first(receiver);
};
J.get$hashCode$ = function(receiver) {
  return J.getInterceptor(receiver).get$hashCode(receiver);
};
J.get$href$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$href(receiver);
};
J.get$id$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$id(receiver);
};
J.get$isEmpty$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
};
J.get$isFinal$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$isFinal(receiver);
};
J.get$isNotEmpty$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$isNotEmpty(receiver);
};
J.get$iterator$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$iterator(receiver);
};
J.get$key$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$key(receiver);
};
J.get$kind$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$kind(receiver);
};
J.get$last$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$last(receiver);
};
J.get$lastChild$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$lastChild(receiver);
};
J.get$length$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$length(receiver);
};
J.get$localName$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$localName(receiver);
};
J.get$location$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$location(receiver);
};
J.get$message$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$message(receiver);
};
J.get$name$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$name(receiver);
};
J.get$nextNode$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$nextNode(receiver);
};
J.get$nodes$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$nodes(receiver);
};
J.get$on$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$on(receiver);
};
J.get$outerHtml$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$outerHtml(receiver);
};
J.get$ownerDocument$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$ownerDocument(receiver);
};
J.get$parent$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$parent(receiver);
};
J.get$parentNode$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$parentNode(receiver);
};
J.get$path$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$path(receiver);
};
J.get$previousNode$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$previousNode(receiver);
};
J.get$runtimeType$ = function(receiver) {
  return J.getInterceptor(receiver).get$runtimeType(receiver);
};
J.get$selectedIndex$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$selectedIndex(receiver);
};
J.get$single$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$single(receiver);
};
J.get$style$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$style(receiver);
};
J.get$superDeclaration$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$superDeclaration(receiver);
};
J.get$tagName$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$tagName(receiver);
};
J.get$target$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$target(receiver);
};
J.get$type$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$type(receiver);
};
J.get$value$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$value(receiver);
};
J.get$values$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$values(receiver);
};
J.get$width$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$width(receiver);
};
J.getElementById$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).getElementById$1(receiver, a0);
};
J.getPropertyValue$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).getPropertyValue$1(receiver, a0);
};
J.indexOf$1$asx = function(receiver, a0) {
  return J.getInterceptor$asx(receiver).indexOf$1(receiver, a0);
};
J.inputFocus$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).inputFocus$3(receiver, a0, a1, a2);
};
J.insertBefore$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).insertBefore$2(receiver, a0, a1);
};
J.join$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).join$1(receiver, a0);
};
J.leftView$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).leftView$0(receiver);
};
J.map$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).map$1(receiver, a0);
};
J.matchAsPrefix$2$s = function(receiver, a0, a1) {
  return J.getInterceptor$s(receiver).matchAsPrefix$2(receiver, a0, a1);
};
J.matches$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).matches$1(receiver, a0);
};
J.matchesWithAncestors$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).matchesWithAncestors$1(receiver, a0);
};
J.noSuchMethod$1 = function(receiver, a0) {
  return J.getInterceptor(receiver).noSuchMethod$1(receiver, a0);
};
J.observeArrayValue$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).observeArrayValue$3(receiver, a0, a1, a2);
};
J.preventDefault$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).preventDefault$0(receiver);
};
J.print$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).print$1(receiver, a0);
};
J.query$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).query$1(receiver, a0);
};
J.queryAll$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).queryAll$1(receiver, a0);
};
J.querySelectorAll$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).querySelectorAll$1(receiver, a0);
};
J.reflectPropertyToAttribute$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).reflectPropertyToAttribute$1(receiver, a0);
};
J.registerWhenReady$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).registerWhenReady$0(receiver);
};
J.remove$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).remove$0(receiver);
};
J.remove$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).remove$1(receiver, a0);
};
J.removeEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).removeEventListener$3(receiver, a0, a1, a2);
};
J.renderChoice$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).renderChoice$2(receiver, a0, a1);
};
J.replaceAll$2$s = function(receiver, a0, a1) {
  return J.getInterceptor$s(receiver).replaceAll$2(receiver, a0, a1);
};
J.replaceWith$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).replaceWith$1(receiver, a0);
};
J.round$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).round$0(receiver);
};
J.send$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).send$1(receiver, a0);
};
J.set$_selector$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$_selector(receiver, value);
};
J.set$checked$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$checked(receiver, value);
};
J.set$className$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$className(receiver, value);
};
J.set$href$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$href(receiver, value);
};
J.set$innerHtml$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$innerHtml(receiver, value);
};
J.set$left$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$left(receiver, value);
};
J.set$length$asx = function(receiver, value) {
  return J.getInterceptor$asx(receiver).set$length(receiver, value);
};
J.set$newValue$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$newValue(receiver, value);
};
J.set$selectedIndex$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$selectedIndex(receiver, value);
};
J.set$text$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$text(receiver, value);
};
J.set$top$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$top(receiver, value);
};
J.set$type$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$type(receiver, value);
};
J.set$value$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$value(receiver, value);
};
J.set$width$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$width(receiver, value);
};
J.setProperty$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).setProperty$3(receiver, a0, a1, a2);
};
J.split$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).split$1(receiver, a0);
};
J.startsWith$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).startsWith$1(receiver, a0);
};
J.substring$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).substring$1(receiver, a0);
};
J.substring$2$s = function(receiver, a0, a1) {
  return J.getInterceptor$s(receiver).substring$2(receiver, a0, a1);
};
J.toList$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).toList$0(receiver);
};
J.toLowerCase$0$s = function(receiver) {
  return J.getInterceptor$s(receiver).toLowerCase$0(receiver);
};
J.toRadixString$1$n = function(receiver, a0) {
  return J.getInterceptor$n(receiver).toRadixString$1(receiver, a0);
};
J.toString$0 = function(receiver) {
  return J.getInterceptor(receiver).toString$0(receiver);
};
J.trim$0$s = function(receiver) {
  return J.getInterceptor$s(receiver).trim$0(receiver);
};
J.unbind$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).unbind$1(receiver, a0);
};
J.unbindAll$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).unbindAll$0(receiver);
};
J.where$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).where$1(receiver, a0);
};
$.interceptedNames = ["$add", "$and", "$div", "$eq", "$ge", "$gt", "$index", "$indexSet", "$le", "$lt", "$mul", "$negate", "$shl", "$shr", "$sub", "$tdiv", "Element$created$0", "InputAutocompleteComponent$created$0", "PolymerDeclaration$created$0", "PolymerElement$created$0", "SimpleAutocompleteExample$created$0", "_checkIndex$2", "_checkSublistArguments$3", "_doSearch$0", "_ensureRequestAnimationFrame$0", "_focusNext$1", "_initMouseEvent$15", "_invalidIndex$2", "_lowerCaseMap$1", "_observe$1", "_observed$0", "_parseStyleInt$1", "_positionCompleteBox$0", "_publish$1", "_rangeCheck$2", "_replaceChild$2", "_requestAnimationFrame$1", "_slowTdiv$1", "_unobserved$0", "abs$0", "accept$1", "accumulateInstanceAttributes$0", "add$1", "addAll$1", "addAttributeDelegates$1", "addEventListener$3", "addHostListeners$0", "addNodeListeners$3", "allMatches$1", "any$1", "append$1", "asyncUnbindAll$0", "attributeChanged$3", "attributeToProperty$2", "bind$3", "blur$0", "buildType$2", "cacheSheets$0", "cacheStyles$0", "cancelUnbindAll$0", "cancelUnbindAll$1$preventCascade", "changes$1", "clear$0", "clone$1", "close$0", "close$1", "codeUnitAt$1", "compareTo$1", "complete$0", "complete$1", "contains$1", "contains$2", "copyInstanceAttributes$0", "createDocumentFragment$0", "createFragment$2$treeSanitizer", "createFragment$3$treeSanitizer$validator", "createShadowRoot$0", "cssTextForScope$1", "cssTextToScopeStyle$2", "deliverChanges$0", "desugar$2", "dispatchMethod$3", "elementAt$1", "endsWith$1", "enteredView$0", "error$1", "findNodes$1", "findNodes$2", "firstWhere$1", "firstWhere$2$defaultValue", "firstWhere$2$orElse", "fold$2", "forEach$1", "get$$$", "get$_autocomplete_result$__$choice", "get$_autocomplete_result$__$renderer", "get$_autocomplete_result$__$searchquery", "get$_children", "get$_customTagName", "get$_eventDelegates", "get$_input", "get$_input_autocomplete$__$datasource", "get$_input_autocomplete$__$model", "get$_input_autocomplete$__$selectedchoice", "get$_instanceAttributes", "get$_name", "get$_polymer$_observe", "get$_polymer$_publish", "get$_publishLC", "get$_renderer", "get$_simple_autocomplete_example$__$exampleDatasource", "get$_simple_autocomplete_example$__$selectedchoice", "get$applyAuthorStyles", "get$attributes", "get$autocompleteChoices", "get$bindings", "get$bubbles", "get$changes", "get$checked", "get$children", "get$choice", "get$choices", "get$className", "get$classes", "get$clientWidth", "get$complete", "get$content", "get$datasource", "get$detail", "get$entries", "get$error", "get$exampleDatasource", "get$first", "get$firstChild", "get$form", "get$hasObservers", "get$hash", "get$hashCode", "get$height", "get$host", "get$hostname", "get$href", "get$id", "get$index", "get$innerHtml", "get$isEmpty", "get$isFinal", "get$isNaN", "get$isNegative", "get$isNotEmpty", "get$iterator", "get$key", "get$keyCode", "get$kind", "get$last", "get$lastChild", "get$left", "get$length", "get$localName", "get$location", "get$marginLeft", "get$marginRight", "get$message", "get$method", "get$model", "get$name", "get$newValue", "get$nextNode", "get$nodeType", "get$nodes", "get$oldValue", "get$on", "get$onBlur", "get$onChange", "get$onClick", "get$onFocus", "get$onInput", "get$operator", "get$outerHtml", "get$ownerDocument", "get$parent", "get$parentNode", "get$path", "get$port", "get$previousNode", "get$print", "get$protocol", "get$renderer", "get$right", "get$runtimeType", "get$searchquery", "get$selectedIndex", "get$selectedchoice", "get$shadowRoot", "get$single", "get$src", "get$style", "get$superDeclaration", "get$tagName", "get$target", "get$templateContent", "get$top", "get$type", "get$value", "get$values", "get$width", "getBoundingClientRect$0", "getComputedStyle$0", "getComputedStyle$1", "getElementById$1", "getPropertyValue$1", "getRange$2", "getShadowRoot$1", "hostEventListener$1", "indexOf$1", "indexOf$2", "inferObservers$1", "inputBlur$3", "inputFocus$3", "insert$2", "insertBefore$2", "installGlobalStyles$0", "installLocalSheets$0", "isFocused$1", "join$1", "join$8", "keyDown$3", "keyUp$3", "lastIndexOf$1", "lastIndexOf$2", "leftView$0", "lightFromTemplate$1", "map$1", "marshalNodeReferences$1", "matchAsPrefix$1", "matchAsPrefix$2", "matches$1", "matchesWithAncestors$1", "mouseDown$3", "mouseOverChoice$3", "mouseUpChoice$3", "noSuchMethod$1", "notifyChange$1", "notifyPropertyChange$3", "notifyPropertyChanges$1", "observeArrayValue$3", "observeProperties$0", "onError$1", "parseDeclaration$1", "parseDeclarations$1", "pause$0", "pause$1", "polymerCreated$0", "prepareElement$0", "preventDefault$0", "print$0", "print$1", "print$2", "propertyForAttribute$1", "publishAttributes$2", "query$1", "queryAll$1", "querySelectorAll$1", "reflectPropertyToAttribute$1", "register$2", "registerType$1", "registerWhenReady$0", "remainder$1", "remove$0", "remove$1", "removeAt$1", "removeEventListener$3", "removeLast$0", "removeRange$2", "renderChoice$1", "renderChoice$2", "replaceAll$2", "replaceWith$1", "reset$0", "reset$1", "round$0", "roundToDouble$0", "selectChoice$1", "selectCurrentFocus$0", "send$1", "send$2", "serializeValue$1", "set$_autocomplete_result$__$choice", "set$_autocomplete_result$__$renderer", "set$_autocomplete_result$__$searchquery", "set$_input_autocomplete$__$datasource", "set$_input_autocomplete$__$model", "set$_input_autocomplete$__$selectedchoice", "set$_renderer", "set$_selector", "set$_simple_autocomplete_example$__$exampleDatasource", "set$_simple_autocomplete_example$__$selectedchoice", "set$checked", "set$choice", "set$choices", "set$className", "set$datasource", "set$exampleDatasource", "set$hash", "set$href", "set$innerHtml", "set$left", "set$length", "set$model", "set$newValue", "set$renderer", "set$searchquery", "set$selectedIndex", "set$selectedchoice", "set$text", "set$top", "set$type", "set$value", "set$width", "setInnerHtml$1", "setInnerHtml$3$treeSanitizer$validator", "setProperty$3", "setRange$4", "shadowFromTemplate$1", "split$1", "startsWith$1", "startsWith$2", "stop$0", "sublist$1", "sublist$2", "substring$1", "substring$2", "takeAttributes$0", "toInt$0", "toList$0", "toList$1$growable", "toLowerCase$0", "toRadixString$1", "toString$0", "trim$0", "unbind$1", "unbind$2$suppressResolve", "unbindAll$0", "unbindAllProperties$0", "unregisterObservers$0", "waitingForExtendee$1", "waitingForType$1", "where$1"];
$.mapTypeToInterceptor = [C.Type_I2I, A.PolymerElement, {created: A.PolymerElement$created}, C.Type_YnA, A.PolymerDeclaration, {created: A.PolymerDeclaration$created}, C.Type_dcN, R.InputAutocompleteComponent, {created: R.InputAutocompleteComponent$created}, C.Type_geu, U.AutocompleteResult, {created: U.AutocompleteResult$created}, C.Type_iTx, Q.SimpleAutocompleteExample, {created: Q.SimpleAutocompleteExample$created}, C.Type_oqh, P.Uint64List, {}, C.Type_qxd, P.Int64List, {}];
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return function() { return this; }();
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.get$globalThis().postMessage !== void 0;
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return H.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "workerIds", "IsolateNatives_workerIds", "get$IsolateNatives_workerIds", function() {
  var t1 = new P.Expando(null);
  H.setRuntimeTypeInfo(t1, [J.JSInt]);
  return t1;
});
Isolate.$lazy($, "noSuchMethodPattern", "TypeErrorDecoder_noSuchMethodPattern", "get$TypeErrorDecoder_noSuchMethodPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({ toString: function() { return "$receiver$"; } }));
});
Isolate.$lazy($, "notClosurePattern", "TypeErrorDecoder_notClosurePattern", "get$TypeErrorDecoder_notClosurePattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({ $method$: null, toString: function() { return "$receiver$"; } }));
});
Isolate.$lazy($, "nullCallPattern", "TypeErrorDecoder_nullCallPattern", "get$TypeErrorDecoder_nullCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
});
Isolate.$lazy($, "nullLiteralCallPattern", "TypeErrorDecoder_nullLiteralCallPattern", "get$TypeErrorDecoder_nullLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOnNull());
});
Isolate.$lazy($, "undefinedCallPattern", "TypeErrorDecoder_undefinedCallPattern", "get$TypeErrorDecoder_undefinedCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralCallPattern", "TypeErrorDecoder_undefinedLiteralCallPattern", "get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOnUndefined());
});
Isolate.$lazy($, "nullPropertyPattern", "TypeErrorDecoder_nullPropertyPattern", "get$TypeErrorDecoder_nullPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
});
Isolate.$lazy($, "nullLiteralPropertyPattern", "TypeErrorDecoder_nullLiteralPropertyPattern", "get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOnNull());
});
Isolate.$lazy($, "undefinedPropertyPattern", "TypeErrorDecoder_undefinedPropertyPattern", "get$TypeErrorDecoder_undefinedPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralPropertyPattern", "TypeErrorDecoder_undefinedLiteralPropertyPattern", "get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOnUndefined());
});
Isolate.$lazy($, "getTypeNameOf", "getTypeNameOf", "get$getTypeNameOf", function() {
  return H.getFunctionForTypeNameOf();
});
Isolate.$lazy($, "customElementsReady", "customElementsReady", "get$customElementsReady", function() {
  return new B.closure().call$0();
});
Isolate.$lazy($, "_toStringList", "IterableMixinWorkaround__toStringList", "get$IterableMixinWorkaround__toStringList", function() {
  return P.List_List(null, null);
});
Isolate.$lazy($, "validationPattern", "Symbol_validationPattern", "get$Symbol_validationPattern", function() {
  return new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^(?:[a-zA-Z$][a-zA-Z$0-9_]*\\.)*(?:[a-zA-Z$][a-zA-Z$0-9_]*=?|-|unary-|\\[\\]=|~|==|\\[\\]|\\*|/|%|~/|\\+|<<|>>|>=|>|<=|<|&|\\^|\\|)$", false, true, false), null, null);
});
Isolate.$lazy($, "_dynamicType", "JsMirrorSystem__dynamicType", "get$JsMirrorSystem__dynamicType", function() {
  return new H.JsTypeMirror(C.Symbol_dynamic);
});
Isolate.$lazy($, "_voidType", "JsMirrorSystem__voidType", "get$JsMirrorSystem__voidType", function() {
  return new H.JsTypeMirror(C.Symbol_void);
});
Isolate.$lazy($, "librariesByName", "JsMirrorSystem_librariesByName", "get$JsMirrorSystem_librariesByName", function() {
  return H.JsMirrorSystem_computeLibrariesByName();
});
Isolate.$lazy($, "currentJsMirrorSystem", "currentJsMirrorSystem", "get$currentJsMirrorSystem", function() {
  return new H.JsMirrorSystem(null, new H.JsIsolateMirror($globalState.currentContext));
});
Isolate.$lazy($, "mangledNames", "mangledNames", "get$mangledNames", function() {
  return H.computeMangledNames(init.mangledNames, false);
});
Isolate.$lazy($, "reflectiveNames", "reflectiveNames", "get$reflectiveNames", function() {
  return H.computeReflectiveNames($.get$mangledNames());
});
Isolate.$lazy($, "mangledGlobalNames", "mangledGlobalNames", "get$mangledGlobalNames", function() {
  return H.computeMangledNames(init.mangledGlobalNames, true);
});
Isolate.$lazy($, "_stackTraceExpando", "_stackTraceExpando", "get$_stackTraceExpando", function() {
  var t1 = new P.Expando("asynchronous error");
  H.setRuntimeTypeInfo(t1, [null]);
  return t1;
});
Isolate.$lazy($, "_asyncCallbacks", "_asyncCallbacks", "get$_asyncCallbacks", function() {
  return P.ListQueue$(null, {func: "void_", void: true});
});
Isolate.$lazy($, "_toStringVisiting", "_toStringVisiting", "get$_toStringVisiting", function() {
  return P.HashSet_HashSet$identity(null);
});
Isolate.$lazy($, "_toStringList", "Maps__toStringList", "get$Maps__toStringList", function() {
  return P.List_List(null, null);
});
Isolate.$lazy($, "_splitRe", "Uri__splitRe", "get$Uri__splitRe", function() {
  return new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^(?:([^:/?#]+):)?(?://(?:([^/?#]*)@)?(?:([\\w\\d\\-\\u0100-\\uffff.%]*)|\\[([A-Fa-f0-9:.]*)\\])(?::([0-9]+))?)?([^?#[]+)?(?:\\?([^#]*))?(?:#(.*))?$", false, true, false), null, null);
});
Isolate.$lazy($, "_safeConsole", "Console__safeConsole", "get$Console__safeConsole", function() {
  return new W.Console();
});
Isolate.$lazy($, "webkitEvents", "ElementEvents_webkitEvents", "get$ElementEvents_webkitEvents", function() {
  return H.fillLiteralMap(["animationend", "webkitAnimationEnd", "animationiteration", "webkitAnimationIteration", "animationstart", "webkitAnimationStart", "fullscreenchange", "webkitfullscreenchange", "fullscreenerror", "webkitfullscreenerror", "keyadded", "webkitkeyadded", "keyerror", "webkitkeyerror", "keymessage", "webkitkeymessage", "needkey", "webkitneedkey", "pointerlockchange", "webkitpointerlockchange", "pointerlockerror", "webkitpointerlockerror", "resourcetimingbufferfull", "webkitresourcetimingbufferfull", "transitionend", "webkitTransitionEnd", "speechchange", "webkitSpeechChange"], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
});
Isolate.$lazy($, "_allowedElements", "_Html5NodeValidator__allowedElements", "get$_Html5NodeValidator__allowedElements", function() {
  var t1 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
  t1.addAll$1(t1, ["A", "ABBR", "ACRONYM", "ADDRESS", "AREA", "ARTICLE", "ASIDE", "AUDIO", "B", "BDI", "BDO", "BIG", "BLOCKQUOTE", "BR", "BUTTON", "CANVAS", "CAPTION", "CENTER", "CITE", "CODE", "COL", "COLGROUP", "COMMAND", "DATA", "DATALIST", "DD", "DEL", "DETAILS", "DFN", "DIR", "DIV", "DL", "DT", "EM", "FIELDSET", "FIGCAPTION", "FIGURE", "FONT", "FOOTER", "FORM", "H1", "H2", "H3", "H4", "H5", "H6", "HEADER", "HGROUP", "HR", "I", "IFRAME", "IMG", "INPUT", "INS", "KBD", "LABEL", "LEGEND", "LI", "MAP", "MARK", "MENU", "METER", "NAV", "NOBR", "OL", "OPTGROUP", "OPTION", "OUTPUT", "P", "PRE", "PROGRESS", "Q", "S", "SAMP", "SECTION", "SELECT", "SMALL", "SOURCE", "SPAN", "STRIKE", "STRONG", "SUB", "SUMMARY", "SUP", "TABLE", "TBODY", "TD", "TEXTAREA", "TFOOT", "TH", "THEAD", "TIME", "TR", "TRACK", "TT", "U", "UL", "VAR", "VIDEO", "WBR"]);
  return t1;
});
Isolate.$lazy($, "_attributeValidators", "_Html5NodeValidator__attributeValidators", "get$_Html5NodeValidator__attributeValidators", function() {
  return H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
});
Isolate.$lazy($, "context", "context", "get$context", function() {
  return P.JsObject$_fromJs(function() { return this; }());
});
Isolate.$lazy($, "_loggers", "Logger__loggers", "get$Logger__loggers", function() {
  return H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
});
Isolate.$lazy($, "_objectType", "Observable__objectType", "get$Observable__objectType", function() {
  return P.reflectClass(C.Type_HqF);
});
Isolate.$lazy($, "_pathRegExp", "_pathRegExp", "get$_pathRegExp", function() {
  return new B.closure1().call$0();
});
Isolate.$lazy($, "_spacesRegExp", "_spacesRegExp", "get$_spacesRegExp", function() {
  return new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("\\s", false, true, false), null, null);
});
Isolate.$lazy($, "_logger", "_logger", "get$_logger", function() {
  return N.Logger_Logger("Observable.dirtyCheck");
});
Isolate.$lazy($, "_builder", "_builder", "get$_builder", function() {
  return B.Builder_Builder(null, null);
});
Isolate.$lazy($, "posix", "Style_posix", "get$Style_posix", function() {
  return new B._PosixStyle("posix", "/", new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("/", false, true, false), null, null), new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("[^/]$", false, true, false), null, null), new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^/", false, true, false), null, null), null);
});
Isolate.$lazy($, "windows", "Style_windows", "get$Style_windows", function() {
  return new B._WindowsStyle("windows", "\\", new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("[/\\\\]", false, true, false), null, null), new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("[^/\\\\]$", false, true, false), null, null), new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^(\\\\\\\\|[a-zA-Z]:[/\\\\])", false, true, false), null, null), null);
});
Isolate.$lazy($, "url", "Style_url", "get$Style_url", function() {
  return new B._UrlStyle("url", "/", new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("/", false, true, false), null, null), new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("(^[a-zA-Z][-+.a-zA-Z\\d]*://|[^/])$", false, true, false), null, null), new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("[a-zA-Z][-+.a-zA-Z\\d]*://[^/]*", false, true, false), null, null), new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^/", false, true, false), null, null), null);
});
Isolate.$lazy($, "platform", "Style_platform", "get$Style_platform", function() {
  return B.Style__getPlatformStyle();
});
Isolate.$lazy($, "_typesByName", "_typesByName", "get$_typesByName", function() {
  return P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, P.Type);
});
Isolate.$lazy($, "_waitType", "_waitType", "get$_waitType", function() {
  return P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, A.PolymerDeclaration);
});
Isolate.$lazy($, "_waitSuper", "_waitSuper", "get$_waitSuper", function() {
  return P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, [J.JSArray, A.PolymerDeclaration]);
});
Isolate.$lazy($, "_declarations", "_declarations", "get$_declarations", function() {
  return P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, A.PolymerDeclaration);
});
Isolate.$lazy($, "_reverseEventTranslations", "_reverseEventTranslations", "get$_reverseEventTranslations", function() {
  return new A.closure20().call$0();
});
Isolate.$lazy($, "bindPattern", "Polymer_bindPattern", "get$Polymer_bindPattern", function() {
  return new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("\\{\\{([^{}]*)}}", false, true, false), null, null);
});
Isolate.$lazy($, "_polymerSyntax", "Polymer__polymerSyntax", "get$Polymer__polymerSyntax", function() {
  var t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, P.Object);
  t1.addAll$1(t1, C.Map_wgEsG);
  return new A._PolymerExpressionsWithEventDelegate(t1);
});
Isolate.$lazy($, "_ready", "Polymer__ready", "get$Polymer__ready", function() {
  var t1, t2;
  t1 = null;
  t2 = new P._AsyncCompleter(P._Future$(t1));
  H.setRuntimeTypeInfo(t2, [t1]);
  return t2;
});
Isolate.$lazy($, "veiledElements", "Polymer_veiledElements", "get$Polymer_veiledElements", function() {
  return ["body"];
});
Isolate.$lazy($, "_eventsLog", "_eventsLog", "get$_eventsLog", function() {
  return N.Logger_Logger("polymer.events");
});
Isolate.$lazy($, "_unbindLog", "_unbindLog", "get$_unbindLog", function() {
  return N.Logger_Logger("polymer.unbind");
});
Isolate.$lazy($, "_bindLog", "_bindLog", "get$_bindLog", function() {
  return N.Logger_Logger("polymer.bind");
});
Isolate.$lazy($, "_shadowHost", "_shadowHost", "get$_shadowHost", function() {
  var t1 = new P.Expando(null);
  H.setRuntimeTypeInfo(t1, [A.Polymer]);
  return t1;
});
Isolate.$lazy($, "_librariesToLoad", "_librariesToLoad", "get$_librariesToLoad", function() {
  return A._discoverScripts(document, J.get$href$x(C.Window_methods.get$location(window)), null, null);
});
Isolate.$lazy($, "_libs", "_libs", "get$_libs", function() {
  return $.get$currentJsMirrorSystem().get$libraries();
});
Isolate.$lazy($, "_rootUri", "_rootUri", "get$_rootUri", function() {
  return $.get$currentJsMirrorSystem().isolate.get$rootLibrary().get$uri();
});
Isolate.$lazy($, "_packageRoot", "_packageRoot", "get$_packageRoot", function() {
  var t1 = J.get$href$x(C.Window_methods.get$location(window));
  t1 = P.Uri$_fromMatch($.get$Uri__splitRe().firstMatch$1(t1))._path;
  return H.S($.get$_builder().dirname$1(t1)) + "/packages/";
});
Isolate.$lazy($, "_typeHandlers", "_typeHandlers", "get$_typeHandlers", function() {
  return new Z.closure0().call$0();
});
Isolate.$lazy($, "_jsHelper", "_jsHelper", "get$_jsHelper", function() {
  var t1, t2;
  t1 = $.get$currentJsMirrorSystem().get$libraries();
  t2 = P.Uri$_fromMatch($.get$Uri__splitRe().firstMatch$1("dart:_js_helper"));
  t1 = t1.__js_mirrors$_source;
  return t1.$index(t1, t2);
});
Isolate.$lazy($, "_mangledNameField", "_mangledNameField", "get$_mangledNameField", function() {
  return new M.closure21().call$0();
});
Isolate.$lazy($, "_logger", "_logger0", "get$_logger0", function() {
  return N.Logger_Logger("polymer_expressions");
});
Isolate.$lazy($, "_BINARY_OPERATORS", "_BINARY_OPERATORS", "get$_BINARY_OPERATORS", function() {
  return H.fillLiteralMap(["+", new K.closure3(), "-", new K.closure4(), "*", new K.closure5(), "/", new K.closure6(), "==", new K.closure7(), "!=", new K.closure8(), ">", new K.closure9(), ">=", new K.closure10(), "<", new K.closure11(), "<=", new K.closure12(), "||", new K.closure13(), "&&", new K.closure14(), "|", new K.closure15()], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
});
Isolate.$lazy($, "_UNARY_OPERATORS", "_UNARY_OPERATORS", "get$_UNARY_OPERATORS", function() {
  return H.fillLiteralMap(["+", new K.closure16(), "-", new K.closure17(), "!", new K.closure18()], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
});
Isolate.$lazy($, "_checkboxEventType", "_InputBinding__checkboxEventType", "get$_InputBinding__checkboxEventType", function() {
  return new M.closure2().call$0();
});
Isolate.$lazy($, "_contentsOwner", "TemplateBindExtension__contentsOwner", "get$TemplateBindExtension__contentsOwner", function() {
  var t1 = new P.Expando(null);
  H.setRuntimeTypeInfo(t1, [null]);
  return t1;
});
Isolate.$lazy($, "_allTemplatesSelectors", "TemplateBindExtension__allTemplatesSelectors", "get$TemplateBindExtension__allTemplatesSelectors", function() {
  var t1 = J.map$1$ax(C.Map_05eTF.get$keys(), new M.closure19());
  return "template, " + t1.join$1(t1, ", ");
});
Isolate.$lazy($, "_expando", "_expando", "get$_expando", function() {
  var t1 = new P.Expando("template_binding");
  H.setRuntimeTypeInfo(t1, [null]);
  return t1;
});
// Native classes
J.Interceptor["%"] = "DOMImplementation|MediaError|MediaKeyError|SVGAnimatedEnumeration|SVGAnimatedLength|SVGAnimatedNumberList|SVGAnimatedString|SpeechRecognitionAlternative";


init.functionAliases = {};
;
init.metadata = [P.Object,
C.TypeVariable_Sre,
C.TypeVariable_pWN,
C.TypeVariable_U8E,
C.TypeVariable_bBG,
P.Type,
"name",
J.JSString,
U.AutocompleteResult,
W.Window,
R.InputAutocompleteComponent,
,
C.C__InitMethodAnnotation,
[K.IndexedValue, 4],
"index",
J.JSInt,
"value",
4,
Q.SimpleAutocompleteExample,
R.AutocompleteChoice,
C.C_Reflectable,
C.C_ObservableProperty,
C.C_PublishedProperty,
R.AutocompleteChoiceRenderer,
J.JSBool,
[J.JSArray, H.JsMethodMirror],
"methodOwner",
P.DeclarationMirror,
[J.JSArray, P.VariableMirror],
"fieldOwner",
[P.Map, P.Symbol, P.MethodMirror],
[P.Map, P.Symbol, P.VariableMirror],
[P.Map, P.Symbol, P.Mirror],
P.InstanceMirror,
"fieldName",
P.Symbol,
"arg",
H.JsLibraryMirror,
[J.JSArray, P.InstanceMirror],
P.ClassMirror,
"memberName",
"positionalArguments",
J.JSArray,
"namedArguments",
[P.Map, P.Symbol, null],
[J.JSArray, P.ClassMirror],
[J.JSArray, P.TypeVariableMirror],
[J.JSArray, P.TypeMirror],
"i",
[J.JSArray, R.AutocompleteChoice],
R.AutocompleteDatasource,
R.ValueHolder,
"renderer",
"choice",
"choices",
"next",
"event",
W.KeyboardEvent,
"detail",
"target",
W.Node,
W.Event,
"e",
W.InputElement,
J.JSNumber,
"styleValue",
"matches",
"records",
"newValue",
3,
[P.Iterable, 1],
[P.Iterable, 2],
"key",
2,
1,
"v",
Q.ExampleDatasource,
[J.JSArray, J.JSString],
];
$ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
$ = new Isolate();
function convertToFastObject(properties) {
  function MyClass() {};
  MyClass.prototype = properties;
  new MyClass();
  return properties;
}
A = convertToFastObject(A);
B = convertToFastObject(B);
C = convertToFastObject(C);
D = convertToFastObject(D);
E = convertToFastObject(E);
F = convertToFastObject(F);
G = convertToFastObject(G);
H = convertToFastObject(H);
J = convertToFastObject(J);
K = convertToFastObject(K);
L = convertToFastObject(L);
M = convertToFastObject(M);
N = convertToFastObject(N);
O = convertToFastObject(O);
P = convertToFastObject(P);
Q = convertToFastObject(Q);
R = convertToFastObject(R);
S = convertToFastObject(S);
T = convertToFastObject(T);
U = convertToFastObject(U);
V = convertToFastObject(V);
W = convertToFastObject(W);
X = convertToFastObject(X);
Y = convertToFastObject(Y);
Z = convertToFastObject(Z);
!function() {
  var objectProto = Object.prototype;
  for (var i = 0;; i++) {
    var property = "___dart_dispatch_record_ZxYxX_0_";
    if (i > 0)
      property = rootProperty + "_" + i;
    if (!(property in objectProto))
      return init.dispatchPropertyName = property;
  }
}();
// BEGIN invoke [main].
;(function (callback) {
  if (typeof document === "undefined") {
    callback(null);
    return;
  }
  if (document.currentScript) {
    callback(document.currentScript);
    return;
  }

  var scripts = document.scripts;
  function onLoad(event) {
    for (var i = 0; i < scripts.length; ++i) {
      scripts[i].removeEventListener("load", onLoad, false);
    }
    callback(event.target);
  }
  for (var i = 0; i < scripts.length; ++i) {
    scripts[i].addEventListener("load", onLoad, false);
  }
})(function(currentScript) {
  init.currentScript = currentScript;

  if (typeof dartMainRunner === "function") {
    dartMainRunner(function() { H.startRootIsolate(E.main$closure); });
  } else {
    H.startRootIsolate(E.main$closure);
  }
});
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(field, accessors, cls) {
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    var reflectable = false;
    if (code == 45) {
      len--;
      code = field.charCodeAt(len - 1);
      field = field.substring(0, len);
      reflectable = true;
    }
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        var property = cls + ".prototype.get$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        var property = cls + ".prototype.set$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(name, cls, fields) {
    var accessors = [];
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0)
        str += ", ";
      var field = generateAccessor(fields[i], accessors, cls);
      var parameter = "parameter_" + field;
      str += parameter;
      body += "this." + field + " = " + parameter + ";\n";
    }
    str += ") {\n" + body + "}\n";
    str += cls + ".builtin$cls=\"" + name + "\";\n";
    str += "$desc=$collectedClasses." + cls + ";\n";
    str += "if($desc instanceof Array) $desc = $desc[1];\n";
    str += cls + ".prototype = $desc;\n";
    if (typeof defineClass.name != "string") {
      str += cls + ".name=\"" + cls + "\";\n";
    }
    str += accessors.join("");
    return str;
  }
  var inheritFrom = function() {
    function tmp() {
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    return function(constructor, superConstructor) {
      tmp.prototype = superConstructor.prototype;
      var object = new tmp();
      var properties = constructor.prototype;
      for (var member in properties)
        if (hasOwnProperty.call(properties, member))
          object[member] = properties[member];
      object.constructor = constructor;
      constructor.prototype = object;
      return object;
    };
  }();
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    if (!init.allClasses)
      init.allClasses = {};
    var allClasses = init.allClasses;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (typeof dart_precompiled == "function") {
      var constructors = dart_precompiled(collectedClasses);
    } else {
      var combinedConstructorFunction = "function $reflectable(fn){fn.$reflectable=1;return fn};\n" + "var $desc;\n";
      var constructorsList = [];
    }
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        if (desc instanceof Array)
          desc = desc[1];
        var classData = desc[""], supr, name = cls, fields = classData;
        if (typeof classData == "object" && classData instanceof Array) {
          classData = fields = classData[0];
        }
        if (typeof classData == "string") {
          var split = classData.split("/");
          if (split.length == 2) {
            name = split[0];
            fields = split[1];
          }
        }
        var s = fields.split(";");
        fields = s[1] == "" ? [] : s[1].split(",");
        supr = s[0];
        if (supr && supr.indexOf("+") > 0) {
          s = supr.split("+");
          supr = s[0];
          var mixin = collectedClasses[s[1]];
          if (mixin instanceof Array)
            mixin = mixin[1];
          for (var d in mixin) {
            if (hasOwnProperty.call(mixin, d) && !hasOwnProperty.call(desc, d))
              desc[d] = mixin[d];
          }
        }
        if (typeof dart_precompiled != "function") {
          combinedConstructorFunction += defineClass(name, cls, fields);
          constructorsList.push(cls);
        }
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    if (typeof dart_precompiled != "function") {
      combinedConstructorFunction += "return [\n  " + constructorsList.join(",\n  ") + "\n]";
      var constructors = new Function("$collectedClasses", combinedConstructorFunction)(collectedClasses);
      combinedConstructorFunction = null;
    }
    for (var i = 0; i < constructors.length; i++) {
      var constructor = constructors[i];
      var cls = constructor.name;
      var desc = collectedClasses[cls];
      var globalObject = isolateProperties;
      if (desc instanceof Array) {
        globalObject = desc[0] || isolateProperties;
        desc = desc[1];
      }
      constructor["@"] = desc;
      allClasses[cls] = constructor;
      globalObject[cls] = constructor;
    }
    constructors = null;
    var finishedClasses = {};
    init.interceptorsByTag = {};
    init.leafTags = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = allClasses[cls];
      var superConstructor = allClasses[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = inheritFrom(constructor, superConstructor);
      if (hasOwnProperty.call(prototype, "%")) {
        var nativeSpec = prototype["%"].split(";");
        if (nativeSpec[0]) {
          var tags = nativeSpec[0].split("|");
          for (var i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = true;
          }
        }
        if (nativeSpec[1]) {
          tags = nativeSpec[1].split("|");
          if (nativeSpec[2]) {
            var subclasses = nativeSpec[2].split("|");
            for (var i = 0; i < subclasses.length; i++) {
              var subclass = allClasses[subclasses[i]];
              subclass.$nativeSuperclassTag = tags[0];
            }
          }
          for (i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = false;
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    if (!init.lazies)
      init.lazies = {};
    init.lazies[fieldName] = getterName;
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            H.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = function() {
          return this[fieldName];
        };
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    function Isolate() {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      for (var staticName in isolateProperties)
        if (hasOwnProperty.call(isolateProperties, staticName))
          this[staticName] = isolateProperties[staticName];
      function ForceEfficientMap() {
      }
      ForceEfficientMap.prototype = this;
      new ForceEfficientMap();
    }
    Isolate.prototype = oldIsolate.prototype;
    Isolate.prototype.constructor = Isolate;
    Isolate.$isolateProperties = isolateProperties;
    Isolate.$finishClasses = oldIsolate.$finishClasses;
    Isolate.makeConstantList = oldIsolate.makeConstantList;
    return Isolate;
  };
}
})()

//# sourceMappingURL=example.html_bootstrap.dart.js.map
//@ sourceMappingURL=example.html_bootstrap.dart.js.map
